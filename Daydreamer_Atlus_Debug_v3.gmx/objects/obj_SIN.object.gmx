<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_collide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_IndustrialRoar,10,false);
offset=10;
counter_time=1;
//Load Sprites ----------------------

if(master.spr_Wavlet_Blast==0)
{
master.num+=1;
master.spr_Wavlet_Blast=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Wavlet_Blast.png",39,0,1,57,73);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Sin_Explode==0)
{
master.num+=1;
master.spr_Sin_Explode=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Sin_Explode.png",23,0,1,213,292);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_SIN_Walk==0)
{
master.num+=1;
master.spr_SIN_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_SIN_Walk.png",26,0,1,202,274);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_SIN_Swing==0)
{
master.num+=1;
master.spr_SIN_Swing=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_SIN_Swing.png",16,0,1,336,254);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_SIN_Teleport==0)
{
master.num+=1;
master.spr_SIN_Teleport=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_SIN_Teleport.png",16,0,1,292,400);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_SIN_Turn==0)
{
master.num+=1;
master.spr_SIN_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_SIN_Turn.png",13,0,1,152,283);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_SIN_Blast==0)
{
master.num+=1;
master.spr_SIN_Blast=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_SIN_Blast.png",24,0,1,264,328);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_SIN_Idle==0)
{
master.num+=1;
master.spr_SIN_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_SIN_Idle.png",20,0,1,189,252);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_SIN_Grab==0)
{
master.num+=1;
master.spr_SIN_Grab=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_SIN_Grab.png",17,0,1,227,312);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_SIN_Jump==0)
{
master.num+=1;
master.spr_SIN_Jump=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_SIN_Jump.png",26,0,1,234,377);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}



instance_create(x,y,obj_SIN_view);
//instance_create(x,y,obj_SIN_Health);
//-----------------------------------

image_speed=.5;
damage=10*global.difficulty;
hp=750;
moveChoose=false;
moveChoice=1;
alarm[0]=500;

swing_range = false;
hsp=0;
vsp=0;
jhsp=0;
jvsp=0;
grav=2;
stuck=0;
grav_curve=1;


scale=image_yscale;
//image_xscale=1;
//image_yscale=1;
image_xscale=1;
image_yscale=1;
jumpspeed=8;
west_east = 0;
float=false;
floatup=true;

hero_hp=0;
hero_damage=0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (hp&lt;=0) 
{


global.world_clear[14]=1;

    //STEAM
    if (global.platform==0)
    {
   if !steam_get_achievement("ach_Defeat_Sin") 
        steam_set_achievement("ach_Defeat_Sin")
    }
    //XBOX ONE
    if (global.platform==1)
    { 
        scr_XboxOne_Achievement(20);                                           
    }
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(20);                                   
    } 
       
with instance_create(x,y,obj_CheckPoint){World=14.5;Boss=true;}

damage_bonus=round((100-hero_damage)*5);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=250;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus;  
    boss_num=14;   
    }
}
   
   
 
   
   
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stuck=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_SIN_view) instance_destroy();
if !instance_exists(par_HERO) {instance_destroy();}
else
{
sprite_index=spr_collide;

//CheckSwingRange
if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - 180) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + 180) 
 {
     if (moveChoice&lt;3)
     swing_range = true; else swing_range = false;
 }
 else
 {
     swing_range = false;
 }

 
 

 
 if(moveChoose==true)
    {   
    
    if !instance_exists(obj_SIN_Slow)
      n=irandom_range(1, 8);
      else
      n=irandom_range(1, 7);
      
      
      if (n==8) n=9;  
                  
     while(n==moveChoice)
        {
            n=irandom_range(1, 7);       
        }
                 
     moveChoice=n;
         
         //Initiallize the Move
        switch(moveChoice)
            {
            case 1:  //Stand
            obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Idle];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            alarm[0]=40;
            break;
            
            case 2:  //Walk
            obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Walk];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            alarm[0]=100;
            break;
            
            case 3:  //Slash
            obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Swing];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            break;

            case 4:  //Jump
            obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Jump];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            jhsp=32*-(sign(image_xscale));
            jvsp=5;
            break;
            
            case 5:  //Teleport
            obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Teleport];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            
            var neg=1;
            switch(irandom_range(1,2))
            {
            case 1: neg=-1;break;
            case 2: meg=1;break;
            }
            target_x = par_HERO.x + irandom_range(200,400)*neg;
            if (target_x&gt;room_width-150) target_x=room_width-150; //was 100
            if (target_x&lt;100) target_x=100;
            
            target_y=y-300;
            while (!place_meeting(target_x,target_y+1,par_wall)) 
                {
                    target_y=target_y+1;
                    if place_meeting(target_x,target_y+1,par_Morph_Plat) 
                        {
                        while (place_meeting(target_x,target_y+1,par_Morph_Plat)) target_y=target_y+1;
                        }
                }
            telport_start=true;
            audio_sound_pitch(snd_SIN_Moan,global.game_speed*counter_time);
            audio_play_sound(snd_SIN_Moan,10,false);
            break;
            
            case 6:  //CHAIN BLAST
            audio_sound_pitch(snd_SIN_Impact,global.game_speed*counter_time);
            audio_play_sound(snd_SIN_Impact,10,false);
            obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Grab];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            
            /*
            target_x = par_HERO.x + irandom_range(-50,50);
            */
            switch(irandom_range(1,2))
            {
            case 1: target_x=view_xview+1280; break;
            case 2: target_x=view_xview; break;
            }
                        
            if (target_x&gt;room_width-100) target_x=room_width-100;
            if (target_x&lt;100) target_x=100;
            target_y=y-100;
            
            while (!place_meeting(target_x,target_y+1,par_wall)) target_y=target_y+1;
            
            break;
            
            case 7:  //Blast
            obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Blast];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            land=5;
            floatup=true;
            float=true;
            
            if (par_HERO.x &gt; x)
            {
            west_east = 1;
            image_xscale = -scale;
            }
            else
            {
            west_east = 0;
            image_xscale = scale;
            }
            break;
            
            case 9:  //FORCE FIELD
            audio_sound_pitch(snd_SIN_Impact,global.game_speed*counter_time);
            audio_play_sound(snd_SIN_Impact,10,false);
            obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Grab];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            break;
            
            }
        moveChoose=false;            
    }

//check direction
if (par_HERO.x &gt; x)
{
    if(moveChoice&lt;3)
    {
    
    if (moveChoice==1) hsp=0; //Idle
    if (moveChoice==2) hsp=5; //Walk
    
     if(west_east == 0)
        {
         
         alarm[0]=2000;
         moveChoose=false;
         moveChoice=8;
         obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Turn];
         obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
         obj_SIN_view.image_index=0;
         hsp=0;
         audio_sound_pitch(snd_SIN_Whoosh,global.game_speed*counter_time);
         audio_play_sound(snd_SIN_Whoosh,10,false);
         }
         else
         {
         west_east = 1;
         image_xscale = -scale;
         }
    }
    
}

if (par_HERO.x &lt; x) 
{
    if(moveChoice&lt;3)
    {
    
    if (moveChoice==1) hsp=0;  //Idle
    if (moveChoice==2) hsp=-5; //Walk
  
    if(west_east == 1)
        {
         
         alarm[0]=2000;
         moveChoose=false;
         moveChoice=8;
         obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Turn];
         obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
         obj_SIN_view.image_index=0;
         hsp=0;
         audio_sound_pitch(snd_SIN_Whoosh,global.game_speed*counter_time);
         audio_play_sound(snd_SIN_Whoosh,10,false); 
         }
         else
         {
            west_east = 0;
            image_xscale = scale;
         }
    }
   
}

if(swing_range) 
{
 if(moveChoice&lt;3)
 {
 if(obj_SIN_view.sprite_index != global.sprite[master.spr_SIN_Swing]) 
    {
    if (obj_SIN_view.sprite_index != global.sprite[master.spr_SIN_Turn])
    {
    obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Swing];
    obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
    obj_SIN_view.image_index=0;
    moveChoose=false;
    moveChoice=3;
    }
    }
 }
}
    
switch(moveChoice)
{

case 1: //Stand

    obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Idle]; 
    obj_SIN_view.image_speed=.5*global.game_speed*counter_time;          
    damage=7*global.difficulty;
    hsp=0;
    //vsp=0;
    

break;


case 2: //Walk

    obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Walk]; 
    obj_SIN_view.image_speed=.5*global.game_speed*counter_time;          
    damage=7*global.difficulty;
    vsp=0;
    
break;

case 3: //Swing

    obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Swing]; 
    obj_SIN_view.image_speed = .5*global.game_speed*counter_time;
    damage=15*global.difficulty;
    alarm[0]=2000;
    hsp=0;
    //vsp=0;    
   //if (obj_SIN_view.image_index==8) instance_create(x,y,obj_Aura_Ripple_stat)
    if (obj_SIN_view.image_index&gt;=15) moveChoose=true;
        
break;
    
case 4: //Jump
    obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Jump];
    alarm[0]=2000;
    damage=7*global.difficulty;
       
    
    if (obj_SIN_view.image_index&lt;7)
        {
        hsp=0;
        vsp=0;
        obj_SIN_view.image_speed = .5*global.game_speed*counter_time;
        }
    
    if (obj_SIN_view.image_index&gt;=7) &amp;&amp; (obj_SIN_view.image_index&lt;=19)
        {    
        if (obj_SIN_view.image_index&lt;11) 
            {
            //vsp=-32;
            vsp=-24;
            hsp=jhsp;
            }
            else
            {
            hsp=jhsp*.5;
            
            if(jvsp&lt;32)
                {
                //jvsp=jvsp+1; //moveDOWN
                //vsp=jvsp*1.1;
                }
            }
           
        
        if(!grounded)
            {
            if (obj_SIN_view.image_index&gt;=19)
                    obj_SIN_view.image_speed = 0;
            }   
            else
            {
                obj_SIN_view.image_speed = .5*global.game_speed*counter_time;
            }
        }
        
    if (obj_SIN_view.image_index&gt;19)
        {
        if (obj_SIN_view.image_index==20) 
            {
            audio_sound_pitch(snd_TrollSlash,global.game_speed*counter_time);
            audio_play_sound(snd_TrollSlash,10,false);
            }
        hsp=0;
        //vsp=0;
        obj_SIN_view.image_speed = .5*global.game_speed*counter_time;
        }
        
    if(obj_SIN_view.image_index&gt;=25)
        moveChoose=true;    

break;
        
case 5: //Teleport
damage=7*global.difficulty;
alarm[0]=2000;
obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Teleport];
hsp=0;
//vsp=0;

if (telport_start)
{
obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
if (obj_SIN_view.image_index&gt;=15)
    {
    x=target_x;
    y=target_y;
    telport_start=false;
    }
}
else
{
    obj_SIN_view.image_speed=-.5*global.game_speed*counter_time;
    if (obj_SIN_view.image_index&lt;=1) moveChoose=true;
}

break;

case 6:  //Grab
obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Grab];
obj_SIN_view.image_speed=.5*global.game_speed*counter_time;

if (round(obj_SIN_view.image_index)==8) 
    {
    if !instance_exists(obj_SIN_Chain_Blast_Control)
    instance_create(target_x,target_y,obj_SIN_Chain_Blast_Control);
    }
if (obj_SIN_view.image_index&gt;=16) moveChoose=true;
hsp=0;
//vsp=0;
break;

case 7:  //Blast
obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Blast];

if (land&gt;0)
{
obj_SIN_view.image_speed=.5*global.game_speed*counter_time;

if (obj_SIN_view.image_index&lt;11)
    { //TAKE OFF
    vsp=0;
    }
    else
    { //FLOAT
     
     if (par_HERO.x &gt; x)
            {
            west_east = 1;
            image_xscale = -scale;
            }
            else
            {
            west_east = 0;
            image_xscale = scale;
            }
    
    
    if (floatup)
        vsp=-8;
        else
        vsp=5;
    
    }
if (obj_SIN_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_SIN_Blast])-1)
    {
    obj_SIN_view.image_index=11;
    if (floatup)
        floatup=false;
        else
        floatup=true;
    land-=1;
    }
}
    
if (land&lt;=0)
    {
    //if(grounded)
       if place_meeting(x,y+10,par_wall) 
        {
        vsp=0;
        //float=false;
        obj_SIN_view.image_speed=-.5*global.game_speed*counter_time;
    
        if (obj_SIN_view.image_index&lt;=1) 
            moveChoose=true;
        }
        else
        {
        if (obj_SIN_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_SIN_Blast])-1)
        obj_SIN_view.image_index=11;
        vsp=10;
        }
    }
    
hsp=0;

break;


case 8: //Turn
obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Turn]; 
obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
swing_range=false;
alarm[0]=2000;
if (obj_SIN_view.image_index&gt;=12) 
    {
    moveChoose=true;
    obj_SIN_view.sprite_index = global.sprite[master.spr_SIN_Idle];
    if (west_east==0) 
        {
        west_east = 1;
        image_xscale = -scale;
        x=x+(scale*64); //TURN OFFSET 
        }
        else
        { 
        west_east = 0;
        image_xscale = scale;
        x=x-(scale*64); //TURN OFFSET
        } 
    }
break;

case 9:  //SLOW FIELD
obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Grab];
obj_SIN_view.image_speed=.5*global.game_speed*counter_time;

if (round(obj_SIN_view.image_index)==8) 
    {
    if !instance_exists(obj_SIN_Slow)
    instance_create(obj_SIN_view.x,obj_SIN_view.y,obj_SIN_Slow);
    }
    
if (obj_SIN_view.image_index&gt;=16) moveChoose=true;
hsp=0;
//vsp=0;
break;
}//END SWITCH


grav=3;
vsp = vsp + grav*global.game_speed*counter_time;

if (vsp&lt;0)
{
if (vsp&gt;-1) vsp=1;
} 


//Collisions ------------------------------------------------------------



//Horizontal Collision ------------------------------


if place_meeting(x+hsp,y,par_wall) 
{
    
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp = 0;   
        stuck+=1;
        alarm[1]=30;
        
        if (moveChoice==2)
            {
            moveChoice=5;
            moveChoose=false;
            obj_SIN_view.sprite_index =  global.sprite[master.spr_SIN_Jump];
            obj_SIN_view.image_speed=.5*global.game_speed*counter_time;
            obj_SIN_view.image_index=0;
            jhsp=32*-(sign(image_xscale));
            jvsp=5;
            alarm[0]=100;       
            }   
    }
    else
        {
        y=y-yplus;
        }
    
}

x = x + hsp*global.game_speed*counter_time;

//Vertical Collision ------------------------------

if place_meeting(x,y+vsp,par_wall) 
{ 
if !place_free(x,y+vsp) 
 {    
    while (!place_meeting(x,y+sign(vsp),par_wall)) y=y+sign(vsp);
     

     
    if (sign(vsp) == 1)
    {
        grounded = 1; //Enable First Jump
    }
    
    vsp = 0;
 }    
}
else
{
   grounded = 0;
}


y = y + vsp*global.game_speed*counter_time;




if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if (grounded)
    image_blend=c_red;
    else
    image_blend=c_white;
    
if sprite_exists(sprite_index) draw_self();
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>296,263</point>
    <point>277,277</point>
  </PhysicsShapePoints>
</object>
