<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rate =.95;
full=true;
pause_ladder=false;

if instance_exists(obj_Bloom)
with(obj_Bloom){instance_destroy();}


if instance_exists(obj_Title_Bloom)
with(obj_Title_Bloom){instance_destroy();}


//if (global.blur_fx==0) instance_destroy();
draw_set_color(c_white);

if (global.blur_fx==3)
{ 
uni_time = shader_get_uniform(shd_mosaic2,"time");
var_time_var = 0;

uni_aspect = shader_get_uniform(shd_mosaic2,"aspect");
var_aspect_var = 1;

uni_mouse_pos = shader_get_uniform(shd_mosaic2,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_mosaic2,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_pixel_amount = shader_get_uniform(shd_mosaic2, "pixel_amount");
var_pixel_amount = 200.0;

uni_bloom = shader_get_uniform(shd_mosaic2,"bloom");

if instance_exists(par_HERO)
{
var_bloom = par_HERO.bloom;
}
else
{
var_bloom =0;
}
shader_enabled = true;
full_screen_effect = true;

var_pixel_amount=300;
count_up=false;
}



if (global.blur_fx==2)
{ 
uni_time = shader_get_uniform(shd_mosaic,"time");
var_time_var = 0;

uni_aspect = shader_get_uniform(shd_mosaic,"aspect");
var_aspect_var = 1;

uni_mouse_pos = shader_get_uniform(shd_mosaic,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_mosaic,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_pixel_amount = shader_get_uniform(shd_mosaic, "pixel_amount");
var_pixel_amount = 200.0;

uni_bloom = shader_get_uniform(shd_mosaic,"bloom");

if instance_exists(par_HERO)
{
var_bloom = par_HERO.bloom;
}
else
{
var_bloom =0;
}
shader_enabled = true;
full_screen_effect = true;

var_pixel_amount=300;
count_up=false;
}

if (global.blur_fx==1) || (global.blur_fx==0)
{ 
uni_time = shader_get_uniform(shd_mosaic_fast,"time");
var_time_var = 0;

uni_aspect = shader_get_uniform(shd_mosaic_fast,"aspect");
var_aspect_var = 1;

uni_mouse_pos = shader_get_uniform(shd_mosaic_fast,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_mosaic_fast,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_pixel_amount = shader_get_uniform(shd_mosaic_fast, "pixel_amount");
var_pixel_amount = 200.0;

uni_radial_brightness = shader_get_uniform(shd_mosaic_fast,"radial_brightness");
var_radial_brightness = 0;
//var_radial_brightness = 1;

uni_bloom = shader_get_uniform(shd_mosaic_fast,"bloom");
if instance_exists(par_HERO)
{
var_bloom = par_HERO.bloom;
}
else
{
//var_bloom =.3;
var_bloom =0;
}

shader_enabled = true;
full_screen_effect = true;

var_pixel_amount=1280;
//var_pixel_amount=300;
count_up=false;
}

curtain=false;
bed_save=false;
/*
if instance_exists(obj_Bloom)
with(obj_Bloom){instance_destroy();}


if instance_exists(obj_Title_Bloom)
with(obj_Title_Bloom){instance_destroy();}


if (global.blur_fx==0) instance_destroy();
draw_set_color(c_white);

uni_time = shader_get_uniform(shd_mosaic,"time");
var_time_var = 0;

uni_aspect = shader_get_uniform(shd_mosaic,"aspect");
var_aspect_var = 1;

uni_mouse_pos = shader_get_uniform(shd_mosaic,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_mosaic,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_pixel_amount = shader_get_uniform(shd_mosaic, "pixel_amount");
var_pixel_amount = 200.0;

uni_bloom = shader_get_uniform(shd_mosaic,"bloom");
if instance_exists(par_HERO)
{
    var_bloom = par_HERO.bloom;
}
else
{
    var_bloom =.3;
}

shader_enabled = true;
full_screen_effect = true;

var_pixel_amount=1280;
count_up=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
{
if !instance_exists(obj_Bloom)
instance_create(x,y,obj_Bloom);

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!count_up) //DEFOCUS
{
    var_pixel_amount=round(var_pixel_amount*rate);
     if (var_pixel_amount&lt;=0) 
        {    
        //if (bed_save) curtain=true;
        var_pixel_amount=0;
        count_up=true;
        }      
}

if (count_up) //REFOCUS
{

if (pause_ladder==true)
{
    if instance_exists(par_HERO)
    {
    if (par_HERO.ladder==false)
    par_HERO.pause_ladder=true;
    }
}

//if (bed_save) curtain=false;

if instance_exists(obj_Screen_Darken) obj_Screen_Darken.active=false;

  var_pixel_amount += 1;
  var_pixel_amount=round(var_pixel_amount*(1+(1-rate)));
  
  if (var_pixel_amount&gt;=1280) 
    {
        instance_destroy();
    }
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (full==false) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var_pixel_amount=0;
count_up=true;

if (pause_ladder==true)
{
    if instance_exists(par_HERO)
    {
    par_HERO.pause_ladder=true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{offset=1.5}
else
{offset=1}


var_time_var+=0.04;
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview ;

if (global.blur_fx==3) 
{
if (shader_enabled) shader_set(shd_mosaic2);

    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_aspect, var_aspect_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_pixel_amount, var_pixel_amount);
    shader_set_uniform_f(uni_bloom, var_bloom);
    draw_surface_stretched(application_surface, 0, 0, 1280*offset, 720*offset);
   
shader_reset();
}

if (global.blur_fx==2) 
{
if (shader_enabled) shader_set(shd_mosaic);

    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_aspect, var_aspect_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_pixel_amount, var_pixel_amount);
    shader_set_uniform_f(uni_bloom, var_bloom);
    draw_surface_stretched(application_surface, 0, 0, 1280*offset, 720*offset);
   
shader_reset();
}

if (global.blur_fx==1) ||  (global.blur_fx==0) 
{
if (shader_enabled) shader_set(shd_mosaic_fast);
  
    var_radial_brightness=1;

    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_aspect, var_aspect_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_pixel_amount, var_pixel_amount);
    shader_set_uniform_f(uni_radial_brightness, var_radial_brightness);
    shader_set_uniform_f(uni_bloom, var_bloom);
    draw_surface_stretched(application_surface, 0, 0, 1280*offset, 720*offset);
   
shader_reset();
}

if (count_up) &amp;&amp; instance_exists(obj_Classroom_Trigger) || (curtain)
{
if (curtain) draw_set_alpha(1);
draw_rectangle_color(0,0,1280*offset,720*offset,c_black,c_black,c_black,c_black,false);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
