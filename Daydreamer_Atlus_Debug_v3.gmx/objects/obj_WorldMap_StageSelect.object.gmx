<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grow=0;
grow_c=0;
arrow_frame=0;
shift_back=0;
front_scale=1;
rest=true;
audio_play_sound(snd_gamestart, 10,false);
volume=string(global.vol);
music=string(global.mus);

orig_x=25;
orig_y=595;

set_x=25;
set_y=595;

y=set_y;


opac=.22;

y_expand=0;
close=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>neck_char=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CONTROL INPUT ------------------------------------
if (close==false)
{
Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);
if keyboard_check_pressed(vk_enter) Key_Pause = true;

    Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
    Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
    if keyboard_check_pressed(vk_up) Key_Up=true;
    if keyboard_check_pressed(vk_down) Key_Down=true;

Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);


Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);


if keyboard_check_pressed(vk_space) Key_Jump=true;
if keyboard_check_pressed(vk_escape) Key_Pause =true;

if keyboard_check(vk_left) Key_Left=true;
if keyboard_check(vk_right) Key_Right=true;

if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
    {
    Key_Up = 1;
    alarm[1]=10; 
     rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
    {
    Key_Down = 1; 
    alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) 
    {
    Key_Left = 1; 
    if (y==460) || (y==480) alarm[1]=2; else alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) 
    {
     Key_Right = 1; 
    if (y==460) || (y==480) alarm[1]=2; else alarm[1]=10; 
    rest=false;
    } 
}

if (master.paused)
{
Key_Pause = false;
Key_Up = false;
Key_Down = false;
Key_Jump = false;
Key_Fire = false;
Key_Left = false;
Key_Right = false;
}//end master paused

if (Key_Up == 1) || keyboard_check_pressed(vk_up) 
{ 
    shift_back=0;
    audio_play_sound(snd_selectA, 10, false);
            if (global.world_clear[obj_WorldMap_ctl.world]==false)
        {
          if (y==set_y+20)
                y=set_y+80;
                else
                y=set_y+20; 
        }
        else
        {
        if (y&gt;set_y+20) 
        {
        y=y-30;
        }
        else
        {
        y=set_y+80;
        audio_play_sound(snd_selectA, 10, false);
        }
        }
}


if (Key_Down ==1) || keyboard_check_pressed(vk_down) 
{
        shift_back=0;
        audio_play_sound(snd_selectA, 10, false);
        
        if (global.world_clear[obj_WorldMap_ctl.world]==false)
        {
          if (y==set_y+20)
                y=set_y+80;
                else
                y=set_y+20; 
        }
        else
        {
            if(y&lt;set_y+80)
            {
            y=y+30;
            }
            else
            {
            y=set_y+20;
            }
        }
}
}//end close is false

room_confirm=true;
if (y==set_y+20) &amp;&amp; (Key_Jump)
{
 //WORLD ZONES
       switch(obj_WorldMap_ctl.world)
       { 
        case 0:
        obj_WorldMap_ctl.target_rm=rm_Tutorial_0; 
        break;
        
        case 1:
        obj_WorldMap_ctl.target_rm=rm_Tutorial_C;  
        break;
        
        case 2:
        obj_WorldMap_ctl.target_rm=rm_World2_A; 
        break;
        
        case 3:
        obj_WorldMap_ctl.target_rm=rm_World2_B; 
        break;
        
        case 4: 
        obj_WorldMap_ctl.target_rm=rm_World3_A;
        break;
        
        case 5:
        obj_WorldMap_ctl.target_rm=rm_World4_B;
        break;
        
        case 6: 
        obj_WorldMap_ctl.target_rm=rm_World6_A;
        break;
        
        case 7: 
        obj_WorldMap_ctl.target_rm=rm_GreenForrest_A;
        break;
        
        case 8: 
        obj_WorldMap_ctl.target_rm=rm_World5_A;
        break;
        
        case 9: 
        obj_WorldMap_ctl.target_rm=rm_World7_A;
        break;
        
        case 10: 
        obj_WorldMap_ctl.target_rm=rm_World8_A;
        break;
        
        case 11: 
        obj_WorldMap_ctl.target_rm=rm_World9_A;
        break;
        
        case 12: 
        obj_WorldMap_ctl.target_rm=rm_World10_A;
        break;
        
        case 13: 
        obj_WorldMap_ctl.target_rm=rm_World11_A;
        break;
        
        case 14: 
        obj_WorldMap_ctl.target_rm=rm_World12_A;
        break;
 
        }//END SWITCH
        
}

if (y==set_y+50) &amp;&amp; (Key_Jump)
{
    switch(obj_WorldMap_ctl.world)
        {        
        //BOSSES
        case 0: 
        room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_Tutorial_0;
        break;
        
        case 1: 
        if (global.world_clear[1]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_Collector_Boss;
        break;
        
        case 2:
        if (global.world_clear[2]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_Drifter_Battle;
        break;
        
        case 3:
        if (global.world_clear[3]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_Creeper_Boss; 
        break;
        
        case 4: 
        if (global.world_clear[4]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_Garbage_Collector;
        break;
        
        case 5:
        if (global.world_clear[5]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_Mechollector_Boss; 
        break;
        
        case 6:
        if (global.world_clear[6]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_TrollQueen_Boss;
        break;
        
        case 7:
        if (global.world_clear[7]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_GreenForrest_D;
        break;
        
        case 8:
        if (global.world_clear[8]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_Bunny_Boss;        
        break;
        
        case 9: 
        if (global.world_clear[9]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_MrGrin_Boss;
        break;
        
        case 10:
        if (global.world_clear[10]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_GH_Battle; 
        break;
        
        case 11: 
        if (global.world_clear[11]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_WhiteBat;
        break;
        
        case 12: 
        if (global.world_clear[12]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_MegaBot_Boss;
        break;
        
        case 13: 
        if (global.world_clear[13]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_GooeyDragon;
        break;
        
        case 14: 
        if (global.world_clear[14]==false) room_confirm=false;
        obj_WorldMap_ctl.target_rm=rm_Sin;
        break;
        }
}

if (y!=set_y+80) &amp;&amp; (Key_Jump) &amp;&amp; (room_confirm==true)
{             
        close=true;
        
        if (obj_WorldMap_ctl.alarm[2]==-1) 
            {
            obj_WorldMap_ctl.alarm[2]=60;
            obj_WorldMap_ctl.alarm[4]=58;
            }
        if (global.rumble)  gamepad_set_vibration(global.playing_index, 1, 1);
          
    
        if (obj_WorldMap_ctl.select==false)
        {
            obj_WorldMap_ctl.select=true;
            obj_WorldMap_ctl.alarm[1]=20;
        }
    
    if !audio_is_playing(snd_Bash) audio_play_sound(snd_Bash,10,false);
    if !audio_is_playing(snd_droid_activate) audio_play_sound(snd_droid_activate,10,false);
    if !audio_is_playing(snd_Over) audio_play_sound(snd_Over,10,false);
}


if (Key_Fire) || (y==set_y+80) &amp;&amp; (Key_Jump)
{
    audio_play_sound(snd_capped_out,10,false);
    obj_WorldMap_ctl.alarm[3]=20; //pause not to bring up exit menu
    close=true;     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{
offset=1.5;
}
else
{
offset=1;
}

orig_x=25;
orig_y=575;

set_x=25;
set_y=575;



if (y_expand&gt;=180)
grow_c+=.25;

//DRAW FRAME
draw_set_color(c_white); draw_set_alpha(.1);
draw_rectangle((set_x+5)*offset,set_y*offset,(set_x+235)*offset,(set_y+y_expand)*offset,false);
draw_set_color(c_white); draw_set_alpha(.15);
draw_rectangle((set_x+5)*offset,set_y*offset,(set_x+235)*offset,(set_y+y_expand)*offset,true);


draw_sprite_ext(spr_Menu_Trim_Top,0,(set_x+120)*offset,(set_y)*offset,.5*offset,.5*offset,0,c_white,1);
draw_sprite_ext(spr_Menu_Trim_Bottom,0,(set_x+120)*offset,(set_y+y_expand)*offset,.5*offset,.5*offset,0,c_white,1);


if (close==false)
{
if (y_expand&lt;110) y_expand+=20;
if (y_expand==60)
    {
    if !audio_is_playing(snd_HitMetal) audio_play_sound(snd_HitMetal,10,false);
    } 
if (y_expand&gt;110) y_expand=110;
}
else
{

if (global.platform==3)
{
if (y!=set_y+80)
gamepad_set_colour(global.playing_index, make_color_hsv(irandom_range(1,255),255,245));
}

if (y_expand&gt;0) y_expand-=20;
if (y_expand&lt;=0){y_expand=0; instance_destroy();}
}



if (shift_back&lt;4) shift_back+=.25;



draw_set_halign(fa_center);
draw_set_valign(fa_center);
//draw_set_font(fnt_Orbitron);
draw_set_font(fnt_LowGun);
draw_set_halign(fa_left); set_x-=(65*offset);
draw_set_color(c_white); draw_set_alpha(1);


if (y_expand&gt;=110)
{
draw_set_color(c_white) 
front_scale=.8;



if(y==set_y+20) //World Start
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
draw_text_transformed((set_x+150)*offset+shift_back*offset,(set_y+22)*offset+shift_back*.4*offset,"World Start",offset*front_scale,offset*front_scale,image_angle);
draw_set_color(c_white); draw_set_alpha(1);
}


draw_text_transformed((set_x+150)*offset,(set_y+20)*offset,"World Start",offset*front_scale,offset*front_scale,image_angle);
front_scale=.8;

if(y==set_y+50) //BOSS stage
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
draw_text_transformed((set_x+150)*offset+shift_back*offset,(set_y+53)*offset+shift_back*.4*offset,"Boss Stage",offset*front_scale,offset*front_scale,image_angle);
draw_set_color(c_white); draw_set_alpha(1);
}
if (global.world_clear[obj_WorldMap_ctl.world]==false) draw_set_color(c_gray);
draw_text_transformed((set_x+150)*offset,(set_y+50)*offset,"Boss Stage",offset*front_scale,offset*front_scale,image_angle);
draw_set_color(c_white); draw_set_alpha(1);
front_scale=.8;


if(y==set_y+80) //BACK
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
draw_text_transformed((set_x+150)*offset+shift_back*offset,(set_y+82)*offset+shift_back*.4*offset,"Back",offset*front_scale,offset*front_scale,image_angle);
draw_set_color(c_white); draw_set_alpha(1);
}
draw_text_transformed((set_x+150)*offset,(set_y+80)*offset,"Back",offset*front_scale,offset*front_scale,image_angle);
front_scale=.8;

draw_sprite_ext(spr_Pause_Arrow,arrow_frame,(set_x+135)*offset,(y+3)*offset,.4*offset,.4*offset,0,c_white,1);
arrow_frame+=.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
