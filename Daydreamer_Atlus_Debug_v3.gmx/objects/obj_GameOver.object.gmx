<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_GameOver_Tag</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>count = 10;
alarm[1]=60;

//instance_deactivate_all(true);
//instance_activate_object(obj_debug);
//instance_activate_object(master);
//instance_activate_object(par_HERO);

//Destroy the HERO
if instance_exists(par_HERO)
{
with par_HERO
    {
    instance_destroy(); // &lt;&lt;----- YOU ACTUALLY DIE HERE!!!
    } 
}

A_select=false;
    
gamepad_set_vibration(global.playing_index, 0, 0); 
audio_pause_all();
audio_stop_all();

if (global.platform!=1)
{
audio_play_sound(snd_LS_Drone,20,false);
audio_sound_pitch(snd_glitch_boom,1);
    draw=false;
alarm[4]=1;
}
else
{
    draw=true;
}

alpha_up=false;
image_alpha=1;

image_index=0;
image_speed=.5;

x=640;
y=360;

impact=4;
load=false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1)
{
draw_texture_flush();
}

draw=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ranked==true)
room_goto (rm_SaveGame);
else
room_goto (rm_TitleScreen);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//RESUME GAME FROM LAST CHECKPOINT
global.stageselect=false;

if (global.platform==0) || (global.platform==1) //PC AND XBOX ONLY
{
    scr_loadgame();
}

    if (global.platform==3) //PS4 ONLY
    {
            //LOAD FROM LAST SAVE POINT  
            global.date = global.SaveSlot_date[global.slot];               //DATE
            global.name = global.SaveSlot_name[global.slot];               //HERO NAME
            global.SavedRoom  = global.SaveSlot_SavedRoom[global.slot];    //CHECKPOINT ROOM ID
            global.SavedHP    = global.SaveSlot_SavedHP[global.slot];      //Health           
            global.SavedMoney = global.SaveSlot_SavedMoney[global.slot];   //Money
                                         
            for(var a=0; a&lt;=2; a+=1) //Set Inventory
            {
                for (b=0;b&lt;=3;b+=1)
                {
                    switch(global.slot)
                    {
                    case 1: global.Inventory[a,b] = global.SaveSlot_Inventory_1[a,b]; break; //INVENTORY SLOT
                    case 2: global.Inventory[a,b] = global.SaveSlot_Inventory_2[a,b]; break; //INVENTORY SLOT
                    case 3: global.Inventory[a,b] = global.SaveSlot_Inventory_3[a,b]; break; //INVENTORY SLOT
                    case 4: global.Inventory[a,b] = global.SaveSlot_Inventory_4[a,b]; break; //INVENTORY SLOT
                    case 5: global.Inventory[a,b] = global.SaveSlot_Inventory_5[a,b]; break; //INVENTORY SLOT
                    case 6: global.Inventory[a,b] = global.SaveSlot_Inventory_6[a,b]; break; //INVENTORY SLOT
                    case 7: global.Inventory[a,b] = global.SaveSlot_Inventory_7[a,b]; break; //INVENTORY SLOT
                    case 8: global.Inventory[a,b] = global.SaveSlot_Inventory_8[a,b]; break; //INVENTORY SLOT
                    }
                }
            } 
               
            global.weapon_A = global.SaveSlot_weapon_A[global.slot]; //WEAPON SLOT 1 ID
            global.weapon_B = global.SaveSlot_weapon_B[global.slot]; //WEAPON SLOT 2 ID
            global.weapon_C = global.SaveSlot_weapon_C[global.slot]; //WEAPON SLOT 3 ID
            global.weapon_D = global.SaveSlot_weapon_D[global.slot]; //WEAPON SLOT 4 ID
                
            global.pets[0]=global.SaveSlot_pets[global.slot,0]; //Turtle
            global.pets[1]=global.SaveSlot_pets[global.slot,1]; //Pup
            global.pets[2]=global.SaveSlot_pets[global.slot,2]; //Cat
            global.pets[3]=global.SaveSlot_pets[global.slot,3]; //Weasel
            global.pets[4]=global.SaveSlot_pets[global.slot,4]; //Duck
            
            global.weapon_A_energy=global.SaveSlot_weapon_A_energy[global.slot]; //WEAPON SLOT 1 AMMO
            global.weapon_B_energy=global.SaveSlot_weapon_B_energy[global.slot]; //WEAPON SLOT 2 AMMO
            global.weapon_C_energy=global.SaveSlot_weapon_C_energy[global.slot]; //WEAPON SLOT 3 AMMO
            global.weapon_D_energy=global.SaveSlot_weapon_D_energy[global.slot]; //WEAPON SLOT 4 AMMO
            
            global.Hours=global.SaveSlot_Hours[global.slot];         //Speed Run Time
            global.Minutes=global.SaveSlot_Minutes[global.slot];     //Speed Run Time
            global.Seconds=global.SaveSlot_Seconds[global.slot];     //Speed Run Time
            global.Points=global.SaveSlot_Points[global.slot];       //SCORE
            global.HERO_type=global.SaveSlot_HERO_type[global.slot]; //ADULT [1] vs CHILD [0]
            
            global.World=global.SaveSlot_World[global.slot];  //SET WORLD FOR WORLD MAP
            
                for (a=1;a&lt;=14;a+=1) //BOSS SCORE
                {  
                    for (b=1;b&lt;=3;b+=1)
                    {
                        switch(global.slot)
                        {
                        case 1: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_1[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 2: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_2[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 3: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_3[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 4: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_4[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 5: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_5[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 6: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_6[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 7: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_7[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 9: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_8[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        }
                    }
                }
                
                //WORLD PROGRESS
                for (c=1;c&lt;15;c+=1)
                {
                    global.world_clear[c]=global.SaveSlot_world_clear[global.slot,c]; //WHICH WORLDS HAVE BEEN BEATEN
                }
                
                global.difficulty=global.SaveSlot_difficulty[global.slot];  //CURRENT GAME DIFFICULTY
                global.ranked=global.SaveSlot_ranked[global.slot];      //RANKDED GAME                                                                        
              
                global.creation=true;
                global.Trippy=false;
                global.CutScene=false;
                global.Parallax=true;
                global.VParallax=false;                                                                                                                                        
                room_goto(global.SavedRoom);                                                            
                                                                                                                                                  
    }//END PS4 LOAD

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TICK DOWN
if(count&gt;0) count-=1;
impact=5;
if (global.ranked==false) audio_play_sound(snd_GameOver_Tick,10,false);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// GAME OVER QUIT
if (alarm[3]==-1) 
{
instance_create(0,0,obj_Curtain);
scr_master_flush();
alarm[3]=2;
draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !audio_is_playing(snd_LS_Drone)
audio_play_sound(snd_LS_Drone,20,false);

if (image_speed==.5)
{
if (image_index&gt;=sprite_get_number(sprite_index)-1) 
    {
    image_speed=-.5;
    }
}
else
{
if (image_index&lt;=13) 
    {
    image_speed=.5;
    }
}

    if (image_index&gt;=1) &amp;&amp; (image_index&lt;5)
    {
    if !audio_is_playing(snd_glitch_boom)
    audio_play_sound(snd_glitch_boom,10,false);
    }
    

Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Left = gamepad_button_check(global.playing_index, gp_padl);
Key_Right = gamepad_button_check(global.playing_index, gp_padr);
Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);

if keyboard_check_pressed(vk_space) Key_Jump=true;
if keyboard_check_pressed(vk_enter) Key_Jump=true;
if keyboard_check_pressed(vk_escape) Key_Jump=true;

if (master.paused)
{
Key_Pause = false;
Key_Up = false;
Key_Down = false;
Key_Jump = false;
Key_Fire = false;
Key_Left = false;
Key_Right = false;
}//end master paused


if (count&lt;=0)
{
audio_pause_all();
audio_stop_all();

    if (alarm[0]==-1) &amp;&amp; (alarm[2]==-1) //QUIT TO TITLESCREEN
    { 
        image_alpha=1;
        draw_set_alpha(1);
        sprite_index=noone;
        alarm[0]=5;
        load=true;
        instance_create(x,y,obj_Curtain);      
    }
}

if(Key_Jump)    //CONTINUE
{
        if (global.ranked)
        {
            if (alarm[0]==-1) &amp;&amp; (alarm[2]==-1) //QUIT TO TITLESCREEN
            { 
            audio_play_sound(snd_gamestart, 10,false); 
            image_alpha=1;
            draw_set_alpha(1);
            sprite_index=noone;
            alarm[0]=5;
            load=true;
            instance_create(x,y,obj_Curtain);    
            }        
        }
        else //ABLE TO CONTINUE
        {
        
        if (alarm[2]==-1) &amp;&amp; (alarm[0]==-1)
            {            
            master.skip_flush=true;            
            audio_pause_all();
            audio_stop_all();
            audio_play_sound(snd_gamestart, 10,false);   
            image_alpha=1;
            draw_set_alpha(1);
            sprite_index=noone;
            alarm[2]=5;
            load=true;
            instance_create(x,y,obj_Curtain); 
            }
        }
}

if (Key_Fire)
{
        if (global.ranked)
        {
            if (alarm[0]==-1) &amp;&amp; (alarm[2]==-1) //QUIT TO TITLESCREEN
            { 
            audio_play_sound(snd_gamestart, 10,false); 
            image_alpha=1;
            draw_set_alpha(1);
            sprite_index=noone;
            alarm[0]=5;
            load=true;
            instance_create(x,y,obj_Curtain);    
            }        
        }
        else
        {
        if(count&gt;0) count-=1;
        audio_play_sound(snd_circuit_breaker,10,false);
        }
}



if (alarm[0]&gt;0) //FADE iF QUIT
{ 
image_alpha=alarm[0]*.1;
draw_set_alpha(alarm[0]*.1);
}

if (alarm[2]&gt;0) //FADE IF CONTINUE
{ 
image_alpha=alarm[2]*.1;
draw_set_alpha(alarm[2]*.1);
}

if (alarm[1]==-1) alarm[1]=120; //COUNTER
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
for(a=0;a&lt;1280;a+=32)
{
    for(b=0;b&lt;720;b+=32)
    {
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_noise,irandom_range(1,6),a,b,1,1,0,c_white,.02);
    draw_set_blend_mode(bm_normal);
    }
}
*/

if sprite_exists(sprite_index) &amp;&amp; (draw)
{
draw_set_color(c_white);
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index,image_index,610,300,1,1,0,c_white,1);


if (global.ranked==false) //DRAW NON RANKED GAMEOVER ---------------------------------------------------------------
{
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_LowGun);
draw_text_colour(x-25,y+50,"Continue  ",c_white,c_white,c_white,c_white,1);

if (impact&gt;0)
        {
        draw_text_transformed_colour(x+57,y+50,string(count),image_xscale*(1 +.03*impact),image_yscale*(1 +.03*impact),0,c_white,c_white,c_white,c_white,1);
        impact-=1;
        } 
        else
        {
        draw_text_transformed_colour(x+57,y+50,string(count),image_xscale*(1 +.03*impact),image_yscale*(1 +.03*impact),0,c_white,c_white,c_white,c_white,1);;       
        }

                
//draw_set_font(fnt_BytePolice);

draw_set_font(fnt_LowGun);
draw_set_blend_mode(bm_add);

draw_set_alpha(1);
draw_text(1030,696," - Continue");
draw_set_alpha(image_alpha);
draw_set_blend_mode(bm_normal);
draw_sprite_ext(spr_xbox_A,0,950,700,.45,.45,0,c_white,1); //was image alpha

if (alarm[0]==-1)
{
if (alpha_up==false)
    {
        image_alpha=image_alpha-.02;
        if (image_alpha&lt;=0)
            {alpha_up=true;}
    }

if (alpha_up==true)
    {
        image_alpha=image_alpha+.02;
        if (image_alpha&gt;=1)
            {alpha_up=false;}
    }
}

draw_set_blend_mode(bm_normal);
draw_set_alpha(1);
draw_sprite_ext(spr_xbox_B,0,1150,700,.45,.45,0,c_white,1);
draw_text(1200,696," - Quit");
}
else //DRAW RANKED GAMEOVER ---------------------------------------------------------------
{
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_LowGun);

if (alpha_up==false)
    {
        image_alpha=image_alpha-.02;
        if (image_alpha&lt;=0)
            {alpha_up=true;}
    }

if (alpha_up==true)
    {
        image_alpha=image_alpha+.02;
        if (image_alpha&gt;=1)
            {alpha_up=false;}
    }   
draw_text_colour(x-10,y+50,"- Return to Main Menu -",c_white,c_white,c_white,c_white,image_alpha);
draw_set_alpha(1);
}


//DRAW EXIT CURTAIN ---------------------------------------------------------------


if (alarm[0]!=-1) || (alarm[2]!=-1)
    {
    draw_rectangle_color(0,0,1280,720,c_black,c_black,c_black,c_black,false);
    }
    
    if (load==true)
        {
        draw_rectangle_color(0,0,1280,720,c_black,c_black,c_black,c_black,false);
        }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
