<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_Bloom)
with(obj_Bloom){instance_destroy();}
draw_set_color(c_white);

uni_time = shader_get_uniform(shd_ripple,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_ripple,"mouse_pos");

if instance_exists(par_HERO)
{
var_mouse_pos_x = par_HERO.x;
var_mouse_pos_y = par_HERO.y;
}
else
{
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;
}

uni_resolution = shader_get_uniform(shd_ripple,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_wave_amount = shader_get_uniform(shd_ripple,"wave_amount");
var_wave_amount = 50; //higher = more waves

uni_wave_distortion = shader_get_uniform(shd_ripple,"wave_distortion");
var_wave_distortion = 50; //higher = less distortion

uni_wave_speed = shader_get_uniform(shd_ripple,"wave_speed");
var_wave_speed = 5; //higher = faster

uni_bloom = shader_get_uniform(shd_ripple,"bloom");
var_bloom = par_HERO.bloom; 

shader_enabled = true;
full_screen_effect = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Bloom)
instance_create(x,y,obj_Bloom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var_wave_amount -= 1;
var_wave_speed -=.1;
if (var_wave_amount&gt;=0) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
offset=1.5; else offset=1;

var_time_var+=0.04;

if instance_exists(par_HERO)
{
var_mouse_pos_x = (par_HERO.x - view_xview)*offset;
var_mouse_pos_y = (par_HERO.y - view_yview)*offset;
}
else
{
var_mouse_pos_x = (mouse_x - view_xview)*offset;
var_mouse_pos_y = (mouse_y - view_yview)*offset;
}

if shader_enabled shader_set(shd_ripple);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_wave_amount, var_wave_amount);
    shader_set_uniform_f(uni_wave_distortion, var_wave_distortion );
    shader_set_uniform_f(uni_wave_speed, var_wave_speed);
    shader_set_uniform_f(uni_bloom, var_bloom);

    //if full_screen_effect draw_surface(application_surface,0,0);
    if full_screen_effect draw_surface_stretched(application_surface, 0, 0, 1280*offset, 720*offset);
shader_reset();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
