<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu_x=x;
menu_y=y;

menu_x=600;
menu_y=200;

select_x=x;
select_y=y;

spacing=50;
bind=false;

grow_y=0;
grow_x=0;

shift_back=0;
shift_front=5;

bind=false;
slot=0;
rest=true;

icon_size=.4;

flash=1;
flash_count=.05;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_Options)
    {
    obj_Options.flash=1;
    obj_Options.flash_count=.05;
    obj_Options.can_select=false; 
    obj_Options.alarm[5]=15;
    
        if (global.platform==1)
        {
        scr_Save_Config();
        }
    }
    
if instance_exists(obj_Pause)
    {
    obj_Pause.can_select=false; 
    obj_Pause.alarm[5]=15;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);
Key_Pause = keyboard_check_pressed(vk_enter);
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Back = gamepad_button_check_pressed(global.playing_index, gp_face2);
Key_Left = gamepad_button_check(global.playing_index, gp_padl);
Key_Leftp = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check(global.playing_index, gp_padr);
Key_Rightp = gamepad_button_check_pressed(global.playing_index, gp_padr);

if keyboard_check_pressed(vk_space) Key_Jump=true;
if keyboard_check_pressed(vk_enter) Key_Jump=true;
if keyboard_check_pressed(vk_up) Key_Up=true;
if keyboard_check_pressed(vk_down) Key_Down=true;
if keyboard_check_pressed(vk_right)Key_Rightp = true;
if keyboard_check_pressed(vk_left)Key_Leftp = true;
if keyboard_check(vk_left) Key_Left=true;
if keyboard_check(vk_right) Key_Right=true;

if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
    {
    Key_Up = 1;
    alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
    {
    Key_Down = 1; 
    alarm[0]=10; 
    rest=false;
    } 
/*
if (gamepad_axis_value(0, gp_axislh)&lt;-.5) 
    {
    Key_Leftp = 1; Key_Left = 1; 
    if (select_y==120) || (select_y==140) alarm[0]=2; else alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(0, gp_axislh)&gt;.5) 
    {
    Key_Rightp = 1; Key_Right = 1; 
    if (select_y==120) || (select_y==140) alarm[0]=2; else alarm[0]=10; 
    rest=false;
    } 
*/
}

if (Key_Up) &amp;&amp; (!bind)
{
audio_play_sound(snd_selectA, 10,false);
slot-=1; if (slot&lt;0) slot=16;
}

if (Key_Down) &amp;&amp; (!bind)
{
audio_play_sound(snd_selectA, 10,false);
slot+=1; if (slot&gt;16) slot=0;
}

if(Key_Jump) &amp;&amp; (slot!=16) || (Key_Pause) &amp;&amp; (slot!=16)
{
if (bind==false) 
    {

    audio_play_sound(snd_gamestart, 10,false);
    bind=true;
    alarm[0]=10; 
    rest=false;
    }
}

if (Key_Back) || (slot==16) &amp;&amp; (Key_Jump)
{
audio_play_sound(snd_capped_out,10,false);
instance_destroy();
}


if (bind==true) &amp;&amp; (rest) &amp;&amp; (slot!=16)
{
key = noone;

if gamepad_button_check_pressed(global.playing_index,gp_face1) key = gp_face1;
if gamepad_button_check_pressed(global.playing_index,gp_face2) key = gp_face2;
if gamepad_button_check_pressed(global.playing_index,gp_face3) key = gp_face3;
if gamepad_button_check_pressed(global.playing_index,gp_face4) key = gp_face4;

if gamepad_button_check_pressed(global.playing_index,gp_padl) key = gp_padl;
if gamepad_button_check_pressed(global.playing_index,gp_padr) key = gp_padr;
if gamepad_button_check_pressed(global.playing_index,gp_padu) key = gp_padu;
if gamepad_button_check_pressed(global.playing_index,gp_padd) key = gp_padd;

if gamepad_button_check_pressed(global.playing_index,gp_start) key = gp_start;
if gamepad_button_check_pressed(global.playing_index,gp_select) key = gp_select;
if gamepad_button_check_pressed(global.playing_index,gp_shoulderl) key = gp_shoulderl;
if gamepad_button_check_pressed(global.playing_index,gp_shoulderr) key = gp_shoulderr;
if gamepad_button_check_pressed(global.playing_index,gp_shoulderlb) key = gp_shoulderlb;
if gamepad_button_check_pressed(global.playing_index,gp_shoulderrb) key = gp_shoulderrb;
if gamepad_button_check_pressed(global.playing_index,gp_stickl) key = gp_stickl;
if gamepad_button_check_pressed(global.playing_index,gp_stickr) key = gp_stickr;

if (key!=noone)
{

audio_play_sound(snd_PowerupB,10,false);

    switch(slot)
    {
    case 0:  last=global.gp_D_Left;            global.gp_D_Left=key;           break;
    case 1:  last=global.gp_D_Right;           global.gp_D_Right=key;          break;
    case 2:  last=global.gp_D_Up;             global.gp_D_Up=key;             break;
    case 3:  last=global.gp_D_Down;            global.gp_D_Down=key;           break;
    case 4:  last=global.gp_Jump;            global.gp_Jump=key;           break;
    case 5:  last=global.gp_Melee;           global.gp_Melee=key;          break;
    case 6:  last=global.gp_Fire;            global.gp_Fire=key;           break;
    case 7:  last=global.gp_Weapon;          global.gp_Weapon=key;         break;
    
    case 8: last=global.gp_Left_Shoulder;    global.gp_Left_Shoulder=key;  break;
    case 9: last=global.gp_Right_Shoulder;   global.gp_Right_Shoulder=key; break;
    case 10: last=global.gp_Left_Trigger;    global.gp_Left_Trigger=key;   break;
    case 11: last=global.gp_Right_Trigger;   global.gp_Right_Trigger=key;  break;
    
    case 12:  last=global.gp_Pause;          global.gp_Pause=key;          break;
    case 13:  last=global.gp_Select;         global.gp_Select=key;         break;
    case 14:  last=global.gp_Pet_L;         global.gp_Pet_L=key;         break;
    case 15:  last=global.gp_Pet_R;         global.gp_Pet_R=key;         break;
    }

                   
         //SWAP IF DUPLICATE BINDINGS --
         if(global.gp_D_Left==key)               &amp;&amp; (slot!=0)  global.gp_D_Left=last;
         if(global.gp_D_Right==key)              &amp;&amp; (slot!=1)  global.gp_D_Right=last;
         if(global.gp_D_Up==key)                 &amp;&amp; (slot!=2)  global.gp_D_Up=last;
         if(global.gp_D_Down==key)               &amp;&amp; (slot!=3)  global.gp_D_Down=last;
         if(global.gp_Jump==key)               &amp;&amp; (slot!=4)  global.gp_Jump=last;
         if(global.gp_Melee==key)              &amp;&amp; (slot!=5)  global.gp_Melee=last;
         if(global.gp_Fire==key)               &amp;&amp; (slot!=6)  global.gp_Fire=last;
         if(global.gp_Weapon==key)             &amp;&amp; (slot!=7)  global.gp_Weapon=last;
         
         if(global.gp_Left_Shoulder==key)      &amp;&amp; (slot!=8) global.gp_Left_Shoulder=last;
         if(global.gp_Right_Shoulder==key)     &amp;&amp; (slot!=9) global.gp_Right_Shoulder=last;
         if(global.gp_Left_Trigger==key)       &amp;&amp; (slot!=10) global.gp_Left_Trigger=last;
         if(global.gp_Right_Trigger==key)      &amp;&amp; (slot!=11) global.gp_Right_Trigger=last;
         
         if(global.gp_Pause==key)              &amp;&amp; (slot!=12)  global.gp_Pause=last;
         if(global.gp_Select==key)             &amp;&amp; (slot!=13)  global.gp_Select=last;
         if(global.gp_Pet_L==key)             &amp;&amp; (slot!=14)  global.gp_Pet_L=last;
         if(global.gp_Pet_R==key)             &amp;&amp; (slot!=15)  global.gp_Pet_R=last;
            
    bind=false;
}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);
Key_Pause = keyboard_check_pressed(vk_enter);
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Back = gamepad_button_check_pressed(global.playing_index, gp_face2);
Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Leftp = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);
Key_Rightp = gamepad_button_check_pressed(global.playing_index, gp_padr);

if keyboard_check_pressed(vk_space) Key_Jump=true;
if keyboard_check_pressed(vk_enter) Key_Jump=true;
if keyboard_check_pressed(vk_up) Key_Up=true;
if keyboard_check_pressed(vk_down) Key_Down=true;
if keyboard_check_pressed(vk_right)Key_Rightp = true;
if keyboard_check_pressed(vk_left)Key_Leftp = true;
if keyboard_check_pressed(vk_left) Key_Left=true;
if keyboard_check_pressed(vk_right) Key_Right=true;

if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
    {
    Key_Up = 1;
    alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
    {
    Key_Down = 1; 
    alarm[0]=10; 
    rest=false;
    } 
    

if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) 
    {
    Key_Left = 1; 
    alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) 
    {
    Key_Right = 1; 
    alarm[0]=10; 
    rest=false;
    } 

}

if (master.paused)
{
Key_Pause = false;
Key_Pause = false;
Key_Up = false;
Key_Down = false;
Key_Jump = false;
Key_Back = false;
Key_Left = false;
Key_Leftp = false;
Key_Right = false;
Key_Rightp = false;
}//end master paused

if (Key_Up) &amp;&amp; (!bind)
{
audio_play_sound(snd_selectA, 10,false);

switch(slot)
{
case 0: slot=16; break;
case 1: slot=0; break;
case 2: slot=1; break;
case 3: slot=2; break;
case 4: slot=3; break;
case 5: slot=4; break;
case 6: slot=5; break;
case 7: slot=6; break;

case 8: slot=17; break;
case 9: slot=8; break;
case 10: slot=9; break;
case 11: slot=10; break;
case 12: slot=11; break;
case 13: slot=12; break;
case 14: slot=13; break;
case 15: slot=14; break;

case 16: slot=7; break;
case 17: slot=15; break;
}

}

if (Key_Down) &amp;&amp; (!bind)
{
audio_play_sound(snd_selectA, 10,false);

switch(slot)
{
case 0: slot=1; break;
case 1: slot=2; break;
case 2: slot=3; break;
case 3: slot=4; break;
case 4: slot=5; break;
case 5: slot=6; break;
case 6: slot=7; break;
case 7: slot=16; break;

case 8: slot=9; break;
case 9: slot=10; break;
case 10: slot=11; break;
case 11: slot=12; break;
case 12: slot=13; break;
case 13: slot=14; break;
case 14: slot=15; break;
case 15: slot=17; break;

case 16: slot=0; break;
case 17: slot=8; break;
}

}

if (Key_Right) || (Key_Left) 
{
if (!bind)
{
    audio_play_sound(snd_selectA, 10,false);
    
    if (slot&lt;16)
    {
    if (slot&lt;8) slot+=8; else slot-=8;
    }
    else
    {
    if (slot==16) 
        {
        slot=17;
        }
        else
        {
        if (slot==17) slot=16;
        }
        
    }
}
}

if(Key_Jump) &amp;&amp; (slot!=16) &amp;&amp; (slot!=17) 
{
if (bind==false) 
    {
    audio_play_sound(snd_gamestart, 10,false);
    bind=true;
    alarm[0]=10; 
    rest=false;
    }
}

if (Key_Back) 
{
    if (!bind)
    {
    audio_play_sound(snd_capped_out,10,false);
    instance_destroy();
    }
}

if (slot==16) &amp;&amp; (Key_Jump)
{
  if (!bind)
    {
    audio_play_sound(snd_capped_out,10,false);
    instance_destroy();
    }
}

if  (slot==17) &amp;&amp; (Key_Jump)
{
    if (!bind)
    {
    audio_play_sound(snd_capped_out,10,false);
    //GAMEPAD BIND DEFAULTS
    global.gp_D_Left     = gp_padl;
    global.gp_D_Right    = gp_padr;
    global.gp_D_Up       = gp_padu;
    global.gp_D_Down     = gp_padd;
    global.gp_Jump     = gp_face1;
    global.gp_Melee    = gp_face3;
    global.gp_Fire     = gp_face2;
    global.gp_Weapon   = gp_face4;
    global.gp_Pause    = gp_start;
    global.gp_Select   = gp_select;
    global.gp_Left_Shoulder  =  gp_shoulderl;
    global.gp_Right_Shoulder =  gp_shoulderr;
    global.gp_Left_Trigger   =  gp_shoulderlb;
    global.gp_Right_Trigger  =  gp_shoulderrb;
    global.gp_Pet_L  =  gp_stickl;
    global.gp_Pet_R  =  gp_stickr;   
    }
}

if (bind==true) &amp;&amp; (rest) &amp;&amp; (slot!=16)
{
key = noone;

if gamepad_button_check_pressed(global.playing_index,gp_face1) key = gp_face1;
if gamepad_button_check_pressed(global.playing_index,gp_face2) key = gp_face2;
if gamepad_button_check_pressed(global.playing_index,gp_face3) key = gp_face3;
if gamepad_button_check_pressed(global.playing_index,gp_face4) key = gp_face4;

if gamepad_button_check_pressed(global.playing_index,gp_padl) key = gp_padl;
if gamepad_button_check_pressed(global.playing_index,gp_padr) key = gp_padr;
if gamepad_button_check_pressed(global.playing_index,gp_padu) key = gp_padu;
if gamepad_button_check_pressed(global.playing_index,gp_padd) key = gp_padd;

if gamepad_button_check_pressed(global.playing_index,gp_start) key = gp_start;
if gamepad_button_check_pressed(global.playing_index,gp_select) key = gp_select;
if gamepad_button_check_pressed(global.playing_index,gp_shoulderl) key = gp_shoulderl;
if gamepad_button_check_pressed(global.playing_index,gp_shoulderr) key = gp_shoulderr;
if gamepad_button_check_pressed(global.playing_index,gp_shoulderlb) key = gp_shoulderlb;
if gamepad_button_check_pressed(global.playing_index,gp_shoulderrb) key = gp_shoulderrb;
if gamepad_button_check_pressed(global.playing_index,gp_stickl) key = gp_stickl;
if gamepad_button_check_pressed(global.playing_index,gp_stickr) key = gp_stickr;

//if gamepad_button_check_pressed(0,gp_axisrh) key = gp_axisrh;
//if gamepad_button_check_pressed(0,gp_axisrv) key = gp_axisrv;

if (key!=noone)
{

audio_play_sound(snd_PowerupB,10,false);

    switch(slot)
    {
    case 0:  last=global.gp_D_Left;            global.gp_D_Left=key;           break;
    case 1:  last=global.gp_D_Right;           global.gp_D_Right=key;          break;
    case 2:  last= global.gp_D_Up;             global.gp_D_Up=key;             break;
    case 3:  last=global.gp_D_Down;            global.gp_D_Down=key;           break;
    case 4:  last=global.gp_Jump;            global.gp_Jump=key;           break;
    case 5:  last=global.gp_Melee;           global.gp_Melee=key;          break;
    case 6:  last=global.gp_Fire;            global.gp_Fire=key;           break;
    case 7:  last=global.gp_Weapon;          global.gp_Weapon=key;         break;
    
    case 8: last=global.gp_Left_Shoulder;    global.gp_Left_Shoulder=key;  break;
    case 9: last=global.gp_Right_Shoulder;   global.gp_Right_Shoulder=key; break;
    case 10: last=global.gp_Left_Trigger;    global.gp_Left_Trigger=key;   break;
    case 11: last=global.gp_Right_Trigger;   global.gp_Right_Trigger=key;  break;
    
    case 12:  last=global.gp_Pause;          global.gp_Pause=key;          break;
    case 13:  last=global.gp_Select;         global.gp_Select=key;         break;
    case 14:  last=global.gp_Pet_L;          global.gp_Pet_L=key;         break;
    case 15:  last=global.gp_Pet_R;          global.gp_Pet_R=key;         break;
    }

                   
         //SWAP IF DUPLICATE BINDINGS --
         if(global.gp_D_Left==key)               &amp;&amp; (slot!=0)  global.gp_D_Left=last;
         if(global.gp_D_Right==key)              &amp;&amp; (slot!=1)  global.gp_D_Right=last;
         if(global.gp_D_Up==key)                 &amp;&amp; (slot!=2)  global.gp_D_Up=last;
         if(global.gp_D_Down==key)               &amp;&amp; (slot!=3)  global.gp_D_Down=last;
         if(global.gp_Jump==key)               &amp;&amp; (slot!=4)  global.gp_Jump=last;
         if(global.gp_Melee==key)              &amp;&amp; (slot!=5)  global.gp_Melee=last;
         if(global.gp_Fire==key)               &amp;&amp; (slot!=6)  global.gp_Fire=last;
         if(global.gp_Weapon==key)             &amp;&amp; (slot!=7)  global.gp_Weapon=last;
         
         if(global.gp_Left_Shoulder==key)      &amp;&amp; (slot!=8) global.gp_Left_Shoulder=last;
         if(global.gp_Right_Shoulder==key)     &amp;&amp; (slot!=9) global.gp_Right_Shoulder=last;
         if(global.gp_Left_Trigger==key)       &amp;&amp; (slot!=10) global.gp_Left_Trigger=last;
         if(global.gp_Right_Trigger==key)      &amp;&amp; (slot!=11) global.gp_Right_Trigger=last;
         
         if(global.gp_Pause==key)              &amp;&amp; (slot!=12)  global.gp_Pause=last;
         if(global.gp_Select==key)             &amp;&amp; (slot!=13)  global.gp_Select=last;
         if(global.gp_Pet_L==key)             &amp;&amp; (slot!=14)  global.gp_Pet_L=last;
         if(global.gp_Pet_R==key)             &amp;&amp; (slot!=15)  global.gp_Pet_R=last;
            
    bind=false;
}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{
offset=1.5;//*.9;
}
else
{
offset=1;//*.9;
}

//menu_x=600;
//menu_y=200;
/*
    //GAMEPAD BIND DEFAULTS
    global.gp_D_Left     = gp_padl;
    global.gp_D_Right    = gp_padr;
    global.gp_D_Up       = gp_padu;
    global.gp_D_Down     = gp_padd;
    global.gp_Jump     = gp_face1;
    global.gp_Melee    = gp_face3;
    global.gp_Fire     = gp_face2;
    global.gp_Weapon   = gp_face4;
    global.gp_Pause    = gp_start;
    global.gp_Select   = gp_select;
    global.gp_Left_Shoulder  =  gp_shoulderl;
    global.gp_Right_Shoulder =  gp_shoulderr;
    global.gp_Left_Trigger   =  gp_shoulderlb;
    global.gp_Right_Trigger  =  gp_shoulderrb;
    global.gp_Pet_L  =  gp_stickl;
    global.gp_Pet_R  =  gp_stickr;
*/

//FLASH INC ------
if (flash&gt;=1) flash_count*=-1;
if (flash&lt;=0) flash_count*=-1;
if (alarm[1]==-1)
flash+=flash_count;
else
flash+=8*flash_count;

draw_set_color(c_black);
draw_set_alpha(.35);
spacing=30;
//DRAW RECTANGLE

draw_set_alpha(.25); draw_set_color(c_black);
draw_roundrect((menu_x-spacing-20)*offset,(menu_y-spacing)*offset,(200+menu_x-spacing+180)*offset,(menu_y+(8*spacing))*offset,false);

if (bind)
draw_set_color(c_red);
else
draw_set_color(c_navy);
//HIGHLIGHT
if (slot&lt;8)
{
    draw_rectangle((menu_x-spacing-20)*offset,(menu_y+(slot*spacing)-10)*offset,(menu_x-spacing+180)*offset,(menu_y+(slot*spacing)+10)*offset,false);
}
else
{
    if(slot&lt;16)
    draw_rectangle((menu_x-spacing+180)*offset,(menu_y+((slot-8)*spacing)-10)*offset,(200+menu_x-spacing+180)*offset,(menu_y+((slot-8)*spacing)+10)*offset,false)
}

draw_set_color(c_white);
draw_set_alpha(.25);
draw_line((menu_x-spacing+180)*offset,(menu_y-spacing)*offset,(menu_x-spacing+180)*offset,(menu_y+(8*spacing))*offset);
draw_set_alpha(1);
draw_roundrect((menu_x-spacing-20)*offset,(menu_y-spacing)*offset,(200+menu_x-spacing+180)*offset,(menu_y+(8*spacing))*offset,true);
draw_set_alpha(1);



draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(fnt_Orbitron);

//draw_set_font(fnt_LowGun);
font_y=0; //-3 for lowgun
text_size=.7; //.62 for lowgun


if (shift_back&lt;4) shift_back+=.25;
draw_set_color(c_black);
draw_set_alpha(.75*flash);

switch(slot)
{
case 0: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(0*spacing)+font_y+shift_back*.25)*offset,"Left:",text_size*offset,text_size*offset,0); break;
case 1: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(1*spacing)+font_y+shift_back*.25)*offset,"Right:",text_size*offset,text_size*offset,0); break;
case 2: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(2*spacing)+font_y+shift_back*.25)*offset,"Up:",text_size*offset,text_size*offset,0); break;
case 3: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(3*spacing)+font_y+shift_back*.25)*offset,"Down:",text_size*offset,text_size*offset,0); break;

case 4: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(4*spacing)+font_y+shift_back*.25)*offset,"Jump:",text_size*offset,text_size*offset,0); break;
case 5: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(5*spacing)+font_y+shift_back*.25)*offset,"Melee:",text_size*offset,text_size*offset,0); break;
case 6: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(6*spacing)+font_y+shift_back*.25)*offset,"Fire:",text_size*offset,text_size*offset,0); break;
case 7: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(7*spacing)+font_y+shift_back*.25)*offset,"Change Weapon:",text_size*offset,text_size*offset,0); break;

case 16: draw_text_transformed((menu_x+shift_front-25+shift_back)*offset,(menu_y+(8.5*spacing)+font_y+shift_back*.25)*offset,"Back",text_size*offset,text_size*offset,0); break;

//Second Column
case 8: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(0*spacing)+font_y+shift_back*.25)*offset, "Summon:",text_size*offset,text_size*offset,0); break;
case 9: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(1*spacing)+font_y+shift_back*.25)*offset, "Shield:",text_size*offset,text_size*offset,0); break;
case 10: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(2*spacing)+font_y+shift_back*.25)*offset,"Warp(L):",text_size*offset,text_size*offset,0); break;
case 11: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(3*spacing)+font_y+shift_back*.25)*offset,"Warp(R):",text_size*offset,text_size*offset,0); break;

case 12: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(4*spacing)+font_y+shift_back*.25)*offset,"Pause:",text_size*offset,text_size*offset,0); break;
case 13: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(5*spacing)+font_y+shift_back*.25)*offset,"Inventory:",text_size*offset,text_size*offset,0); break;
case 14: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(6*spacing)+font_y+shift_back*.25)*offset,"Pet Select(L):",text_size*offset,text_size*offset,0); break;
case 15: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(7*spacing)+font_y+shift_back*.25)*offset,"Pet Select(R):",text_size*offset,text_size*offset,0); break;

case 17: draw_text_transformed((170+menu_x+shift_front+shift_back)*offset,(menu_y+(8.5*spacing)+font_y+shift_back*.25)*offset,"Restore Defaults",text_size*offset,text_size*offset,0); break;
}

draw_set_color(c_white);
draw_set_alpha(1);


//DRAW GAMEPAD ICONS
draw_sprite_ext(pad_def(global.gp_D_Left),0,(menu_x+shift_front+4+100)*offset,(menu_y+(0*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_D_Right),0,(menu_x+shift_front+4+100)*offset,(menu_y+(1*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_D_Up),0,(menu_x+shift_front+4+100)*offset,(menu_y+(2*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_D_Down),0,(menu_x+shift_front+4+100)*offset,(menu_y+(3*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);

draw_sprite_ext(pad_def(global.gp_Jump),0,(menu_x+shift_front+4+100)*offset,(menu_y+(4*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Melee),0,(menu_x+shift_front+4+100)*offset,(menu_y+(5*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Fire),0,(menu_x+shift_front+4+100)*offset,(menu_y+(6*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Weapon),0,(menu_x+shift_front+4+100)*offset,(menu_y+(7*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);



draw_sprite_ext(pad_def(global.gp_Left_Shoulder),0,(200+menu_x+shift_front+4+100)*offset,(menu_y+(0*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Right_Shoulder),0,(200+menu_x+shift_front+4+100)*offset,(menu_y+(1*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Left_Trigger),0,(200+menu_x+shift_front+4+100)*offset,(menu_y+(2*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Right_Trigger),0,(200+menu_x+shift_front+4+100)*offset,(menu_y+(3*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);

draw_sprite_ext(pad_def(global.gp_Pause),0,(200+menu_x+shift_front+4+100)*offset,(menu_y+(4*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Select),0,(200+menu_x+shift_front+4+100)*offset,(menu_y+(5*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Pet_L),0,(200+menu_x+shift_front+4+100)*offset,(menu_y+(6*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_sprite_ext(pad_def(global.gp_Pet_R),0,(200+menu_x+shift_front+4+100)*offset,(menu_y+(7*spacing)+1)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
    

if(slot==0)
{
draw_set_alpha(flash);
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(0*spacing)+font_y)*offset,"Left:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((menu_x-25)*offset,(menu_y+(0*spacing)+font_y)*offset,"Left:",text_size*offset,text_size*offset,0);
}

if(slot==1)
{
draw_set_alpha(flash);
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(1*spacing)+font_y)*offset,"Right:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((menu_x-25)*offset,(menu_y+(1*spacing)+font_y)*offset,"Right:",text_size*offset,text_size*offset,0);
}

if(slot==2)
{
draw_set_alpha(flash);
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(2*spacing)+font_y)*offset,"Up:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((menu_x-25)*offset,(menu_y+(2*spacing)+font_y)*offset,"Up:",text_size*offset,text_size*offset,0);
}

if(slot==3)
{
draw_set_alpha(flash);
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(3*spacing)+font_y)*offset,"Down:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((menu_x-25)*offset,(menu_y+(3*spacing)+font_y)*offset,"Down:",text_size*offset,text_size*offset,0);
}

if(slot==4)
{
draw_set_alpha(flash);
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(4*spacing)+font_y)*offset,"Jump:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((menu_x-25)*offset,(menu_y+(4*spacing)+font_y)*offset,"Jump:",text_size*offset,text_size*offset,0);
}

if(slot==5)
{
draw_set_alpha(flash);
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(5*spacing)+font_y)*offset,"Melee:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((menu_x-25)*offset,(menu_y+(5*spacing)+font_y)*offset,"Melee:",text_size*offset,text_size*offset,0);
}

if(slot==6)
{
draw_set_alpha(flash);
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(6*spacing)+font_y)*offset,"Fire:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((menu_x-25)*offset,(menu_y+(6*spacing)+font_y)*offset,"Fire:",text_size*offset,text_size*offset,0);
}

if(slot==7)
{
draw_set_alpha(flash);
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(7*spacing)+font_y)*offset,"Change Weapon:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((menu_x-25)*offset,(menu_y+(7*spacing)+font_y)*offset,"Change Weapon:",text_size*offset,text_size*offset,0);
}

if(slot==8)
{
draw_set_alpha(flash);
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(0*spacing)+font_y)*offset,"Summon:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((170+menu_x)*offset,(menu_y+(0*spacing)+font_y)*offset,"Summon:",text_size*offset,text_size*offset,0);
}

if(slot==9)
{
draw_set_alpha(flash);
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(1*spacing)+font_y)*offset,"Shield:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((170+menu_x)*offset,(menu_y+(1*spacing)+font_y)*offset,"Shield:",text_size*offset,text_size*offset,0);
}

if(slot==10)
{
draw_set_alpha(flash);
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(2*spacing)+font_y)*offset,"Warp(L):",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((170+menu_x)*offset,(menu_y+(2*spacing)+font_y)*offset,"Warp(L):",text_size*offset,text_size*offset,0);
}

if(slot==11)
{
draw_set_alpha(flash);
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(3*spacing)+font_y)*offset,"Warp(R):",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((170+menu_x)*offset,(menu_y+(3*spacing)+font_y)*offset,"Warp(R):",text_size*offset,text_size*offset,0);
}

if(slot==12)
{
draw_set_alpha(flash);
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(4*spacing)+font_y)*offset,"Pause:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((170+menu_x)*offset,(menu_y+(4*spacing)+font_y)*offset,"Pause:",text_size*offset,text_size*offset,0);
}

if(slot==13)
{
draw_set_alpha(flash);
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(5*spacing)+font_y)*offset,"Inventory:",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((170+menu_x)*offset,(menu_y+(5*spacing)+font_y)*offset,"Inventory:",text_size*offset,text_size*offset,0);
}

if(slot==14)
{
draw_set_alpha(flash);
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(6*spacing)+font_y)*offset,"Pet Select(L):",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((170+menu_x)*offset,(menu_y+(6*spacing)+font_y)*offset,"Pet Select(L):",text_size*offset,text_size*offset,0);
}

if(slot==15)
{
draw_set_alpha(flash);
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(7*spacing)+font_y)*offset,"Pet Select(R):",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
draw_text_transformed((170+menu_x)*offset,(menu_y+(7*spacing)+font_y)*offset,"Pet Select(R):",text_size*offset,text_size*offset,0);
}

if(slot==16)
{
draw_set_alpha(flash);
if (!bind)
draw_text_transformed((menu_x-25+shift_front)*offset,(menu_y+(8.5*spacing)+font_y)*offset,"Back",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
if (!bind)
draw_text_transformed((menu_x-25)*offset,(menu_y+(8.5*spacing)+font_y)*offset,"Back",text_size*offset,text_size*offset,0);
}
draw_set_alpha(1);


if(slot==17)
{
draw_set_alpha(flash);
if (!bind)
draw_text_transformed((170+menu_x+shift_front)*offset,(menu_y+(8.5*spacing)+font_y)*offset,"Restore Defaults",text_size*offset,text_size*offset,0);
}
else
{
draw_set_alpha(1);
if (!bind)
draw_text_transformed((170+menu_x)*offset,(menu_y+(8.5*spacing)+font_y)*offset,"Restore Defaults",text_size*offset,text_size*offset,0);
}
draw_set_alpha(1);






if (bind)
{
draw_set_color(c_red);
draw_text_transformed((85+menu_x+shift_front)*offset,(menu_y+(8.5*spacing)+font_y)*offset,"[Enter New Bind]",1*text_size*offset,1*text_size*offset,0);
//draw_text_transformed((menu_x)*offset,(menu_y+(-1.5*.9*spacing))*offset,"[Enter New Bind]",1*text_size*offset,1*text_size*offset,0);
draw_set_color(c_white);
}
/*
        draw_text_transformed(750*offset,450*offset,"(press",offset,offset,0);
        draw_sprite_ext(spr_xbox_A,0,775*offset,450*offset,.8*offset,.8*offset,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
