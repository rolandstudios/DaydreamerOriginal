<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ForceField_B</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
{
    if(par_HERO.y_shoot_offset!=0)
    {
    scale=1.9;
    image_xscale = scale;
    image_yscale = scale;
    }
    else
    {
    scale=1.2;
    image_xscale = scale;
    image_yscale = scale;
    }


image_xscale = scale;
image_yscale = scale;

sprite_index =ForceField_B;
image_speed=1;
image_alpha=.5;

audio_sound_pitch(snd_whoosh_magic_liquid,global.game_speed);
audio_play_sound(snd_whoosh_magic_liquid,10,false);

type=0; //0 is FULL SHIELD 1 is Parry

hit=false;
die=false;
hp=10;
move=0;
parry_hit=false;

icon_x=80;
icon_y=180;
icon_scale=.5;

icon_flash=1;
icon_flash_inc=.25;

icon_alpha=1;
icon_alpha_inc=.25;
}
else
{
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.rumble) gamepad_set_vibration(0, 0, 0);

if instance_exists(par_HERO)
{
par_HERO.alarm[11] = 10/global.game_speed;
par_HERO.invinsible=false;
par_HERO.shield=false;
par_HERO.shieldup=false;
par_HERO.hit=false //edit
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
{
depth=par_HERO.depth-1;
par_HERO.invinsible=true; 

if (place_meeting(x,y,par_Enemy)) 
    {    
    if (par_HERO.warping==false) &amp;&amp; (hit==false) &amp;&amp; (die==false) //&amp;&amp; (image_index &gt;= 14) 
    {
    enemy = instance_place(x, y, par_Enemy);
    if (enemy==noone)
    enemy=instance_nearest(x,y,par_Enemy);
    
    if (enemy.damage&gt;0)
    {  
      sprite_index=Force_Field_B_Hit;
      image_index=0;
      image_speed=.5*global.game_speed;
        
        inst = instance_place(x,y,par_Enemy);
        if (inst==noone)
        inst = instance_nearest(x,y,par_Enemy);
                
        if (inst.x&gt;x)           
        image_xscale=scale;
        if (inst.x&lt;x)  
        image_xscale=-scale;
        
      audio_sound_pitch(snd_Shield_hit,global.game_speed);
      audio_play_sound(snd_Shield_hit,10,false);
      audio_sound_pitch(snd_impact_Heavy,global.game_speed);
      audio_play_sound(snd_impact_Heavy,10,false);
      
      hp=hp-1;
      hit=true;
      if (global.rumble) gamepad_set_vibration(global.playing_index, 1, 1);
            
      if(inst.type==2) &amp;&amp; (type==1) 
      {          
            obj_Yellow_Energy.flash=true;
            parry_hit=true;
            
                      //QUICK REFLEXES ACHIEVEMENT ---------------------------------
                       
                      //STEAM --------------------------------
                      if (global.platform==0)
                      {
                      if !steam_get_achievement("ach_Parry") 
                            steam_set_achievement("ach_Parry")
                      }                      
                      //XBOX ONE
                      if (global.platform==1)
                      {                     
                        scr_XboxOne_Achievement(1);                  
                      }  
                      //PS4
                      if (global.platform==3)
                      {       
                        scr_PS4_Trophies(1);                                   
                      }                                                                                                           
                     //---------------------------------------------------[END]
        
            if !audio_is_playing(snd_Parry)
            {
            audio_play_sound(snd_Parry,14,false);
            audio_sound_pitch(snd_Parry,global.game_speed);
            }
                        
            obj_Yellow_Energy.alarm[0]=25;//was 5 //was 1
            audio_sound_pitch(snd_Got_special_A,global.game_speed);
            audio_play_sound(snd_Got_special_A,10,false);
            with instance_create(x,y,obj_Powerup_A_FULL){color=c_yellow;flash=true;}
            par_HERO.energy=par_HERO.energy+20;
            if (par_HERO.energy&gt;100) par_HERO.energy=100;
            if (global.rumble) gamepad_set_vibration(global.playing_index, 1, 1);
            
            //SET INVINSIBLE CLOCK
             par_HERO.alarm[11] = 10/global.game_speed;            
      }
      
    }//IF DAMAGE &gt; 0

    }//END SHIELD STAND OR IMAGE INDEX OVER 30
    
    }//END ENEMY HIT

    if(round(image_index)&gt;=60) 
    {
    image_index =30;
    image_speed=.5*global.game_speed;
    }

      



if(hit==true)
{
    sprite_index=Force_Field_B_Hit;
    image_speed=.5*global.game_speed;
    
    if(image_index&gt;=12) 
        {
        sprite_index=ForceField_B;
        image_index =30;
        image_speed=.5*global.game_speed;
        hit=false;
        if (global.rumble) gamepad_set_vibration(global.playing_index, 0, 0);
        }

}

//TRACE CAMERA OFFSET CLIMB LEDGE

    if(par_HERO.sprite_index!=spr_Old_Olivia_Climb) &amp;&amp; (par_HERO.sprite_index!=spr_Young_Olivia_Climb)
    {
        x=par_HERO.x;
        y=par_HERO.y-5-par_HERO.y_shoot_offset*.75;
        visible=true;
    }
    else
    {    
        x=par_HERO.ledge_x;
        y=par_HERO.ledge_y-5-par_HERO.y_shoot_offset*.75;  
    }


//ADULT HERO LADDER 


        if(par_HERO.ladder) &amp;&amp; (global.HERO_type==1)
        { 
         x=obj_camera_offset.x;
         y=obj_camera_offset.y-5-par_HERO.y_shoot_offset*.75;       
        } 



if(hp&lt;=0)
 {
 if (!die)  
    {
    audio_play_sound(snd_impact_Heavy,10,false);
    audio_play_sound(snd_Powerdown_A,10,false);
    image_alpha=.8;
    sprite_index=Force_Field_B_Hit;
    image_index=0;
    image_speed=.5*global.game_speed;
    hit=true;
    die=true;
    }
 }
 
 
if(image_alpha&lt;=0) 
    {
    instance_destroy();
    }

}//END HERO EXISTS
else
{
instance_destroy();
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{
offset=1.5;
}
else
{
offset=1;
}


if (icon_scale&lt;1) icon_scale*=1.1;
if (icon_scale&gt;1) icon_scale=1;

icon_x=42;
icon_y=150;

if (hit)
{
    shake_x=random_range(-3,3);
    shake_y=random_range(-3,3);
}
else
{
    shake_x=0;
    shake_y=0;
}

  if (die==false)
  {
  draw_set_blend_mode(bm_add);
  draw_set_alpha(icon_flash*.5);
  
  
  if (par_HERO.alarm[5]&gt;400) 
  pie_color=make_color_hsv(128,90,255);
  else
  pie_color=merge_colour(c_red, make_color_hsv(128,90,255), par_HERO.alarm[5]/400); //was 800
  
  //hue=color_get_hue(pie_color);
  //pie_color=make_color_hsv(hue,255,255);
 
  draw_set_color(pie_color);
  draw_circle_curve((icon_x+shake_x)*offset,(icon_y+shake_y)*offset,15*offset,30,0,(par_HERO.alarm[5]*.45),2,0);
  draw_set_blend_mode(bm_normal);
  }

if (die) 
{             
    hp=0;
    
    if (parry_hit==true)
    {
    draw_sprite_ext(spr_Shield_Pie,0,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,offset,offset,0,c_white,image_alpha);
    draw_set_blend_mode(bm_add);
    
    if (icon_alpha&gt;=.9) icon_alpha_inc=-.01;
    if (icon_alpha&lt;=.5) icon_alpha_inc=.01;
    icon_alpha+=icon_alpha_inc;
    
     color=make_color_hsv(irandom_range(1,255),255,255);
     draw_sprite_ext(spr_Shield_Pie,5,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,icon_alpha);
     draw_sprite_ext(spr_Shield_Pie,4,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,image_alpha);
     draw_sprite_ext(spr_Shield_Pie,3,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,image_alpha);
     draw_sprite_ext(spr_Shield_Pie,2,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,image_alpha);
     draw_sprite_ext(spr_Shield_Pie,1,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,image_alpha);
     draw_set_blend_mode(bm_normal);
    }
    else
    {
        var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
        var Filter = shader_get_uniform(shdr_Hologram,"Filter");
        var Phase = shader_get_uniform(shdr_Hologram,"Phase");
        
        shader_set(shdr_Hologram);
        shader_set_uniform_f(Stripes,555.0);
        shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
        shader_set_uniform_f(Phase,move);
        draw_sprite_ext(spr_Shield_Pie,0,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,offset,offset,0,c_red,image_alpha);    
        shader_reset();
    }
}
else
{
    draw_sprite_ext(spr_Shield_Pie,0,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,offset,offset,0,c_white,1);
    draw_set_blend_mode(bm_add);
               
    if (icon_alpha&gt;=.9) icon_alpha_inc=-.01;
    if (icon_alpha&lt;=.5) icon_alpha_inc=.01;
    icon_alpha+=icon_alpha_inc;
    
    if (parry_hit==true)
    color=make_color_hsv(irandom_range(1,255),255,255);
    else
    color=make_color_hsv(128,90,255);
    
    if (hp&gt;=1) draw_sprite_ext(spr_Shield_Pie,5,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,icon_alpha);
    if (hp&gt;=2) draw_sprite_ext(spr_Shield_Pie,4,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,icon_alpha);
    if (hp&gt;=3) draw_sprite_ext(spr_Shield_Pie,3,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,icon_alpha);
    if (hp&gt;=4) draw_sprite_ext(spr_Shield_Pie,2,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,icon_alpha);
    if (hp&gt;=5) draw_sprite_ext(spr_Shield_Pie,1,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,color,icon_alpha);
    draw_set_blend_mode(bm_normal);
}  
  
  if (hit)
  {
    if (icon_flash&gt;=1) icon_flash_inc=-.25;
    if (icon_flash&lt;=0) icon_flash_inc=.25;
    icon_flash+=icon_flash_inc;
    
    if (parry_hit==false)
    {
    draw_set_blend_mode(bm_add);
    if (hp==1) draw_sprite_ext(spr_Shield_Pie,4,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,c_red,icon_flash);
    if (hp==2) draw_sprite_ext(spr_Shield_Pie,3,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,c_red,icon_flash);
    if (hp==3) draw_sprite_ext(spr_Shield_Pie,2,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,c_red,icon_flash);
    if (hp==4) draw_sprite_ext(spr_Shield_Pie,1,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,c_red,icon_flash);
    if (hp==0) draw_sprite_ext(spr_Shield_Pie,5,(icon_x+shake_x)*offset,(icon_y+shake_y)*offset,icon_scale*offset,icon_scale*offset,0,c_red,icon_flash);
    draw_set_blend_mode(bm_normal);
    }
  }

  /* 
  draw_set_blend_mode(bm_add);
  draw_set_alpha(icon_flash*.25);
  draw_set_color(c_aqua);
  draw_circle_curve((icon_x+shake_x)*offset,(icon_y+shake_y)*offset,30*offset,360,0,(par_HERO.alarm[5]*.45),2,1)
  draw_set_blend_mode(bm_normal);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (parry_hit==true)
    {    
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_wisp_A,image_index,x,y,12,12,0,make_color_hsv(irandom_range(1,255),255,255),.4);
    draw_sprite_ext(spr_Static,image_index,x,y,1,1,330*image_xscale,make_color_hsv(irandom_range(1,255),255,255),.5);
    draw_set_blend_mode(bm_normal);    
    }
   
    
if (die)
{
    move+=random_range(0.02,0.08);
    image_blend=c_white;
    
    draw_set_blend_mode(bm_add);
       
    if (type==1) image_alpha=image_alpha-.02; //JUMP SHIELD
    if (type==2) image_alpha=image_alpha-.02; //STAND SHIELD
    
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    
    draw_self();
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,255.0);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
        
    draw_self();
    shader_reset();
    draw_set_blend_mode(bm_normal);
    
}
else
{
     
     draw_set_blend_mode(bm_add);
                    
        if (type==1) //PARRY FORCE FIELD
        {
        if (sprite_index==Force_Field_B_Hit)
            draw_sprite_ext(spr_wisp_A,image_index,x,y,14,14,0,make_color_hsv(46-image_index,255,255),.25); //was .2
            else
            draw_sprite_ext(spr_wisp_A,image_index,x,y,12,12,0,make_color_hsv(46-image_index,255,255),.25); //was .2
        }
        else //REGULAR FORCE FIELD            
        {
        if (sprite_index==Force_Field_B_Hit)
            draw_sprite_ext(spr_wisp_A,image_index,x,y,14,14,0,make_color_hsv(145,80,255),.25);
            else
            draw_sprite_ext(spr_wisp_A,image_index,x,y,12,12,0,make_color_hsv(145,80,255),.25);
        } 
    
           
    draw_self();
    draw_set_blend_mode(bm_normal);
     
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,70</point>
    <point>70,70</point>
  </PhysicsShapePoints>
</object>
