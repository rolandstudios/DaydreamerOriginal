<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
curtain=false;
confirm=false;
//name = string("Olivia");

switch(irandom_range(1,64))
{
case 1: name = string("Ila"); break;
case 2: name = string("Lizette"); break;
case 3: name = string("Velva"); break;
case 4: name = string("Zoraida"); break;
case 5: name = string("Zora"); break;
case 6: name = string("Ozell"); break;
case 7: name = string("Oneida"); break;
case 8: name = string("Tamiko"); break;
case 9: name = string("Shery"); break;
case 10: name = string("Zena"); break;
case 11: name = string("Olivia"); break;
case 12: name = string("Tresa"); break;
case 13: name = string("Estela"); break;
case 14: name = string("Xenia"); break;
case 15: name = string("soap"); break;
case 16: name = string("Oralia"); break;
case 17: name = string("Deloise"); break;
case 18: name = string("Kimi"); break;
case 19: name = string("Ariel"); break;
case 20: name = string("Scallion"); break; 
case 21: name = string("Believe"); break;
case 22: name = string("Scissors"); break;
case 23: name = string("Wish"); break;
case 24: name = string("Asparagus"); break;
case 25: name = string("Toothbrush"); break;
case 26: name = string("Jasmine"); break; 
case 27: name = string("Bucket"); break;
case 28: name = string("December"); break; 
case 29: name = string("Nylon"); break; 
case 30: name = string("Tuba"); break;
case 31: name = string("Broccoli"); break; 
case 32: name = string("Window"); break;
case 33: name = string("Gaye"); break;
case 34: name = string("Misha"); break;
case 35: name = string("Tatum"); break;
case 36: name = string("Spring"); break;
case 37: name = string("Nanette"); break;
case 38: name = string("Jammie"); break;
case 39: name = string("Charolette"); break;
case 40: name = string("Ginger"); break;
case 41: name = string("Luz"); break;
case 42: name = string("Rachel"); break;
case 43: name = string("Courtney"); break;
case 44: name = string("Sandy"); break;
case 45: name = string("Joy"); break;
case 46: name = string("April"); break;
case 47: name = string("Francis"); break;
case 48: name = string("Bessie"); break;
case 49: name = string("Cheryl"); break;
case 50: name = string("Marilyn"); break;
case 51: name = string("Jane"); break;
case 52: name = string("Band Aid"); break;
case 53: name = string("Panda"); break; 
case 54: name = string("Lamp"); break; 
case 55: name = string("Duck"); break;
case 56: name = string("Ethernet"); break;
case 57: name = string("Wing"); break; 
case 58: name = string("Desk"); break; 
case 59: name = string("Memory"); break;
case 60: name = string("Bubble"); break;
case 61: name = string("Cat"); break;
case 62: name = string("Snowball"); break;
case 63: name = string("Tuna"); break;
case 64: name = string("Slipper"); break; 
}
//name = string("&gt;＾● ⋏ ●＾&lt;  meow!")
letter=string(" ");
string_cursor=string_length(name);
caps=true;

x=810*.9;
y=340*.7;

orig_x=810*.9;
orig_y=340*.7;


backdrop_alpha=0;

slot_x=0;
slot_y=0;

des_x=x;
des_y=y;

last_x=des_x;
last_y=des_y;

space=33;
stored=false;
image_speed=0;
flash=1;
flash_count=.05;
//target_rm=rm_Stage_Select; //edit
target_rm=rm_Classroom;

global.CutScene=true;

audio_play_sound(snd_PowerupB,10,false);

shift_back=0;
shift_front=5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha=1;
draw_set_alpha(100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>master.full_flush=true; //edit 031916
scr_master_flush(); //edit 031916
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(global.playing_index, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(irandom_range(1,60))
{
case 1: name = string("Ila"); break;
case 2: name = string("Lizette"); break;
case 3: name = string("Velva"); break;
case 4: name = string("Zoraida"); break;
case 5: name = string("Zora"); break;
case 6: name = string("Ozell"); break;
case 7: name = string("Oneida"); break;
case 8: name = string("Tamiko"); break;
case 9: name = string("Shery"); break;
case 10: name = string("Zena"); break;
case 11: name = string("Olivia"); break;
case 12: name = string("Tresa"); break;
case 13: name = string("Estela"); break;
case 14: name = string("Xenia"); break;
case 15: name = string("soap"); break;
case 16: name = string("Oralia"); break;
case 17: name = string("Deloise"); break;
case 18: name = string("Kimi"); break;
case 19: name = string("Ariel"); break;
case 20: name = string("Scallion"); break; 
case 21: name = string("Believe"); break;
case 22: name = string("Scissors"); break;
case 23: name = string("Wish"); break;
case 24: name = string("Asparagus"); break;
case 25: name = string("Toothbrush"); break;
case 26: name = string("Jasmine"); break; 
case 27: name = string("Bucket"); break;
case 28: name = string("December"); break; 
case 29: name = string("Nylon"); break; 
case 30: name = string("Tuba"); break;
case 31: name = string("Broccoli"); break; 
case 32: name = string("Window"); break;
case 33: name = string("Gaye"); break;
case 34: name = string("Misha"); break;
case 35: name = string("Tatum"); break;
case 36: name = string("Spring"); break;
case 37: name = string("Nanette"); break;
case 38: name = string("Jammie"); break;
case 39: name = string("Charolette"); break;
case 40: name = string("Ginger"); break;
case 41: name = string("Luz"); break;
case 42: name = string("Rachel"); break;
case 43: name = string("Courtney"); break;
case 44: name = string("Sandy"); break;
case 45: name = string("Joy"); break;
case 46: name = string("April"); break;
case 47: name = string("Francis"); break;
case 48: name = string("Bessie"); break;
case 49: name = string("Cheryl"); break;
case 50: name = string("Marilyn"); break;
case 51: name = string("Jane"); break;
case 52: name = string("Wood"); break;
case 53: name = string("Panda"); break; 
case 54: name = string("Lamp"); break; 
case 55: name = string("Duck"); break;
case 56: name = string("Ethernet"); break;
case 57: name = string("Wing"); break; 
case 58: name = string("Desk"); break; 
case 59: name = string("Memory"); break;
case 60: name = string("Bubble"); break; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(target_rm);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> if (confirm==true) 
 {
  //CREATE NEW GAME ------------------------------------------------------------------------------------------------------------
            
            global.date = date_date_string(date_current_datetime());
            global.name = name;   
            global.SavedRoom = rm_Tutorial_0;         
            global.current_world=0;
            global.SavedHP=100; //Health
            global.Parallax=true;  //Horizontal Parallax
            global.VParallax=false; //Vertical Parallax
            
            global.creation=true; //Tube in at level start
            global.SavedMoney=0; //Money
            global.Trippy=false;  //Wavy FX
            global.CutScene=false; //Freeze Controls
              
                
                for(var a=0; a&lt;=2; a+=1) //Set Inventory
                {
                    for (b=0;b&lt;=3;b+=1)
                    {
                    global.Inventory[a,b]=0;
                    }
                }
                
                //Random_Weapons
                global.weapon_A = 0; 
                global.weapon_B = 0;
                global.weapon_C = 0; 
                global.weapon_D = 0;
                
                //FULL Pets
                global.pets[0]=1; //Turtle
                global.pets[1]=0; //Pup
                global.pets[2]=0; //Cat
                global.pets[3]=0; //Weasel
                global.pets[4]=0; //Duck
                
                
                //FULL Weapon Energy
                global.weapon_A_energy=100;
                global.weapon_B_energy=100;
                global.weapon_C_energy=100;
                global.weapon_D_energy=100;
                
                global.Hours=0; //Speed Run Time
                global.Minutes=0; //Speed Run Time
                global.Seconds=0; //Speed Run Time
                
                global.ranked_Minutes =  10;
                global.ranked_Seconds =  0;
        
                global.Points=0;   //Sore
                global.HERO_type=1;
                
                global.World=0;//Set World
                
                for (a=1;a&lt;=14;a+=1) //BOSS SCORE
                {  
                    for (b=1;b&lt;=3;b+=1)
                    {
                        global.Boss_Score[a,b]=-1; //was 0
                    }
                }
                
                for (c=0;c&lt;=14;c+=1) //c start was 1
                    {
                    global.world_clear[c]=0;
                    }
                               
                target_rm=rm_Classroom;
                instance_create(x,y,obj_Curtain);
                
               //----------------------------     

 
 if (alarm[1]==-1) 
    {
    audio_stop_sound(msc_Title);
    gamepad_set_vibration(global.playing_index, 0, 0); 
    audio_stop_sound(msc_Title);
    if instance_exists(obj_Menu_Background){with (obj_Menu_Background) {image_alpha=0; visible=false; }}
    if instance_exists(obj_Cover_BG){with (obj_Cover_BG) {image_alpha=0; visible=false; }}
    if instance_exists(obj_Daydreamer_LOGO){with (obj_Daydreamer_LOGO) {image_alpha=0; visible=false; }}
    if instance_exists(obj_Cover_Collector){with (obj_Cover_Collector) {image_alpha=0; visible=false; }}
    if instance_exists(obj_Cover_Olivia){with (obj_Cover_Olivia) {image_alpha=0; visible=false; }}
    if instance_exists(obj_CloudsA){with (obj_CloudsA) {image_alpha=0; visible=false; }}
    if instance_exists(obj_Flare_Glow_white){with (obj_Flare_Glow_white) {image_alpha=0; visible=false; }}
    if instance_exists(obj_Cover_top){with (obj_Cover_top) {image_alpha=0; visible=false; }}
    if instance_exists(obj_volume_Flare_A){with (obj_volume_Flare_A) {image_alpha=0; visible=false; }}
    curtain=true;
    global.gamestart=true; //edit 031916
    
    
    if (alarm[4]==-1) alarm[4]=1; //MEM FLUSH
    alarm[1]=30; //was 20
    }
    
}//END CONFIRM ------------------------------------------------------------------------------------------------

if (master.paused==false) //CONTROL INPUT ---------------------------------
{
if (!instance_exists(obj_Difficulty))
{
    Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
    Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);
    Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
    Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
    
    Key_Melee = gamepad_button_check_pressed(global.playing_index, gp_face3);
    Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
    Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);
    Key_Select = gamepad_button_check_pressed(global.playing_index,gp_select);
    Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);
    Key_Weapon = gamepad_button_check_pressed(global.playing_index, gp_face4);
    
    //OVERIDE
    if (global.platform==1) //XBOXONE
    {
        if (master.paused)
        {
        Key_Left = false;
        Key_Right = false;
        Key_Up = false;
        Key_Down = false;
        
        Key_Melee = false;
        Key_Jump = false;
        Key_Fire = false;
        Key_Select = false;
        Key_Pause = false;
        Key_Weapon = false;
        }
    }
    
    if (Key_Jump) Key_Fire=false;
    
    if keyboard_check_pressed(vk_space) Key_Jump=true;
    if keyboard_check_pressed(vk_up) Key_Up=true;
    if keyboard_check_pressed(vk_down) Key_Down=true;
    if keyboard_check_pressed(vk_right)Key_Right = true;
    if keyboard_check_pressed(vk_left) Key_Left = true;
    if keyboard_check_pressed(vk_enter) Key_Pause = true;
    if keyboard_check_pressed(vk_shift) Key_Weapon = true;
    if keyboard_check_pressed(vk_escape) Key_Fire = true;
    if keyboard_check_pressed(vk_delete) Key_Melee = true;
    
    if (rest)
    {
    if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) {Key_Up = 1; alarm[0]=10; rest=false;} 
    if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) {Key_Down = 1; alarm[0]=10; rest=false;}
    if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) {Key_Left = 1; alarm[0]=10; rest=false;}
    if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) {Key_Right = 1; alarm[0]=10; rest=false;}
    }
}
}

string_cursor=string_length(name);

if(Key_Left) 
    {
    if(x&gt;orig_x) 
        {
        x=x-space;
        slot_x = slot_x-1;
        }
    else
        {
        x=orig_x+9*space;
        slot_x = 9;
        }
    shift_back=0;
    audio_play_sound(snd_selectA,10,false);
    }

if(Key_Right)
    {
    if(x&lt;orig_x+9*space) 
        {
        x=x+space;
        slot_x = slot_x+1;
        }
    else
        {
        x=orig_x;
        slot_x = 0;
        }
    shift_back=0;
    audio_play_sound(snd_selectA,10,false);
    }
    
    
if(Key_Up) 
    {
    if(y&gt;orig_y)
        {
        y=y-space;
        slot_y=slot_y-1;
        }
    else
        {
        y=orig_y+3*space;
        slot_y=3;
        }
    shift_back=0;
   audio_play_sound(snd_selectA,10,false);
    }

if(Key_Down)
    {
    if(y&lt;orig_y+3*space) 
        {
        y=y+space;
        slot_y=slot_y+1;
        }
    else
        {
        y=orig_y;
        slot_y=0;
        }
    shift_back=0;
    audio_play_sound(snd_selectA,10,false);
    }
    
if(Key_Fire) //CANCEL
{
     audio_play_sound(snd_capped_out,10,false);
     instance_destroy();
     room_goto(rm_TitleScreen);
}

if (Key_Jump)  //SELECT LETTER
{
    audio_play_sound(snd_gamestart,10,false);
    
    
if (caps)  //CANCEL
{    
    switch(slot_y)
    {
        case 0: //FIRST ROW
        
            switch(slot_x)
            {
            case 0:
            letter=string("A");    
            break;
            
            case 1:
            letter=string("B");    
            break;

            case 2:
            letter=string("C");    
            break;
            
            case 3:
            letter=string("D");    
            break;
            
            case 4:
            letter=string("E");    
            break;
            
            case 5:
            letter=string("F");    
            break;
            
            case 6:
            letter=string("G");    
            break;
            
            case 7:
            letter=string("H");    
            break;
            
            case 8:
            letter=string("I");    
            break;
            
            case 9:
            letter=string(" ");    
            break;
            }
        
        break
        
        case 1: //SECOND ROW
        
            switch(slot_x)
            {
            case 0:
            letter=string("J");    
            break;
            
            case 1:
            letter=string("K");    
            break;

            case 2:
            letter=string("L");    
            break;
            
            case 3:
            letter=string("M");    
            break;
            
            case 4:
            letter=string("N");    
            break;
            
            case 5:
            letter=string("O");    
            break;
            
            case 6:
            letter=string("P");    
            break;
            
            case 7:
            letter=string("Q");    
            break;
            
            case 8:
            letter=string("R");    
            break;
            
            case 9:
            letter=string(" ");    
            break;
            }
            
        break

        case 2: //THIRD ROW
            
        switch(slot_x)
            {
            case 0:
            letter=string("S");    
            break;
            
            case 1:
            letter=string("T");    
            break;

            case 2:
            letter=string("U");    
            break;
            
            case 3:
            letter=string("V");    
            break;
            
            case 4:
            letter=string("W");    
            break;
            
            case 5:
            letter=string("X");    
            break;
            
            case 6:
            letter=string("Y");    
            break;
            
            case 7:
            letter=string("Z");    
            break;
            
            case 8:
            letter=string(" ");    
            break;
            
            case 9:
            letter=string(" ");    
            break;
            }
            
        break
    
        case 3: //FOURTH ROW
            
            switch(slot_x)
            {
            case 0:
            letter=string("0");    
            break;
            
            case 1:
            letter=string("1");    
            break;

            case 2:
            letter=string("2");    
            break;
            
            case 3:
            letter=string("3");    
            break;
            
            case 4:
            letter=string("4");    
            break;
            
            case 5:
            letter=string("5");    
            break;
            
            case 6:
            letter=string("6");    
            break;
            
            case 7:
            letter=string("7");    
            break;
            
            case 8:
            letter=string("8");    
            break;
            
            case 9:
            letter=string("9");    
            break;
            }
        break
    
    
    }
} //END caps

if (!caps)
{    
    switch(slot_y)
    {
        case 0: //FIRST ROW
        
            switch(slot_x)
            {
            case 0:
            letter=string("a");    
            break;
            
            case 1:
            letter=string("b");    
            break;

            case 2:
            letter=string("c");    
            break;
            
            case 3:
            letter=string("d");    
            break;
            
            case 4:
            letter=string("e");    
            break;
            
            case 5:
            letter=string("f");    
            break;
            
            case 6:
            letter=string("g");    
            break;
            
            case 7:
            letter=string("h");    
            break;
            
            case 8:
            letter=string("i");    
            break;
            
            case 9:
            letter=string(" ");    
            break;
            }
        
        break
        
        case 1: //SECOND ROW
        
            switch(slot_x)
            {
            case 0:
            letter=string("j");    
            break;
            
            case 1:
            letter=string("k");    
            break;

            case 2:
            letter=string("l");    
            break;
            
            case 3:
            letter=string("m");    
            break;
            
            case 4:
            letter=string("n");    
            break;
            
            case 5:
            letter=string("o");    
            break;
            
            case 6:
            letter=string("p");    
            break;
            
            case 7:
            letter=string("q");    
            break;
            
            case 8:
            letter=string("r");    
            break;
            
            case 9:
            letter=string(" ");    
            break;
            }
            
        break

        case 2: //THIRD ROW
            
        switch(slot_x)
            {
            case 0:
            letter=string("s");    
            break;
            
            case 1:
            letter=string("t");    
            break;

            case 2:
            letter=string("u");    
            break;
            
            case 3:
            letter=string("v");    
            break;
            
            case 4:
            letter=string("w");    
            break;
            
            case 5:
            letter=string("x");    
            break;
            
            case 6:
            letter=string("y");    
            break;
            
            case 7:
            letter=string("z");    
            break;
            
            case 8:
            letter=string(" ");    
            break;
            
            case 9:
            letter=string(" ");    
            break;
            }
            
        break
    
        case 3: //FOURTH ROW
            
            switch(slot_x)
            {
            case 0:
            letter=string("0");    
            break;
            
            case 1:
            letter=string("1");    
            break;

            case 2:
            letter=string("2");    
            break;
            
            case 3:
            letter=string("3");    
            break;
            
            case 4:
            letter=string("4");    
            break;
            
            case 5:
            letter=string("5");    
            break;
            
            case 6:
            letter=string("6");    
            break;
            
            case 7:
            letter=string("7");    
            break;
            
            case 8:
            letter=string("8");    
            break;
            
            case 9:
            letter=string("9");    
            break;
            }
        break
    
    
    }
} //END not caps

    
    if (string_length(name) &lt; 8) //Limits Length to 12 Characters was 12
    name = string_insert(letter, name, string_cursor+1);
    else
    audio_play_sound(snd_die,10,false);

    
}

if (Key_Melee) &amp;&amp; !instance_exists(obj_Difficulty)//DEL SPACE
{
     audio_play_sound(snd_capped_out,10,false);
     name = string_delete(name, string_cursor, 1);     
}

if (Key_Pause) &amp;&amp; !instance_exists(obj_Difficulty)
{
 if (global.rumble)  gamepad_set_vibration(global.playing_index, .5, .5);
 if (alarm[3]==-1) alarm[3]=20;
 audio_play_sound(snd_gamestart,10,false); 
 //instance_create(920,330,obj_Difficulty)
 instance_create(736,250,obj_Difficulty)

} 
 

if (Key_Weapon) &amp;&amp; !instance_exists(obj_Difficulty)
{
audio_play_sound(snd_PowerupB,10,false);
if (caps==true) 
caps=false;else caps=true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale=1.5; //was 1.2
x_scale=-450;
y_scale=-50;

if window_get_fullscreen()
{
offset=1.5*scale;
}
else
{
offset=1*scale;
}


if (alarm[1]&gt;-1) &amp;&amp; (alarm[1]&lt;2)//DISABLE STUFF AND SHOW LOADING
    {  
    global.gamestart=true;//edit
     if instance_exists(obj_CloudsA) obj_CloudsA.visible=false;
     if instance_exists(obj_CloudsB) obj_CloudsB.visible=false;
     if instance_exists(obj_CloudsC) obj_CloudsC.visible=false;
                    
    if instance_exists(obj_RolandStudios) obj_RolandStudios.visible=false;
    if instance_exists(obj_volume_Flare_A) obj_volume_Flare_A.visible=false;
    if instance_exists(obj_StageSelect_select) obj_StageSelect_select.visible=false;
    draw_set_alpha(1);
    gamepad_set_vibration(global.playing_index, 0, 0); 
    draw_rectangle_colour(0,0,1280*offset,720*offset,c_black,c_black,c_black,c_black,false);
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(fnt_Astron);
    draw_text_transformed(1180*offset,680*offset,"- Loading",.667*offset,.667*offset,0);
    }
else
{

draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_color(c_black);
draw_set_alpha(.75);
draw_set_font(fnt_Astron);
draw_text_transformed((orig_x+x_scale-2+10)*offset,(orig_y+y_scale-space-2+2)*offset,"Enter Name: ",.9*offset,.9*offset,0); 
if (shift_back&lt;4) shift_back+=.5;
draw_set_alpha(.1);


 
last_x=des_x;
last_y=des_y;

draw_set_alpha(1);
draw_set_color(c_white);
draw_set_font(fnt_Astron);
draw_text_transformed((orig_x+x_scale+10)*offset,(orig_y+y_scale-space-2)*offset,"Enter Name: ",.9*offset,.9*offset,0); 

var a;
var b;
var c;

cursor = string("");

for (c=0;c&lt;string_cursor;c+=1)
    {
    cursor+=string(" ");
    }
    
//FLASH INC ------


if (alarm[4]==-1) //was alarm[1]
{
    flash=1;
}
else
{
    if (flash&gt;=1) flash_count*=-1;
    if (flash&lt;=0) flash_count*=-1;
    flash+=8*flash_count;
}

draw_set_font(fnt_Arial_Big);   
draw_text_transformed_colour((orig_x+x_scale+210-2)*offset,(orig_y+y_scale-space+5+2)*offset,string(name)+"_",offset,offset,0,c_black,c_black,c_black,c_black,.75);
draw_text_transformed_colour((orig_x+x_scale+210)*offset,(orig_y+y_scale-space+5)*offset,string(name)+"_",offset,offset,0,image_blend,image_blend,image_blend,image_blend,flash);

draw_set_color(c_black); draw_set_alpha(.2);
draw_roundrect((orig_x+x_scale-20)*offset,(orig_y+y_scale-13)*offset, (orig_x+x_scale+323)*offset,(orig_y+y_scale+112)*offset,false);
draw_set_color(c_white); draw_set_alpha(1);
draw_roundrect((orig_x+x_scale-20)*offset,(orig_y+y_scale-13)*offset, (orig_x+x_scale+323)*offset,(orig_y+y_scale+112)*offset,true);

draw_set_halign(fa_center);
draw_set_valign(fa_center);

if (caps)
{
draw_text_transformed((orig_x+x_scale+0*space)*offset,(orig_y+y_scale+0*space)*offset,"A",offset,offset,0);
draw_text_transformed((orig_x+x_scale+1*space)*offset,(orig_y+y_scale+0*space)*offset,"B",offset,offset,0);
draw_text_transformed((orig_x+x_scale+2*space)*offset,(orig_y+y_scale+0*space)*offset,"C",offset,offset,0);
draw_text_transformed((orig_x+x_scale+3*space)*offset,(orig_y+y_scale+0*space)*offset,"D",offset,offset,0);
draw_text_transformed((orig_x+x_scale+4*space)*offset,(orig_y+y_scale+0*space)*offset,"E",offset,offset,0);
draw_text_transformed((orig_x+x_scale+5*space)*offset,(orig_y+y_scale+0*space)*offset,"F",offset,offset,0);
draw_text_transformed((orig_x+x_scale+6*space)*offset,(orig_y+y_scale+0*space)*offset,"G",offset,offset,0);
draw_text_transformed((orig_x+x_scale+7*space)*offset,(orig_y+y_scale+0*space)*offset,"H",offset,offset,0);
draw_text_transformed((orig_x+x_scale+8*space)*offset,(orig_y+y_scale+0*space)*offset,"I",offset,offset,0);

draw_text_transformed((orig_x+x_scale+0*space)*offset,(orig_y+y_scale+1*space)*offset,"J",offset,offset,0);
draw_text_transformed((orig_x+x_scale+1*space)*offset,(orig_y+y_scale+1*space)*offset,"K",offset,offset,0);
draw_text_transformed((orig_x+x_scale+2*space)*offset,(orig_y+y_scale+1*space)*offset,"L",offset,offset,0);
draw_text_transformed((orig_x+x_scale+3*space)*offset,(orig_y+y_scale+1*space)*offset,"M",offset,offset,0);
draw_text_transformed((orig_x+x_scale+4*space)*offset,(orig_y+y_scale+1*space)*offset,"N",offset,offset,0);
draw_text_transformed((orig_x+x_scale+5*space)*offset,(orig_y+y_scale+1*space)*offset,"O",offset,offset,0);
draw_text_transformed((orig_x+x_scale+6*space)*offset,(orig_y+y_scale+1*space)*offset,"P",offset,offset,0);
draw_text_transformed((orig_x+x_scale+7*space)*offset,(orig_y+y_scale+1*space)*offset,"Q",offset,offset,0);
draw_text_transformed((orig_x+x_scale+8*space)*offset,(orig_y+y_scale+1*space)*offset,"R",offset,offset,0);

draw_text_transformed((orig_x+x_scale+0*space)*offset,(orig_y+y_scale+2*space)*offset,"S",offset,offset,0);
draw_text_transformed((orig_x+x_scale+1*space)*offset,(orig_y+y_scale+2*space)*offset,"T",offset,offset,0);
draw_text_transformed((orig_x+x_scale+2*space)*offset,(orig_y+y_scale+2*space)*offset,"U",offset,offset,0);
draw_text_transformed((orig_x+x_scale+3*space)*offset,(orig_y+y_scale+2*space)*offset,"V",offset,offset,0);
draw_text_transformed((orig_x+x_scale+4*space)*offset,(orig_y+y_scale+2*space)*offset,"W",offset,offset,0);
draw_text_transformed((orig_x+x_scale+5*space)*offset,(orig_y+y_scale+2*space)*offset,"X",offset,offset,0);
draw_text_transformed((orig_x+x_scale+6*space)*offset,(orig_y+y_scale+2*space)*offset,"Y",offset,offset,0);
draw_text_transformed((orig_x+x_scale+7*space)*offset,(orig_y+y_scale+2*space)*offset,"Z",offset,offset,0);

draw_text_transformed((orig_x+x_scale+0*space)*offset,(orig_y+y_scale+3*space)*offset,"0",offset,offset,0);
draw_text_transformed((orig_x+x_scale+1*space)*offset,(orig_y+y_scale+3*space)*offset,"1",offset,offset,0);
draw_text_transformed((orig_x+x_scale+2*space)*offset,(orig_y+y_scale+3*space)*offset,"2",offset,offset,0);
draw_text_transformed((orig_x+x_scale+3*space)*offset,(orig_y+y_scale+3*space)*offset,"3",offset,offset,0);
draw_text_transformed((orig_x+x_scale+4*space)*offset,(orig_y+y_scale+3*space)*offset,"4",offset,offset,0);
draw_text_transformed((orig_x+x_scale+5*space)*offset,(orig_y+y_scale+3*space)*offset,"5",offset,offset,0);
draw_text_transformed((orig_x+x_scale+6*space)*offset,(orig_y+y_scale+3*space)*offset,"6",offset,offset,0);
draw_text_transformed((orig_x+x_scale+7*space)*offset,(orig_y+y_scale+3*space)*offset,"7",offset,offset,0);
draw_text_transformed((orig_x+x_scale+8*space)*offset,(orig_y+y_scale+3*space)*offset,"8",offset,offset,0);
draw_text_transformed((orig_x+x_scale+9*space)*offset,(orig_y+y_scale+3*space)*offset,"9",offset,offset,0);
}

if (!caps)
{
draw_text_transformed((orig_x+x_scale+0*space)*offset,(orig_y+y_scale+0*space)*offset,"a",offset,offset,0);
draw_text_transformed((orig_x+x_scale+1*space)*offset,(orig_y+y_scale+0*space)*offset,"b",offset,offset,0);
draw_text_transformed((orig_x+x_scale+2*space)*offset,(orig_y+y_scale+0*space)*offset,"c",offset,offset,0);
draw_text_transformed((orig_x+x_scale+3*space)*offset,(orig_y+y_scale+0*space)*offset,"d",offset,offset,0);
draw_text_transformed((orig_x+x_scale+4*space)*offset,(orig_y+y_scale+0*space)*offset,"e",offset,offset,0);
draw_text_transformed((orig_x+x_scale+5*space)*offset,(orig_y+y_scale+0*space)*offset,"f",offset,offset,0);
draw_text_transformed((orig_x+x_scale+6*space)*offset,(orig_y+y_scale+0*space)*offset,"g",offset,offset,0);
draw_text_transformed((orig_x+x_scale+7*space)*offset,(orig_y+y_scale+0*space)*offset,"h",offset,offset,0);
draw_text_transformed((orig_x+x_scale+8*space)*offset,(orig_y+y_scale+0*space)*offset,"i",offset,offset,0);

draw_text_transformed((orig_x+x_scale+0*space)*offset,(orig_y+y_scale+1*space)*offset,"j",offset,offset,0);
draw_text_transformed((orig_x+x_scale+1*space)*offset,(orig_y+y_scale+1*space)*offset,"k",offset,offset,0);
draw_text_transformed((orig_x+x_scale+2*space)*offset,(orig_y+y_scale+1*space)*offset,"l",offset,offset,0);
draw_text_transformed((orig_x+x_scale+3*space)*offset,(orig_y+y_scale+1*space)*offset,"m",offset,offset,0);
draw_text_transformed((orig_x+x_scale+4*space)*offset,(orig_y+y_scale+1*space)*offset,"n",offset,offset,0);
draw_text_transformed((orig_x+x_scale+5*space)*offset,(orig_y+y_scale+1*space)*offset,"o",offset,offset,0);
draw_text_transformed((orig_x+x_scale+6*space)*offset,(orig_y+y_scale+1*space)*offset,"p",offset,offset,0);
draw_text_transformed((orig_x+x_scale+7*space)*offset,(orig_y+y_scale+1*space)*offset,"q",offset,offset,0);
draw_text_transformed((orig_x+x_scale+8*space)*offset,(orig_y+y_scale+1*space)*offset,"r",offset,offset,0);

draw_text_transformed((orig_x+x_scale+0*space)*offset,(orig_y+y_scale+2*space)*offset,"s",offset,offset,0);
draw_text_transformed((orig_x+x_scale+1*space)*offset,(orig_y+y_scale+2*space)*offset,"t",offset,offset,0);
draw_text_transformed((orig_x+x_scale+2*space)*offset,(orig_y+y_scale+2*space)*offset,"u",offset,offset,0);
draw_text_transformed((orig_x+x_scale+3*space)*offset,(orig_y+y_scale+2*space)*offset,"v",offset,offset,0);
draw_text_transformed((orig_x+x_scale+4*space)*offset,(orig_y+y_scale+2*space)*offset,"w",offset,offset,0);
draw_text_transformed((orig_x+x_scale+5*space)*offset,(orig_y+y_scale+2*space)*offset,"x",offset,offset,0);
draw_text_transformed((orig_x+x_scale+6*space)*offset,(orig_y+y_scale+2*space)*offset,"y",offset,offset,0);
draw_text_transformed((orig_x+x_scale+7*space)*offset,(orig_y+y_scale+2*space)*offset,"z",offset,offset,0);

draw_text_transformed((orig_x+x_scale+0*space)*offset,(orig_y+y_scale+3*space)*offset,"0",offset,offset,0);
draw_text_transformed((orig_x+x_scale+1*space)*offset,(orig_y+y_scale+3*space)*offset,"1",offset,offset,0);
draw_text_transformed((orig_x+x_scale+2*space)*offset,(orig_y+y_scale+3*space)*offset,"2",offset,offset,0);
draw_text_transformed((orig_x+x_scale+3*space)*offset,(orig_y+y_scale+3*space)*offset,"3",offset,offset,0);
draw_text_transformed((orig_x+x_scale+4*space)*offset,(orig_y+y_scale+3*space)*offset,"4",offset,offset,0);
draw_text_transformed((orig_x+x_scale+5*space)*offset,(orig_y+y_scale+3*space)*offset,"5",offset,offset,0);
draw_text_transformed((orig_x+x_scale+6*space)*offset,(orig_y+y_scale+3*space)*offset,"6",offset,offset,0);
draw_text_transformed((orig_x+x_scale+7*space)*offset,(orig_y+y_scale+3*space)*offset,"7",offset,offset,0);
draw_text_transformed((orig_x+x_scale+8*space)*offset,(orig_y+y_scale+3*space)*offset,"8",offset,offset,0);
draw_text_transformed((orig_x+x_scale+9*space)*offset,(orig_y+y_scale+3*space)*offset,"9",offset,offset,0);
}
draw_set_halign(fa_left);
draw_set_valign(fa_center);

/*

draw_text_transformed((orig_x+x_scale,(orig_y+y_scale+0*space,"A      B      C      D      E      F      G      H      I       ");
draw_text_transformed((orig_x+x_scale,(orig_y+y_scale+1*space,"J      K      L      M      N      O      P      Q      R       ");
draw_text_transformed((orig_x+x_scale,(orig_y+y_scale+2*space,"S      T      U      V      W      X      Y      Z              ");
draw_text_transformed((orig_x+x_scale,(orig_y+y_scale+3*space,"0      1      2      3      4      5      6      7      8      9");

*/
//Draw Cursor

draw_set_blend_mode(bm_add);
    

    
    if (des_y&lt;y) des_y=des_y+11;
    if (des_y&gt;y) des_y=des_y-11;
    
    if (des_x&lt;x) des_x=des_x+11;
    if (des_x&gt;x) des_x=des_x-11;
    
    //LETTER SELECT CURSOR
    /*
    if !instance_exists(obj_Difficulty) //SHADOW
    {
    draw_set_color(c_black);
    draw_rectangle((last_x-5+shift_back+x_scale)*offset,(y_scale+last_y-8+shift_back*.5)*offset, (last_x+13+shift_back+x_scale)*offset,(y_scale+last_y+9+shift_back*.5)*offset,true);
    draw_line((last_x-5+shift_back+x_scale)*offset, (y_scale+last_y-8+shift_back*.5)*offset, (des_x-5+x_scale)*offset,(y_scale+des_y-8)*offset);
    draw_line((last_x+13+shift_back+x_scale)*offset,(y_scale+last_y-8+shift_back*.5)*offset,(des_x+13+x_scale)*offset,(y_scale+des_y-8)*offset);
    draw_line((last_x-5+shift_back+x_scale)*offset,(y_scale+last_y+9+shift_back*.5)*offset, (des_x-5+x_scale)*offset,(y_scale+des_y+9)*offset);
    draw_line((last_x+13+shift_back+x_scale)*offset,(y_scale+last_y+9+shift_back*.5)*offset, (des_x+13+x_scale)*offset,(y_scale+des_y+9)*offset);
    }
    */
    if !instance_exists(obj_Difficulty)
    {
    draw_set_color(c_white);
    draw_rectangle((x_scale+des_x-10)*offset,(y_scale+des_y-9)*offset, (x_scale+des_x+10)*offset,(y_scale+des_y+9)*offset,true);
    }
    
 
    
draw_set_blend_mode(bm_normal);

draw_set_font(fnt_LowGun);
draw_set_color(c_black); draw_set_alpha(.75);

draw_sprite_ext(spr_xbox_X,0,(orig_x+x_scale-1)*offset,(orig_y+y_scale+5*space+1)*offset,.45*offset,.45*offset,0,c_black,.75);
draw_text_transformed((orig_x+x_scale+16-1)*offset,(orig_y+y_scale+5*space+1)*offset,"- Del",.45*offset,.45*offset,0);

draw_sprite_ext(spr_xbox_A,0,(orig_x+x_scale+90-1)*offset,(orig_y+y_scale+5*space+1)*offset,.45*offset,.45*offset,0,c_black,.45);
draw_text_transformed((orig_x+x_scale+105-1)*offset,(orig_y+y_scale+5*space+1)*offset,"- Select",.45*offset,.45*offset,0);

draw_sprite_ext(spr_xbox_B,0,(orig_x+x_scale-1)*offset,(orig_y+y_scale+6*space+1)*offset,.45*offset,.45*offset,0,c_black,.75);
draw_text_transformed((orig_x+x_scale+16-1)*offset,(orig_y+y_scale+6*space+1)*offset,"- Back",.45*offset,.45*offset,0);

draw_sprite_ext(spr_xbox_Y,0,(orig_x+x_scale+90-1)*offset,(orig_y+y_scale+6*space+1)*offset,.45*offset,.45*offset,0,c_black,.75);
if (caps)
    draw_text_transformed((orig_x+x_scale+105-1)*offset,(orig_y+y_scale+6*space+1)*offset,"- caps OFF",.45*offset,.45*offset,0);
    else
    draw_text_transformed((orig_x+x_scale+105-1)*offset,(orig_y+y_scale+6*space+1)*offset,"- caps ON",.45*offset,.45*offset,0);

//draw_text_transformed((orig_x+x_scale+145-1)*offset,(orig_y+y_scale+125+1)*offset,"- Press [Start] to Continue -",.45*offset,.45*offset,0);



draw_set_color(c_white); draw_set_alpha(1);

draw_sprite_ext(spr_xbox_X,0,(orig_x+x_scale)*offset,(orig_y+y_scale+5*space)*offset,.45*offset,.45*offset,0,c_white,1);
draw_text_transformed((orig_x+x_scale+16)*offset,(orig_y+y_scale+5*space)*offset,"- Del",.45*offset,.45*offset,0);

draw_sprite_ext(spr_xbox_A,0,(orig_x+x_scale+90)*offset,(orig_y+y_scale+5*space)*offset,.45*offset,.45*offset,0,c_white,1);
draw_text_transformed((orig_x+x_scale+105)*offset,(orig_y+y_scale+5*space)*offset,"- Select",.45*offset,.45*offset,0);

draw_sprite_ext(spr_xbox_B,0,(orig_x+x_scale)*offset,(orig_y+y_scale+6*space)*offset,.45*offset,.45*offset,0,c_white,1);
draw_text_transformed((orig_x+x_scale+16)*offset,(orig_y+y_scale+6*space)*offset,"- Back",.45*offset,.45*offset,0);

draw_sprite_ext(spr_xbox_Y,0,(orig_x+x_scale+90)*offset,(orig_y+y_scale+6*space)*offset,.45*offset,.45*offset,0,c_white,1);
if (caps)
    draw_text_transformed((orig_x+x_scale+105)*offset,(orig_y+y_scale+6*space)*offset,"- caps OFF",.45*offset,.45*offset,0);
    else
    draw_text_transformed((orig_x+x_scale+105)*offset,(orig_y+y_scale+6*space)*offset,"- caps ON",.45*offset,.45*offset,0);

if (global.platform==0) //PC 
{
draw_sprite_ext(spr_xbox_start,0,(orig_x+x_scale+201-1)*offset,(orig_y+y_scale+128+1)*offset,.45*offset,.45*offset,0,c_black,.75);
draw_sprite_ext(spr_xbox_start,0,(orig_x+x_scale+201)*offset,(orig_y+y_scale+128)*offset,.45*offset,.45*offset,0,c_white,1);
draw_text_transformed((orig_x+x_scale+140)*offset,(orig_y+y_scale+125)*offset,"Press         to Continue",.55*offset,.55*offset,0);
}

if (global.platform==1) //XBOX ONLY
{
draw_sprite_ext(spr_xbox_start,0,(orig_x+x_scale+201-1)*offset,(orig_y+y_scale+128+1)*offset,.45*offset,.45*offset,0,c_black,.75);
draw_sprite_ext(spr_xbox_start,0,(orig_x+x_scale+201)*offset,(orig_y+y_scale+128)*offset,.45*offset,.45*offset,0,c_white,1);
draw_text_transformed((orig_x+x_scale+140)*offset,(orig_y+y_scale+125)*offset,"Press         to Continue",.55*offset,.55*offset,0);
}

if (global.platform==3)//PS4
{
draw_text_transformed((orig_x+x_scale+75)*offset,(orig_y+y_scale+125)*offset,"Press [Options Button] to Continue",.55*offset,.55*offset,0);
//draw_text_transformed((orig_x+x_scale+120)*offset,(orig_y+y_scale+125)*offset,"Press [Options] to Continue",.55*offset,.55*offset,0);
}




}    

if (curtain)
{
        draw_set_alpha(1);       
        draw_rectangle_colour(0,0,1280*offset,720*offset,c_black,c_black,c_black,c_black,false);
        draw_set_color(c_white);
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(backdrop_alpha)
{
    draw_rectangle_colour(0,0,1280,720,c_black,c_black,c_black,c_black,false);
}
if(backdrop_alpha&lt;.25) backdrop_alpha+=.01;
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
