<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cam_focus</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-40</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>snap=false;
locked=false;
absolute=false;
play_lock=false;

snap_x=0;
snap_y=0;

inc=10;
spd=0;

hold=0;
active=true;

enemy_locked=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (enemy_locked==false)
{
if instance_exists(obj_camera_offset)
    {
        obj_camera_offset.Seek=true;
        obj_camera_offset.Focus=false;
        obj_camera_offset.inc=inc;
        
        obj_camera_offset.x=x;
        obj_camera_offset.y=y;
            
        obj_camera_offset.offset_x=0;
        obj_camera_offset.offset_y=0;

        obj_camera_offset.speed=0; 
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x,y,par_HERO)
{
    if (active)
    {
        if(!snap) //ENABLE ONLY ONCE
        {    
        //ENABLE FOCUS -----------------------
        obj_camera_offset.Focus=true;
        obj_camera_offset.Seek=false;
        obj_camera_offset.offset_x=0;
        obj_camera_offset.offset_y=0;
        
        //DISABLE DUMMY NULL -----------------
        if instance_exists(obj_camera_offset_dummy)
            {
            obj_camera_offset.x=obj_camera_offset_dummy.x;
            obj_camera_offset.y=obj_camera_offset_dummy.y-obj_camera_offset_dummy.y_offset;
            obj_camera_offset_dummy.shift_y=0;
            obj_camera_offset_dummy.shift_x=0;
            }    
            
        //INITIALIZE SCREEN CRAWL------
        snap      = true;
        dir       = point_direction(view_xview,view_yview,x-640,y-360);
        view_dist = point_distance(view_xview,view_yview,x-640,y-360);
        abs_dist  = point_distance(obj_camera_offset.x,obj_camera_offset.y,x,y);
        dist = view_dist/abs_dist;
        
        
        //SET FOCUS POINT -------------
        obj_camera_offset.Focus_x=x;
        obj_camera_offset.Focus_y=y;
        obj_camera_offset.speed=0;
        }
    }
}
else
{
    if (snap)
    {
    snap=false;
    obj_camera_offset.Focus=false;
    obj_camera_offset.Seek=true;
    }
}

if (enemy_locked)
{
    if !place_meeting(x,y,par_Enemy) //ENEMEY DESTROYED ---------------------------
    {
        var inst 
        inst = instance_nearest(x,y,obj_Vertical_Shaft)
        
        if (play_lock==false)
        {
        with (inst) {locked=false; audio_play_sound(snd_Lock,10,false);}  //UNLOCK CLOSEST DOOR -----
        play_lock=true;
        }
             
        locked=false;
        obj_camera_offset.Seek=true;
        obj_camera_offset.Focus=false;
        
        if (point_distance(obj_camera_offset.x, obj_camera_offset.y, par_HERO.x, par_HERO.y)&lt;1)
        instance_destroy();
    }   
}

if (active)
{
    if (locked)
    {
        if instance_exists(obj_camera_offset)
        {
            obj_camera_offset.x=x;
            obj_camera_offset.y=y;
            obj_camera_offset.Seek=false;
            
            if (absolute)
                {
                    view_xview=obj_camera_offset.x-640;
                    view_yview=obj_camera_offset.y-360;
                }
            
            if (hold!=0)
            {
            if (alarm[0]=-1) alarm[0]=hold;
            }
        }
    
    }//END LOCKED
    else
    {
    if (snap)
    {  
    if instance_exists(obj_camera_offset)
    { 
    
    if (obj_camera_offset.x==obj_camera_offset.Focus_x) &amp;&amp; (obj_camera_offset.y==obj_camera_offset.Focus_y)
        {
        locked=true;
        obj_camera_offset.speed=0; 
        }                
    
    
    if (absolute) // MOVE WHOLE VIEW 
        {
    
                if (view_yview&lt;obj_camera_offset.y-360+dist*obj_camera_offset.speed) &amp;&amp; (view_yview&gt;obj_camera_offset.y-360-dist*obj_camera_offset.speed) 
                {    
                view_yview=obj_camera_offset.y-360;        
                }
                else
                {
                view_yview+=lengthdir_y(dist*obj_camera_offset.speed,dir); 
                }
                        
                        if (view_xview&lt;obj_camera_offset.x-640+dist*obj_camera_offset.speed) &amp;&amp; (view_xview&gt;obj_camera_offset.x-640-dist*obj_camera_offset.speed) 
                        {
                            view_xview=obj_camera_offset.x-640;
                        }
                        else
                        {
                            view_xview+=lengthdir_x(dist*obj_camera_offset.speed,dir);
                        }
                
            
        }   
        }//END CAMERA OFFSET EXISTS       
    
    }//END SNAP
    }//END NOT LOCKED


if instance_exists(obj_debug)
visible=true;
else
visible=false;

}//END ACTIVE
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_HERO">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (active)
{
    if(!snap) //ENABLE ONLY ONCE
    {    
    //ENABLE FOCUS -----------------------
    obj_camera_offset.Focus=true;
    obj_camera_offset.Seek=false;
    obj_camera_offset.offset_x=0;
    obj_camera_offset.offset_y=0;
    
    //DISABLE DUMMY NULL -----------------
    if instance_exists(obj_camera_offset_dummy)
        {
        obj_camera_offset.x=obj_camera_offset_dummy.x;
        obj_camera_offset.y=obj_camera_offset_dummy.y-obj_camera_offset_dummy.y_offset;
        obj_camera_offset_dummy.shift_y=0;
        obj_camera_offset_dummy.shift_x=0;
        }    
        
    //INITIALIZE SCREEN CRAWL------
    snap      = true;
    dir       = point_direction(view_xview,view_yview,x-640,y-360);
    view_dist = point_distance(view_xview,view_yview,x-640,y-360);
    abs_dist  = point_distance(obj_camera_offset.x,obj_camera_offset.y,x,y);
    dist = view_dist/abs_dist;
    
    
    //SET FOCUS POINT -------------
    obj_camera_offset.Focus_x=x;
    obj_camera_offset.Focus_y=y;
    obj_camera_offset.speed=0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha=1;
draw_self();

if (absolute)
{
    if (snap)
    {
    draw_set_color(c_white);
    draw_line(view_xview,view_yview,x-640,y-360)
    }
}
draw_set_color(c_white);
draw_set_font(fnt_Arial);
draw_set_halign(fa_left);
draw_set_valign(fa_center);

draw_text(x-200,y+50,"locked: "+string(locked));
draw_text(x-200,y+70,"snap: "+string(snap));
draw_text(x-200,y+90,"absolute: "+string(absolute));

draw_text(x-200,y+110,"enemy_locked "+string(enemy_locked));
draw_text(x-200,y+130,"inc: "+string(inc));
draw_text(x-200,y+150,"snap_x: "+string(snap_x));
draw_text(x-200,y+170,"snap_y: "+string(snap_y));
draw_text(x-200,y+190,"spd: "+string(spd));
draw_text(x-200,y+210,"hold: "+string(hold));
draw_text(x-200,y+230,"active: "+string(active));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,18</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
