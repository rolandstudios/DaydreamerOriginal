<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mod_AvitarFrame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move=0;
image_alpha=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen() offset=1.5 else offset=1;


if (obj_mod_01.finish==true) || (obj_mod_01.start==true)
{
    move+=0.1;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");

    Samples=500;
    
        
     if (obj_mod_01.finish==true)
     {
         image_alpha*=.89;
         if (image_alpha&lt;=.01) image_alpha=0; 
     }
     else
     {
      image_alpha*=1.19;
      if (image_alpha&lt;=0) image_alpha+=.01;     
     }
     
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,Samples);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
}
      
if (obj_WorldMap_ctl.world!=0) //NOT TUTORIAL
{
draw_sprite_ext(sprite_index,image_index,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_white,image_alpha);
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index,image_index,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_white,image_alpha*.25);
draw_set_blend_mode(bm_normal);
}

if (obj_WorldMap_ctl.world!=0) //NOT TUTORIAL
{
draw_set_halign(fa_right);
draw_set_font(fnt_Alien);
draw_text_transformed_color((x+70)*offset,(y+120)*offset,string(irandom_range(1000,9999999)),1.2*image_xscale*offset,1.2*image_yscale*offset,0,c_orange,c_orange,c_orange,c_orange,image_alpha);

boss="";

switch(obj_WorldMap_ctl.world)
{
case 0:  boss=""; break;
case 1:  boss="Mr Smiles"; break;
case 2:  boss="Doomflayer"; break;
case 3:  boss="Creeper"; break;
case 4:  boss="Razormouth"; break;
case 5:  boss="MechaSmiles"; break;
case 6:  boss="Grimeboy"; break;
case 7:  boss="Krarox"; break;
case 8:  boss="Rabies Rabbit"; break;
case 9:  boss="Mr Grin"; break;
case 10: boss="FlameFreak"; break;
case 11: boss="Dawnwing"; break;
case 12: boss="MegaBot"; break;
case 13: boss="PSY Dragon"; break;
case 14: boss="Sin"; break;
}

draw_set_font(fnt_Score);
draw_text_transformed_color((x+70)*offset,(y+130)*offset,string(boss),.4*offset,.4*offset,0,c_orange,c_orange,c_orange,c_orange,image_alpha); //was (y+130)
draw_set_font(fnt_Robot);
//draw_text_transformed_color((x+70)*offset,(y+150)*offset,"World: "+string(obj_WorldMap_ctl.world)+"-1",image_xscale*offset,image_yscale*offset,0,c_orange,c_orange,c_orange,c_orange,image_alpha);

draw_set_font(fnt_LowGun);
//DRAW SCORE BOX
draw_set_color(c_white);
draw_text_transformed((x+70)*offset,(y+150)*offset, "Rank",(1)*offset,(1)*offset,0); 
//draw_text_transformed((x+52-30)*offset,(y+170)*offset, "Rank:",(1)*offset,(1)*offset,0); 

for (boss=1;boss&lt;15;boss+=1)
{
//boss=obj_WorldMap_ctl.world;

 if (global.Boss_Score[boss,1]&gt;=0)
    {
    if (global.Boss_Score[boss,1]&gt;=100)
    time_score = string(round(global.Boss_Score[boss,1])); 
    else if (global.Boss_Score[boss,1]&gt;=10)
    time_score = "0"+string(round(global.Boss_Score[boss,1])); 
    else 
    time_score = "00"+string(round(global.Boss_Score[boss,1]));
    }else{time_score = "--";}
    
    if (global.Boss_Score[boss,2]&gt;=0)
    {
    if (global.Boss_Score[boss,2]&gt;=100)
    damage_score = string(global.Boss_Score[boss,2]); 
    else if (global.Boss_Score[boss,2]&gt;=10)
    damage_score = "0"+string(global.Boss_Score[boss,2]); 
    else 
    damage_score = "00"+string(global.Boss_Score[boss,2]);
    }else{damage_score = "--";}
    
    switch(global.Boss_Score[boss,3])
    {
    case -1: grade_score = "--"; break;
    case 0: grade_score = "--"; break;
    case 1: grade_score = "E"; break;
    case 2: grade_score = "D"; break;
    case 3: grade_score = "C"; break;
    case 4: grade_score = "B"; break;
    case 5: grade_score = "A"; break;
    case 6: grade_score = "S"; break;
    }
   
    B_score_x=120;
    B_score_y=100;
    
 if (boss==obj_WorldMap_ctl.world) 
    {    
        if (global.Boss_Score[boss,3]&lt;=0)
        {
        draw_set_color(c_white);
        draw_text_transformed((x+65)*offset,(y+180)*offset, time_score+" | "+damage_score+" | "+grade_score,(.7)*offset,(.7)*offset,0);  
        }
        else
        {
        draw_set_color(c_white);
        draw_text_transformed((x+49)*offset,(y+180)*offset, time_score+" | "+damage_score+" | ",(.7)*offset,(.7)*offset,0);   
        draw_set_color(c_yellow); draw_set_font(fnt_Score);
        draw_text_transformed((x+71)*offset,(y+184)*offset,grade_score,(.5)*offset,(.5)*offset,0);
        }
    }

    //draw_set_color(c_gray);
    //draw_text_transformed((B_score_x)*offset,(B_score_y+(15*(boss-1)))*offset, time_score+" | "+damage_score+" | "+grade_score,(.5)*offset,(.5)*offset,0);
    draw_set_color(c_white);
 
}   

}
 
world_name="";

switch(obj_WorldMap_ctl.world)
{
case 0:  world_name="World 00: Tutorial"; break;
case 1:  world_name="World 01: The Escape"; break;
case 2:  world_name="World 02: RoboCity"; break;
case 3:  world_name="World 05: Tunnel"; break;
case 4:  world_name="World 06: Caves"; break;
case 5:  world_name="World 07: Red Valley"; break;
case 6:  world_name="World 08: Factory"; break;
case 7:  world_name="World 09: Green Forest"; break;
case 8:  world_name="World 03: Grassy Hills"; break;
case 9:  world_name="World 04: Mushroom Forest"; break;
case 10: world_name="World 10: DarkCore pt.1"; break;
case 11: world_name="World 11: DarkCore pt.2"; break;
case 12: world_name="World 12: Sky City"; break;
case 13: world_name="World 13: Wavy Gravy"; break;
case 14: world_name="World 14: Deep Gravy"; break;
} 

draw_set_halign(fa_left);
draw_set_font(fnt_LowGun);
draw_text_transformed_color((60)*offset,(80)*offset,world_name,.9*offset,.9*offset,0,c_white,c_white,c_white,c_white,image_alpha);

if (global.world_clear[obj_WorldMap_ctl.world])
{
    draw_set_font(fnt_Score);
    draw_set_color(c_yellow);
    draw_text_transformed_color((60)*offset,(105)*offset,"(Completed)",.55*image_xscale*offset,.55*image_yscale*offset,0,c_yellow,c_yellow,c_yellow,c_yellow,image_alpha);
}

if (obj_mod_01.finish==true)
shader_reset();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
