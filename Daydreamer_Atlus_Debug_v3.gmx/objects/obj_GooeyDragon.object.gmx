<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy_Body</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,obj_GD_Bg_ctl);
audio_play_sound(snd_IndustrialRoar,10,false); 

if(master.spr_Wavlet_Blast==0)
{
master.num+=1;
master.spr_Wavlet_Blast=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Wavlet_Blast.png",39,0,1,57,73);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GD_Bite==0)
{
master.num+=1;
master.spr_GD_Bite=master.num;
global.sprite[master.num] = sprite_add(working_directory+"\Imports\spr_GD_Bite.png",34,0,1,0,149);//was 23
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

/* OLD DIVE
if(master.spr_GD_Dive==0)
{
master.num+=1;
master.spr_GD_Dive=master.num;
global.sprite[master.num] = sprite_add(working_directory+"\Imports\spr_GD_Dive.png",33,0,1,294,344);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}
*/

if(master.spr_GD_Dive==0)
{
master.num+=1;
master.spr_GD_Dive=master.num;
global.sprite[master.num] = sprite_add(working_directory+"\Imports\spr_GD_Dive.png",33,0,1,302,311);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GD_Leave==0)
{
master.num+=1;
master.spr_GD_Leave=master.num;
global.sprite[master.num] = sprite_add(working_directory+"\Imports\spr_GD_Leave.png",10,0,1,133,250);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GD_Scream==0)
{
master.num+=1;
master.spr_GD_Scream=master.num;
global.sprite[master.num] = sprite_add(working_directory+"\Imports\spr_GD_Scream.png",33,0,1,218,274);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GD_Stand==0)
{
master.num+=1;
master.spr_GD_Stand=master.num;
global.sprite[master.num] = sprite_add(working_directory+"\Imports\spr_GD_Stand.png",30,0,1,144,247);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

sprite_index=global.sprite[master.spr_GD_Leave];
image_speed=0;
image_index=9;


//Color Correction----
brightness=-.2; //brightness
contrast=0; //contrast
//--------------------

moveFinish=false;
scale=image_yscale;
brighten_up=true;
hp=500;
activate=false;
west_east = 0;
hsp=0;
vsp=0;
burn=false;
burns=0;
//image_speed=.5
damage=8*global.difficulty;;
moveChoose=true;
moveChoice=1;
type=1;
dive_type=0;
dives=0;
scream=0;
dive_select=false;

hero_hp=0;
hero_damage=0;

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (hp&lt;=0) 
{
global.world_clear[13]=1;
   
   //STEAM
   if (global.platform==0)
   {
   if !steam_get_achievement("ach_Defeat_Gooeydragon") 
        steam_set_achievement("ach_Defeat_Gooeydragon");
    }
    //XBOX ONE
    if (global.platform==1)
    {     
        scr_XboxOne_Achievement(19);                                       
    }
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(19);                                   
    } 
            
with instance_create(x,y,obj_CheckPoint){World=13.5;Boss=true;}


damage_bonus=round((125-hero_damage)*4);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=500;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus;    
    boss_num=13; 
    }
}
   
   
 
   
   
 

 if instance_exists(obj_LSD) //CHANGE LSD DISTORTION
            {
            obj_LSD.control=true;
            if (obj_LSD.var_wave_distortion&lt;50) obj_LSD.var_wave_distortion+=.5;
            //if (obj_LSD.var_wave_speed &gt; 1) obj_LSD.var_wave_speed-=.01;
            if (obj_LSD.evolution &gt; .04) obj_LSD.evolution-=.001;
            if (obj_LSD.frame_pull&gt;1.02) obj_LSD.frame_pull-=.005;
            }
   
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (burns&gt;0)
    {
        with instance_create(x,y,obj_burn_damage)
            {
            image_xscale=5;
            image_yscale=5;
            damage=1;
            }   
    burns-=1;
    alarm[9]=10/global.game_speed;
    }
    else
    {
    burn=false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with instance_create(x,y,obj_GooeyDragon_Chain_Blast_Control)
    {
            dist_min=450;
            dist_max=550;
            
            scale=1*1.5;
            
            scale_max=random_range(1,2)*1.5;
            max_casts=15;
            rate=4;
            
            if (obj_GooeyDragon.x&lt;par_HERO.x) 
            {
            cast_x=par_HERO.x+200;
            angle=360;
            }
            else
            {
            cast_x=par_HERO.x-200;
            angle=180;
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with instance_create(x,y,obj_GooeyDragon_Chain_Blast_Control)
{

if (obj_GooeyDragon.x&lt;par_HERO.x) 
    {
    cast_x=par_HERO.x+200;
    angle=360;
    }
    else
    {
    cast_x=par_HERO.x-200;
    angle=180;
    }
    
    dist_min=310;
    dist_max=340;
    
    max_casts=7;
    scale=1;
    scale_max=random_range(1,2);
    rate=5;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_EnemyHit_A</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>activate=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
moveFinish=false;
visible=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if (!activate)
{

if (alarm[1] &gt; 9) //COMING UP AND HOLDING
    {
    if (sprite_index==global.sprite[master.spr_GD_Leave])
        {
        if (image_index&lt;=0)
            {
            sprite_index=global.sprite[master.spr_GD_Stand];
            image_speed=.5;
            }
        }
    }

if (alarm[1] == 9) //LEAVING
    {
    sprite_index=global.sprite[master.spr_GD_Leave];
    image_speed=.5;
    image_index=0;
    }
    
    if (bbox_bottom&lt;view_yview+740) 
        {
        while (bbox_bottom&lt;view_yview+740) y+=1;
        }
}
else
{ 
//START ACTIVATE
 
  
    if(brighten_up) brightness=brightness+.001;
    if(!brighten_up) brightness=brightness-.001;
        
    if(brightness&lt;=-.25) brighten_up=true;
    if(brightness&gt;=-.15) brighten_up=false;
    
    
if (moveFinish)
{
    if (alarm[0]=-1) alarm[0]=irandom_range(25,100)/global.game_speed;
    image_speed=0;
    visible=false;
    image_xscale=0;
    image_yscale=0;
}
else
{
//Make Move Choice

if(moveChoose)
{
     n=irandom_range(1, 4);
            
     while(n==moveChoice)
        {
            n=irandom_range(1, 4);       
        }
           
     moveChoice=n;
     moveChoose=false;
     
     switch(irandom_range(1,2))
        {
        case 1: i=-1; break;
        case 2: i= 1; break;
        }
     
    //check direction
                  
        image_xscale = scale;
        image_yscale = scale;
    
    //Intialize Move
    switch(moveChoice)
    {
    case 1: //STAND
        audio_sound_pitch(snd_saberwhoosh,global.game_speed);
        audio_play_sound(snd_saberwhoosh,10,false);
        sprite_index=global.sprite[master.spr_GD_Leave];
        image_index=9;
        image_speed=-.5;
        state=1;
        hold=irandom_range(10,50);
        
        direction=0;
        image_angle = direction;
        
        x=par_HERO.x + i*irandom_range(300,400);
        y=view_yview+irandom_range(50,100);
        while(bbox_bottom&gt;room_height) {y-=1;}
        
    if (par_HERO.x &gt; x) {hsp =  10; image_xscale = abs(image_xscale); }
    if (par_HERO.x &lt; x) {hsp = -10; image_xscale = -abs(image_xscale); }
    break;
    
    case 2: //SCREAM
        audio_sound_pitch(snd_saberwhoosh,random_range(.8,1)*global.game_speed);
        audio_play_sound(snd_saberwhoosh,10,false);
        sprite_index=global.sprite[master.spr_GD_Leave];
        image_index=9;
        image_speed=-.5;
        state=1;
        scream=0;
        
        direction=0;
        image_angle = direction;
        x=par_HERO.x + i*irandom_range(300,400);
        y=view_yview+irandom_range(50,100);
        while(bbox_bottom&gt;room_height) {y-=1;}
        
    if (par_HERO.x &gt; x) {hsp =  10; image_xscale = abs(image_xscale); }
    if (par_HERO.x &lt; x) {hsp = -10; image_xscale = -abs(image_xscale); }
    
    //CREATE CHAIN BLAST

    if (irandom_range(1,4)!=2)
        {
            alarm[4]=45;
            alarm[5]=55;
        }
     
            
    break;
    
        case 3: //BITE
        audio_sound_pitch(snd_saberwhoosh,global.game_speed);
        audio_play_sound(snd_saberwhoosh,10,false);
        
        with instance_create(x,y,obj_Screen_Shake){max_range=4; hold=10;}
        
        sprite_index=global.sprite[master.spr_GD_Bite];
        image_index=0;
        image_speed=.5;
        
        //direction = point_direction(x, y, par_HERO.x, par_HERO.y)
        
        side=irandom_range(1,4);
        
        switch(side)
        {
        case 1: //Bottom
        x=par_HERO.x + i*irandom_range(300,500);
        y=room_height;
        direction=90;  
        image_angle = direction; 
        break;
        
        case 2: //Top
        x=par_HERO.x + i*irandom_range(300,500);
        y=0;
        direction=270;
        image_angle = direction; 
        break;
        
        case 3: //Left
        x=view_xview;
        y=par_HERO.y + i*irandom_range(300,300);
        if (y&gt;view_yview+620) y=view_yview+620;
        if (y&lt;view_yview+100) y=view_yview+100;
        direction=0;
        image_angle = direction; 
        break;
        
        case 4: //Right
        x=view_xview+1280;
        y=par_HERO.y + i*irandom_range(300,300);
        if (y&gt;view_yview+620) y=view_yview+620;
        if (y&lt;view_yview+100) y=view_yview+100;
        direction=180;
        image_angle = direction; 
        break;
        }
        
    if (par_HERO.x &gt; x) {hsp =  10; image_xscale = abs(image_xscale); }
    if (par_HERO.x &lt; x) {hsp = -10; image_xscale = -abs(image_xscale); }    
    break;
    
    
    
    case 4: //DIVE
        
        with instance_create(x,y,obj_Screen_Shake){max_range=4; hold=10;}
        sprite_index=global.sprite[master.spr_GD_Dive];
        image_index=0;
        image_speed=-.5; 
        dives=0;       
              
        image_xscale = scale*.9;
        image_yscale = scale*.9;
        
        dive_type=irandom_range(2,5);
        
        switch(dive_type)
        {
        case 1:
        image_angle = direction;
        x=par_HERO.x - i*irandom_range(100,200);
        y=view_yview+720;
        break;
        
        case 2: //BOTTOM LEFT RIGHT
        image_angle = 0;
        x=view_xview-200;
        y=view_yview+720;
        break;
              
        case 3: //TOP RIGHT LEFT 
        image_angle = 180;
        x=view_xview+1280+200;
        y=view_yview;
        break;
        
        case 4: //LEFT TOP DOWN
        image_angle = 270;
        x=view_xview;
        y=view_yview-200;
        break;
        
        case 5: //RIGHT DOWN TOP
        image_angle = 90;
        x=view_xview+1280;
        y=view_yview+720+200;
        break;
        }
        
        dive_select=false;
        audio_sound_pitch(snd_IndustrialRoar,random_range(1.2,1.4)*global.game_speed);
        audio_play_sound(snd_IndustrialRoar,10,false);
        audio_sound_pitch(snd_saberwhoosh,random_range(.8,1)*global.game_speed);
        audio_play_sound(snd_saberwhoosh,10,false);

    break;
    
    }//END INIT SWITCH
    
   
    
    
}//END IF MOVECHOOSE 

//Make Move

switch(moveChoice)
{
 case 1: //STAND
 if instance_exists(obj_LSD) //CHANGE LSD DISTORTION
            {
            obj_LSD.control=true;
            if (obj_LSD.var_wave_distortion&lt;50) obj_LSD.var_wave_distortion+=.5;
            if (obj_LSD.evolution &gt; .04) obj_LSD.evolution-=.001;
            if (obj_LSD.frame_pull&gt;1.02) obj_LSD.frame_pull-=.005;
            }
        
        if(state==1) //Enter
        {
        sprite_index=global.sprite[master.spr_GD_Leave];
        image_speed=-.5;
        if(round(image_index)&lt;=0) state=2;
        }
        
        if(state==2) //Hold
        {
        sprite_index=global.sprite[master.spr_GD_Stand];
        image_speed=.5;
        hold-=1;
        if(hold&lt;=0) 
            {
                state=3;
                sprite_index=global.sprite[master.spr_GD_Leave];
                image_index=0;
                image_speed=.5;
            }
        }
        
        if(state==3) //Leave
        {
        sprite_index=global.sprite[master.spr_GD_Leave];
        image_speed=.5;
        if(round(image_index)&gt;=sprite_get_number(sprite_index)-1)
            {
            moveFinish=true;
            }
        }
        
    
    if (bbox_bottom&lt;view_yview+740) 
        {
            if (state==2) 
            {
                if (bbox_bottom&lt;view_yview+800) 
                {
                state=3;
                sprite_index=global.sprite[master.spr_GD_Leave];
                image_index=0;
                image_speed=.5;
                }
            }
        while (bbox_bottom&lt;view_yview+740) y+=1;
        y+=par_HERO.vsp;
        }
    
    break;
    
    case 2: //SCREAM
    
    if instance_exists(obj_LSD) //CHANGE LSD DISTORTION
            {
            obj_LSD.control=true;
            if (obj_LSD.var_wave_distortion&lt;50) obj_LSD.var_wave_distortion+=.5;
            if (obj_LSD.evolution &gt;.04) obj_LSD.evolution-=.001;
            if (obj_LSD.frame_pull&gt;1.02) obj_LSD.frame_pull-=.005;
            }
    
        if(state==1) //Enter
        {
        sprite_index=global.sprite[master.spr_GD_Leave];
        image_speed=-.5;
        if(round(image_index)&lt;=0) 
            {
            state=2;
            sprite_index=global.sprite[master.spr_GD_Scream];
            image_speed=.5;
            image_index=0;
            }
        }
        
        if(state==2) //Scream
        {
        sprite_index=global.sprite[master.spr_GD_Scream];
        image_speed=.5;
        
        if (round(image_index)==16)
            {
                if !instance_exists(obj_Screen_Shake)
                {
                audio_sound_pitch(snd_AnrgryRoar,random_range(.8,1.2)*global.game_speed);
                audio_sound_pitch(snd_RoarDistant,global.game_speed);
                audio_play_sound(snd_AnrgryRoar,10,false);
                audio_play_sound(snd_RoarDistant,101,false);
                instance_create(x,y,obj_Aura_Ripple_stat);
                with instance_create(x,y,obj_Screen_Shake){max_range=12; hold=25;}
                }
            }
        if(round(image_index)&gt;=32) 
            {
                state=3;
                sprite_index=global.sprite[master.spr_GD_Leave];
                image_index=0;
                image_speed=.5;
            }
            
            
        if (image_index&gt;10) &amp;&amp; (image_index&lt;25)
                {
                
                
                if (scream&lt;35) scream +=.8; //was if (scream&lt;15) scream +=.5;
                
                if (par_HERO.x&lt;x) &amp;&amp; (sign(image_xscale)==-1) ||  (par_HERO.x&gt;x) &amp;&amp; (sign(image_xscale)==1)
                {
                with (par_HERO)
                    {
                    
                        if !place_meeting(x + (2+other.scream*other.image_xscale)*global.game_speed  , y -(2+other.scream*.5)*global.game_speed, par_wall) &amp;&amp; (par_HERO.climbledge==false)
                        {
                            x = x + (other.scream*other.image_xscale)*global.game_speed;                     
                            y = y - (other.scream*.5)*global.game_speed;
                        }
                    }
                }
                }
                
                
        }
        
        if(state==3) //Leave
        {
        sprite_index=global.sprite[master.spr_GD_Leave];
        image_speed=.5;
        if(round(image_index)&gt;=sprite_get_number(sprite_index)-1)
            {
            moveFinish=true;
            }
        }
          if (bbox_bottom&lt;view_yview+740) 
            {
            while (bbox_bottom&lt;view_yview+740) y+=1;
            y+=par_HERO.vsp;
            }
    break;
    
    case 3: //BITE
    if instance_exists(obj_LSD) //CHANGE LSD DISTORTION
            {
            obj_LSD.control=true;
            if (obj_LSD.var_wave_distortion&lt;50) obj_LSD.var_wave_distortion+=.5; 
            if (obj_LSD.evolution &gt; .04) obj_LSD.evolution-=.001;
            if (obj_LSD.frame_pull&gt;1.02) obj_LSD.frame_pull-=.005;
            }
            
        sprite_index=global.sprite[master.spr_GD_Bite];
        image_speed=.5;
        
        switch(side)
        {
        case 3:
        x=view_xview-50;
        break;
        
        case 4:
        x=view_xview+1330;
        image_xscale=scale;
        image_yscale=-scale;
        break;
        }
        
        if(round(image_index)&gt;=sprite_get_number(sprite_index)-1) 
            {
            moveFinish=true;
            image_yscale=scale;
            }
    break;
    
    case 4: //DIVE
        alarm[0]=100;
        
        if instance_exists(obj_LSD) //CHANGE LSD DISTORTION
            {
            obj_LSD.control=true;
            if (obj_LSD.var_wave_distortion&gt;25) obj_LSD.var_wave_distortion-=.5; //wAS 20
            //if (obj_LSD.var_wave_distortion&gt;20) obj_LSD.var_wave_distortion*=.95;
            if (obj_LSD.evolution &lt; .08) obj_LSD.evolution+=.001; //was
            //if (obj_LSD.evolution &lt; .08) obj_LSD.evolution*=1.05;
            if (obj_LSD.frame_pull&lt;1.1) obj_LSD.frame_pull+=.005; //was
            //if (obj_LSD.frame_pull&lt;1.1) obj_LSD.frame_pull*=1.05;
            }
        
        if (dives&gt;=3)
            {
            moveChoose=true;
            moveFinish=true;
            image_xscale = scale*.9;
            image_yscale = scale*.9;
            dives=0;
            }
        
            if (dive_select)
            {            
            g=irandom_range(2,5);
            while(g==dive_type) g=irandom_range(2,5);
            dive_type=g;
            
                switch(dive_type)
                    {
                    case 1:
                    image_angle = direction;
                    x=par_HERO.x - i*irandom_range(100,200);
                    y=view_yview+720;
                    break;
                    
                    case 2: //BOTTOM LEFT RIGHT
                    image_angle = 0;
                    x=view_xview+640+irandom_range(-640,640);
                    y=view_yview+720;
                    break;
                          
                    case 3: //TOP RIGHT LEFT 
                    image_angle = 180;
                    x=view_xview+640+irandom_range(-640,640);
                    y=view_yview;
                    break;
                    
                    case 4: //LEFT TOP DOWN
                    image_angle = 270;
                    x=view_xview;
                    y=view_yview+360+irandom_range(-360,360);
                    break;
                    
                    case 5: //RIGHT DOWN TOP
                    image_angle = 90;
                    x=view_xview+1280;
                    y=view_yview+360+irandom_range(-360,360);
                    break;
                    }
                    
                audio_sound_pitch(snd_IndustrialRoar,random_range(1.2,1.4)*global.game_speed);
                audio_play_sound(snd_IndustrialRoar,10,false);
                audio_sound_pitch(snd_saberwhoosh,random_range(.8,1)*global.game_speed);
                audio_play_sound(snd_saberwhoosh,10,false);
                if !instance_exists(obj_Screen_Shake)
                {
                with instance_create(x,y,obj_Screen_Shake){max_range=4; hold=10;}
                }
                dive_select=false;
            }
        
        switch(dive_type)
        {
        case 1: //SINGLE DIVE
        sprite_index=global.sprite[master.spr_GD_Dive];
        image_speed= .5*global.game_speed;
        
        if(round(image_index)&gt;=sprite_get_number(sprite_index)-1) 
            {
            moveChoose=true;
            moveFinish=true;
            dive_select=true;
            dives+=1;
            image_xscale = scale;
            image_yscale = scale;
            }
            
         if (bbox_bottom&lt;view_yview+740) 
            {
            while (bbox_bottom&lt;view_yview+740) y+=1;
            y+=par_HERO.vsp;
            }
        break;
        
        case 2: //CHAIN DIVE BOTTOM LEFT RIGHT
        sprite_index=global.sprite[master.spr_GD_Dive];
        image_speed= .5;
        
        if(image_index&gt;=sprite_get_number(sprite_index)-1) 
            {
            image_index=0;
            dives+=1;
            dive_select=true;
            }
            x+=15*global.game_speed;    
         
         if (bbox_bottom&lt;view_yview+740) 
            {
            while (bbox_bottom&lt;view_yview+740) y+=1;
            y+=par_HERO.vsp;
            }
            
        break;
        
        case 3: //CHAIN DIVE TOP RIGHT LEFT
        sprite_index=global.sprite[master.spr_GD_Dive];
        image_speed= .5;

        
        if(image_index&gt;=sprite_get_number(sprite_index)-1) 
            {
            dives+=1;
            dive_select=true;
            image_index=0;
            }
            x-=15*global.game_speed;
         
         if (y&gt;view_yview) 
            {
            while (y&gt;view_yview) y-=1;
            y+=par_HERO.vsp;
            }            
        break;
        
        case 4: //CHAIN LEFT TOP DOWN
        sprite_index=global.sprite[master.spr_GD_Dive];
        image_speed= .5;
        
        if(image_index&gt;=sprite_get_number(sprite_index)-1) 
            {
            image_index=0;
            dives+=1;
            dive_select=true;
            }
            y+=15*global.game_speed;
            
         
         if (x&gt;view_xview) 
            {
            while (x&gt;view_xview) x-=1;
            x+=par_HERO.hsp;
            }
        break;
        
        case 5: //CHAIN RIGHT DOWN TOP
        sprite_index=global.sprite[master.spr_GD_Dive];
        image_speed= .5;
        
        if(image_index&gt;=sprite_get_number(sprite_index)-1) 
            {
            y-=random_range(100,200);
            image_index=0;
            dives+=1;
            dive_select=true;
            }
            y-=15*global.game_speed;
            
         
         if (x&lt;view_xview+1280) 
            {
            while (x&lt;view_xview+1280) x+=1;
            x+=par_HERO.hsp;
            }
            
        break;
        
        }//END DIVE SWITCH
        
    break;                      
        
}//END SWITCH



//Confirm Movement 
if(moveChoice==4)
{
    x=x+hsp*global.game_speed;
}

}//END MOVE FINISH
    

image_speed=image_speed*global.game_speed;

}//END ACTIVATE    


if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_GooeyDragon_Health)
{
var shoot
shoot=instance_place(x,y,par_Shoot)
if (shoot==noone)
shoot=instance_nearest(x,y,par_Shoot)
if (shoot!=noone)
{
        if instance_exists(obj_Bomb) &amp;&amp; instance_exists(obj_Flame_02) ||  instance_exists(obj_Ray) &amp;&amp; instance_exists(obj_Flame_02)
        {
        if (alarm[3]==-1) 
            {
                if instance_exists(obj_Bomb)
                hp=hp-shoot.damage+obj_Bomb.damage;
                
                if instance_exists(obj_Ray)
                hp=hp-shoot.damage+obj_Ray.damage;        
            }
        }
        else
        {
            hp=hp-shoot.damage;
        }
        
        if (alarm[3] &lt;=-1)
        {
        alarm[3]=4; 
        image_blend = c_red;
        }

        if place_meeting(x,y,obj_Flame_02)
        {
            if (burn==false)
            {
            alarm[9]=10;
            burn=true;
            burns=15;
            }
        }

                        
        if (hp&lt;=0)
        {
        image_speed=0;
        hsp=0;
        image_blend = c_red;
        if (!instance_exists(obj_Explosion_A)) 
        {
           with instance_create(x,y,obj_Explosion_Boss)
            {
            boss_image_index=other.image_index;
            boss_sprite_index=other.sprite_index;
            boss_image_xscale=other.image_xscale;
            boss_image_yscale=other.image_yscale;
            boss_image_angle=other.image_angle;
            boss_x=other.x;
            boss_y=other.y;
            boss_image_angle=other.image_angle;
            stripes=150;
            die_color=c_white;//make_color_rgb(210,235,255);
            psy=true;
            rate=3;
            xplode=40;
            fade_speed=.01;
            spread=175;
            max_spread_x=2;
            depth=0;
            }
            
            //with instance_create(x,y,obj_AuraFlash){depth=-1;}
        }
        instance_destroy();
        if instance_exists (obj_GooeyDragon_Health)  with (obj_GooeyDragon_Health){instance_destroy();}
        }
} 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_text_color(100,200,"DiveType: "+string(dive_type),c_red,c_red,c_red,c_red,1);
draw_text_color(100,230,"moveChoice: "+string(moveChoice),c_red,c_red,c_red,c_red,1);
draw_text_color(100,260,"alarm[0]: "+string(alarm[0]),c_red,c_red,c_red,c_red,1);
draw_text_color(100,290,"dives: "+string(dives),c_red,c_red,c_red,c_red,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
draw_self();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>184,302</point>
    <point>302,302</point>
  </PhysicsShapePoints>
</object>
