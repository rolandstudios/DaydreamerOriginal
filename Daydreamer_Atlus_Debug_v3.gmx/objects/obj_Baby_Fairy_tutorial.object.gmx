<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.spr_FrameDrop_Glass==0)
{
master.num+=1;
master.spr_FrameDrop_Glass=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_FrameDrop_Glass.png",21,0,1,163,38);
}

if(master.spr_FrameDrop_Tech==0)
{
master.num+=1;
master.spr_FrameDrop_Tech=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_FrameDrop_Tech.png",21,0,1,163,38);
}

if(master.spr_Baby_Fairy_CAST==0)
{
master.num+=1;
master.spr_Baby_Fairy_CAST=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Baby_Fairy_CAST.png",13,0,1,51,67);
}

if(master.spr_Baby_Fairy_FLY==0)
{
master.num+=1;
master.spr_Baby_Fairy_FLY=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Baby_Fairy_FLY.png",25,0,1,42,61);
}


sprite_index=global.sprite[master.spr_Baby_Fairy_FLY];
tag = instance_create(x,y-100,obj_TextPromt_center);
with (tag){instance_destroy();}
spacing=1.5;
tag_line=0;
floatFactor=0;
floatup=true;
image_speed=.5;
max_part=200;
part=0;
follow=false;
dialog=0;
speak=false;
starting_y=y;
camera_snap=false;
linked=false;
set_queue=false;
potion=false;
quiting=false;
move=0;
Frame_index=0;
Frame_speed=.5;
Frame=false;
phase=0;
HighLight=false;
HighLight_type=1;
frame_y=280;
recharge=false;
frame_grow=0;
text_y_offset=0;
frame_x_offset=0;
created_weapon=false;

try_it=false;
try_it_type=1;
try_it_hero_x=0;
try_it_phase=0;
good=false;

protip=false;

dock_x=950;//was 900
dock_y=700;

with instance_create(x,y-50,obj_Flare_Glow_baby)
    {
    depth=other.depth+1;
    image_xscale=10;
    image_yscale=30;
    image_alpha=.02;
    }

msize = 10;
mx = ds_queue_create();
my = ds_queue_create();

                
switch (global.ctlstyle)
        {
        case 1:
        melee=spr_xbox_X;
        jump=spr_xbox_A;
        fire=spr_xbox_B;
        break;
        
        case 2:
        melee=spr_xbox_B;
        jump=spr_xbox_A;
        fire=spr_xbox_X;
        break
        
        case 3:
        melee=spr_xbox_X;
        jump=spr_xbox_B;
        fire=spr_xbox_A;
        break;
        }

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
sprite_delete(jump);
sprite_delete(fire);
sprite_delete(melee);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>protip=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>good=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HighLight=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tag_line=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> audio_play_sound(snd_Got_special_A,10,false);
 with instance_create(x-8*image_xscale,y,obj_FireFlare_red)
            { image_alpha=.25;}
 with instance_create(x,y,obj_Powerup_A_FULL){color=c_red;}
 sprite_index=global.sprite[master.spr_Baby_Fairy_CAST];
 image_index=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dialog+=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) instance_destroy();
else
{
if place_meeting(x,y,obj_V_Hallway_Right_top) depth=-50; else depth=-10;

if (set_queue)
{
    for(i=0;i&lt;msize;i+=1)
    {
    ds_queue_enqueue(mx,x+part);
    ds_queue_enqueue(my,par_HERO.y);
    }
set_queue=false;
}
if (floatup)  floatFactor-=1*global.game_speed;
if (!floatup) floatFactor+=1*global.game_speed;

if (floatFactor&gt;=16)  floatup=true;
if (floatFactor&lt;=-16) floatup=false;


if (follow)
{
tag_line=2;


    if (linked==true) //LINKED
    {
    
    if  (par_HERO.sprite_index==spr_Old_Olivia_Ladder_Climb) 
          {            
            x2=x;
            y2=y;
            
            var x1 = (ds_queue_dequeue(mx)-(part)+x)*.5;
            //x1 = (x+x1)*.5;
            x = (x+x1)*.5;
            var y1 = (ds_queue_dequeue(my)+ floatFactor -24+y)*.5;
            //y1 = (y+y1)*.5;
            y = (y+y1)*.5;
            
            if (par_HERO.ladder_climb&gt;=29) 
                {
                x=x2;
                y=y2;
                }                      
          }
         else
            { 
            x = ds_queue_dequeue(mx)-(part);
            y = ds_queue_dequeue(my)+ floatFactor -24;
            }
        if (par_HERO.sprite_index!=spr_Young_Olivia_Climb) &amp;&amp;  (par_HERO.sprite_index!=spr_Old_Olivia_Climb) &amp;&amp; (par_HERO.ladder==false)   
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
        }
        else
        {
            if (par_HERO.sprite_index!=spr_Young_Olivia_Climb) &amp;&amp;  (par_HERO.sprite_index!=spr_Old_Olivia_Climb)
            {
            ds_queue_enqueue(mx,obj_camera_offset.x);
            ds_queue_enqueue(my,obj_camera_offset.y);
            }
            else
            {
            ds_queue_enqueue(mx,par_HERO.ledge_x);
            ds_queue_enqueue(my,par_HERO.ledge_y);
            }   
        
        }
    }
    else  //Start NOT LINKED
    {
        part = par_HERO.x-x;
        
        if (abs(part)&lt;max_part)
        {
        if (par_HERO.x&lt;x)  x+=4;
        if (par_HERO.x&gt;x)  x-=4;
        }
        if ((par_HERO.y-24)&gt;y)  y+=4;
        if ((par_HERO.y-24)&lt;y)  y-=4;
          
        
        if ((par_HERO.y-24)&lt;y+4) &amp;&amp; ((par_HERO.y-24)&gt;y-4) 
            {
            linked=true;
            floatFactor = 0;
            floatup=true;
            part = par_HERO.x-x;
            
                for(i=0;i&lt;msize;i+=1)
                {
                    ds_queue_enqueue(mx,x+part);
                    ds_queue_enqueue(my,par_HERO.y);
                }
            }
        
    }//END NOT LINKED
    
   if (par_HERO.hsp!=0) 
   {
    if (!speak)
    {
        if (par_HERO.image_xscale== -1)
        {
        if (part&gt;-(max_part)) part -=2;
        if (x&gt;par_HERO.x) image_xscale=1;
        }
        else
        {
        if (part&lt;max_part) part +=2;
        if (x&lt;par_HERO.x) image_xscale=-1;
        }
     }   
    }

}//END FOLLOW
else //STANDING IDLE
{
    y = starting_y + floatFactor; 
    text_y_offset=25;   
    if (tag_line==0) //ADD ... TAG
        {
        tag = instance_create(x,y-100,obj_TextPromt_center);    
        alarm[2]=400;
        with (tag) 
            {
            promt=" ......... "; 
            hold=40;
            bubbles=true;
            bubbles_finish=false;
            } 
            
        tag_line=1;
        }
        
      
       
       
}

if (speak)
{
if (par_HERO.grounded)
{
confirm = false ;

if (master.paused==false)
{
if gamepad_button_check_pressed(global.playing_index, gp_face1) confirm=true;
if gamepad_button_check_pressed(global.playing_index, gp_face2) confirm=true;
if gamepad_button_check_pressed(global.playing_index, gp_face3) confirm=true;
if gamepad_button_check_pressed(global.playing_index, gp_face4) confirm=true;
if keyboard_check_pressed(vk_anykey) confirm=true;
}

text_y =(par_HERO.y-170);  
if (text_y-view_yview&lt;10) text_y=10+view_yview;
if (text_y-view_yview&gt;640) text_y=640+view_yview;
//text_x = x+80*image_xscale;
text_x = x+0*image_xscale;//Centered
//if (text_x-view_xview&lt;20) text_x=20+view_xview;
if (text_x-view_xview&lt;120) text_x=120+view_xview;//further right from screen
if (text_x-view_xview&gt;1100) text_x=1100+view_xview;

    if instance_exists(obj_TextPromt) 
    {
    obj_TextPromt.x=x;
    obj_TextPromt.y=y-100;;
    }
    
    if instance_exists(obj_TextPromt_center) 
    {
    obj_TextPromt_center.x=text_x;
    obj_TextPromt_center.y=text_y+text_y_offset;
    }


    
   potion=false;

    
switch(dialog)
{
case 1:
if (global.CutScene==false)
{

if instance_exists(obj_WeaponTank) &amp;&amp; (created_weapon==false)
{
with (obj_WeaponTank) instance_destroy();
}

if !instance_exists(obj_WeaponTank)
{
    var i
    i = instance_nearest(x,y,obj_Tutorial_Next);
    with instance_create(i.x,i.y,obj_WeaponTank)
        {
        type=1;
        change=false;
        }
        created_weapon=true;
}
}

global.CutScene=true;
camera_snap=true;


if !instance_exists(obj_TextPromt_center)
    {
    global.promt = 
    " See if you can get that #"+
    " Weapon Tank up there... " 
    text_y_offset=0;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
                
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    dialog+=1; Frame_index=0; 
    
    
    }
break;

case 2:
if instance_exists(obj_WeaponTank)
{
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt = 
    " [Jump] and then [Jump] again #"+
    " in midair to perform a #"+
    " [Double Jump].";
    
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
    speak=false;
    Frame_index=0;
    
    protip=true;
    alarm[5]=1000;
    }
}
else
{
//audio_play_sound(snd_die,10,false);
dialog=3;
}
break;
    
case 3:
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt = 
    " Very good! This weapon is #"+
    " your all-around basic shot. #"+
    " Its rapid fire is good for #"+
    " focusing on individual targets.";
    text_y_offset=-40;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
    {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    scr_confirm();
    
    if instance_exists(obj_TextPromt_center) 
    {
        with (obj_TextPromt_center){instance_destroy();}
    }
    
    instance_create(x,y,obj_Continue_header);
    global.CutScene=false;
    speak=false;
    Frame_index=0;
    var inst 
    inst = instance_nearest(x,y,obj_Vertical_Shaft)
    with (inst) {locked=false; audio_play_sound(snd_Lock,10,false);}  
    camera_snap=true;
    
    if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015
    
    if !instance_exists(obj_TextPromt_LG_Side)
        {
        txt = instance_create(x,y-300,obj_TextPromt_LG_Side);
        }
    else
    {
    audio_sound_pitch(snd_Mega_Select,global.game_speed);
    audio_play_sound(snd_Mega_Select,10,false);
    }
    
        protip=true;
        alarm[5]=1000;
        
    if instance_exists(txt) 
    {
        with (txt)
        {
        promt = "Try to [Fire] your weapon at various angles.#Using weapons requires [Yellow Energy].#It is possible to equip and switch between multiple weapons.";
        alarm[1]=-1;
        hold=500;
        gotit=true;
        copystring_pos = 0;
        copystring = "";
        next_letter=true
        header="Firing"
        fade=0;
        }
    }
    
    }
break;

case 4:
global.CutScene=true;
camera_snap=true;
if !place_meeting(x,y,obj_camera_snap_to)
{
if !instance_exists(obj_TextPromt_center)
    {
    global.promt =
    " When you reach large gaps #"+
    " like this one, you can use #"+
    " your [Warp] capability. ";
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    dialog+=1; Frame_index=0; 
    if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015
    
    if !instance_exists(obj_TextPromt_LG_Side)
        {
        txt = instance_create(x,y-300,obj_TextPromt_LG_Side);
        }
    else
    {
    audio_sound_pitch(snd_Mega_Select,global.game_speed);
    audio_play_sound(snd_Mega_Select,10,false);
    }
    HighLight_type=1;
    HighLight=true;
    alarm[3]=140;
                
        protip=true;
        alarm[5]=1000;
        
    if instance_exists(txt) 
    {
        with (txt)
        {
        promt = "Warping allows you to cover large horizontal distances.#Use [Warp] to teleport through enemies without taking damage.#Warping has a cooldown that recharges over time.";
        alarm[1]=-1;
        hold=500;
        gotit=true;
        copystring_pos = 0;
        copystring = "";
        next_letter=true
        header="Warping"
        fade=0;
        }
    }
    
    }
}
break;

case 5:
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
        if (global.platform==3)
        {
            global.promt = 
            " Simply pressing these buttons will [Warp] #"+
            " in the left and right directions, respectively. ";        
        }
        else
        {
            global.promt = 
            " Simply pressing these buttons will [Warp] #"+
            " in the left and right directions, respectively. ";  
        }
        
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
    speak=false;
    }
break;

case 6:
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt = 
    " Awesome!!! Get used to this... #" +
    " Warps can also be used as an evasive #"+
    " tactic... It comes in handy in Boss Battles! ";
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    protip=false;
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
    speak=false;
    if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015
    
    if !instance_exists(obj_TextPromt_LG_Side)
    {
        txt = instance_create(x,y-300,obj_TextPromt_LG_Side);
    }
    else
    {
    audio_sound_pitch(snd_Mega_Select,global.game_speed);
    audio_play_sound(snd_Mega_Select,10,false);
    }
    
        
        
    if instance_exists(txt) 
    {
        with (txt)
        {
        promt = "Wall kicking is like an additional jump that can help you reach#ledges that would otherwise be out of reach.#[Jump] while sliding down against a wall.";
        alarm[1]=-1;
        hold=500;
        gotit=true;
        copystring_pos = 0;
        copystring = "";
        next_letter=true
        header="Wall Kick"
        fade=0;
        }
    }
    
    }
break;

case 7:
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt = " Sometimes ledges are too high #" +
                   " for a [Double Jump]... In these cases, #"+
                   " a [Wall Kick] is necessary to gain #"+
                   " extra height. ";
    text_y_offset=-40;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    protip=false;
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    dialog+=1; 
    Frame_index=0; 
    }
break;


case 8:
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt = " Try a [Double Jump] and then [Jump] # again while against the wall for # an extra boost.";
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
    speak=false;
    Frame_index=0;
    
    protip=true;
    alarm[5]=1000;
    
    }
break;

case 9:
global.CutScene=true;
audio_sound_gain(snd_Quadropod_Laser, .1, 120);
if !instance_exists(obj_TextPromt_center)
    {
    global.promt = 
    " When the going gets tough... #"+
    " and you are taking a lot of damage, #"+
    " [Shield] up! ";
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    dialog+=1; 
    Frame_index=0; 
    
    HighLight_type=2;
    HighLight=true;
    alarm[3]=140;
    if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015
    
    if !instance_exists(obj_TextPromt_LG_Side)
    {
    txt = instance_create(x,y-300,obj_TextPromt_LG_Side);
    }
    else
    {
    audio_sound_pitch(snd_Mega_Select,global.game_speed);
    audio_play_sound(snd_Mega_Select,10,false);
    }
    
        protip=true;
        alarm[5]=1000;
        
    if instance_exists(txt) 
    {
        with (txt)
        {
        promt = "A [Shield] is a bubble of protection that can take five hits of damage. #Activating this will require you to be airborne and have full shield energy.#Like your warp cooldown, your shield energy will recharge over time.";
        alarm[1]=-1;
        hold=500;
        gotit=true;
        copystring_pos = 0;
        copystring = "";
        next_letter=true
        header="Jump Shield"
        fade=0;
        }
    }
    
    }
break;

case 10:

global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt = " Activate your [Shield] while airborne.# It is only temporary and has a cooldown,# so use it wisely.";
    text_y_offset=0;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
    speak=false;
    Frame_index=0;
    
    audio_sound_gain(snd_Quadropod_Laser, .4, 120);
    
    if alarm[1]=-1 alarm[1]=5;
        par_HERO.hp=100;
        par_HERO.shields=5;
    
    try_it_type=1;
    try_it=true;
    }
break;


//------------------------------------------------------------------------------------------

case 11:
audio_sound_gain(snd_Quadropod_Laser, .1, 120);
global.CutScene=true;

if !instance_exists(obj_TextPromt_center) //BABY BUBBLE ----------------------
    {
    global.promt =  " While on the ground, use the [Shield] to" +
                   "# [Parry] attacks. This will recharge your" +
                   "# [Yellow Energy], which can come in handy" +
                   "# in a pinch, but your timing must be spot on!";
    text_y_offset=-40;
    
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm) //|| !instance_exists(obj_TextPromt_center) //edit 032116
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
    speak=false;
       
     audio_sound_gain(snd_Quadropod_Laser, .4, 120);
        
        if alarm[1]=-1 alarm[1]=5;   
        Frame_index=0;
        par_HERO.hp=100;
        par_HERO.energy=0;
        par_HERO.recharge=800;
        par_HERO.shields=3; //edit from 4
        if instance_exists(obj_ForceField) par_HERO.shield=false; //edit
        
    
    // LOWER THIRDS ------------------------   
    
    if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015
     
    if !instance_exists(obj_TextPromt_LG_Side)
    {
    txt = instance_create(x,y-300,obj_TextPromt_LG_Side);
    }
    else
    {
    audio_sound_pitch(snd_Mega_Select,global.game_speed);
    audio_play_sound(snd_Mega_Select,10,false);
    }
    
    HighLight_type=2;
    HighLight=true;
    alarm[3]=140;
    
        protip=true;
        alarm[5]=1000;
        
    if instance_exists(txt) 
    {
        
        with (txt)
        {
        promt = "You can block attacks with the [Shield] on the ground.#"+
                "If timed correctly, you will [Parry] enemy projectiles#"+
                "and regain [Yellow Energy] for the weapon you have equipped.";
   
        alarm[1]=-1;
        hold=500;
        gotit=true;
        copystring_pos = 0;
        copystring = "";
        next_letter=true;
        header="Parry Shield";
        fade=0;
        }
    }
    }
    

break;

//-------------------------------------------------------------------------

case 12:
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt = " When you need support... use your [Summon] " +
                   "# ability! Notice it comes at a cost... " +
                   "# so you better stock up on PSY Matter. " ;
    text_y_offset=-20;
    
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    HighLight_type=4;
    HighLight=true;
    alarm[3]=140;
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) 
        {
        with (obj_TextPromt_center){instance_destroy();}
        }
    dialog+=1; 
    Frame_index=0;    
    
    if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015
    
    if !instance_exists(obj_TextPromt_LG_Side)
    {
    txt = instance_create(x,y-300,obj_TextPromt_LG_Side);
    }
    
    protip=true;
    alarm[5]=1000;
    
    if instance_exists(txt) 
    {
        with (txt)
        {
        promt = 
        "[Melee] at neutral will execute a quick lash."+
        "#[Melee] attacks can also be performed while"+
        "#crouching, looking up, or in the air."
        opac=.025;
        alarm[1]=-1;
        hold=500;
        gotit=true;
        Frame_index=0;
        copystring_pos = 0;
        copystring = "";
        next_letter=true
        header="Melee"
        fade=0;
        }
    }
    
    }
break;


case 13:
global.CutScene=true;

if !instance_exists(obj_TextPromt_center)
    {
    global.promt =   " You can also do close range attacks. " +
                    "# These [Melee] strikes may not be ideal, " +
                    "# but for these critters it should be sufficient. " ;
                    
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) 
        {
        with (obj_TextPromt_center){instance_destroy();}
        }
        
        global.CutScene=false;
        speak=false;
        par_HERO.recharge=100;
        Frame_index=0;
        
         try_it_type=3
         try_it = true;
         protip=true;
         alarm[5]=1000;
        
    }
break;


case 14:
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt =  " Now that you have some PSY Matter, " +
                   "# [Summon] your plucky pet to aid you " +
                   "# in battle!"; 
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    scr_confirm();
    Frame_index=0;
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
        speak=false;
       
        
    if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015
    
    if !instance_exists(obj_TextPromt_LG_Side)
    {
        txt = instance_create(x,y-300,obj_TextPromt_LG_Side);
    }
    else
    {
    audio_sound_pitch(snd_Mega_Select,global.game_speed);
    audio_play_sound(snd_Mega_Select,10,false);
    }
    
    protip=true;
    alarm[5]=1000;
    
    if instance_exists(txt) 
    {
    with (txt)
    {
    promt = "There are five Pets, each with a unique ability.#"+
            "Pets will follow you in battle and support you to the death#"+
            "or as long as you have PSY Matter for them to take.";

    opac=.025
    alarm[1]=-1;
    hold=500;
    gotit=true;
    copystring_pos = 0;
    copystring = "";
    next_letter=true
    header="Summon"
    fade=0;
    }
    }
        
    
    //MANDITORY SUMMON
    try_it_type=5;
    try_it=true;
    }
break;

case 15:
camera_snap=true;
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt =  " Get that [Homing Shot] up in that" +
                   "# corner there, it might be useful. " +
                   "# You can equip up to four weapons.";
                
    text_y_offset=-20;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    Frame_index=0;
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
    Frame_index=0;
    speak=false;
    }
break;

case 16:
if (par_HERO.weapon_A==5) ||  (par_HERO.weapon_B==5) ||  (par_HERO.weapon_C==5) ||  (par_HERO.weapon_D==5)  
{
global.CutScene=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt =  " Try to knock out that turret above. "; 
    
    text_y_offset=0;           
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    dialog+=1; 
    Frame_index=0;     
    }
}
else
{
    dialog=17;
    speak=false;
    //if instance_exists(obj_camera_snap_to) {with(obj_camera_snap_to){instance_destroy();}}
    obj_camera_offset.Seek=true;
    obj_camera_offset.Focus=false;
}
break;

case 17:
global.CutScene=true;
camera_snap=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt =  " To use [Homing Shot], hold down [Fire], " +
                   "# then move the crosshairs over your enemies "+
                   "# and release. Simple as that...";   
    text_y_offset=-20;     
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    Frame_index=0;
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
        speak=false;
    }
break;

case 18:
global.CutScene=true;
camera_snap=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt =  " And now for your most incredible ability..." +
                    "# The [Time Warp].";

                           
    text_y_offset=0;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    Frame_index=0;
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
        speak=false;
    if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015
    
    if !instance_exists(obj_TextPromt_LG_Side)
        {
        txt = instance_create(x,y-300,obj_TextPromt_LG_Side);
        }
    else
    {
    audio_sound_pitch(snd_Mega_Select,global.game_speed);
    audio_play_sound(snd_Mega_Select,10,false);
    }
    
        protip=true;
        alarm[5]=1000;
        try_it_type=7;
        try_it=true;
    
    if instance_exists(txt) 
    {
    with(txt)
    {
        promt = "Temporarily slows down time.#Your clock meter will recharge over time.";
        opac=.025
        alarm[1]=-1;
        hold=500;
        gotit=true;
        copystring_pos = 0;
        copystring = "";
        next_letter=true
        header="Time Warp"
        fade=0;
        }    
    }
        
    HighLight_type=3;
    HighLight=true;
    alarm[3]=140;
    
    }
break;

case 19:
global.CutScene=true;
camera_snap=true;
if !instance_exists(obj_TextPromt_center)
    {
    global.promt =  " Well I think that's enough to get you " +
                    "# started... Till we meet again! ";
                           
    text_y_offset=0;
    with instance_create(text_x,text_y+text_y_offset,obj_TextPromt_center)
        {
        bubbles=true;
        bubbles_finish=false;
        hold=500;
        gotit=true;
        }
    }
    
    if (confirm)
    {
    Frame_index=0;
    scr_confirm();
    if instance_exists(obj_TextPromt_center) with (obj_TextPromt_center){instance_destroy();}
    global.CutScene=false;
        speak=false;
        quiting=true;
    }
break;

}//END SWITCH

if (par_HERO.x&gt;x) 
    {
    if (part&lt;max_part) part +=4;
    image_xscale = -1; 
    }
    else
    {
    image_xscale = 1; 
    if (part&gt;-(max_part)) part -=4;
   
    }
    
}//END HERO GROUNDED   
}//END SPEAK


if place_meeting(x,y,obj_camera_snap_to)
{
    if (camera_snap)
    {
        var inst;
        inst = instance_place(x, y, obj_camera_snap_to);
        if inst != noone
        {    
            with (inst) {active=true;}
        } 
        camera_snap=false;
    }
}

if (sprite_index==global.sprite[master.spr_Baby_Fairy_CAST])
{
if(image_index&gt;=12) sprite_index=global.sprite[master.spr_Baby_Fairy_FLY];
}


if (par_HERO.hp&lt;=25)
{
var potionless=true;  
var spacefree=false;
var space_a=0;
var space_b=0;  
var aa;
var bb;
    
    for (aa=0;aa&lt;=global.rows;aa+=1) //CHECK INVENTORY FOR RESSURECTION----
    {
    for (bb=0;bb&lt;=global.columns;bb+=1)
    {
        if (global.Inventory[aa,bb]==1) || (global.Inventory[aa,bb]==2)
            {
            potionless=false; 
            }
            
        if (global.Inventory[aa,bb]==0) 
            {
            if (spacefree==false)
                {
                space_a=aa;
                space_b=bb;
                }
                spacefree=true;
            }
   }
   }
    
    if (potionless) &amp;&amp; (spacefree) &amp;&amp; (global.CutScene==false)
    {
            if !instance_exists(obj_RedEnergy) //&amp;&amp; (!potion)
            {
            text_y =(par_HERO.y-170);  
            if (text_y-view_yview&lt;10) text_y=10+view_yview;
            if (text_y-view_yview&gt;640) text_y=640+view_yview;
            text_x = x+80*image_xscale;
            if (text_x-view_xview&lt;20) text_x=20+view_xview;
            if (text_x-view_xview&gt;1100) text_x=1100+view_xview;
            
             
                tag = instance_create(x,y-100,obj_TextPromt_center);
                with (tag)
                     {
                     x=other.x;
                     y=other.y;
                     a=other.x;
                     b=other.y-150;
                     promt =  " Your health is getting low!!!! " +
                               "# Take this. Open your [Inventory] "+
                               "# to use it. ";
                     bubbles=true;
                     bubbles_finish=false;
                     hold=500;
                     gotit=false;
                     }
                
            //if instance_exists(par_HERO) 
                //{
                //if !instance_exists(obj_Inventory) instance_create(x,y,obj_Inventory);
                //par_HERO.Key_Select=true;
                //}
            
            alarm[1]=5;
            //alarm[2]=150;
            global.Inventory[space_a,space_b]=2;
            potion=true;
            }   
    }
}

if instance_exists(tag)
      {
      with (tag)
        {
            a=other.x;
            b=other.y-150;
            x=other.x+10*other.image_xscale;
            y=other.y-150+other.text_y_offset;
        }  
      } 

image_speed=.5*global.game_speed;
//RECHARGE WARPS


if (dialog==10) //was 10 //JUMP SHIELD MANAGE
{
          
     if (par_HERO.shields&lt;5) &amp;&amp; !instance_exists(obj_ForceField)
        {
        if alarm[1]=-1 alarm[1]=5;   
        Frame_index=0;
        par_HERO.shields=5;
        HighLight_type=2;
        HighLight=true;
        alarm[3]=50;
        }
        if instance_exists(obj_ForceField)
        {
        par_HERO.shields=0;
        }
}

if (dialog==11) //PARRY SHIELD MANAGE
{
     if (par_HERO.shields&gt;3)par_HERO.shields=3;
          
     if (par_HERO.shields&lt;=0)
        {
        if alarm[1]=-1 alarm[1]=5;   
        Frame_index=0;
        par_HERO.shields=3;
        HighLight_type=2;
        HighLight=true;
        alarm[3]=50;
        }
}


if (dialog==14) //GIVE SOME $$$$$$$$$$$$$$$$
{                   
        if (par_HERO.money&lt;20)
        {
        if alarm[1]=-1 alarm[1]=5;   
        Frame_index=0;
        par_HERO.money+=20;
        HighLight_type=4;
        HighLight=true;
        alarm[3]=50;
        }      
} 

if (try_it==true) //MANDITORY PLAYER COMPLIANCE
{  
par_HERO.warping=false; //edit 031816
  
      switch(try_it_type) 
      {
              case 1: //JUMP SHIELD
              par_HERO.lock_movement=true;
              par_HERO.x=try_it_hero_x;
              
              if instance_exists(obj_ForceField)
                {
                 if (obj_ForceField.hp&gt;1) 
                    {
                    try_it=false; 
                    good=true;
                    alarm[4]=30;
                    protip=false;
                    audio_sound_pitch(snd_Cine_Bash,random_range(1.1,1.2));
                    audio_play_sound(snd_Cine_Bash,10,false);
                    audio_play_sound(snd_Got_special_A,10,false);
                    }
                }
                else
                {
                protip=true; //edit 040616
                }
              
              break;
              
              case 3: //MELEE
              par_HERO.lock_movement=true;
              par_HERO.x=try_it_hero_x;
              
              if (par_HERO.sprite_index==spr_Old_Olivia_Melee) &amp;&amp; instance_exists(obj_HERO_Melee)
                { 
                    good=true;
                    alarm[4]=30;
                    protip=true;
                    alarm[5]=1000;
                    try_it_type=4;
                    audio_sound_pitch(snd_Cine_Bash,random_range(1.1,1.2));
                     audio_play_sound(snd_Cine_Bash,10,false);
                    audio_play_sound(snd_Got_special_A,10,false);                    
                }              
              break;
              
              case 4: //SPIN ATTACK
              par_HERO.lock_movement=true;
              par_HERO.x=try_it_hero_x;
              
              if (par_HERO.sprite_index==spr_Old_Olivia_Spin_Attack)
                {
                    try_it=false; 
                    good=true;
                    alarm[4]=30;
                    audio_sound_pitch(snd_Cine_Bash,random_range(1.1,1.2));
                     audio_play_sound(snd_Cine_Bash,10,false);
                    audio_play_sound(snd_Got_special_A,10,false);  
                    protip=false;                  
                }              
              break;
              
              case 5: //SUMMON
              par_HERO.lock_movement=true;
              par_HERO.x=try_it_hero_x;
              
              if instance_exists(obj_FuzzyTurtle) || instance_exists(obj_GingerPup) || instance_exists(obj_MeowCat) || instance_exists(obj_Duck) || instance_exists(obj_Weasel)
                {
                    try_it=false; 
                    good=true;
                    alarm[4]=30;
                    protip=false;
                    //audio_sound_pitch(snd_Cine_Bash,random_range(1.1,1.2));
                     //audio_play_sound(snd_Cine_Bash,10,false);
                    audio_play_sound(snd_Got_special_A,10,false);                    
                }              
              break;
              
              
              case 7: //TIME WARP
              par_HERO.lock_movement=true;
              par_HERO.x=try_it_hero_x;
              
              if (global.game_speed&lt;1)
                {
                    try_it=false; 
                    good=true;
                    alarm[4]=30;
                    protip=false;
                    audio_sound_pitch(snd_Cine_Bash,random_range(1.1,1.2));
                     audio_play_sound(snd_Cine_Bash,10,false);
                    audio_play_sound(snd_Got_special_A,10,false);
                    audio_play_sound(snd_Got_special_A,10,false);                    
                }              
              break;
     }
}
else
{
 try_it_hero_x=par_HERO.x;
 par_HERO.lock_movement=false; 
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_HERO">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dialog==0)
{

if instance_exists(obj_TextPromt_LG_Side){with obj_TextPromt_LG_Side{instance_destroy();}} //edit 11/5/2015

    if (!speak)
    {
    /*
        if !instance_exists(obj_TextPromt_LG_Side)
        {
        txt = instance_create(x,y-300,obj_TextPromt_LG_Side);   
        with (txt)
        {
        promt = "Press (A) to Jump#Press (A) and (A) again to Double Jump"
        hold=500;
        copystring_pos = 0;
        copystring = "";
        next_letter=true;
        header="Jumping"
        fade=0;
        }    
        }
    */
    if (alarm[0]=-1) alarm[0]=50; speak=true;        
    }
}

if (!follow)
{
    if instance_exists(obj_TextPromt_center) 
        with (obj_TextPromt_center) {instance_destroy();}
}
follow=true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Frame=false; //040616
protip=false; //040616
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.spr_FrameDrop_Glass==0)
{
master.num+=1;
master.spr_FrameDrop_Glass=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_FrameDrop_Glass.png",21,0,1,163,38);
}

if(master.spr_FrameDrop_Tech==0)
{
master.num+=1;
master.spr_FrameDrop_Tech=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_FrameDrop_Tech.png",21,0,1,163,38);
}

if(master.spr_Baby_Fairy_CAST==0)
{
master.num+=1;
master.spr_Baby_Fairy_CAST=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Baby_Fairy_CAST.png",13,0,1,51,67);
}

if(master.spr_Baby_Fairy_FLY==0)
{
master.num+=1;
master.spr_Baby_Fairy_FLY=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Baby_Fairy_FLY.png",25,0,1,42,61);
}
if (room==rm_Tutorial_B) dialog=11;

sprite_index=global.sprite[master.spr_Baby_Fairy_FLY];

Frame=false; //040616
protip=false; //040616
/*
    if instance_exists(obj_TextPromt_LG_Side)
    {
        with (obj_TextPromt_LG_Side){instance_destroy();}
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{
offset=1.5;
}
else
{
offset=1;
}

if (frame_grow&gt;0)
{
dock_x=950;
dock_y=700;

//PRO-TIP FRAME -------------------------------
draw_set_alpha(.75);
draw_roundrect_colour((dock_x-40+frame_x_offset)*offset,(dock_y-65)*offset,(dock_x+frame_grow+frame_x_offset)*offset,(dock_y-15)*offset,c_black,c_black,false);
draw_set_alpha(.5);
draw_roundrect_colour((dock_x-40+frame_x_offset)*offset,(dock_y-65)*offset,(dock_x+frame_grow+frame_x_offset)*offset,(dock_y-15)*offset,c_white,c_white,true);
draw_set_alpha(1);
}
//---------------------------------------------

//COLOR CORRECTION
shift_y=20;
b=0;
c=.02;
draw_set_color(c_white);

pad_def(global.gp_D_Left)
pad_def(global.gp_D_Right)
pad_def(global.gp_D_Up)
pad_def(global.gp_D_Down)

pad_def(global.gp_Jump)
pad_def(global.gp_Melee)
pad_def(global.gp_Fire)
pad_def(global.gp_Weapon)

pad_def(global.gp_Left_Shoulder)
pad_def(global.gp_Right_Shoulder)
pad_def(global.gp_Left_Trigger)
pad_def(global.gp_Right_Trigger)

pad_def(global.gp_Pause)
pad_def(global.gp_Select)
pad_def(global.gp_Pet_L)
pad_def(global.gp_Pet_R)      

if instance_exists(obj_TextPromt_center) //IF FAIRY BUBBLE EXISTS
{

    if (speak)
    {
    
    //DRAW FRAME --------------------------
    if (Frame)
    {
    shader_set(shd_bright_contrast);
    shader_set_uniform_f(global.brightness_amount,b);
    shader_set_uniform_f(global.contrast_amount,c)
    draw_set_blend_mode(bm_normal); 
    draw_sprite_ext(global.sprite[master.spr_FrameDrop_Tech],Frame_index,(obj_TextPromt_center.a)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.667*offset,.667*offset,0,c_white,1);
    draw_sprite_ext(global.sprite[master.spr_FrameDrop_Tech],Frame_index,(obj_TextPromt_center.a)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.667*offset,.667*offset,0,c_white,1);
    shader_reset();
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(global.sprite[master.spr_FrameDrop_Glass],Frame_index,(obj_TextPromt_center.a)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.667*offset,.667*offset,0,c_white,.2);
    draw_set_blend_mode(bm_normal);    
    
    if (Frame_index&lt;=9)  {Frame_speed=.5*global.game_speed;} 
    else
    {
    if (Frame_index&lt;=10) {Frame_speed=.5*global.game_speed;} 
    }
    
    if (Frame_index&gt;=20) {Frame_speed=-.5*global.game_speed;}
    Frame_index+=Frame_speed;
    if (Frame_index==1) {audio_sound_pitch(snd_HitMetal,1.4); audio_play_sound(snd_HitMetal,10,false);}
    }
    //--------------------------------------
    
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left) //edit 031916
    
        Frame=false;
        draw_set_font(fnt_Arial);
        draw_set_alpha(1);
        
        switch(dialog) //Draw Move Icons
        {
        case 2:
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(pad_def(global.gp_Jump),0,(obj_TextPromt_center.a-80+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,(.45)*offset,(.45)*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+25)*offset,(obj_TextPromt_center.b-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Jump),0,(obj_TextPromt_center.a-80+50)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+65)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Double Jump]" ,offset,offset,0);
        }
        Frame=true;
        break;
        
        case 3:
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(pad_def(global.gp_Fire),0,(obj_TextPromt_center.a-40+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-40+25)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Fire]" ,offset,offset,0);
        }
        Frame=true;
        break;
        
        case 5:
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(pad_def(global.gp_Left_Trigger),0,(obj_TextPromt_center.a-170+110)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-170+130)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"or" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Right_Trigger),0,(obj_TextPromt_center.a-170+160)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);       
        draw_text_transformed((obj_TextPromt_center.a-170+180)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Warp]" ,offset,offset,0);
        }
        Frame=true;
        break;
        
        case 8:
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(spr_xbox_Arrow,0,(obj_TextPromt_center.a-80+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.4*offset,.5*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+25)*offset,(obj_TextPromt_center.b-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Jump),0,(obj_TextPromt_center.a-80+50)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+63)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Wall Kick]",offset,offset,0);
        }
        Frame=true;
        break;
        
        case 10:
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(pad_def(global.gp_Jump),0,(obj_TextPromt_center.a-70+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-70+25)*offset,(obj_TextPromt_center.b-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Right_Shoulder),0,(obj_TextPromt_center.a-70+58)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-70+85)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Shield]" ,offset,offset,0);
        }
        Frame=true;
        break;
        
        case 11:
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(pad_def(global.gp_Right_Shoulder),0,(obj_TextPromt_center.a-35+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-35+34)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Parry]" ,offset,offset,0);
        }
        Frame=true;
        
        break;
        
        case 12:
        if (Frame_index&gt;=9)
        {
        var m
        m = instance_furthest(x,y,obj_Monies_small)
        draw_sprite_ext(pad_def(global.gp_Left_Shoulder),0,(obj_TextPromt_center.a-80+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+34)*offset,(obj_TextPromt_center.b-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(spr_Monies_Single,m.image_index,(obj_TextPromt_center.a-80+67)*offset,(obj_TextPromt_center.b-shift_y-9)*offset,.6,.6,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+76)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Summon]" ,offset,offset,0);
        }
        Frame=true;
        break;
        
        case 13:
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(pad_def(global.gp_Melee),0,(obj_TextPromt_center.a-40+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-40+25)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Melee]" ,offset,offset,0);
        }
        Frame=true;
        break;
        
        case 15:
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(pad_def(global.gp_Weapon),0,(obj_TextPromt_center.a-80+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+25)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Change Weapon]" ,offset,offset,0);
        }
        Frame=true;
        break;
        
        case 18:
        
        if (Frame_index&gt;=9)
        {
        draw_sprite_ext(spr_xbox_Arrow,0,(obj_TextPromt_center.a-80+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.4*offset,.5*offset,90,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+25)*offset,(obj_TextPromt_center.b-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Weapon),0,(obj_TextPromt_center.a-80+50)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+63)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Time Warp]",offset,offset,0);
        }
        Frame=true;
        break;
        }
     
         
   }//END SPEAK
    
      
        if (potion) &amp;&amp; (Frame)
            {
            text_y =(par_HERO.y-170);  
            if (text_y-view_yview&lt;10) text_y=10+view_yview;
            if (text_y-view_yview&gt;640) text_y=640+view_yview;
            text_x = x+80*image_xscale;
            if (text_x-view_xview&lt;20) text_x=20+view_xview;
            if (text_x-view_xview&gt;1100) text_x=1100+view_xview;
            
                obj_TextPromt_center.a=text_x;
                obj_TextPromt_center.b=text_y;
                draw_sprite_ext(pad_def(global.gp_Select),0,(obj_TextPromt_center.a-80+10)*offset,(obj_TextPromt_center.b-shift_y-20)*offset,.45*offset,.45*offset,0,c_white,1);
                draw_text_transformed((obj_TextPromt_center.a-80+32)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Inventory]" ,offset,offset,0);
            }
            
if (frame_grow&gt;0) frame_grow-=20;
if (frame_grow&lt;0) frame_grow=0;

}
else
{

potion=false;
 
//DRAW BUTTON COMBO DOCKED IN LOWER THIRDS 
if  (protip) &amp;&amp; /*(Frame==true) &amp;&amp; */ (speak==false) //&amp;&amp; instance_exists(obj_TextPromt_LG_Side) 
{

spacing=1.5;

draw_set_font(fnt_Orbitron);
draw_set_valign(fa_bottom);
draw_set_halign(fa_left);
if (frame_grow&lt;frame_y) 
    {
    if (frame_grow&lt;=0) audio_play_sound(snd_Game_Whoosh,12,false);
    frame_grow+=20;
    }
if (frame_grow&gt;frame_y) frame_grow=frame_y;


switch(dialog) //Draw Move Icons
        {
        case 2:  
        if (frame_grow==frame_y)
        {     
        draw_sprite_ext(pad_def(global.gp_Jump),0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+25*spacing)*offset,(dock_y-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Jump),0,(frame_x_offset+dock_x+50*spacing)*offset,(dock_y-shift_y-20)*offset,.75*offset,.75*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+75*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Double Jump]" ,offset,offset,0);
        }
        frame_y=280;
        frame_x_offset=0;
        break;
        
        case 3:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(pad_def(global.gp_Fire),0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+20*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Fire]" ,offset,offset,0);
        }
        frame_y=125;
        frame_x_offset=0;
        break;
        
        case 4:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(pad_def(global.gp_Left_Trigger),0,(frame_x_offset+dock_x-2*spacing)*offset,(dock_y-shift_y-18)*offset,.75*offset,.75*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+15*spacing)*offset,(dock_y-shift_y-13)*offset,"or" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Right_Trigger),0,(frame_x_offset+dock_x+43*spacing)*offset,(dock_y-shift_y-18)*offset,.75*offset,.75*offset,0,c_white,1);        
        draw_text_transformed((frame_x_offset+dock_x+62*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Warp]" ,offset,offset,0);
        }
        frame_y=185;
        frame_x_offset=0;
        break;
        
        case 5:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(pad_def(global.gp_Left_Trigger),0,(frame_x_offset+dock_x-2*spacing)*offset,(dock_y-shift_y-18)*offset,.75*offset,.75*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+15*spacing)*offset,(dock_y-shift_y-13)*offset,"or" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Right_Trigger),0,(frame_x_offset+dock_x+43*spacing)*offset,(dock_y-shift_y-18)*offset,.75*offset,.75*offset,0,c_white,1);        
        draw_text_transformed((frame_x_offset+dock_x+62*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Warp]" ,offset,offset,0);
        }
        frame_y=185;
        frame_x_offset=0;
        break;
        
        case 8:  
        if (frame_grow==frame_y)
        {       
        draw_sprite_ext(spr_xbox_Arrow,0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,.75*offset,.75*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+25*spacing)*offset,(dock_y-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Jump),0,(frame_x_offset+dock_x+50*spacing)*offset,(dock_y-shift_y-20)*offset,.75*offset,.75*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+75*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Wall Kick]",offset,offset,0);
        }
        frame_y=245;    
        frame_x_offset=0;    
        break;
        
        case 10:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(pad_def(global.gp_Jump),0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+20*spacing)*offset,(dock_y-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Right_Shoulder),0,(frame_x_offset+dock_x+50*spacing)*offset,(dock_y-shift_y-20)*offset,.75*offset,.75*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+75*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Shield]" ,offset,offset,0);
        }
        frame_y=210;
        frame_x_offset=30;
        break;
        
        case 11:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(pad_def(global.gp_Right_Shoulder),0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,.75*offset,.75*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+25*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Parry]" ,offset,offset,0);
        }
        frame_y=140;
        frame_x_offset=0;
        break;
               
        case 13:
        if (frame_grow==frame_y)
        {
            if (try_it_type==3)
            {
            draw_sprite_ext(pad_def(global.gp_Melee),0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
            draw_text_transformed((frame_x_offset+dock_x+20*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Melee]" ,offset,offset,0);
            frame_y=140;
            frame_x_offset=65;
            }
        
            if (try_it_type==4)
            {
                draw_sprite_ext(spr_xbox_Arrow,0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,90,c_white,1);
                draw_text_transformed((frame_x_offset+dock_x+25*spacing)*offset,(dock_y-shift_y-12)*offset,"+" ,offset,offset,0);
                draw_sprite_ext(pad_def(global.gp_Melee),0,(frame_x_offset+dock_x+50*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
                draw_text_transformed((frame_x_offset+dock_x+75*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Spin Attack]",offset,offset,0);
                frame_y=270;
                frame_x_offset=0;
            }
        }
        
        break;
        
         
        case 14:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(pad_def(global.gp_Left_Shoulder),0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+20*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Summon]" ,offset,offset,0);
        }
        frame_y=140;
        frame_x_offset=65;
        break;
        
        
        case 15:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(pad_def(global.gp_Weapon),0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
        draw_text_transformed((obj_TextPromt_center.a-80+25)*offset,(obj_TextPromt_center.b-shift_y-13)*offset,"- [Change Weapon]" ,offset,offset,0);
        //draw_text_transformed((frame_x_offset+dock_x+20*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Change Weapon]" ,offset,offset,0);
        }
        frame_y=220;
        frame_x_offset=0;
        break;
        
        case 18:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(spr_xbox_Arrow,0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,90,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+25*spacing)*offset,(dock_y-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Weapon),0,(frame_x_offset+dock_x+50*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+75*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Time Warp]",offset,offset,0);
        }
        frame_y=270;
        frame_x_offset=0;
        break;
        
        case 19:
        if (frame_grow==frame_y)
        { 
        draw_sprite_ext(spr_xbox_Arrow,0,(frame_x_offset+dock_x+0*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,90,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+25*spacing)*offset,(dock_y-shift_y-12)*offset,"+" ,offset,offset,0);
        draw_sprite_ext(pad_def(global.gp_Weapon),0,(frame_x_offset+dock_x+50*spacing)*offset,(dock_y-shift_y-20)*offset,(.75)*offset,(.75)*offset,0,c_white,1);
        draw_text_transformed((frame_x_offset+dock_x+75*spacing)*offset,(dock_y-shift_y-13)*offset,"- [Time Warp]",offset,offset,0);
        frame_y=270;
        frame_x_offset=0;
        }
        break;
        }//END SWITCH
        
     
        
}//END FRAME
else //SHRINK FRAME IF PROTIP IS FALSE
{
if (frame_grow&gt;0) frame_grow-=20;
if (frame_grow&lt;0) frame_grow=0;
}

}//END NO TEXT PROMPT CENTER

   if(try_it==true) &amp;&amp; (good==false)
            {                           


                draw_set_halign(fa_center); draw_set_valign(fa_center);
                draw_set_font(fnt_Arcade);
                draw_set_color(c_black); draw_set_alpha(.5);
                draw_text_transformed((dock_x+71*spacing)*offset,(dock_y-shift_y-86)*offset,  "- Press -",  2+sin(try_it_phase)*.05*offset, 2+sin(try_it_phase)*.05*offset,0); 
                draw_set_color(c_yellow); draw_set_alpha(1);
                draw_text_transformed((dock_x+75*spacing)*offset,(dock_y-shift_y-90)*offset,  "- Press -", 2+sin(try_it_phase)*.05*offset, 2+sin(try_it_phase)*.05*offset,0);
                try_it_phase+=.25*global.game_speed;
                draw_set_color(c_white);
                if (alarm[5]&lt;50) alarm[5]=50;
            }
            
   if(good==true)
            {               
                draw_set_halign(fa_center); draw_set_valign(fa_center);
                draw_set_font(fnt_Arcade);
                draw_set_color(c_black); draw_set_alpha(.5);
                draw_text_transformed((dock_x+71*spacing)*offset,(dock_y-shift_y-91)*offset,  "Excellent!!",  2.5+sin(try_it_phase)*.05*offset, 2.5+sin(try_it_phase)*.05*offset,0); 
                draw_set_color(make_color_hsv(irandom_range(1,255),255,220)); draw_set_alpha(1);
                draw_text_transformed((dock_x+75*spacing)*offset,(dock_y-shift_y-95)*offset,  "Excellent!!", 2.5+sin(try_it_phase)*.05*offset, 2.5+sin(try_it_phase)*.05*offset,0);
                try_it_phase+=.5*global.game_speed;
                draw_set_color(c_white);
            }

if (HighLight)
{
if instance_exists(obj_warps)
{
    phase+=1;
    if (phase&lt;4) draw_set_color(c_orange);
    if (phase&gt;4) draw_set_color(c_aqua); 
    if (phase&gt;8) phase=0;
    
    switch (HighLight_type)
    {
    case 1: //WARPS
    draw_roundrect(obj_warps.orig_x+(491)*offset,(obj_warps.orig_y+14)*offset,obj_warps.orig_x+(529)*offset,(obj_warps.orig_y+30)*offset,true);
    break;
    case 2: //SHIELD
    draw_roundrect(obj_warps.orig_x+(491)*offset,(obj_warps.orig_y+34)*offset,obj_warps.orig_x+(529)*offset,(obj_warps.orig_y+50)*offset,true);
    break;
    case 3: //BULLET TIME
    draw_roundrect(obj_warps.orig_x+(491)*offset,(obj_warps.orig_y+54)*offset,obj_warps.orig_x+(529)*offset,(obj_warps.orig_y+70)*offset,true);
    break;
    case 4: //MFORCE
    if       (par_HERO.money&gt;=1000000)
    draw_roundrect(obj_warps.orig_x+(491)*offset,(obj_warps.orig_y+72)*offset,obj_warps.orig_x+(577)*offset,(obj_warps.orig_y+88)*offset,true);
    else if  (par_HERO.money&gt;=100000)   
    draw_roundrect(obj_warps.orig_x+(491)*offset,(obj_warps.orig_y+72)*offset,obj_warps.orig_x+(565)*offset,(obj_warps.orig_y+88)*offset,true);
    if       (par_HERO.money&gt;=10000)
    draw_roundrect(obj_warps.orig_x+(491)*offset,(obj_warps.orig_y+72)*offset,obj_warps.orig_x+(553)*offset,(obj_warps.orig_y+88)*offset,true);
    else if  (par_HERO.money&gt;=1000)
    draw_roundrect(obj_warps.orig_x+(491)*offset,(obj_warps.orig_y+72)*offset,obj_warps.orig_x+(541)*offset,(obj_warps.orig_y+88)*offset,true);
    else
    draw_roundrect(obj_warps.orig_x+(491)*offset,(obj_warps.orig_y+72)*offset,obj_warps.orig_x+(529)*offset,(obj_warps.orig_y+88)*offset,true);
    break;
    }
    draw_set_color(c_white);
}
}

/*
//DEBUG
draw_set_font(fnt_Robot); draw_set_color(c_white);  draw_set_halign(fa_left); draw_set_alpha(1);
draw_text_transformed(100,200, "Dialog: "+string(dialog),  1,1,0);
draw_text_transformed(100,230, "Protip: "+string(protip) + "   Count: "+string(alarm[5]),  1,1,0);
draw_text_transformed(100,260, "Frame: "+string(Frame),  1,1,0);
draw_text_transformed(100,290, "Speak: "+string(speak),  1,1,0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
  if(quiting==true)
    {
    move+=0.04;
    image_blend=c_white;
    
    image_alpha=image_alpha-.01;
    if (image_alpha&lt;=0)instance_destroy();
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
  
    draw_self();
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,75.0);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    
    draw_self();
    shader_reset();
    }
    else 
    {
    draw_self();
    }
}

/*

if instance_exists(obj_TextPromt)
{
    if (speak)
    {
        switch(dialog)
        {
        case 2:
        draw_sprite_ext(jump,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(jump,0,obj_TextPromt.x+50,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+65,obj_TextPromt.y-13,"- [Double Jump]" );
        break;
        
        case 3:
        draw_sprite_ext(fire,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-13,"- [Fire]" );
        break;
        
        case 5:
        draw_sprite_ext(spr_xbox_Arrow,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.4,.5,270,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(jump,0,obj_TextPromt.x+50,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        
        draw_text(obj_TextPromt.x+85,obj_TextPromt.y-12,"or" );
        draw_sprite_ext(spr_xbox_LT,0,obj_TextPromt.x+120,obj_TextPromt.y-20,.5,.5,0,c_white,1);
        draw_sprite_ext(spr_xbox_RT,0,obj_TextPromt.x+160,obj_TextPromt.y-20,.5,.5,0,c_white,1);
        
        
        draw_text(obj_TextPromt.x+180,obj_TextPromt.y-13,"- [Warp]" );
        break;
        
        case 8:
        draw_sprite_ext(spr_xbox_Arrow,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.4,.5,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(jump,0,obj_TextPromt.x+50,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+63,obj_TextPromt.y-13,"- [Wall Bounce]" );
        break;
        
        case 10:
        draw_sprite_ext(jump,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(spr_xbox_RB,0,obj_TextPromt.x+58,obj_TextPromt.y-20,.55,.55,0,c_white,1);
        draw_text(obj_TextPromt.x+85,obj_TextPromt.y-13,"- [Shield]" );
        break;
        
        case 11:
        draw_sprite_ext(spr_xbox_RB,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.55,.55,0,c_white,1);
        draw_text(obj_TextPromt.x+34,obj_TextPromt.y-13,"- [Parry]" );
        break;
        
        case 12:
        var m
        m = instance_furthest(x,y,obj_Monies_small)
        draw_sprite_ext(spr_xbox_LB,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.55,.55,0,c_white,1);
        draw_text(obj_TextPromt.x+34,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(spr_Monies_Single,m.image_index,obj_TextPromt.x+67,obj_TextPromt.y-9,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+76,obj_TextPromt.y-13,"- [Summon]" );
        break;
        
        case 13:
        draw_sprite_ext(melee,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-13,"- [Melee]" );
        break;
        
        case 15:
        draw_sprite_ext(spr_xbox_Y,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-13,"- [Change Weapon]" );
        break;
        }
        /*
switch(dialog)
        {
        case 2:
        draw_sprite_ext(spr_xbox_A,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(spr_xbox_A,0,obj_TextPromt.x+50,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+65,obj_TextPromt.y-13,"- [Double Jump]" );
        break;
        
        case 3:
        draw_sprite_ext(spr_xbox_B,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-13,"- [Fire]" );
        break;
        
        case 5:
        draw_sprite_ext(spr_xbox_Arrow,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.4,.5,270,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(spr_xbox_A,0,obj_TextPromt.x+50,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+65,obj_TextPromt.y-13,"- [Warp]" );
        break;
        
        case 8:
        draw_sprite_ext(spr_xbox_Arrow,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.4,.5,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(spr_xbox_A,0,obj_TextPromt.x+50,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+63,obj_TextPromt.y-13,"- [Wall Bounce]" );
        break;
        
        case 10:
        draw_sprite_ext(spr_xbox_A,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(spr_xbox_RB,0,obj_TextPromt.x+58,obj_TextPromt.y-20,.55,.55,0,c_white,1);
        draw_text(obj_TextPromt.x+85,obj_TextPromt.y-13,"- [Shield]" );
        break;
        
        case 11:
        draw_sprite_ext(spr_xbox_RB,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.55,.55,0,c_white,1);
        draw_text(obj_TextPromt.x+34,obj_TextPromt.y-13,"- [Parry]" );
        break;
        
        case 12:
        var m
        m = instance_furthest(x,y,obj_Monies_small)
        draw_sprite_ext(spr_xbox_LB,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.55,.55,0,c_white,1);
        draw_text(obj_TextPromt.x+34,obj_TextPromt.y-12,"+" );
        draw_sprite_ext(spr_Monies_Single,m.image_index,obj_TextPromt.x+67,obj_TextPromt.y-9,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+76,obj_TextPromt.y-13,"- [Summon]" );
        break;
        
        case 13:
        draw_sprite_ext(spr_xbox_X,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-13,"- [Melee]" );
        break;
        
        case 15:
        draw_sprite_ext(spr_xbox_Y,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.6,.6,0,c_white,1);
        draw_text(obj_TextPromt.x+25,obj_TextPromt.y-13,"- [Change Weapon]" );
        break;
        }
        */
        
        
 /*       
   }//END SPEAK
      
        if (potion)
            {
            text_y =(par_HERO.y-170);  
            if (text_y-view_yview&lt;10) text_y=10+view_yview;
            if (text_y-view_yview&gt;640) text_y=640+view_yview;
            text_x = x+80*image_xscale;
            if (text_x-view_xview&lt;20) text_x=20+view_xview;
            if (text_x-view_xview&gt;1100) text_x=1100+view_xview;
            
                obj_TextPromt.x=text_x;
                obj_TextPromt.y=text_y;
                draw_sprite_ext(spr_xbox_select,0,obj_TextPromt.x+10,obj_TextPromt.y-20,.55,.55,0,c_white,1);
                draw_text(obj_TextPromt.x+32,obj_TextPromt.y-13,"- [Inventory]" );
            }
        
    
}
else
{
potion=false;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>51,67</point>
    <point>62,62</point>
  </PhysicsShapePoints>
</object>
