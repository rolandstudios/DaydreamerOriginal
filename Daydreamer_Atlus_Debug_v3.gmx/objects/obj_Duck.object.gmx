<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Duck_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>par_Goodguy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_pitch(snd_Quack_A,global.game_speed);
audio_sound_gain(snd_Quack_A,1,0);
audio_play_sound(snd_Quack_A,10,false);
sprite_index=spr_Duck_Idle;


store=false;
quaking=0;
image_angle=5;
scale=1;
image_yscale=scale;
catchup=false;
hit=false;
damage=0;
heal=false;
frame=0;
casting=false;
quiting=false;
move=0;
leaving_xscale=image_xscale;
part=55*par_HERO.image_xscale;
angle=0;
max_part=150;
cast_x=x;
cast_y=y;
cast_xscale=image_xscale;
catchup=false;
alarm[0]=200/global.game_speed;
enemy=noone;
hp=50;
color=c_white;
quack_count=0;
active=true;


float=false;
float_up=true;
rot_up=true;
float_factor=0;
image_blend=c_white;

//Color Correction----
brightness=0; //brightness
contrast=0; //contrast
//--------------------

msize = 10;
mx = ds_queue_create();
my = ds_queue_create();
ms = ds_queue_create();
ma = ds_queue_create();


for(i=0;i&lt;msize;i+=1)
{
    ds_queue_enqueue(mx,par_HERO.x);
    ds_queue_enqueue(my,y);
    ds_queue_enqueue(ma,par_HERO.angle);
    ds_queue_enqueue(ms,sprite_index);
   
}

active=true;
if (global.HERO_type==0)
{
if !instance_exists(obj_HERO_young) {active=false; instance_destroy();}
weapontype=obj_HERO_young.weapontype;
}
else
{
if !instance_exists(obj_HERO) {active=false; instance_destroy();}
weapontype=obj_HERO.weapontype;
}
//alpha_test=128;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO) par_HERO.summon=false;
instance_create(x,y+25,obj_Twinkle_A);
if instance_exists(obj_warps) obj_warps.Money_low=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>catchup=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hit=false;
color=c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>catchup=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>talking=false;
audio_play_sound(snd_electrical_glitch,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>par_HERO.summon=false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//QUIT IF NO MONEY
var stall
stall =false;
if (global.CutScene)stall=true;
if instance_exists(par_Activate) stall=true;
if instance_exists(obj_Inventory) stall=true;

if (stall) {alarm[0]=30;}else{

if instance_exists(par_HERO)
{
if instance_exists(par_Enemy_Body)
{
if (casting==false)
{
if (par_HERO.money&lt;15)
{
    quiting=true;
    image_speed=.5*global.game_speed;
    image_index=0;
    if (alarm[1]==-1) alarm[1]= 200/global.game_speed;
    alarm[2]= 55/global.game_speed;
    talking=true;
    leaving_x=ds_queue_dequeue(mx)-(45*par_HERO.image_xscale);
    image_xscale=par_HERO.image_xscale;
    leaving_y=ds_queue_dequeue(my)+55;
    leaving_xscale=image_xscale;
    
    if (par_HERO.grounded==false) 
        {
        float=true;
        }
        
    if !instance_exists(obj_TextPromt)
    {
        global.promt = "Not Enough PSY Matter!";
        with instance_create(x+32,y-32,obj_TextPromt)
            {
            hold=100;
            type=2;
            }
    }
}
else
{
par_HERO.money-=15;
cast_x=x;
cast_y=y;
target_x=irandom_range(40,1280);
target_y=irandom_range(20,700);
catchup=false;
alarm[5]=300;
casting=true;

quacking=0;
angle=0;

//CREATE FLOCK
instance_create(view_xview-200+irandom_range(-50,0),view_yview+0+irandom_range(-25,25),obj_Duck_decoy);
instance_create(view_xview-200+irandom_range(-50,0),view_yview+150+irandom_range(-25,25),obj_Duck_decoy);
instance_create(view_xview-200+irandom_range(-50,0),view_yview+300+irandom_range(-25,25),obj_Duck_decoy);
instance_create(view_xview-200+irandom_range(-50,0),view_yview+450+irandom_range(-25,25),obj_Duck_decoy);

instance_create(view_xview+1480+irandom_range(0,50),view_yview+0+irandom_range(-25,25),obj_Duck_decoy);
instance_create(view_xview+1480+irandom_range(0,50),view_yview+150+irandom_range(-25,25),obj_Duck_decoy);
instance_create(view_xview+1480+irandom_range(0,50),view_yview+300+irandom_range(-25,25),obj_Duck_decoy);
instance_create(view_xview+1480+irandom_range(0,50),view_yview+450+irandom_range(-25,25),obj_Duck_decoy);

}
}

if (par_HERO.money&lt;30)
{ 
if instance_exists(obj_warps)
    obj_warps.Money_low=true;
}
}
}
else
{
instance_destroy();
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if (global.HERO_type==0)
{
if !instance_exists(obj_HERO_young) {active=false; instance_destroy();}
weapontype=obj_HERO_young.weapontype;
}
else
{
if !instance_exists(obj_HERO) {active=false; instance_destroy();}
weapontype=obj_HERO.weapontype;
}

if (active)
{
//image_index = ds_queue_dequeue(ma);
// Queue the NEXT location

if (quiting==false) //IF NOT QUITING -----------------------------------
{
if instance_exists(obj_PearStore_inside)
{
    if (store==false)
    {
    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
    }
store=true;
}
else
{
    if (store==true)
    {
    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
    }
store=false;
}
if (casting==false) //IF NOT CASTING -----------------------------------
{
    damage=0;
    sprite_index = ds_queue_dequeue(ms);
   //POSITION QUEUE
    x = ds_queue_dequeue(mx)-(part);
    y = ds_queue_dequeue(my);
    angle = ds_queue_dequeue(ma)*1.5;
    
    
    ds_queue_enqueue(mx,par_HERO.x);
    ds_queue_enqueue(my,par_HERO.y);
    ds_queue_enqueue(ma,par_HERO.angle);
    
    if (global.HERO_type==0)
    {
    last_grounded_x=obj_HERO_young.x;
    last_grounded_y=obj_HERO_young.y;
    }
    else
    {
    last_grounded_x=obj_HERO.x;
    last_grounded_y=obj_HERO.y;
    }
    
    image_xscale=par_HERO.image_xscale;
    
    //image_xscale=-sign(part);
   if (par_HERO.hsp!=0) 
   {
       
        if (par_HERO.image_xscale== -1)
        {
        if (part&gt;-(max_part)) part -=2;
        if (x&gt;par_HERO.x) image_xscale=1;
        }
        else
        {
        if (part&lt;max_part) part +=2;
        if (x&lt;par_HERO.x) image_xscale=-1;
        }
        
    }
    else
    {
    if (abs(part)&gt;50)
        {
        part-=2*sign(part);
        }
    }
//SET SPRITE


if (global.HERO_type==0) //YOUNG OLIVIA
{
weapontype=obj_HERO_young.weapontype;

    if (par_HERO.sprite_index==spr_Young_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Young_Olivia_Jump_A) 
    || (par_HERO.sprite_index==spr_Young_Olivia_Jump_B) || (par_HERO.sprite_index==spr_Young_Olivia_Diagnal_Shoot_Split) 
    || (par_HERO.sprite_index==spr_Young_Olivia_Shoot_Down_Split) ||  (par_HERO.sprite_index==spr_Young_Olivia_Wall_Bounce)
    {
        ds_queue_enqueue(ms,spr_Duck_Jump);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Ladder)
    {
        ds_queue_enqueue(ms,spr_Weasel_Ladder);
        image_index=abs(par_HERO.image_index/3);
        part=0;
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Run)
    {
        ds_queue_enqueue(ms,spr_Duck_Walk);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Die_Air)
    {
        ds_queue_enqueue(ms,spr_Duck_Jump);
    }
    else
    {
        if (quack_count&lt;10)
        ds_queue_enqueue(ms,spr_Duck_Idle);
        else
        ds_queue_enqueue(ms,spr_Duck_Qwak);
    }
}

if (global.HERO_type==1) //OLD OLIVIA
{
weapontype=obj_HERO.weapontype;

    if (par_HERO.sprite_index==spr_Old_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Old_Olivia_Jump_A) 
    || (par_HERO.sprite_index==spr_Old_Olivia_Jump_B) || (par_HERO.sprite_index==spr_Old_Olivia_Diagnal_Shoot_Split) 
    || (par_HERO.sprite_index==spr_Old_Olivia_Shoot_Down_Split) ||  (par_HERO.sprite_index==spr_Old_Olivia_Wall_Bounce)
    {
        ds_queue_enqueue(ms,spr_Duck_Jump);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Ladder) || (par_HERO.sprite_index==spr_Old_Olivia_Ladder_Climb)
    {
        ds_queue_enqueue(ms,spr_Duck_Fly);
        image_index=abs(par_HERO.image_index/3);
        part=0;
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Run)
    {
        ds_queue_enqueue(ms,spr_Duck_Walk);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Die_Air)
    {
        ds_queue_enqueue(ms,spr_Duck_Jump);
    }
    else
    {
        if (quack_count&lt;10)
        ds_queue_enqueue(ms,spr_Duck_Idle);
        else
        ds_queue_enqueue(ms,spr_Duck_Qwak);
    }
}


if(sprite_index == spr_Duck_Walk) 
    image_speed=2*global.game_speed;
    else
    image_speed=1*global.game_speed;
    
//SPRITE OVERIDES ----
 if (sprite_index==spr_Duck_Idle)
        { 
        if (abs(part)&gt;50)
            {
             sprite_index=spr_Duck_Walk;
             image_speed=.5*global.game_speed;
            }
        else
        image_speed=.5*global.game_speed;
        } 
        

if(sprite_index == spr_Duck_Idle) 
    {
     image_speed=.5*global.game_speed;
     if (round(image_index)&gt;=sprite_get_number(spr_Duck_Idle)-1)
            {
             quack_count+=1;
            }
    }
    
if(sprite_index == spr_Duck_Qwak) 
    {
       image_speed=.5*global.game_speed;
       
       if (round(image_index)&gt;=sprite_get_number(spr_Duck_Qwak)-1)
            {
             quack_count+=1;
             if (quack_count&gt;11) quack_count=0;
            }
       
           if !audio_is_playing(snd_Quack_A)
           {
            audio_sound_pitch(snd_Quack_A,random_range(.8,1.2)*global.game_speed);
            audio_sound_gain(snd_Quack_A,1,0);
            audio_play_sound(snd_Quack_A,10,false);
           }
    }
    
if(sprite_index == spr_Duck_Idle)
    {
    if (image_index&gt;=34) image_speed=0;
    }

}//END NOT CASTING ------
else
{//CASTING START --------
    if (catchup==false)
    {
    
    if (quacking&lt;4)
    {
    alarm[0]=800/global.game_speed;
    sprite_index=spr_Duck_Qwak;
    image_speed=.5*global.game_speed; 
    if (round(image_index)&gt;=sprite_get_number(spr_Duck_Qwak)-1)
            {
             quacking+=1;
             audio_sound_pitch(snd_Quack_A,random_range(.8,1.2)*global.game_speed);
             audio_sound_gain(snd_Quack_A,1,0);
             audio_play_sound(snd_Quack_A,10,false);
            }
    }
    else
    {
    alarm[0]=800/global.game_speed;   
    sprite_index=spr_Duck_Fly;
    image_speed=1*global.game_speed; 
      
    if (x&gt;view_xview+target_x) {x-=10;  image_xscale=-1;} 
    if (x&lt;view_xview+target_x) {x+=10;  image_xscale=1;}  
    if (y&gt;view_yview+target_y) y-=10;
    if (y&lt;view_yview+target_y) y+=10; 


    if (y&lt;view_yview+target_y+50) &amp;&amp; (y&gt;view_yview+target_y-50) 
    {
    if (x&lt;view_xview+target_x+50) &amp;&amp; (x&gt;view_xview+target_x-50) 
        {
        target_x=irandom_range(40,1280);
        target_y=irandom_range(20,700);
        audio_sound_pitch(snd_Quack_A,random_range(.8,1.2)*global.game_speed);
        audio_sound_gain(snd_Quack_A,1,0);
        audio_play_sound(snd_Quack_A,10,false);
        }
    }
    }//END QUAKING
    }//END NOT CATCHUP
    else //CATCHUP START --------------------
    {
        if (global.HERO_type==0)
        {
        target_x=obj_HERO_young.x;
        target_y=obj_HERO_young.y;
        }
        
        if (global.HERO_type==1)
        {
        target_x=obj_HERO.x;
        target_y=obj_HERO.y;
        }
        
        alarm[0]=800/global.game_speed;   
        sprite_index=spr_Duck_Fly;
        image_speed=1*global.game_speed; 
          
        if (x&gt;target_x) {x-=10; image_xscale=-1;} 
        if (x&lt;target_x) {x+=10;  image_xscale=1;}  
        if (y&gt;target_y) y-=10;
        if (y&lt;target_y) y+=10; 
        
        if (y&lt;target_y+25) &amp;&amp; (y&gt;target_y-25) 
        {
        if (x&lt;target_x+25) &amp;&amp; (x&gt;target_x-25) 
            {
            casting=false;
            catchup=false;
                        
                        ds_queue_clear(mx);
                        ds_queue_clear(my);
                        ds_queue_clear(ms);
                        ds_queue_clear(ma);
                           
                        for(i=0;i&lt;msize;i+=1)
                        {
                        ds_queue_enqueue(ma,angle);                                              
                        ds_queue_enqueue(mx,target_x);
                        ds_queue_enqueue(my,target_y);
                        ds_queue_enqueue(ms,sprite_index);
                        }
            }
        }
    
    }//END CATCHUP        
}//END CASTING ----------


} //END NOT QUITING --------------------
else
{ 
//QUITING START ----------------------


    if (!float)
        {
        sprite_index=spr_Duck_Idle;
        ds_queue_enqueue(ms,spr_Duck_Idle);
        }
        else
        {
        sprite_index=spr_Duck_Idle;
        ds_queue_enqueue(ms,spr_Duck_Idle)
        }
  
    
                if(float) 
                {
                    if(float_up) float_factor=float_factor+.1;
                    if(!float_up) float_factor=float_factor-.1;
        
                    if(float_factor==2) float_up=false;
                    if(float_factor==-2) float_up=true;
                    leaving_y = leaving_y + float_factor;
                }
                
          
                
}//END QUITING

if (hit)
{
sprite_index=spr_Duck_Hit;
image_speed=.5*global.game_speed;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[4]==-1)
{
audio_sound_pitch(snd_Quack_B,random_range(.8,1.2)*global.game_speed);
audio_sound_gain(snd_Quack_A,1,0);
audio_play_sound(snd_Quack_B,10,false);
alarm[4]=20;
hit=true;
color=c_red;
hp-=1;
sprite_index=spr_Duck_Hit;
image_speed=.5*global.game_speed;
image_index=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
{
    alarm[0]=200/global.game_speed;
    
    x=par_HERO.x;
    y=par_HERO.y;
    
    for(i=0;i&lt;msize;i+=1)
    {
        ds_queue_enqueue(mx,par_HERO.x);
        ds_queue_enqueue(my,par_HERO.y);
        ds_queue_enqueue(ma,par_HERO.angle);
        ds_queue_enqueue(ms,spr_Duck_Idle);   
    }
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if sprite_exists(sprite_index)
{
if(quiting==false) //IF NOT QUITING ----
{

if (!casting) 
image_xscale=par_HERO.image_xscale;
//else
//part=0;

         if (global.HERO_type==0)
         {
         if (obj_HERO_young.ladder==true)
            sprite_index=spr_Duck_Fly;
         }
         else
         {
            if (obj_HERO.ladder==true)
            sprite_index=spr_Duck_Fly;
         }
          
          //image_angle=5*par_HERO.image_xscale; //NORMAL DRAW
          if (color==c_white)
          {
          shader_set(shd_bright_contrast);
          shader_set_uniform_f(global.brightness_amount , brightness);
          shader_set_uniform_f(global.contrast_amount, contrast);
          draw_sprite_ext(sprite_index, image_index, x , y+40, image_xscale*scale,scale, angle, color, 1.0);
          shader_reset();
          }
          else
          {
          draw_sprite_ext(sprite_index, image_index, x , y+40, image_xscale*scale,scale, angle, color, 1.0);
          }




}
else //IF QUITING -----------------------------------
{
     //QUITING DRAW
      x=leaving_x;
      y=leaving_y;
      image_yscale=scale;
      image_xscale=scale*sign(image_xscale);
    
    move+=0.04;
    
    
    image_alpha=image_alpha-.01;;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,angle,image_blend,image_alpha);
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,500.0);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    draw_sprite_ext(sprite_index, image_index, leaving_x, leaving_y, sign(image_xscale)*scale,scale, angle, image_blend, 1.0); 
    shader_reset(); 
       
}
}//END IF SPRITE EXISTS


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>82,82</point>
  </PhysicsShapePoints>
</object>
