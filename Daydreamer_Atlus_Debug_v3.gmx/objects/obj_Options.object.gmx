<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1) //GET USER INFO
{
    if sprite_exists(global.spr_gamerpicture) sprite_delete(global.spr_gamerpicture); 
    global.display_name = "No User";  
    account=global.xb_user; 

    if (global.xb_user == pointer_null)
    {
        //SAVED GLOBALS
        global.blur_fx=0;       //BLOOM FX [0-3]
        global.vol=1;           //VOLUME VALUE
        global.mus=1;           //MUSIC VOLUME VALUME
        global.dof=false;       //DEPTH OF FIELD [NOT USED]
        global.difficulty=.75;  //DIFFICULTY
        global.vsync=true;      //VSYNC
        global.ctlstyle=1;      //GAME PAD CONFIGURATION [NOT USED]
        global.auto_pickup=false;   //AUTO PICK UP A WEAPON
        global.auto_swap=true;      //AUTO SWAP TO NEXT WEAPON WHEN AMMO IS OUT
        global.rumble=true;         //ENABLE RUMBLE PAK
        global.shock_fx = 1;         //SHOCK WAVE DISPLACEMENT SHADER FX
        
        //GAMEPAD BINDS
        global.gp_D_Left     = gp_padl;
        global.gp_D_Right    = gp_padr;
        global.gp_D_Up       = gp_padu;
        global.gp_D_Down     = gp_padd;
        global.gp_Jump     = gp_face1;
        global.gp_Melee    = gp_face3;
        global.gp_Fire     = gp_face2;
        global.gp_Weapon   = gp_face4;
        global.gp_Pause    = gp_start;
        global.gp_Select   = gp_select;
        global.gp_Left_Shoulder  =  gp_shoulderl;
        global.gp_Right_Shoulder =  gp_shoulderr;
        global.gp_Left_Trigger   =  gp_shoulderlb;
        global.gp_Right_Trigger  =  gp_shoulderrb;
        global.gp_Pet_L  =  gp_stickl;
        global.gp_Pet_R  =  gp_stickr;
    }
    
    if (alarm[3]==-1) alarm[3]=5;
}

x_scale=-100;
y_scale=-40;
gamepad_set_vibration(global.playing_index, 0, 0);
rest=true;
volume=string(global.vol);
music=string(global.mus);

grow_y=0;

check_x=0;
check_y=0;
check_shift=0;
flash=1;
flash_count=.05;
can_select=true;

switch(global.ctlstyle)
{
case 1:
ctlstyle=string("Treasure Style");
break;

case 2:
ctlstyle=string("Mega Style");
break;
}


switch(global.difficulty)
{
case 1:
difficulty=string("Easy");
break;

case 2:
difficulty=string("Medium");
break;

case 3:
difficulty=string("Hard");
break;
}

switch(global.xboxcontroller)
{
case 0:
ctlinput=string("Keyboard");
break;

case 1:
ctlinput=string("Xbox Controller");
break;
}

shift_back=0;
shift_front=5;

x_menu=200;
y_menu=200
x=x_menu-40;
y=y_menu+60; //was 40

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1)
{
if sprite_exists(global.spr_gamerpicture) sprite_delete(global.spr_gamerpicture);
}
/*
    global.file=0;
    buffer_async_group_begin("SaveGame");
    buffer_async_group_option("showdialog",0);    // Stop platform dialogues appearing for this auto-save 
                                                  // (if you do this your player won't be able to select a slot manually)
    buffer_async_group_option("slottitle","");    // Set the title of the slot we're going to save into
    buffer_async_group_option("subtitle","Save file for my awesome game");   // Set a subtitle that's visible in the PS4 UI
    
    globalvar savebuff;
    global.savebuff = buffer_create(1,buffer_grow,1);
    
    ini_open_from_string("");

    ini_write_real("Settings","blur_fx",global.blur_fx);
    ini_write_real("Settings","vol",global.vol);
    ini_write_real("Settings","mus",global.mus);
    ini_write_real("Settings","dof",global.dof);
    ini_write_real("Settings","difficulty",global.difficulty);
    ini_write_real("Settings","vsync",global.vsync); 
    ini_write_real("Settings","ctlstyle",global.ctlstyle);
    ini_write_real("Settings","auto_pickup",global.auto_pickup);
    ini_write_real("Settings","auto_swap",global.auto_swap);//edit 12/22/15
    ini_write_real("Settings","rumble",global.rumble);
    ini_write_real("Settings","shock_fx",global.shock_fx);
    
    ini_write_real("Keyboard","kb_Left",global.kb_Left);
    ini_write_real("Keyboard","kb_Right",global.kb_Right);
    ini_write_real("Keyboard","kb_Up",global.kb_Up);
    ini_write_real("Keyboard","kb_Down",global.kb_Down);
    ini_write_real("Keyboard","kb_Jump",global.kb_Jump);
    ini_write_real("Keyboard","kb_Melee",global.kb_Melee);
    ini_write_real("Keyboard","kb_Fire",global.kb_Fire);
    ini_write_real("Keyboard","kb_Weapon",global.kb_Weapon);
    ini_write_real("Keyboard","kb_Pause",global.kb_Pause);
    ini_write_real("Keyboard","kb_Select",global.kb_Select);
    ini_write_real("Keyboard","kb_Left_Shoulder",global.kb_Left_Shoulder);
    ini_write_real("Keyboard","kb_Right_Shoulder",global.kb_Right_Shoulder);
    ini_write_real("Keyboard","kb_Left_Trigger",global.kb_Left_Trigger);
    ini_write_real("Keyboard","kb_Right_Trigger",global.kb_Right_Trigger);
    
    ini_write_real("Gamepad","gp_D_Left",global.gp_D_Left);
    ini_write_real("Gamepad","gp_D_Right",global.gp_D_Right);
    ini_write_real("Gamepad","gp_D_Up",global.gp_D_Up);
    ini_write_real("Gamepad","gp_D_Down",global.gp_D_Down);
    ini_write_real("Gamepad","gp_Jump",global.gp_Jump);
    ini_write_real("Gamepad","gp_Melee",global.gp_Melee);
    ini_write_real("Gamepad","gp_Fire",global.gp_Fire);
    ini_write_real("Gamepad","gp_Weapon",global.gp_Weapon);
    ini_write_real("Gamepad","gp_Pause",global.gp_Pause);
    ini_write_real("Gamepad","gp_Select",global.gp_Select);
    ini_write_real("Gamepad","gp_Left_Shoulder",global.gp_Left_Shoulder);
    ini_write_real("Gamepad","gp_Right_Shoulder",global.gp_Right_Shoulder);
    ini_write_real("Gamepad","gp_Left_Trigger",global.gp_Left_Trigger);
    ini_write_real("Gamepad","gp_Right_Trigger",global.gp_Right_Trigger);
    ini_write_real("Gamepad","gp_Pet_L",global.gp_Pet_L);
    ini_write_real("Gamepad","gp_Pet_R",global.gp_Pet_R);

    var inistring = ini_close();
    buffer_write(global.savebuff,buffer_string,inistring);
    
    buffer_save_async(global.savebuff,"config.ini",0,buffer_get_size(global.savebuff));    // Pass the data to be saved
    global.saveid = buffer_async_group_end();     // Start the save process

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_select=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1) //GET USER INFO
{       

    account=global.xb_user;     
    if sprite_exists(global.spr_gamerpicture) sprite_delete(global.spr_gamerpicture);                  
            
                      
                global.display_name = "No User"; 
                
                //SAVED GLOBALS
                global.blur_fx=0;       //BLOOM FX [0-3]
                global.vol=1;           //VOLUME VALUE
                global.mus=1;           //MUSIC VOLUME VALUME
                global.dof=false;       //DEPTH OF FIELD [NOT USED]
                global.difficulty=.75;  //DIFFICULTY
                global.vsync=true;      //VSYNC
                global.ctlstyle=1;      //GAME PAD CONFIGURATION [NOT USED]
                global.auto_pickup=false;   //AUTO PICK UP A WEAPON
                global.auto_swap=true;      //AUTO SWAP TO NEXT WEAPON WHEN AMMO IS OUT
                global.rumble=true;         //ENABLE RUMBLE PAK
                global.shock_fx = 1;         //SHOCK WAVE DISPLACEMENT SHADER FX
                
                //GAMEPAD BINDS
                global.gp_D_Left     = gp_padl;
                global.gp_D_Right    = gp_padr;
                global.gp_D_Up       = gp_padu;
                global.gp_D_Down     = gp_padd;
                global.gp_Jump     = gp_face1;
                global.gp_Melee    = gp_face3;
                global.gp_Fire     = gp_face2;
                global.gp_Weapon   = gp_face4;
                global.gp_Pause    = gp_start;
                global.gp_Select   = gp_select;
                global.gp_Left_Shoulder  =  gp_shoulderl;
                global.gp_Right_Shoulder =  gp_shoulderr;
                global.gp_Left_Trigger   =  gp_shoulderlb;
                global.gp_Right_Trigger  =  gp_shoulderrb;
                global.gp_Pet_L  =  gp_stickl;
                global.gp_Pet_R  =  gp_stickr;
                 
            if (global.xb_user == pointer_null) 
            { 
            //DO NOTHING
            }
            else
            {
                global.spr_gamerpicture = xboxone_sprite_add_from_gamerpicture(xboxone_user_for_pad(global.playing_index), 64, 0, 0);
                global.display_name = xboxone_gamedisplayname_for_user(xboxone_user_for_pad(global.playing_index)); 
                
                  if (xboxone_get_savedata_user() != global.xb_user)
                    {
                        xboxone_set_savedata_user(global.xb_user);
                    }
                    
                scr_Load_Config();    
            } 
            
            if instance_exists(obj_Title_Bloom) with(obj_Title_Bloom){instance_destroy();}            
            instance_create(x,y,obj_Title_Bloom);                           
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(global.playing_index, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1)
{
if (account!=global.xb_user)
    {
    if (alarm[3]==-1) alarm[3]=1;
    }
}

volume=string(round(100*global.vol));
music=string(round(100*global.mus));

switch(global.ctlstyle)
{
case 1:
ctlstyle=string("[A]");
//ctlstyle=string("Treasure Style");
break;

case 2:
ctlstyle=string("[B]");
//ctlstyle=string("Mega Style");
break;

case 3:
ctlstyle=string("[C]");
//ctlstyle=string("Shiny Style");
break;
}


switch(global.xboxcontroller)
{
case 0:
ctlinput=string("Keyboard");
break;

case 1:
ctlinput=string("Xbox Controller");
break;
}


switch(global.difficulty)
{
case .25:
difficulty=string("[Super Easy]");
break;

case .50:
difficulty=string("[Easy]");
break;

case .75:
difficulty=string("[Normal]");
break;

case 1:
difficulty=string("[Hard]");
break;

case 2:
difficulty=string("[Extreme]");
break;

}



if !instance_exists(obj_KeyBoard_Bind) &amp;&amp; !instance_exists(obj_GamePad_Bind) 
{
if (global.xboxcontroller == true)
Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);

if (global.xboxcontroller == false)
Key_Pause = keyboard_check_pressed(vk_enter);
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Back = gamepad_button_check_pressed(global.playing_index, gp_face2);
Key_Left = gamepad_button_check(global.playing_index, gp_padl);
Key_Leftp = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check(global.playing_index, gp_padr);
Key_Rightp = gamepad_button_check_pressed(global.playing_index, gp_padr);




if (Key_Jump) Key_Back=false;

if keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter)  Key_Jump=true;  
if keyboard_check_pressed(vk_up) Key_Up=true;
if keyboard_check_pressed(vk_down) Key_Down=true;
if keyboard_check_pressed(vk_right)Key_Rightp = true;
if keyboard_check_pressed(vk_left)Key_Leftp = true;
if keyboard_check(vk_left) Key_Left=true;
if keyboard_check(vk_right) Key_Right=true;

if (can_select==false) {Key_Jump=false; Key_Back=false;}

if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
    {
    Key_Up = 1;
    alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
    {
    Key_Down = 1; 
    alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) 
    {
    Key_Leftp = 1; Key_Left = 1; 
    if (select_y==120) || (select_y==140) alarm[0]=2; else alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) 
    {
    Key_Rightp = 1; Key_Right = 1; 
    if (select_y==120) || (select_y==140) alarm[0]=2; else alarm[0]=10; 
    rest=false;
    } 
}

    if (master.paused)
    {
    Key_Pause = false;
    Key_Down = false;
    Key_Up = false;
    Key_Jump = false;
    Key_Back =false;
    Key_Right = false;
    Key_Leftp = false;
    Key_Left = false;
    Key_Rightp = false;
    }
    

if (Key_Back) || keyboard_check_pressed(vk_escape)
{
    scr_Save_Config();        
    audio_play_sound(snd_gamestart,10,false);
    room_goto(rm_TitleScreen);    
}


if (Key_Up == 1) 
{
    shift_back=0;
    audio_play_sound(snd_selectA, 10, false);
    if (y&gt;y_menu+60) 
    {
    y=y-20;
    }
    else
    {
    y=y_menu+220;
    audio_play_sound(snd_selectA, 10, false);
    }
}


if (Key_Down ==1) 
{
shift_back=0;
audio_play_sound(snd_selectA, 10, false);
    if(y&lt;y_menu+220)
    {
    y=y+20;
    }
    else
    {
    y=y_menu+60;
    }
}



select_y=y-y_menu;

switch(select_y)
{

case 40: //Difficulty-------------------------------------------------------------


if(Key_Leftp) 
{
 
    switch (global.difficulty)
    {
    case .5: global.difficulty=  2; break; // Extreme
    case .75: global.difficulty=.5; break; // Easy
    case 1: global.difficulty=.75; break; // Medium
    case 2: global.difficulty=1; break; // Hard
    }
    
    audio_play_sound(snd_selectA, 10,false);
    
}

if(Key_Rightp) 
{
    switch (global.difficulty)
    {
    case .5: global.difficulty=  .75; break; // Easy
    case .75: global.difficulty=1; break; // Hard
    case 1: global.difficulty=2; break; // Extreme
    case 2: global.difficulty=.5; break; // Easy
    }
    audio_play_sound(snd_selectA, 10,false);
}
break;

/*
case 60: //KEYBOARD Input-------------------------------------------------------------   
    if (Key_Jump)
        {
        
        if !instance_exists(obj_KeyBoard_Bind) 
            {
            instance_create(600,170,obj_KeyBoard_Bind); //y was 187
            audio_play_sound(snd_PowerupB,10,false);
            }
        }
break;
*/

case 60: //GAMEPAD ------------------------------------------------------------

    if (Key_Jump)
    {
        if !instance_exists(obj_GamePad_Bind) 
            {
            with instance_create(740,240,obj_GamePad_Bind) 
                {
                menu_x=735;
                menu_y=240;
                } //y was 187
            audio_play_sound(snd_PowerupB,10,false);
            }
        }
break;

case 80: //Blur Quality-------------------------------------------------------------

if (Key_Leftp)  
{
audio_play_sound(snd_gamestart, 10,false);
if instance_exists(obj_Title_Bloom) with(obj_Title_Bloom){instance_destroy();}
if(global.blur_fx&gt;0) global.blur_fx-=1; else global.blur_fx=3;
if (global.blur_fx==2) global.blur_fx=1;
instance_create(x,y,obj_Title_Bloom);
}

if  (Key_Rightp)
{
audio_play_sound(snd_gamestart, 10,false);
if instance_exists(obj_Title_Bloom) with(obj_Title_Bloom){instance_destroy();}
if(global.blur_fx&lt;3) global.blur_fx+=1; else global.blur_fx=0;
if (global.blur_fx==2) global.blur_fx=3;
instance_create(x,y,obj_Title_Bloom);
}

break;

case 100: //Volume-------------------------------------------------------------

if(Key_Left) 
    {
    if global.vol &gt; 0 
        {
        global.vol -= 0.01;
        audio_master_gain(global.vol);
        if !audio_is_playing(snd_TickA)
        audio_play_sound(snd_TickA, 10,false);
        }
    }
if(Key_Right)  
    {
    if global.vol &lt; 1 
        {
        global.vol += 0.01;
        audio_master_gain(global.vol);
        if !audio_is_playing(snd_TickA)
        audio_play_sound(snd_TickA, 10,false);
        }
    }
    
break;


case 120: //Music-------------------------------------------------------------

if(Key_Left) 
    {
    if global.mus &gt; 0 
        {
        global.mus -= 0.01;
        audio_sound_gain(msc_Title, global.mus, 0);
        if !audio_is_playing(snd_TickA)
        audio_play_sound(snd_TickA, 10,false);
        }
    }
if(Key_Right)  
    {
    if global.mus &lt; 1 
        {
        global.mus += 0.01;
        audio_sound_gain(msc_Title, global.mus, 0);
        if !audio_is_playing(snd_TickA)
        audio_play_sound(snd_TickA, 10,false);
        }
    }

audio_sound_gain(msc_Title_Intro,global.mus,0);    
break;

/*
case 160: //FullScreen-------------------------------------------------------------

if(Key_Jump) || (Key_Leftp) || (Key_Rightp)
{
audio_play_sound(snd_gamestart, 10,false);

if window_get_fullscreen()
{window_set_fullscreen(false);}
else
{window_set_fullscreen(true);}
break;
}
*/

case 140: //Rumble-------------------------------------------------------------

if(Key_Jump) || (Key_Leftp) || (Key_Rightp)
{


audio_play_sound(snd_gamestart, 10,false);
if(global.rumble==false)
global.rumble=true;
else
global.rumble=false;
}

break;

case 160: //AutoPickup-------------------------------------------------------------

if(Key_Jump) || (Key_Leftp) || (Key_Rightp)
{
audio_play_sound(snd_gamestart, 10,false);

if(global.auto_pickup==false)
    {
    global.auto_pickup=true;
    }
    else
    {
    global.auto_pickup=false;
    }
}
break;

case 180: //Auto SWAP-------------------------------------------------------------

if(Key_Jump) || (Key_Leftp) || (Key_Rightp)
{
audio_play_sound(snd_gamestart, 10,false);

if(global.auto_swap==false)
    {
    global.auto_swap=true;
    }
    else
    {
    global.auto_swap=false;
    }
}
break;

case 200: //SHOCKWAVE ------------------------------------------------------------


if(Key_Leftp)|| (Key_Rightp) 
{
audio_play_sound(snd_gamestart, 10,false);
if (global.shock_fx==true)global.shock_fx=false;else global.shock_fx=true;
}

break;


/*

case 220: //Vsync-------------------------------------------------------------

if(Key_Jump) || (Key_Leftp) || (Key_Rightp)
{
audio_play_sound(snd_gamestart, 10,false);

if(global.vsync==false)
    {
    global.vsync=true;
    }
    else
    {
    global.vsync=false;
    }
    display_reset(global.aa,global.vsync);
}
break;

*/

case 220: //Back-------------------------------------------------------------

if(Key_Jump)
{
    scr_Save_Config();
    audio_play_sound(snd_gamestart, 10,false);
    room_goto(rm_TitleScreen);

}
break;


}
}//END NO KINDBIND EXISTS










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rumble_name="Rumble";
if (global.platform==1) ||  (global.platform==3)  rumble_name="Vibration";

scale=1.35;
x_scale=-100;
y_scale=-60;

if window_get_fullscreen()
{
offset=1.5*scale;
}
else
{
offset=1*scale;
}

if (global.platform==1) //XBOX USER ACCOUNT
{
   draw_set_color(c_black);
   draw_set_alpha(.2);
   draw_rectangle(10*offset,10*offset,74*offset,74*offset,false);
   draw_set_color(c_white); draw_set_alpha(1);

   
   if (global.xb_user == pointer_null) 
   {
        global.display_name = "No User"; 
        if sprite_exists(global.spr_gamerpicture) sprite_delete(global.spr_gamerpicture);     
   }
   else
   {
        if sprite_exists(global.spr_gamerpicture)
        {
            draw_sprite_ext(global.spr_gamerpicture, 0, 10*offset, 10*offset,offset,offset,0,c_white,1);
        }
    }
    
    draw_rectangle(10*offset,10*offset,74*offset,74*offset,true);
    
    draw_set_halign(fa_left)
    draw_set_valign(fa_middle);
    draw_set_font(fnt_Arial);
    draw_set_color(c_black); draw_set_alpha(.5);
    draw_text_transformed(85*offset, (10 + 33)*offset, "Current Player:#" + global.display_name,.85*offset,.85*offset,0);    
    draw_set_color(c_white); draw_set_alpha(1);
    draw_text_transformed(84*offset, (10 + 32)*offset, "Current Player:#" + global.display_name,.85*offset,.85*offset,0);
}


//FLASH INC ------
if !instance_exists(obj_KeyBoard_Bind) &amp;&amp; !instance_exists(obj_GamePad_Bind)
{
    if (flash&gt;=1) flash_count*=-1;
    if (flash&lt;=0) flash_count*=-1;
    
    if (alarm[1]==-1)
    flash+=flash_count;
    else
    flash+=8*flash_count;
}
else
{
    flash=1;
}


//DRAW RECTANGLE
draw_set_color(c_black);
draw_set_alpha(.35);
if (grow_y&lt;170) grow_y+=20; //was 200

draw_rectangle(0,(320-grow_y+y_scale)*offset,(1280)*offset,(320+grow_y+y_scale)*offset,false);
draw_set_color(c_white);
draw_line((0)*offset,(320-grow_y+y_scale)*offset,(1280)*offset,(320-grow_y+y_scale)*offset);
draw_line((0)*offset,(320+grow_y+y_scale)*offset,(1280)*offset,(320+grow_y+y_scale)*offset);

//DRAW BACK COLOR 
if instance_exists(obj_KeyBoard_Bind) || instance_exists(obj_GamePad_Bind)
draw_set_color(c_dkgray);
else
draw_set_color(c_navy);

draw_set_alpha(.35);
draw_rectangle((x_menu-20+x_scale)*offset,(y-10+5+y_scale)*offset,(x_menu+280+x_scale)*offset,(y+10+5+y_scale)*offset,false);

//DRAW SHADOW
draw_set_color(c_black);

draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(fnt_Astron);
draw_set_alpha(.75);
draw_text_transformed((x_menu+4+x_scale)*offset,(y_menu+2+y_scale+20)*offset,"Options",offset,offset,0);
draw_set_alpha(.75*flash);
draw_set_font(fnt_LowGun);

font_size=.7;

if (shift_back&lt;4) shift_back+=.25;

//if (y-y_menu==40) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+40+y_scale+shift_back*.5)*offset,"Difficulty: " + difficulty,font_size*offset,font_size*offset,0);


//if (y-y_menu==60) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+60+y_scale+shift_back*.5)*offset,"Keyboard Setup"/* + ctlinput*/,font_size*offset,font_size*offset,0);


if (y-y_menu==60) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+60+y_scale+shift_back*.5)*offset,"Controller Config",font_size*offset,font_size*offset,0);

switch(global.blur_fx)
{
case 0:
if (y-y_menu==80) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+80+y_scale+shift_back*.5)*offset,"Blur FX: [Off]",font_size*offset,font_size*offset,0);
break;

case 1: 
if (y-y_menu==80) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+80+y_scale+shift_back*.5)*offset,"Blur FX: [Default]",font_size*offset,font_size*offset,0);
break;

case 2:
if (y-y_menu==80) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+80+y_scale+shift_back*.5)*offset,"Blur FX + Bloom: [Type1]",font_size*offset,font_size*offset,0);
break;

case 3:
if (y-y_menu==80) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+80+y_scale+shift_back*.5)*offset,"Blur FX: [Blur+Bloom]",font_size*offset,font_size*offset,0);
break;
}

if (y-y_menu==100) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+100+y_scale+shift_back*.5)*offset,"Volume: " + volume,font_size*offset,font_size*offset,0);
if (y-y_menu==120) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+120+y_scale+shift_back*.5)*offset,"Music: " + music,font_size*offset,font_size*offset,0);


/*
if window_get_fullscreen()
{
if (y-y_menu==160) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+160+y_scale+shift_back*.5)*offset,"FullScreen [on]",font_size*offset,font_size*offset,0);
}
    else
{
if (y-y_menu==160) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+160+y_scale+shift_back*.5)*offset,"FullScreen [off]",font_size*offset,font_size*offset,0);
}
*/

if (global.rumble==true)
{
if (y-y_menu==140) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+140+y_scale+shift_back*.5)*offset,"Rumble [on]",font_size*offset,font_size*offset,0);
}
    else
{
if (y-y_menu==140) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+140+y_scale+shift_back*.5)*offset,"Rumble [off]",font_size*offset,font_size*offset,0);
}

if (global.auto_pickup) //if (global.debug==true)
{
if (y-y_menu==160) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+160+y_scale+shift_back*.5)*offset,"Auto Equip [on]",font_size*offset,font_size*offset,0);
}
    else
{
if (y-y_menu==160) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+160+y_scale+shift_back*.5)*offset,"Auto Equip [off]",font_size*offset,font_size*offset,0);
}

if (global.auto_swap) //if (global.debug==true)
{
if (y-y_menu==180) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+180+y_scale+shift_back*.5)*offset,"Auto Swap  [on]",font_size*offset,font_size*offset,0);
}
    else
{
if (y-y_menu==180) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+180+y_scale+shift_back*.5)*offset,"Auto Swap [off]",font_size*offset,font_size*offset,0);
}


if (global.shock_fx==true)
{
if (y-y_menu==200) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+200+y_scale+shift_back*.5)*offset,"Shockwave FX [on]",font_size*offset,font_size*offset,0);
}
    else
{
if (y-y_menu==200) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+200+y_scale+shift_back*.5)*offset,"Shockwave FX [off]",font_size*offset,font_size*offset,0);
}

/*
if (global.vsync==true)
{
if (y-y_menu==220) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+220+y_scale+shift_back*.5)*offset,"Vsync [on]",font_size*offset,font_size*offset,0);
}
    else
{
if (y-y_menu==220) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+220+y_scale+shift_back*.5)*offset,"Vsync [off]",font_size*offset,font_size*offset,0);
}
*/

if (y-y_menu==220) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(y_menu+220+y_scale+shift_back*.5)*offset,"Back",font_size*offset,font_size*offset,0);


//DRAW FRONT

draw_set_color(c_white);
draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(fnt_Astron);
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+y_scale+20)*offset,"Options",offset,offset,0);

draw_set_font(fnt_LowGun);

//OPTIONS FRAME
draw_roundrect((x_menu-20+x_scale)*offset,(y_menu-32+y_scale+20)*offset, (x_menu+x_scale+280)*offset,(y_menu+250+y_scale)*offset,true); //was y_menu+280+yscale

/*
if (y-y_menu==40)
{ 
draw_set_alpha(flash);
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+40+y_scale)*offset,"Difficulty: " + difficulty,font_size*offset,font_size*offset,0); 
}
else 
{
draw_set_alpha(1);
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+40+y_scale)*offset,"Difficulty: " + difficulty,font_size*offset,font_size*offset,0);
}
*/

/*
if (y-y_menu==60)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+60+y_scale)*offset,"Keyboard Setup",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+60+y_scale)*offset,"Keyboard Setup",font_size*offset,font_size*offset,0);
}
*/

if (y-y_menu==60) //was 80
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+60+y_scale)*offset,"Controller Config",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+60+y_scale)*offset,"Controller Config",font_size*offset,font_size*offset,0);
}

switch(global.blur_fx)
{
case 0:
if (y-y_menu==80) //was 100
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+80+y_scale)*offset,"Blur FX: [Off]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1);
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+80+y_scale)*offset,"Blur FX: [Off]",font_size*offset,font_size*offset,0);
}
break;

case 1: 
if (y-y_menu==80) //was 100
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+80+y_scale)*offset,"Blur FX: [Default]",font_size*offset,font_size*offset,0); 
}
else 
{ 
draw_set_alpha(1);
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+80+y_scale)*offset,"Blur FX: [Default]",font_size*offset,font_size*offset,0);
}
break;

case 2:
if (y-y_menu==80) //was 100
{ 
draw_set_alpha(flash);
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+80+y_scale)*offset,"Blur FX + Bloom: [Type1]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+80+y_scale)*offset,"Blur FX + Bloom: [Type1]",font_size*offset,font_size*offset,0);
}
break;

case 3:
if (y-y_menu==80) //was 100
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+80+y_scale)*offset,"Blur FX: [Blur+Bloom]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+80+y_scale)*offset,"Blur FX: [Blur+Bloom]",font_size*offset,font_size*offset,0);
}
break;
}

if (y-y_menu==100)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+100+y_scale)*offset,"Volume: " + volume,font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+100+y_scale)*offset,"Volume: " + volume,font_size*offset,font_size*offset,0);
}

if (y-y_menu==120)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+120+y_scale)*offset,"Music: " + music ,font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+120+y_scale)*offset,"Music: " + music,font_size*offset,font_size*offset,0);
}

//FULLSCREEN
/*
if window_get_fullscreen()
{
if (y-y_menu==160)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+160+y_scale)*offset,"FullScreen [on]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+160+y_scale)*offset,"FullScreen [on]",font_size*offset,font_size*offset,0);
}
}
    else
{
if (y-y_menu==160)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+160+y_scale)*offset,"FullScreen [off]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+160+y_scale)*offset,"FullScreen [off]",font_size*offset,font_size*offset,0);
}
}
*/


if (global.rumble==true)
{
if (y-y_menu==140)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+140+y_scale)*offset,string(rumble_name)+" [on]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+140+y_scale)*offset,string(rumble_name)+" [on]",font_size*offset,font_size*offset,0);
}
}
    else
{
if (y-y_menu==140) 
{ 
draw_set_alpha(flash);
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+140+y_scale)*offset,string(rumble_name)+" [off]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+140+y_scale)*offset,string(rumble_name)+" [off]",font_size*offset,font_size*offset,0);
}
}

if (global.auto_pickup) 
{
if (y-y_menu==160)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+160+y_scale)*offset,"Auto Equip [on]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1);
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+160+y_scale)*offset,"Auto Equip [on]",font_size*offset,font_size*offset,0);
}
}
    else
{
if (y-y_menu==160) 
{ 
draw_set_alpha(flash);
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+160+y_scale)*offset,"Auto Equip [off]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+160+y_scale)*offset,"Auto Equip [off]",font_size*offset,font_size*offset,0);
}
}

if (global.auto_swap) 
{
if (y-y_menu==180)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+180+y_scale)*offset,"Auto Swap [on]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1);
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+180+y_scale)*offset,"Auto Swap [on]",font_size*offset,font_size*offset,0);
}
}
    else
{
if (y-y_menu==180) 
{ 
draw_set_alpha(flash);
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+180+y_scale)*offset,"Auto Swap [off]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+180+y_scale)*offset,"Auto Swap [off]",font_size*offset,font_size*offset,0);
}
}


if (global.shock_fx==false)
{
if (y-y_menu==200) 
{ 
draw_set_alpha(flash);
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+200+y_scale)*offset,"Shockwave FX [off]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1);  
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+200+y_scale)*offset,"Shockwave FX [off]",font_size*offset,font_size*offset,0);
}
}
    else
{
if (y-y_menu==200)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+200+y_scale)*offset,"Shockwave FX [on]",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1);  
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+200+y_scale)*offset,"Shockwave FX [on]",font_size*offset,font_size*offset,0);
}
}

/*
if (global.vsync==true)
{
if (y-y_menu==220)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+220+y_scale)*offset,"Vsync [on]",font_size*offset,font_size*offset,0); 
}
else 
{ 
draw_set_alpha(1);
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+220+y_scale)*offset,"Vsync [on]",font_size*offset,font_size*offset,0);
}
}
    else
{
if (y-y_menu==220)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+220+y_scale)*offset,"Vsync [off]",font_size*offset,font_size*offset,0); 
}
else 
{ 
draw_set_alpha(1);
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+220+y_scale)*offset,"Vsync [off]",font_size*offset,font_size*offset,0);
}
}
*/

if (y-y_menu==220)
{ 
draw_set_alpha(flash); 
draw_text_transformed((x_menu+shift_front+x_scale)*offset,(y_menu+220+y_scale)*offset,"Back",font_size*offset,font_size*offset,0); 
}
else
{ 
draw_set_alpha(1); 
draw_text_transformed((x_menu+x_scale)*offset,(y_menu+220+y_scale)*offset,"Back",font_size*offset,font_size*offset,0);
}



counter=1/scale;

/*
if (y-y_menu==60) //DRAW BIND KEY NOTICE
    {
        if !instance_exists(obj_KeyBoard_Bind) // (global.xboxcontroller == false) &amp;&amp;
        {
        draw_set_alpha(flash);
        draw_set_font(fnt_Orbitron);
        draw_text_transformed((760)*offset*counter,(450)*offset*counter,"(press",.8*offset*counter,.8*offset*counter,0);
        draw_sprite_ext(spr_xbox_A,0,(827)*offset*counter,(450)*offset*counter,.5*offset*counter,.5*offset*counter,0,c_white,flash);
        draw_text_transformed((850)*offset*counter,(450)*offset*counter,"or [space] to bind keys)",.8*offset*counter,.8*offset*counter,0);
        draw_set_alpha(1);
        }
    }
*/

if (y-y_menu==60) &amp;&amp; !instance_exists(obj_GamePad_Bind) //DRAW BIND GAMEPAD NOTICE
    {
        if !instance_exists(obj_KeyBoard_Bind) // (global.xboxcontroller == false) &amp;&amp;
        {
            if (global.platform==3)
            {
                draw_set_alpha(flash);
                draw_set_font(fnt_Orbitron);
                draw_text_transformed((813-25)*offset*counter,(500)*offset*counter,"(press",.8*offset*counter,.8*offset*counter,0);
                draw_sprite_ext(spr_xbox_A,0,(880-25)*offset*counter,(500)*offset*counter,.5*offset*counter,.5*offset*counter,0,c_white,flash);
                draw_text_transformed((903-25)*offset*counter,(500)*offset*counter,"to change buttons)",.8*offset*counter,.8*offset*counter,0);
                draw_set_alpha(1);
            }
            else
            {
                draw_set_alpha(flash);
                draw_set_font(fnt_Orbitron);
                draw_text_transformed((813)*offset*counter,(500)*offset*counter,"(press",.8*offset*counter,.8*offset*counter,0);
                draw_sprite_ext(spr_xbox_A,0,(880)*offset*counter,(500)*offset*counter,.5*offset*counter,.5*offset*counter,0,c_white,flash);
                draw_text_transformed((903)*offset*counter,(500)*offset*counter,"to bind keys)",.8*offset*counter,.8*offset*counter,0);
                draw_set_alpha(1);
            }
        }
    }
    
//DRAW FX TIPS
/*
if (y-y_menu==100)
    {
        draw_set_alpha(1);
        draw_set_color(c_ltgray);
        draw_roundrect((700)*offset*counter,(280)*offset*counter,(1100)*offset*counter,(340)*offset*counter,true);
        draw_set_halign(fa_center);
        draw_set_font(fnt_Orbitron);
        draw_text_transformed((900)*offset*counter,(300)*offset*counter,"[Turn off to boost performance]",1*offset*counter,1*offset*counter,0);  
        draw_set_font(fnt_Arial);
        draw_text_transformed((900)*offset*counter,(320)*offset*counter,"NOTE: BlurFx+Bloom may not work with certain video cards",1*offset*counter,1*offset*counter,0);
        draw_set_alpha(1);        
    }
*/

/*    
if (y-y_menu==220)
    {
        draw_set_alpha(1);
        draw_set_color(c_ltgray);
        draw_roundrect((720)*offset*counter,(280)*offset*counter,(1080)*offset*counter,(320)*offset*counter,true);
        draw_set_halign(fa_center);
        draw_set_font(fnt_Orbitron);
        draw_text_transformed((900)*offset*counter,(300)*offset*counter,"[Turn off to boost performance]",1*offset*counter,1*offset*counter,0);  
        draw_set_alpha(1);      
    }
*/
/*
if (y-y_menu==240)
    {
        draw_set_alpha(1);
        draw_set_color(c_ltgray);
        draw_roundrect((720)*offset*counter,(280)*offset*counter,(1080)*offset*counter,(320)*offset*counter,true);
        draw_set_halign(fa_center);
        draw_set_font(fnt_Orbitron);
        draw_text_transformed((900)*offset*counter,(300)*offset*counter,"[Turn on to avoid screen tearing]",1*offset*counter,1*offset*counter,0);     
        draw_set_alpha(1);   
    }
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if window_get_fullscreen()
{
offset=1.5;
}
else
{
offset=1;
}


draw_set_color(c_black);
draw_set_alpha(.25);

//DRAW RECTANGLE
if (grow_y&lt;220) grow_y+=20;
draw_rectangle(0,320-grow_y,1280,320+grow_y,false);

//DRAW SHADOW
draw_set_color(c_black);
draw_set_alpha(.5);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(fnt_Astron);
draw_text_transformed((x_menu+4)*offset,(y_menu+2)*offset,"Options",offset,offset,0);
draw_set_font(fnt_BytePolice);

if (shift_back&lt;4) shift_back+=.25;

if (y-y_menu==40) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+40+shift_back*.5)*offset,"Difficulty: " + difficulty,offset,offset,0);
if (y-y_menu==60) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+60+shift_back*.5)*offset,"Control Input: " + ctlinput,offset,offset,0);
if (y-y_menu==80) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+80+shift_back*.5)*offset,"Control Style: " + ctlstyle,offset,offset,0);

switch(global.blur_fx)
{
case 0:
if (y-y_menu==100) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+100+shift_back*.5)*offset,"Blur FX: [Off]",offset,offset,0);
break;

case 1: 
if (y-y_menu==100) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+100+shift_back*.5)*offset,"Blur FX: [Fast]",offset,offset,0);
break;

case 2:
if (y-y_menu==100) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+100+shift_back*.5)*offset,"Blur FX: [Best]",offset,offset,0);
break;
}

if (y-y_menu==120) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+120+shift_back*.5)*offset,"Volume: " + volume,offset,offset,0);
if (y-y_menu==140) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+140+shift_back*.5)*offset,"Music: " + music,offset,offset,0);

if window_get_fullscreen()
{
if (y-y_menu==160) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+160+shift_back*.5)*offset,"FullScreen [on]",offset,offset,0);
}
    else
{
if (y-y_menu==160) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+160+shift_back*.5)*offset,"FullScreen [off]",offset,offset,0);
}

if (global.rumble==true)
{
if (y-y_menu==180) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+180+shift_back*.5)*offset,"Rumble [on]",offset,offset,0);
}
    else
{
if (y-y_menu==180) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+180+shift_back*.5)*offset,"Rumble [off]",offset,offset,0);
}

if (global.debug==true)
{
if (y-y_menu==200) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+200+shift_back*.5)*offset,"Debug Mode [on]",offset,offset,0);
}
    else
{
if (y-y_menu==200) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+200+shift_back*.5)*offset,"Debug Mode [off]",offset,offset,0);
}

if (global.aa==0)
{
if (y-y_menu==220) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+220+shift_back*.5)*offset,"Anti-Aliasing  [off]",offset,offset,0);
}
    else
{
if (y-y_menu==220) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+220+shift_back*.5)*offset,"Anti-Aliasing "+string(global.aa)+"X",offset,offset,0);
}

if (global.vsync==true)
{
if (y-y_menu==240) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+240+shift_back*.5)*offset,"Vsync [on]",offset,offset,0);
}
    else
{
if (y-y_menu==240) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+240+shift_back*.5)*offset,"Vsync [off]",offset,offset,0);
}

if (y-y_menu==260) draw_text_transformed((x_menu+shift_back+shift_front)*offset,(y_menu+260+shift_back*.5)*offset,"Back",offset,offset,0);


//DRAW FRONT


draw_set_color(c_white);
draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(fnt_Astron);
draw_text_transformed((x_menu)*offset,(y_menu)*offset,"Options",offset,offset,0);
draw_set_font(fnt_BytePolice);
draw_roundrect((x_menu-64)*offset,(y_menu-32)*offset, (x_menu+312)*offset,(y_menu+290)*offset,true);


if (y-y_menu==40) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+40)*offset,"Difficulty: " + difficulty,offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+40)*offset,"Difficulty: " + difficulty,offset,offset,0);
if (y-y_menu==60) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+60)*offset,"Control Input: " + ctlinput,offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+60)*offset,"Control Input: " + ctlinput,offset,offset,0);
if (y-y_menu==80) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+80)*offset,"Control Style: " + ctlstyle,offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+80)*offset,"Control Style: " + ctlstyle,offset,offset,0);

switch(global.blur_fx)
{
case 0:
if (y-y_menu==100) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+100)*offset,"Blur FX: [Off]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+100)*offset,"Blur FX: [Off]",offset,offset,0);
break;

case 1: 
if (y-y_menu==100) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+100)*offset,"Blur FX: [Fast]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+100)*offset,"Blur FX: [Fast]",offset,offset,0);
break;

case 2:
if (y-y_menu==100) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+100)*offset,"Blur FX: [Best]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+100)*offset,"Blur FX: [Best]",offset,offset,0);
break;
}

if (y-y_menu==120) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+120)*offset,"Volume: " + volume,offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+120)*offset,"Volume: " + volume,offset,offset,0);
if (y-y_menu==140) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+140)*offset,"Music: " + music ,offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+140)*offset,"Music: " + music,offset,offset,0);

if window_get_fullscreen()
{
if (y-y_menu==160) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+160)*offset,"FullScreen [on]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+160)*offset,"FullScreen [on]",offset,offset,0);
}
    else
{
if (y-y_menu==160) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+160)*offset,"FullScreen [off]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+160)*offset,"FullScreen [off]",offset,offset,0);
}

if (global.rumble==true)
{
if (y-y_menu==180) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+180)*offset,"Rumble [on]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+180)*offset,"Rumble [on]",offset,offset,0);
}
    else
{
if (y-y_menu==180) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+180)*offset,"Rumble [off]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+180)*offset,"Rumble [off]",offset,offset,0);
}

if (global.debug==true)
{
if (y-y_menu==200) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+200)*offset,"Debug Mode [on]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+200)*offset,"Debug Mode [on]",offset,offset,0);
}
    else
{
if (y-y_menu==200) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+200)*offset,"Debug Mode [off]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+200)*offset,"Debug Mode [off]",offset,offset,0);
}

if (global.aa==0)
{
if (y-y_menu==220) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+220)*offset,"Anti-Aliasing  [off]",offset,offset,0); else  draw_text_transformed((x_menu)*offset,(y_menu+220)*offset,"Anti-Aliasing  [off]",offset,offset,0);
}
    else
{
if (y-y_menu==220) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+220)*offset,"Anti-Aliasing "+string(global.aa)+"X",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+220)*offset,"Anti-Aliasing "+string(global.aa)+"X",offset,offset,0);
}

if (global.vsync==true)
{
if (y-y_menu==240) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+240)*offset,"Vsync [on]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+240)*offset,"Vsync [on]",offset,offset,0);
}
    else
{
if (y-y_menu==240) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+240)*offset,"Vsync [off]",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+240)*offset,"Vsync [off]",offset,offset,0);
}

if (y-y_menu==260) draw_text_transformed((x_menu+shift_front)*offset,(y_menu+260)*offset,"Back",offset,offset,0); else draw_text_transformed((x_menu)*offset,(y_menu+260)*offset,"Back",offset,offset,0);













</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
