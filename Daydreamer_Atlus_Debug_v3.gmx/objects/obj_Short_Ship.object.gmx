<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy_Body</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale=.75;
image_yscale=.75;

/*
if(master.spr_QuadroPOD_Idle==0)
{
master.num+=1;
master.spr_QuadroPOD_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_Idle.png",26,0,1,86,142);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.spr_Little_Consumer_LookAround==0)
{
master.num+=1;
master.spr_Little_Consumer_LookAround=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_LookAround.png",31,0,1,63,79);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.spr_Medium_Consumer_Idle==0)
{
master.num+=1;
master.spr_Medium_Consumer_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Medium_Consumer_Idle.png",24,1,1,56,139);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

*/

if(master.spr_Ship_Short==0)
{
master.num+=1;
master.spr_Ship_Short=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Ship_Short.png",9,1,1,445,113);
sprite_collision_mask(global.sprite[master.num],1, 1, 0, 0,sprite_width, sprite_height,1,225);
//sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
//sprite_collision_mask(global.sprite[master.num], 0, 2, 320, 90, 565, 140, 1, 56);
}

sprite_index=global.sprite[master.spr_Ship_Short];

hp=50;
damage=2;
type=1;

desat=false;
scale=1;
color=image_blend;
west_east=0;
image_xscale=1;
image_yscale=1;
x_landing=0;
color=c_white;

image_speed=.5*global.game_speed;
enemy_type=irandom_range(1,3);
amount=irandom_range(1,5);
var i;
for (i=0; i&lt;amount;i+=1)
{
     
    switch (enemy_type)
    {
    case 1: //LITTLE CONSUMPER
    enemy_x[i]= irandom_range(-50,50);
    enemy_scale[i]=random_range(.5,1);
    enemy_frame[i]=irandom_range(1,30);
    break;
    
    case 2: //QUADRO POD
    enemy_x[i]= irandom_range(-50,50);
    enemy_scale[i]=random_range(.4,.7);
    enemy_frame[i]=irandom_range(1,26);
    break;
    
    case 3: //MEDIUM CONSUMER
    enemy_x[i]= irandom_range(-50,50);
    enemy_scale[i]=random_range(.4,1);
    enemy_frame[i]=irandom_range(1,23);
    break;
    }
}

active=true;
loaded=true;
docked=false;
departed=0;
self_destruct=false;

west_east=0;
hsp=5;
max_hsp=20;
vsp=0;


max_type_1=5;
max_type_2=5;
max_type_3=5;
                  
floatup=true;
float_inc=0;
acel=1;

   last_x_A=x;
   last_y_A=y;
        
   last_x_B=x;
   last_y_B=y;
        
   last_x_C=x;
   last_y_C=y;

//Color Correction----
brightness=0; //brightness
contrast=0; //contrast
//--------------------
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_EnemyHit_A</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_blend=color;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> if (abs(hsp)&lt;10)
 {
 if !instance_exists(obj_Aura_Ripple_stat_short)
            {
                
                instance_create(x-400*image_xscale,y+12,obj_Aura_Ripple_stat_short)
               /* 
                with instance_create(x-400*image_xscale,y+12,obj_Aura_Ripple_stat)
                {       
                var_wave_amount = 50; //higher = more waves
                var_wave_distortion = 50; //higher = less distortion
                var_wave_speed = 5; //higher = faster
                }
               */
            }
  }  
      
            with instance_create(x-445*image_xscale,y+12,obj_FireFlare)
            {
            image_xscale = random_range(3,4)*other.image_xscale;
            image_yscale = 4;
            image_angle = 0;
            }
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp=5;
active=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//BLAST OFF 
hsp=1;
//acel=1.5;
acel=1.15;
image_speed=.5*global.game_speed;
instance_create(x,y,obj_ScreenFlash);
with (instance_create(x-445*image_xscale,y+12,obj_FireFlare))
    {
    image_xscale = 4*other.image_xscale;
    image_yscale = 4;
    image_angle = 0;
    }

    last_x_A=x;
    last_y_A=y;
        
    last_x_B=x;
    last_y_B=y;
        
    last_x_C=x;
    last_y_C=y;
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !place_meeting(x,y,par_wall)
{
image_blend=color;        
           
            switch(enemy_type)
            {
            case 1:
            with instance_create(enemy_x[departed]+x,y,obj_Little_Consumer)
                {
                image_xscale=other.enemy_scale[other.departed]*other.scale*sign(other.image_xscale);
                image_yscale=other.enemy_scale[other.departed]*other.scale;
                scale=other.enemy_scale[other.departed]*other.scale;
                alarm[0]=500;
                
                moveChoice=4;
                moveChoose=false;
                grav=1;
                grounded=false;
                vsp=0;
                hsp=random_range(1,5);
                jhsp=hsp;
                west_east=0;
                desat=other.desat;
                always_active=true;
                }
            break;
            
            case 2:
            with instance_create(enemy_x[departed]+x,y,obj_QuadroPOD)
                {
                image_xscale=-other.enemy_scale[other.departed]*other.scale*sign(other.image_xscale);
                image_yscale=other.enemy_scale[other.departed]*other.scale;
                scale=other.enemy_scale[other.departed]*other.scale;
                moveChoice=6;
                moveChoose=false;
                alarm[0]=500;
                if sprite_exists(global.sprite[master.spr_QuadroPOD_JUMP])
                sprite_index=global.sprite[master.spr_QuadroPOD_JUMP];
                vsp=0;
                grav=0;
                jhsp=0;
                west_east=1;
                always_active=true;
                }
            break;
            
            case 3:
            with instance_create(enemy_x[departed]+x,y,obj_Medium_Consumer)
                {
                image_xscale=other.enemy_scale[other.departed]*other.scale*sign(other.image_xscale);
                image_yscale=other.enemy_scale[other.departed]*other.scale;
                scale=other.enemy_scale[other.departed]*other.scale;
                alarm[0]=500;
                moveChoice=4;
                moveChoose=false;
                grav=1;
                grounded=false;
                vsp=0;
                jumped=false;
                hsp=random_range(1,5);
                jhsp=hsp;
                west_east=0;
                desat=other.desat;
                always_active=true;
                }
            break;
             }
        
        enemy_scale[departed]=0;
        departed+=1;
        
    if  (departed&gt;=amount)
        { 
        loaded=false;
        hsp=-.5;
        acel=1;
        image_speed=.2;
        audio_sound_pitch(snd_droid_takeoff,global.game_speed);
        audio_play_sound(snd_droid_takeoff,10,false);
        alarm[1]=35/global.game_speed;
        }
}
else
{
alarm[0]=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;

if (active)
{
if (loaded) //IF UNDLOAD
{
    if (!docked)
    {
    switch(enemy_type) //LIMIT ENEMIES ----------------------------------------------------------------------
    { 
    case 1:
    if (instance_number(obj_Little_Consumer)&lt;max_type_1) 
        {
            if (hsp&lt;max_hsp) hsp+=.1;
        }
        else
        {  
            hsp=0;
        } 
    break;
   
    case 2:
    if (instance_number(obj_QuadroPOD)&lt;max_type_2) 
        {      
            if (abs(hsp)&lt;max_hsp) hsp+=.1;
        }
        else
        {
            hsp=0;
        } 
    break;
    }//END LIMIT ----------------------------------------------------------------------------
    
    vsp=0;
    image_speed=.4*global.game_speed;
    
    if(x_landing==0) //IF SEEK HERO LAND -------------------------
    {
        if(west_east==0)
        {
            if(x&gt;par_HERO.x-200) 
            {
            docked=true;
            alarm[0]=0;
            departed=0;
            }
        }
         if(west_east==1)
        {
            if(x&lt;par_HERO.x+200) 
            {
            docked=true;
            alarm[0]=0;
            departed=0;
            }
        }
     }//END SEEK HERE -----------------------------------------------
     
     else 
             
             {//PRESET LANDING POINT [NOT = TO 0] ------------------------------------
             
             if instance_exists(obj_Drifter) //LANDING POINT IF BOSS
                {
                x_landing=obj_Drifter.x+900*sign(obj_Drifter.image_xscale);
                }
                
             if(west_east==0)
                {
                    if(x&gt;x_landing) 
                    {
                        if (alarm[0]==-1)
                        {
                            docked=true;
                            alarm[0]=1;
                            departed=0;
                            hsp=0;
                        }
                    }
                }
                 if(west_east==1)
                {
                    if(x&lt;x_landing) 
                    {
                        if (alarm[0]==-1)
                        {
                            docked=true;
                            alarm[0]=1;
                            departed=0;
                            hsp=0;
                        }
                    }
                } 
             } //END PRESET LANDING POINT ----------------------------------------------- 
                
    }//END IF NOT DOCKED
    else
    {//START IF DOCKED -------------------------------------------
    
        
        image_speed=.4*global.game_speed;
        
        //INCH WAY TO CLEAR SPOT FOR LANDING --------------------------------------------
        if place_meeting(x,y,par_wall) 
            {
                      
                alarm[0]=1;
                hsp=max_hsp;//*.5;
                
            }
            else
            {
                if (alarm[0]=-1) alarm[0]=irandom_range(5,10)/global.game_speed;
                hsp=0;  
            }
                
    }// END IF DOCKED   
    
    
    for (i=0; i&lt;amount;i+=1) //INC ENEMY FRAMES ----------------------------------------------
    {
     enemy_frame[i]+=.5*global.game_speed;
     switch(enemy_type)
     {
     case 1:
     if (enemy_frame[i]&gt;=31) enemy_frame[i]=0;
     break;
     case 2:
     if (enemy_frame[i]&gt;=26) enemy_frame[i]=0;
     break;
     case 3:
     if (enemy_frame[i]&gt;=23) enemy_frame[i]=0;
     break;
     
     }    
    }
    
}
else // IF NOT LOADED - GO BACKWARDS and BOOST OFF
{
//if (hsp&gt;-20) hsp-=.1;
if (acel&gt;1) 
    {
        hsp = hsp*acel;
        last_x_C=last_x_B;
        last_y_C=last_y_B;
        
        last_x_B=last_x_A;
        last_y_B=last_y_A;
        
        last_x_A=x;
        last_y_A=y;
        
        
        
        if (hsp&lt;20)
        {
        if (alarm[3]=-1) alarm[3]=5/global.game_speed;
        
        if (hsp&gt;10)
        {
           
        
        audio_sound_pitch(snd_Rocket_B,global.game_speed);
        if !audio_is_playing(snd_Rocket_B)
            audio_play_sound(snd_Rocket_B,10,false);
            hsp+=10;
        }
        if (global.rumble)  gamepad_set_vibration(global.playing_index, 1, 1);
        }
        
        
    }
vsp=0;
if (image_speed&lt;1)image_speed+=.01*global.game_speed;

//LEFT TO RIGHT ----------------------------------------------------------
if (x&gt;room_width) &amp;&amp; (west_east==0) //RELOAD IF AT EDGE OF ROOM
    {
    if (self_destruct==true) instance_destroy();
    enemy_type=irandom_range(1,3);
    amount=irandom_range(1,5);
    
    if (global.rumble)  gamepad_set_vibration(global.playing_index, 0, 0);
    x=-300;
    y=irandom_range(view_yview+300,room_height-300);
    acel=1;
    
    
for (i=0; i&lt;amount;i+=1)
{
    
    switch (enemy_type)
    {
    case 1:
    enemy_x[i]= irandom_range(-50,50);
    enemy_scale[i]=random_range(.5,1);
    enemy_frame[i]=irandom_range(1,30);
    break;
    
    case 2:
    enemy_x[i]= irandom_range(-50,50);
    enemy_scale[i]=random_range(.4,.7);
    enemy_frame[i]=irandom_range(1,26);
    break;
    
    case 3:
    enemy_x[i]= irandom_range(-50,50);
    enemy_scale[i]=random_range(.5,1);
    enemy_frame[i]=irandom_range(1,23);
    break;
    }
}
    loaded=true;
    docked=false;
    hsp=0;
    active=false;
    alarm[2]=irandom_range(400,800)/global.game_speed;    
    }

//RIGHT TO LEFT----------------------------------------------------------
if (x&lt;0) &amp;&amp; (west_east==1) //RELOAD IF AT EDGE OF ROOM
{
    if (self_destruct==true) instance_destroy();
    enemy_type=irandom_range(1,3);
    amount=irandom_range(1,5);
    
    if (global.rumble)  gamepad_set_vibration(global.playing_index, 0, 0);
    x=room_width+300;
    y=irandom_range(view_yview+300,room_height-300);
    acel=1;
    
    
for (i=0; i&lt;amount;i+=1)
{
    
    switch (enemy_type)
    {
    case 1:
    enemy_x[i]= irandom_range(-30,100);
    enemy_scale[i]=random_range(.5,1);
    enemy_frame[i]=irandom_range(1,30);
    break;
    
    case 2:
    enemy_x[i]= irandom_range(-30,80);
    enemy_scale[i]=random_range(.4,.7);
    enemy_frame[i]=irandom_range(1,26);
    break;
    
    case 3:
    enemy_x[i]= irandom_range(-30,100);
    enemy_scale[i]=random_range(.5,1);
    enemy_frame[i]=irandom_range(1,23);
    break;
    }
}
    loaded=true;
    docked=false;
    hsp=0;
    active=false;
    alarm[2]=irandom_range(400,800)/global.game_speed;    
    }
} //END ELSE STATEMENT

//FLOATING  

          
if (floatup)
{
    if (docked) vsp=-1; else vsp=-.5;
    float_inc+=1;
}
else
{
    if (docked)
    vsp=1;
    else 
    vsp=.5;
    
    float_inc-=1;
}
            
if (float_inc&gt;=10) floatup=false;
if (float_inc&lt;=0) floatup=true;

            
x+=hsp*sign(image_xscale)*global.game_speed;
y+=vsp*global.game_speed;
}//END Active
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> var shoot
    shoot=instance_place(x,y,par_Shoot)
    if (shoot==noone)
    shoot=instance_nearest(x,y,par_Shoot)
    
        if (shoot!=noone)
        {  
        //hp=hp-par_Shoot.damage;
        hp=hp-shoot.damage;
        if (alarm[4] &lt;=-1)
        {
        alarm[4]=4; 
        image_blend = c_red;
        }
        
        if (hp&lt;=0)
        {
        image_speed=0;
        hsp=0;
        speed=0;
        image_blend = c_red;
        instance_create(x,y,obj_Explosion_A);
        instance_destroy();
        }
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
if (acel&gt;1)
{
if (color!=c_white) image_blend=color;
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index-3,last_x_C, last_y_C, image_xscale*scale, image_yscale*scale, 0, image_blend, .25 );
draw_sprite_ext(sprite_index, image_index-2,last_x_B, last_y_B, image_xscale*scale, image_yscale*scale, 0, image_blend, .5 );
draw_sprite_ext(sprite_index, image_index-1,last_x_A, last_y_A, image_xscale*scale, image_yscale*scale, 0, image_blend, .75 );
draw_set_blend_mode(bm_normal);
}

//shader_set(shd_bright_contrast);
//shader_set_uniform_f(global.brightness_amount , brightness);
//shader_set_uniform_f(global.contrast_amount, contrast);
if(desat)
{
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale*scale, image_yscale*scale, 0, image_blend, 1 );
shader_set(shdr_blackandwhite);
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale*scale, image_yscale*scale, 0, image_blend, .75 );
shader_reset();
}
else
{
if (color!=c_white) image_blend=color;
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale*scale, image_yscale*scale, 0, image_blend, 1 );
}


if (loaded)
{
var i;
for (i=0; i&lt;amount;i+=1)
{
    switch (enemy_type)
    {
    case 1:
    if sprite_exists(global.sprite[master.spr_Little_Consumer_LookAround])
    {
        if (desat)
        {
        draw_sprite_ext(global.sprite[master.spr_Little_Consumer_LookAround],enemy_frame[i],x+enemy_x[i],y-80*enemy_scale[i]*scale,enemy_scale[i]*scale*sign(image_xscale),enemy_scale[i]*scale,0,c_white,1);
        shader_set(shdr_blackandwhite);
        draw_sprite_ext(global.sprite[master.spr_Little_Consumer_LookAround],enemy_frame[i],x+enemy_x[i],y-80*enemy_scale[i]*scale,enemy_scale[i]*scale*sign(image_xscale),enemy_scale[i]*scale,0,c_white,.5);
        shader_reset();
        }
        else
        {
        draw_sprite_ext(global.sprite[master.spr_Little_Consumer_LookAround],enemy_frame[i],x+enemy_x[i],y-80*enemy_scale[i]*scale,enemy_scale[i]*scale*sign(image_xscale),enemy_scale[i]*scale,0,c_white,1);
        }
    }
    break;

    case 2:
    if sprite_exists(global.sprite[master.spr_QuadroPOD_Idle])
    draw_sprite_ext(global.sprite[master.spr_QuadroPOD_Idle],enemy_frame[i],x+enemy_x[i],y-50*enemy_scale[i]*scale,-enemy_scale[i]*scale*sign(image_xscale),enemy_scale[i]*scale,0,c_white,1);
    break;
    
    
    case 3:
    if sprite_exists(global.sprite[master.spr_Medium_Consumer_Idle])
    {
        if (desat)
        {
        draw_sprite_ext(global.sprite[master.spr_Medium_Consumer_Idle],enemy_frame[i],x+enemy_x[i],y-74*enemy_scale[i]*scale,enemy_scale[i]*scale*sign(image_xscale),enemy_scale[i]*scale,0,c_white,1);
        shader_set(shdr_blackandwhite);
        draw_sprite_ext(global.sprite[master.spr_Medium_Consumer_Idle],enemy_frame[i],x+enemy_x[i],y-74*enemy_scale[i]*scale,enemy_scale[i]*scale*sign(image_xscale),enemy_scale[i]*scale,0,c_white,.5);
        shader_reset();
        }
        else
        {
        draw_sprite_ext(global.sprite[master.spr_Medium_Consumer_Idle],enemy_frame[i],x+enemy_x[i],y-74*enemy_scale[i]*scale,enemy_scale[i]*scale*sign(image_xscale),enemy_scale[i]*scale,0,c_white,1);
        }//was y-62
    }
    break;
    
    }//END SWITCH
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>431,113</point>
    <point>288,288</point>
  </PhysicsShapePoints>
</object>
