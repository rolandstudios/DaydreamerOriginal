<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Vertical_Shaft</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>air_tube=true;
hold_open=false;
can_hold_open=false;
open=false;
always_locked=false;
locked=false;
depth=7;
color=image_blend;
if (colour_get_saturation(image_blend)&gt;0)
color_overide=true;
else
color_overide=false;

color_overide=true;
top = instance_create(x,y,obj_Vertical_Shaft_top)
with(top)
    {
    image_xscale = other.image_xscale;
    image_yscale = other.image_yscale;
    image_angle = other.image_angle;
    color=other.color;
    color_overide=other.color_overide;
    }
    
   collideID = instance_create(x,y,obj_Vertical_Shaft_collide);
   with (collideID)
    {
    image_xscale = other.image_xscale*2;
    image_yscale = other.image_yscale*2;
    image_angle = other.image_angle;
    }

    flash=0;
    flash_alpha=1;
    flash_type=irandom_range(1,3);
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>air_tube=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flash+=1;
if (flash&gt;3) flash=0;
flash_type=irandom_range(1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>locked=true;
audio_sound_pitch(snd_AirLock_close,global.game_speed);
audio_play_sound(snd_AirLock_close,10,false);
audio_sound_pitch(snd_Lock,global.game_speed);
audio_play_sound(snd_Lock,10,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(always_locked) locked=true;


if (locked==true) can_hold_open=true;
if (can_hold_open)
{
    if (locked==false) hold_open=true;
} 


if(!locked)
{

if (par_HERO.x-100 &lt; bbox_right) &amp;&amp; (par_HERO.x + 100 &gt; bbox_left) || (hold_open) //was 100
    {
    if (par_HERO.y-100 &lt; bbox_bottom) &amp;&amp; (par_HERO.y + 100 &gt; bbox_top) || (hold_open) //was 100
        {
        if(open==false) 
            {
            audio_sound_pitch(snd_Airlock_Open,global.game_speed);
            audio_play_sound(snd_Airlock_Open,10,false);
            }
        open=true;
        collideID.image_index=1;
        }
    }
     else 
    {
    if(open==true) 
        {
        audio_sound_pitch(snd_AirLock_close,global.game_speed);
        audio_play_sound(snd_AirLock_close,10,false);
        }
    open=false;
    collideID.image_index=0;
    }
                 
if instance_exists(top)
{
    with(top)
    {
    color=other.color;
    color_overide=other.color_overide;
    }
}    
    
if(open) &amp;&amp; (image_index&lt;10)
{
image_speed=.5*global.game_speed;
}
if(open) &amp;&amp; (round(image_index)&gt;=10)
{
image_speed=0;
}
if(!open) &amp;&amp; (image_index&gt;0)
{
image_speed=-.5*global.game_speed;
}
if(!open) &amp;&amp; (round(image_index)&lt;=0)
{
image_speed=0;
}

}//End NOT Locked
else
{
image_speed=0;
image_index=0;
}



if (alarm[1]==-1) alarm[1]=10/global.game_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_HERO">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//par_HERO.climbledge=false;

//if(par_HERO.grounded)
//{
if(par_HERO.wallpush&gt;0) par_HERO.accel=0;
if (par_HERO.grounded==false) par_HERO.wallpush=0;
//par_HERO.climbledge=false;
//}

if instance_exists (obj_dust_trail)
    with (obj_dust_trail) {instance_destroy();}
    
if (open)
{
if (air_tube)
{
    if (par_HERO.x&gt;x-50) &amp;&amp; (par_HERO.x&lt;x+50)
    {
        if (par_HERO.y&gt;y-50) &amp;&amp; (par_HERO.y&lt;y+50)
        {
        if !audio_is_playing(snd_Air_Tube)
            {
            alarm[2]=400;
            air_tube=false;
            audio_sound_pitch(snd_Air_Tube,random_range(.9,1.1)*global.game_speed);
            audio_play_sound(snd_Air_Tube,15,false);
            }
        }
    }
}
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(color_overide)
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,color,image_alpha);
else
draw_self();

if (flash_type==1)
{
    switch(round(alarm[1]*global.game_speed))
    {
    case 10: flash_alpha=.5; break;
    case 9: flash_alpha=0; break;
    case 8: flash_alpha=0; break;
    case 7: flash_alpha=0; break;
    case 5: flash_alpha=0; break;
    case 4: flash_alpha=0; break;
    case 3: flash_alpha=0; break;
    case 2: flash_alpha=0; break;
    case 1: flash_alpha=0; break;
    case 0: flash_alpha=.5; break;
    }
}

if (flash_type==2)
{
    switch(round(alarm[1]*global.game_speed))
    {
    case 10: flash_alpha=.75; break;
    case 9: flash_alpha=.5; break;
    case 8: flash_alpha=.25; break;
    case 7: flash_alpha=0; break;
    case 5: flash_alpha=0; break;
    case 4: flash_alpha=0; break;
    case 3: flash_alpha=0; break;
    case 2: flash_alpha=.25; break;
    case 1: flash_alpha=.5; break;
    case 0: flash_alpha=.75; break;
    }
}

if (flash_type==3)
{
    switch(round(alarm[1]*global.game_speed))
    {
    case 10: flash_alpha=.8; break;
    case 9: flash_alpha=.6; break;
    case 8: flash_alpha=.4; break;
    case 7: flash_alpha=.2; break;
    case 5: flash_alpha=0; break;
    case 4: flash_alpha=0; break;
    case 3: flash_alpha=.2; break;
    case 2: flash_alpha=.4; break;
    case 1: flash_alpha=.6; break;
    case 0: flash_alpha=.8; break;
    }
}

if (image_index&gt;8)
{
if (flash!=0)
draw_sprite_ext(spr_Vertical_Shaft_LED,0,x,y,image_xscale,image_yscale,image_angle,color,1)
else
draw_sprite_ext(spr_Vertical_Shaft_LED,0,x,y,image_xscale,image_yscale,image_angle,color,flash_alpha)
}

if (flash!=1) 
draw_sprite_ext(spr_Vertical_Shaft_LED,1,x,y,image_xscale,image_yscale,image_angle,color,1)
else
draw_sprite_ext(spr_Vertical_Shaft_LED,1,x,y,image_xscale,image_yscale,image_angle,color,flash_alpha)

if (flash!=2)
draw_sprite_ext(spr_Vertical_Shaft_LED,2,x,y,image_xscale,image_yscale,image_angle,color,1)
else
draw_sprite_ext(spr_Vertical_Shaft_LED,2,x,y,image_xscale,image_yscale,image_angle,color,flash_alpha)

if (flash!=3)
draw_sprite_ext(spr_Vertical_Shaft_LED,3,x,y,image_xscale,image_yscale,image_angle,color,1)
else
draw_sprite_ext(spr_Vertical_Shaft_LED,3,x,y,image_xscale,image_yscale,image_angle,color,flash_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>197,146</point>
    <point>198,198</point>
  </PhysicsShapePoints>
</object>
