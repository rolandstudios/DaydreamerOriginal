<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dropShadow_sm</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=par_HERO.x;
y=par_HERO.y;
last_y=y;
left=0;
right=0;

//INITIALIZE BLUR ----
timeCounter = 0;
oscillatorValue = 0;
rad=1;
//-------------------

if (global.HERO_type==0)
sprite_index=spr_dropShadow_smb;
else
sprite_index=spr_dropShadow_sm;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    x=par_HERO.x-7*par_HERO.image_xscale;
    y=par_HERO.y+68;
    
    image_blend=c_black;
    draw_set_colour(c_black);
    
    //image_blend=c_white;
    //draw_set_colour(c_white);
    
    if (global.HERO_type==1)
    {
    y_offset=0;
    opac=.4;
    }
    else
    {
    y_offset=-5;
    opac=.3;
    }
    
    rad=.4; //BLUR AMOUNT
    //INC BLUR OSCILATION
    timeCounter += 0.02;
    oscillatorValue = -abs(sin(timeCounter));
     
    var u_vRatio = shader_get_uniform(shader_blur, "u_vRatio");
    var u_threshold = shader_get_uniform(shader_blur, "u_threshold");
    var radius = rad * 0.001;
if !instance_exists(obj_LSD)
{
if (!par_HERO.ladder) 
{
if position_meeting(x,y,par_wall) 
{
    if(par_HERO.land)
    {
    if (image_xscale&lt;.25)image_xscale=.25;
    if (image_xscale&lt;1) 
        {
        image_xscale+=.25;
        }
        image_yscale=image_xscale;
    }
    else
    {
    image_xscale=1;
    image_yscale=1;
    }
    
    if (!position_meeting(bbox_left,y,par_wall))
    {
        left=bbox_left;
        while !position_meeting(left,y,par_wall) {left+=1;}
        left=left-bbox_left;
        if (left&gt;45) left=45;//CAP for clippling
    }
    else
    {
    left=0;
    }
    
    if (!position_meeting(bbox_right,y,par_wall))
    {
        right=bbox_right;
        while !position_meeting(right,y,par_wall) {right-=1;}
        right=right-bbox_right;
        if (right&lt;-45) right=-45;//CAP for clippling
    }
    else
    {
    right=0;
    }
       
    shader_set(shader_blur);
    shader_set_uniform_f(8,1);
    shader_set_uniform_f(u_threshold, 2*radius+(radius*oscillatorValue));
    if !place_free(x,y+1)
    if (left&gt;0)
    draw_sprite_part_ext(sprite_index, image_index, left*image_xscale, 0, sprite_get_width(sprite_index)-left*image_xscale, sprite_get_height(sprite_index), x+left-sprite_get_xoffset(sprite_index)*image_xscale, y-sprite_get_yoffset(sprite_index)*image_yscale+y_offset, image_xscale, image_yscale, image_blend, opac);
    else
    draw_sprite_part_ext(sprite_index, image_index, left*image_xscale, 0, sprite_get_width(sprite_index)+right, sprite_get_height(sprite_index), x+left-sprite_get_xoffset(sprite_index)*image_xscale, y-sprite_get_yoffset(sprite_index)*image_yscale+y_offset, image_xscale, image_yscale, image_blend, opac);
    shader_reset();
    last_y=y;
}
else //IF NOT GROUNDED
{
    if (par_HERO.vsp&lt;0)//IF MOVING UP
    {
    if position_meeting(x,last_y,par_wall)
    {
    if (image_xscale&gt;0) 
        {     
        image_xscale-=.2;
        image_yscale-=.2;
        
        if (!position_meeting(bbox_left,last_y,par_wall))
                    {
                    left=bbox_left;
                    while !position_meeting(left,last_y,par_wall) {left+=1;}
                    left=left-bbox_left;
                    if (left&gt;45) left=45;//CAP for clippling
                    }
                    else
                    {
                    left=0;
                    }
                    
                    if (!position_meeting(bbox_right,last_y,par_wall))
                    {
                        right=bbox_right;
                        while !position_meeting(right,last_y,par_wall) {right-=1;}
                        right=right-bbox_right;
                        if (right&lt;-45) right=-45;//CAP for clippling
                    }
                    else
                    {
                    right=0;
                    }
                    
        shader_set(shader_blur);
        shader_set_uniform_f(8,1);
        shader_set_uniform_f(u_threshold, 2*radius+(radius*oscillatorValue));
        //draw_set_blend_mode_ext(bm_dest_color, bm_zero);//MULTIPLY
        if (left&gt;0)
        draw_sprite_part_ext(sprite_index, image_index, left*image_xscale, 0, sprite_get_width(sprite_index)-left, sprite_get_height(sprite_index), x+left-sprite_get_xoffset(sprite_index)*image_xscale, last_y-sprite_get_yoffset(sprite_index)*image_yscale+y_offset, image_xscale, image_yscale, image_blend, opac);
        else
        draw_sprite_part_ext(sprite_index, image_index, left*image_xscale, 0, sprite_get_width(sprite_index)+right, sprite_get_height(sprite_index), x+left-sprite_get_xoffset(sprite_index)*image_xscale, last_y-sprite_get_yoffset(sprite_index)*image_yscale+y_offset, image_xscale, image_yscale, image_blend, opac);
        //draw_sprite_ext(sprite_index,image_index, x,last_y,image_xscale, image_yscale,0, image_blend,.4);
        shader_reset()
        //draw_set_blend_mode(bm_normal);
        }
    }
    }
}
}//END NOT LADDER
}
/*
draw_set_color(c_white);
draw_set_alpha(1);
draw_set_font(fnt_Arial);
draw_text(bbox_right,y+10,string(bbox_right));
draw_text(bbox_right,y+25,string(right));
draw_text(bbox_left,y+10,string(bbox_left));
draw_text(bbox_left,y+25,string(left));
//draw_text(x+100,y,"osc: "+string(oscillatorValue));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-7,-29</point>
    <point>60,60</point>
  </PhysicsShapePoints>
</object>
