<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_collide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.spr_Debris_Cloud==0)
{
master.num+=1;
master.spr_Debris_Cloud=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Debris_Cloud.png",56,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
sprite_collision_mask(global.sprite[master.num],  0, 2, 100, 90, 135, 125,2,225);
}


if(master.spr_Collector_Fire==0)
{
master.num+=1;
master.spr_Collector_Fire=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Collector_Fire.png",23,0,1,88,146);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Mechollector_Explode==0)
{
master.num+=1;
master.spr_Mechollector_Explode=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Mechollector_Explode.png",20,1,1,166,305);
sprite_index=global.sprite[master.num];
sprite_collision_mask(global.sprite[master.num], 1, 2, 0, 0, sprite_width, 300,0,225);
}

if(master.spr_Mechollector_GroundBlast==0)
{
master.num+=1;
master.spr_Mechollector_GroundBlast=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Mechollector_GroundBlast.png",36,1,1,168,304);
sprite_index=global.sprite[master.num];
sprite_collision_mask(global.sprite[master.num], 1, 2, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Mechollector_Jump==0)
{
master.num+=1;
master.spr_Mechollector_Jump=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Mechollector_Jump.png",28,1,1,134,407);
sprite_index=global.sprite[master.num];
sprite_collision_mask(global.sprite[master.num], 1, 2, 0, 0, sprite_width, sprite_height-20,0,225);
}

if(master.spr_Mechollector_Shoot==0)
{
master.num+=1;
master.spr_Mechollector_Shoot=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Mechollector_Shoot.png",26,1,1,152,296);
sprite_index=global.sprite[master.num];
sprite_collision_mask(global.sprite[master.num], 1, 2, 0, 0, sprite_width, 300,0,225);
}

if(master.spr_Mechollector_Turn==0)
{
master.num+=1;
master.spr_Mechollector_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Mechollector_Turn.png",16,1,1,165,289);
sprite_index=global.sprite[master.num];
sprite_collision_mask(global.sprite[master.num], 1, 2, 0, 0, sprite_width, 300,0,225);
}

if(master.spr_Mechollector_Walk==0)
{
master.num+=1;
master.spr_Mechollector_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Mechollector_Walk.png",26,1,1,134,309);
sprite_index=global.sprite[master.num];
sprite_collision_mask(global.sprite[master.num], 1, 2, 0, 0, sprite_width, 300,0,225);
}

if(master.spr_Mechollector_Stand==0)
{
master.num+=1;
master.spr_Mechollector_Stand=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Mechollector_Stand.png",26,1,1,133,305);
sprite_index=global.sprite[master.num];
sprite_collision_mask(global.sprite[master.num], 1, 2, 0, 0, sprite_width, 300,0,225);
}


scale=image_yscale;
if instance_exists(obj_HERO)
{
    if (par_HERO.x&lt;x)
    {
    image_xscale=-scale;
    west_east = 0;
    }
    else
    {
    image_xscale=scale;
    west_east = 1;
    }
}
else
{
image_xscale=-scale;
west_east = 0;
}


offset=10;
hp=810;
damage=10*global.difficulty;
grav=2;
moveChoose=false;
moveChoice=2;
alarm[0]=100;
swing_range = false;
hsp=0;
vsp=0;
acel=1;
stand=false;
image_speed=.5;
sprite_index=spr_collide;
while !place_meeting(x,y,par_wall) y+=1;
instance_create(x,y,obj_Mechollector_view);
turning=0;
shot_A=0;
shot_B=0;
land=false;
land2=false;

sprite_index=spr_collide;

hero_hp=0;
hero_damage=0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) 
{
global.world_clear[5]=1;

    //STEAM
    if (global.platform==0)
    {
    if !steam_get_achievement("ach_Defeat_Mechasmiles") 
        steam_set_achievement("ach_Defeat_Mechasmiles");
    }
    //XBOX ONE
    if (global.platform==1)
    {                     
        scr_XboxOne_Achievement(12);                      
    } 
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(12);                                   
    } 
        
with instance_create(x,y,obj_CheckPoint){World=5.5;Boss=true;}

//const=500/(4*60); //MIN CONSTANT
damage_bonus=round((100-hero_damage)*5);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=500;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus; 
    boss_num=5;    
    }
}
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turning=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
if audio_is_playing(snd_droid_walk)
    audio_stop_sound(snd_droid_walk);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Mechollector_view) instance_destroy();
if !instance_exists(par_HERO) {instance_destroy();}
else
{
sprite_index=spr_collide;


//CheckSwingRange
if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - scale*150) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + scale*150) 
 {
 swing_range = true;
 }
 else
 {
 if(par_HERO.x &gt; x + scale*250) || (par_HERO.x &lt; x - scale*250)
 swing_range = false;
 }
 
 //Check Direction and or TURN

if (par_HERO.x &gt; x)
{
    if (moveChoice!=3) &amp;&amp; (moveChoice!=5) &amp;&amp; (moveChoice!=6) || (moveChoose==true)
    {
    hsp=3*scale;
    
     if(west_east == 0)
        {  
        
            moveChoose=false;
            moveChoice=6;
            audio_sound_pitch(snd_saberwhoosh,global.game_speed);
            audio_play_sound(snd_saberwhoosh,10,false);
            turning+=1;
            obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Turn];
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector_view.image_index=0;
            alarm[0]=200/global.game_speed;
        
         
         hsp=0;
         }
         else
         {
         west_east = 1;
         image_xscale = scale;
         }
    }    
}

if (par_HERO.x &lt; x) 
{
    if (moveChoice!=3)&amp;&amp; (moveChoice!=5) &amp;&amp; (moveChoice!=6)|| (moveChoose==true)
    {
    hsp=-3*scale;
    if(west_east == 1)
        {
         
            moveChoose=false;
            moveChoice=6;
            audio_sound_pitch(snd_saberwhoosh,global.game_speed);
            audio_play_sound(snd_saberwhoosh,10,false);
            turning+=1;
            obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Turn];
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector_view.image_index=0;
            alarm[0]=200/global.game_speed;
            
         
         
         hsp=0;
         }
         else
         {
            west_east = 0;
            image_xscale = -scale;
         }
    
    }
   
}


 if(moveChoose==true)
    {   
        
         n=irandom_range(1, 5);
         while(n==moveChoice){n=irandom_range(1, 5);}
            moveChoice=n;
         
         
         //Initiallize the Move
        switch(moveChoice)
            {
            case 1:
            obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Stand];
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector.image_index=0;
            alarm[0]=irandom_range(100,250/global.game_speed);
            //audio_play_sound(snd_Mechollector_walk,10,false);
            break;      
            
            case 2:
            obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Walk];
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector.image_index=0;
           
            alarm[0]=25/global.game_speed;
            //audio_play_sound(snd_Mechollector_walk,10,false);
            break;          
            
            case 3:
            obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Jump];
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector_view.image_index=0;
            acel=1;
            if (par_HERO.x &gt; x) 
                jump_hsp=10*scale;
                else
                jump_hsp=-10*scale;
            //audio_play_sound(snd_monster_bite,10,false);
            break;
            
            case 4:
            obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Shoot];
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector_view.image_index=0;
            obj_Mechollector.image_index=0;
            alarm[0]=100/global.game_speed;
            shot_A=0;
            shot_B=0;
            break;
            
            case 5:
            obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_GroundBlast];
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector_view.image_index=0;
            alarm[0]=100/global.game_speed;
            audio_sound_pitch(snd_AirBlast,global.game_speed);
            audio_play_sound(snd_AirBlast,10,false);
            
            break;
            }
            
        moveChoose=false;            
    }

    
    




//Execute MOVE
    
switch(moveChoice)
{

case 1: //Walk

    obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Walk]; 
    obj_Mechollector_view.image_speed=.5*global.game_speed;         
    damage=8*global.difficulty;
    vsp=0;
    audio_sound_pitch(snd_droid_walk,global.game_speed);
    if !audio_is_playing(snd_droid_walk)
    audio_play_sound(snd_droid_walk,10,false);
    
break;

case 2: //Stand
    damage=8*global.difficulty;
    obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Stand];
    obj_Mechollector_view.image_speed=.5*global.game_speed;   
    hsp=0;
    vsp=0;
   
break;

case 3: //Jump
    damage=10*global.difficulty;
    obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Jump];
    obj_Mechollector_view.image_speed=.5*global.game_speed;
 
    if (obj_Mechollector_view.image_index&gt;5) &amp;&amp; (obj_Mechollector_view.image_index&lt;21)
    {
    hsp=jump_hsp
    vsp=-10;
    land=false;
    land2=false;
    }
    else
    {
    hsp=0;
    if (obj_Mechollector_view.image_index&gt;21)
        {
        if (grounded)
            {
                vsp=0;
                obj_Mechollector_view.image_speed=.5*global.game_speed;
            } 
            else 
            {
                vsp=20*acel;
                acel+=.4*global.game_speed;
                obj_Mechollector_view.image_speed=0;
            }
        }
    }
 
 
 if(round(obj_Mechollector_view.image_index)==22)  
 {
 if(land==false)
        {
         land=true;
         instance_create(x,y,obj_Aura_Ripple_stat);
         if instance_exists(obj_Screen_Shake){with (obj_Screen_Shake){instance_destroy();}}
         with instance_create(x,y,obj_Screen_Shake){quake=false; hold=30; wave=true; max_range=irandom_range(8,20);}
         audio_sound_pitch(snd_Bash,random_range(.75,.85)*global.game_speed);
         audio_play_sound(snd_Bash,15,false);
        }
 }
 
 if (obj_Mechollector_view.image_index&gt;22)
 {
 if (grounded) &amp;&amp; (land2==false)
 {
  land2=true;
  repeat(2)
         {
         with instance_create(x+50, y+10,obj_dust_trail) //RIGHT TRAIL
         {image_xscale=-5;image_yscale=5;image_speed=2;}
         with instance_create(x-50, y+10,obj_dust_trail) //LEFT TRAIL
         {image_xscale=5;image_yscale=5;image_speed=2;}
         }   
 }
 }
 
 if(obj_Mechollector_view.image_index&gt;=27) 
        {
        moveChoose=true;
        }
break;
            
case 4: //Shoot
 obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Shoot];
 obj_Mechollector_view.image_speed=.5*global.game_speed;
 hsp=0;
 
 if (round(obj_Mechollector_view.image_index)==16)
 {
 if (shot_B==0) 
    {
    instance_create(x,y,obj_ScreenFlash);
    audio_sound_pitch(snd_Mechollector_Blast,global.game_speed);
    audio_play_sound(snd_Mechollector_Blast,10,false);
    shot_B=1;
    }
 }
 
 if (round(obj_Mechollector_view.image_index)==5)
 {
     if (shot_A==0) 
     {
     instance_create(x,y,obj_ScreenFlash);
     audio_sound_pitch(snd_Mechollector_Blast,global.game_speed);
     audio_play_sound(snd_Mechollector_Blast,10,false);
     shot_A=1;
     }
     
 }
 
 
 if (round(obj_Mechollector_view.image_index)==7)
 {
    if (shot_A==1)
    instance_create(x+133*image_xscale,y-110*image_yscale,obj_Mechollector_Fire);
    shot_A=2;
 }
 if (round(obj_Mechollector_view.image_index)==16)
 {
    if (shot_B==1)
    instance_create(x+195*image_xscale,y-115*image_yscale,obj_Mechollector_Fire);
    shot_B=2;
 } 
 
 
 if (round(obj_Mechollector_view.image_index)&gt;=sprite_get_number(global.sprite[master.spr_Mechollector_Shoot])-1)
    moveChoose=true;
 
break;

case 5: //Ground Blast
 obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_GroundBlast];
 obj_Mechollector_view.image_speed=.5*global.game_speed;
 hsp=0;
 alarm[0]=100/global.game_speed;
 if( round(obj_Mechollector_view.image_index) == 10) 
    {
     audio_sound_pitch(snd_GrabBelly,global.game_speed); 
     if !audio_is_playing(snd_GrabBelly)
     audio_play_sound(snd_GrabBelly,10,false);
    }
 if(round(obj_Mechollector_view.image_index)== 16)
 {
 if !instance_exists(obj_Ginger_Debris_Cloud)
     {
     if instance_exists(obj_Screen_Shake){with (obj_Screen_Shake){instance_destroy();}}
     with instance_create(x,y,obj_Screen_Shake){quake=false; hold=30; wave=true; max_range=irandom_range(8,20);}  
     instance_create(x,y,obj_ScreenFlash);
     instance_create(x-125,y,Mechollector_GroundBlast_L)
     instance_create(x+125,y,Mechollector_GroundBlast_R)
     with instance_create(x-130,y,obj_Ginger_Debris_Cloud){scale=.75;}
     with instance_create(x+130,y,obj_Ginger_Debris_Cloud){scale=.75;}
     instance_create(x,y,obj_Aura_Ripple_stat);
     }
 }
 if (obj_Mechollector_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_Mechollector_GroundBlast]) - 1) moveChoose=true;
        
    
    
break;



case 6: //Turn
obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Turn]; 
obj_Mechollector_view.image_speed=.5*global.game_speed;

hsp=0;
vsp=0;

if (turning&gt;2)
{
    moveChoice=5;
    obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_GroundBlast];
    obj_Mechollector_view.image_speed=.5*global.game_speed;
    obj_Mechollector_view.image_index=0;
    alarm[0]=100/global.game_speed;
    audio_sound_pitch(snd_AirBlast,global.game_speed); 
    audio_play_sound(snd_AirBlast,10,false);
    turning=0;
}

if (obj_Mechollector_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_Mechollector_Turn])-1) 
    {
    moveChoose=true;
       
    if(west_east == 0)
        {
        west_east=1;
        image_xscale=-(image_xscale);
        obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Walk];
        x=x+(scale*30); //TURN OFFSET
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector.image_index=0;
            alarm[0]=200/global.game_speed;
            alarm[1]=50/global.game_speed;
        }
        else
        {
        west_east=0;
        image_xscale=-(image_xscale);
        obj_Mechollector_view.sprite_index = global.sprite[master.spr_Mechollector_Walk];
        x=x-(scale*30); //TURN OFFSET
            obj_Mechollector_view.image_speed=.5*global.game_speed;
            obj_Mechollector.image_index=0;
            alarm[0]=200/global.game_speed;
            alarm[1]=50/global.game_speed;
        }
    }
    
break;
}//End Switch

vsp = vsp + grav*global.game_speed;


//Collisions ------------------------------------------------------------



//Horizontal Collision ------------------------------


if place_meeting(x+hsp,y,par_wall) 
{
    
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp = 0;        
    }
    else
        {
        y=y-yplus;
        }
    
}

x = x + hsp*global.game_speed;



//Vertical Collision ------------------------------

if place_meeting(x,y+vsp,par_wall) 
{ 
if !place_free(x,y+vsp) 
 {    
    while (!place_meeting(x,y+sign(vsp),par_wall)) y=y+sign(vsp);
     

     
    if (sign(vsp) == 1)
    {
        grounded = 1; //Enable First Jump
        
    }
    
    vsp = 0;
 }    
}
else
{
   grounded = 0;
}

y = y + vsp*global.game_speed;

//obj_Mechollector_view.damage=damage;
obj_Mechollector_view.x=x;
obj_Mechollector_view.y=y-170*image_yscale;
obj_Mechollector_view.image_xscale=image_xscale;
obj_Mechollector_view.image_yscale=image_yscale;


if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if (grounded) image_blend=c_red; else image_blend=c_white;
if sprite_exists(sprite_index) draw_self();
}}
//Draw Disk Collision Mask
//draw_ellipse(x-sprite_xoffset, y-sprite_yoffset, x-sprite_xoffset+sprite_width, y-sprite_yoffset+sprite_height, true);
//actual collision
//draw_ellipse(x-offset, y+10*offset, x+offset, y+12*offset, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>137,304</point>
    <point>252,252</point>
  </PhysicsShapePoints>
</object>
