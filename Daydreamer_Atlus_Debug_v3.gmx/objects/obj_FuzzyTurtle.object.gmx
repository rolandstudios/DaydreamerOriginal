<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_FuzzyTurtle_Idle_A</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------
/*
if(sprite_get_yoffset(global.spr_FuzzyTurtle_Walk)!=46)
{
global.spr_FuzzyTurtle_Walk=sprite_add(working_directory+"\Imports\spr_FuzzyTurtle_Walk.png",25,0,1,22,46);
sprite_index=global.spr_FuzzyTurtle_Walk;
}

if(sprite_get_yoffset(global.spr_FuzzyTurtle_Talk)!=49)
{
global.spr_FuzzyTurtle_Talk=sprite_add(working_directory+"\Imports\spr_FuzzyTurtle_Talk.png",25,0,1,22,49);
sprite_index=global.spr_FuzzyTurtle_Talk;
}


if(sprite_get_yoffset(global.spr_FuzzyTurtle_Jump)!=79)
{
global.spr_FuzzyTurtle_Jump=sprite_add(working_directory+"\Imports\spr_FuzzyTurtle_Jump.png",33,0,1,23,79);
sprite_index=global.spr_FuzzyTurtle_Jump;
}

if(sprite_get_yoffset(global.spr_FuzzyTurtle_Ladder)!=54)
{
global.spr_FuzzyTurtle_Ladder=sprite_add(working_directory+"\Imports\spr_FuzzyTurtle_Ladder.png",12,0,1,24,54);
sprite_index=global.spr_FuzzyTurtle_Ladder;
}

if(sprite_get_yoffset(global.spr_FuzzyTurtle_SwimB)!=36)
{
global.spr_FuzzyTurtle_SwimB=sprite_add(working_directory+"\Imports\spr_FuzzyTurtle_SwimB.png",32,0,1,26,36);
sprite_index=global.spr_FuzzyTurtle_SwimB;
}

if(sprite_get_yoffset(global.spr_FuzzyTurtle_Idle_A)!=47)
{
global.spr_FuzzyTurtle_Idle_A=sprite_add(working_directory+"\Imports\spr_FuzzyTurtle_Idle_A.png",25,0,1,22,47);
sprite_index=global.spr_FuzzyTurtle_Idle_A;
}
*/
store=false;
sprite_index=spr_FuzzyTurtle_Idle_A;
angle=0;
tag_line=0;
heal=false;
frame=0;
healing=false;
quiting=false;
move=0;
part=55*par_HERO.image_xscale;
max_part=100;

float=false;
float_up=true;
float_factor=0;



msize = 10;
mx = ds_queue_create();
my = ds_queue_create();
ma = ds_queue_create();
ms = ds_queue_create();


for(i=0;i&lt;msize;i+=1)
{
    ds_queue_enqueue(mx,par_HERO.x);
    ds_queue_enqueue(my,y);
    ds_queue_enqueue(ma,image_angle);
    ds_queue_enqueue(ms,sprite_index);
   
}



//alpha_test=128;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y+25,obj_Twinkle_A);
if instance_exists(par_HERO) par_HERO.summon=false;
if instance_exists(obj_warps) obj_warps.Money_low=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>talking=false;
audio_sound_pitch(snd_electrical_glitch,global.game_speed);
audio_play_sound(snd_electrical_glitch,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>par_HERO.summon=false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//QUIT IF NO MONEY
var stall
if (global.CutScene) stall=true; else stall=false;
if instance_exists(obj_Inventory) stall=false;

var stall
if (global.CutScene) stall=true; else stall=false;
if instance_exists(obj_Inventory) stall=false;



if instance_exists(par_HERO)
{
if (par_HERO.hp&gt;=100) &amp;&amp; (par_HERO.energy&gt;=100)
{
alarm[0]=30;
}
else
{
if (par_HERO.money&lt;=4)
{
    quiting=true;
    image_index=0;
    alarm[1]= 200;
    alarm[2]= 55;
    talking=true;

    leaving_x=x;
    leaving_y=y+55;
    
    if (par_HERO.grounded==false) 
        {
        float=true;
        with instance_create(leaving_x,leaving_y+20,obj_StarBurst)
            {
            image_xscale=2;
            image_yscale=2;
            depth=-2;
            }
        }
    
    image_xscale=par_HERO.image_xscale;
 
 
    if !instance_exists(obj_TextPromt)
    {
        global.promt = "Not Enough PSY Matter!";
        with instance_create(x+32,y-32,obj_TextPromt)
            {
            hold=100;
            type=2;
            }
    }

}
else
{
if (par_HERO.ladder==false) &amp;&amp; (!stall)   // IF not on Ladder
{
//CAST SUPPORT
if (par_HERO.hp&lt;35)
{
    cast = 1;;
}
else
{
    if (par_HERO.hp&lt;par_HERO.energy) cast = 1;
    if (par_HERO.hp&gt;par_HERO.energy) cast = 2;
    if (par_HERO.hp==par_HERO.energy) cast = irandom_range(1,2);
}

switch(cast)
{

case 1: //HEAL CAST
par_HERO.hp=par_HERO.hp+irandom_range(5,10)*global.pets[0]*.5;
if (par_HERO.hp&gt;100) par_HERO.hp=100;
audio_sound_pitch(snd_WizardStun,global.game_speed);
audio_play_sound(snd_WizardStun,10,false);
heal=false;
healing=true;
frame=0;
image_index=0;
with instance_create(x,y,obj_Powerup_A_FULL) {color=c_red;}
instance_create(x-(45*par_HERO.image_xscale),y+55,obj_FireFlare_red);
par_HERO.money=par_HERO.money-5;
break;


case 2: //ENERGY
par_HERO.energy=par_HERO.energy+irandom_range(10,15)*global.pets[0]*.5;
if (par_HERO.energy&gt;100) par_HERO.energy=100;
audio_sound_pitch(snd_WizardStun,global.game_speed);
audio_play_sound(snd_WizardStun,10,false);
heal=false;
healing=true;
frame=0;
image_index=0;
with instance_create(x,y,obj_Powerup_A_FULL) {color=c_yellow;}
instance_create(x-(45*par_HERO.image_xscale),y+55,obj_FireFlare_red);
par_HERO.money=par_HERO.money-5;
break;


}//End Switch
}//end not ladder
    else
    alarm[0]=5;
}
}


if (par_HERO.money&lt;10)
{ 
if instance_exists(obj_warps)
    obj_warps.Money_low=true;
}
}
else
{
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
sprite_index = ds_queue_dequeue(ms);
//image_index = ds_queue_dequeue(ma);

// Queue the NEXT location
if (quiting==false)
{
if instance_exists(obj_PearStore_inside)
{
    if (store==false)
    {
    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
    }
store=true;
}
else
{
    if (store==true)
    {
    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
    }
store=false;
}


x = ds_queue_dequeue(mx)-(part);
y = ds_queue_dequeue(my);
angle = ds_queue_dequeue(ma)*1.5;


ds_queue_enqueue(ma,par_HERO.angle);



if (par_HERO.sprite_index==spr_Old_Olivia_Climb)
{
ds_queue_enqueue(mx,par_HERO.ledge_x);
ds_queue_enqueue(my,par_HERO.ledge_y);
}
else
{

ds_queue_enqueue(mx,par_HERO.x);

if (global.HERO_type==1) &amp;&amp; (par_HERO.ladder)
ds_queue_enqueue(my,par_HERO.y-5.5*par_HERO.ladder_climb+1);
else 
ds_queue_enqueue(my,par_HERO.y);

}

if instance_exists(obj_Baby_Fairy_tutorial)
  {
  if (tag_line==0)
        {
        tag = instance_create(x-0*image_xscale,y-25,obj_TextPromt);
        switch(irandom_range(1,1))
        {
        case 1: with tag {promt=" I'm a healer FYI! "; hold=100;} break;
        case 2: with tag {promt=" Let's do some Healing! "; hold=100;} break;
        case 3: with tag {promt=" Ready for Battle! "; hold=100;} break;
        }
        tag_line=1;
        }
      if instance_exists(tag)
      {
      if sign(image_xscale==1)
      tag.x=x-100;
      else
      tag.x=x;
      
      tag.y=y-25;
      }
  }
        
if (par_HERO.hsp!=0) 
   {
        if (par_HERO.image_xscale== -1)
        {
        if (part&gt;-(max_part)) part -=2;
        if (x&gt;par_HERO.x) image_xscale=-1;
        }
        else
        {
        if (part&lt;max_part) part +=2;
        if (x&lt;par_HERO.x) image_xscale=1;
        }  
    }
    
    image_xscale=par_HERO.image_xscale;

        
}//END FOLLOW


if (quiting==true)
{
if (talking)
    {
    if (!float)
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Talk);
        else
        ds_queue_enqueue(ms,spr_FuzzyTurtle_SwimB)
    }
    else

    {
    if (!float)
    ds_queue_enqueue(ms,spr_FuzzyTurtle_Idle_A);
        else
     ds_queue_enqueue(ms,spr_FuzzyTurtle_SwimB);
     
    if !float &amp;&amp; !instance_exists(obj_Owl_Snatch)
        {
        instance_create(x/*-(45*image_xscale)*/,y,obj_Owl_Snatch);
        }
    
    }
    if(float) 
                {
                    if(float_up) float_factor=float_factor+.1;
                    if(!float_up) float_factor=float_factor-.1;
        
                    if(float_factor==2) float_up=false;
                    if(float_factor==-2) float_up=true;
                    leaving_y = leaving_y + float_factor;
                }
}
else
{
if (healing==true)
{
ds_queue_enqueue(ms,spr_FuzzyTurtle_Jump);
if(image_index&gt;=30) healing=false;
}
else
{

if (global.HERO_type==0) //YOUNG OLIVIA
{
    if (par_HERO.sprite_index==spr_Young_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Young_Olivia_Jump_A) 
    || (par_HERO.sprite_index==spr_Young_Olivia_Jump_B) || (par_HERO.sprite_index==spr_Young_Olivia_Diagnal_Shoot_Split) 
    || (par_HERO.sprite_index==spr_Young_Olivia_Shoot_Down_Split) ||  (par_HERO.sprite_index==spr_Young_Olivia_Wall_Bounce)
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Jump);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Ladder)
    {  
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Ladder);
        image_index=abs(par_HERO.image_index/3);
        image_speed=0;
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Run)
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Walk);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Die_Air)
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_SwimB);
    }
    else
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Idle_A);
    }
}

if (global.HERO_type==1) //OLD OLIVIA
{
    if (par_HERO.sprite_index==spr_Old_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Old_Olivia_Jump_A) 
    || (par_HERO.sprite_index==spr_Old_Olivia_Jump_B) || (par_HERO.sprite_index==spr_Old_Olivia_Diagnal_Shoot_Split) 
    || (par_HERO.sprite_index==spr_Old_Olivia_Shoot_Down_Split) ||  (par_HERO.sprite_index==spr_Old_Olivia_Wall_Bounce)
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Jump);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Ladder) || (par_HERO.sprite_index==spr_Old_Olivia_Ladder_Climb)
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Ladder);
        image_index=abs(par_HERO.image_index/3);
        image_speed=0;
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Run)
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Walk);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Die_Air) || (par_HERO.sprite_index==spr_Old_Olivia_Climb) 
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_SwimB);
    }
    else
    {
        ds_queue_enqueue(ms,spr_FuzzyTurtle_Idle_A);
    }
}
}
}
//ds_queue_enqueue(ma,destid.image_index);

if (heal==false)
{
alarm[0]=irandom_range(100,300);
heal=true;
}



if(sprite_index == spr_FuzzyTurtle_Walk) 
image_speed=2*global.game_speed;
else
image_speed=.5*global.game_speed;

if(sprite_index == spr_FuzzyTurtle_Talk) 
image_speed=.75*global.game_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(alpha_test)
draw_text(x+200,y,"alpha_test: "+string(alpha_test));
*/
if sprite_exists(sprite_index)
{

if(par_HERO.Melee==true) &amp;&amp; (global.HERO_type==0) 
{
   if (par_HERO.sprite_index==spr_Old_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Young_Olivia_Jump_Kick)
    draw_sprite_ext(sprite_index, image_index, x, y+100,image_xscale,image_yscale, angle, image_blend, 1.0);
}
else
{
if(quiting==false) 
{
if (par_HERO.sprite_index!=spr_Old_Olivia_Ladder) &amp;&amp; (par_HERO.sprite_index!=spr_Old_Olivia_Ladder_Climb) &amp;&amp; (par_HERO.sprite_index!=spr_Young_Olivia_Ladder)
draw_sprite_ext(sprite_index, image_index, x, y+55, image_xscale,image_yscale, angle, image_blend, 1.0);
else
{
part=0;

//if (global.HERO_type==1)
//draw_sprite_ext(sprite_index, image_index, par_HERO.x, y+100-5.5*par_HERO.ladder_climb, image_xscale,image_yscale, 0, image_blend, 1.0);
//else
draw_sprite_ext(sprite_index, image_index, par_HERO.x, y+100, image_xscale,image_yscale, angle, image_blend, 1.0);
}

}
else //QUITING START --------------------------
{
    if(talking==false)
    {
    x=leaving_x;
    y=leaving_y;
    
    move+=0.04;
    image_blend=c_white;
    
    if !instance_exists(obj_Owl_Snatch) 
    {
    image_alpha=image_alpha-.01;;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,angle,image_blend,image_alpha);
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,75.0);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    
    }
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,angle,image_blend,image_alpha);
    if !instance_exists(obj_Owl_Snatch) shader_reset();
    }
    
    
    if(talking==true)
    {
    x=leaving_x;
    y=leaving_y;
    draw_sprite_ext(sprite_index, image_index, leaving_x, leaving_y, image_xscale,image_yscale, angle, image_blend, image_alpha);
    }
}
}
}//END IF SPRITE EXISTS
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>82,82</point>
  </PhysicsShapePoints>
</object>
