<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
audio_sound_gain(msc_LucidTrip_B,global.mus,0);


if instance_exists(par_HERO){instance_deactivate_object(par_HERO);}
if instance_exists(obj_warps){instance_deactivate_object(obj_warps);}
if instance_exists(obj_RedEnergyBar){instance_deactivate_object(obj_RedEnergyBar);}
if instance_exists(obj_Yellow_Energy){instance_deactivate_object(obj_Yellow_Energy);}
if instance_exists(obj_Weapon_Type){instance_deactivate_object(obj_Weapon_Type);}
if instance_exists(obj_camera_offset){instance_deactivate_object(obj_camera_offset);}
if instance_exists(obj_Title_Bloom) with (obj_Title_Bloom) {instance_destroy();}
if instance_exists(obj_LSD) with (obj_LSD) {instance_destroy();}
    
    can_back=true;
    
//END LOAD FILE ----------------------------------------------------------------------    
            global.creation=true;
            global.Trippy=false;
            global.CutScene=false;
            global.Parallax=true;
            global.VParallax=false;
            global.gamestart=true;
            target_rm=rm_Tutorial_0;


world=0; 

//LAST WORLD VISITED
if (global.World&gt;=1) &amp;&amp; (global.World&lt;=14) 
    {
    world=floor(global.World);       
    }
    else 
    {
    world=0; 
    }


            
grid_x=0;
grid_y=0;
rest=true;
select=false;


global.game_speed=1;
master.target_speed=1;


    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO) {instance_activate_object(par_HERO);}
if instance_exists(obj_warps){instance_activate_object(obj_warps);}
if instance_exists(obj_RedEnergyBar){instance_activate_object(obj_RedEnergyBar);}
if instance_exists(obj_Yellow_Energy){instance_activate_object(obj_Yellow_Energy);}
if instance_exists(obj_Weapon_Type){instance_activate_object(obj_Weapon_Type);}
if instance_exists(obj_camera_offset){instance_activate_object(obj_camera_offset);}

if instance_exists(obj_DJ)
    {
    obj_DJ.roomcount=12;
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(target_rm);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,0,obj_Curtain);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_back=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.current_world = world;
audio_stop_sound(msc_LucidTrip_B);
gamepad_set_vibration(global.playing_index, 0, 0);
global.gamestart = true; //ENABLE MEMFLUSHING
scr_master_flush();
if (alarm[5]==-1) alarm[5]=2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select=false;
gamepad_set_vibration(global.playing_index, 0, 0);
audio_play_sound(snd_whoosh,10,false);

obj_mod_00.start=false;
obj_mod_01.start=false;
obj_mod_02.start=false;
obj_mod_03.start=false;
obj_mod_04.start=false;
obj_mod_05.start=false;
obj_mod_06.start=false;
obj_mod_07.start=false;
obj_mod_08.start=false;
obj_mod_09.start=false;
obj_mod_10_12.start=false;
obj_mod_13.start=false;
obj_mod_14.start=false;


obj_mod_00.finish=true;
obj_mod_01.finish=true;
obj_mod_02.finish=true;
obj_mod_03.finish=true;
obj_mod_04.finish=true;
obj_mod_05.finish=true;
obj_mod_06.finish=true;
obj_mod_07.finish=true;
obj_mod_08.finish=true;
obj_mod_09.finish=true;
obj_mod_10_12.finish=true;
obj_mod_13.finish=true;
obj_mod_14.finish=true;


obj_mod_00.alarm[0]=irandom_range(1,10);
obj_mod_01.alarm[0]=irandom_range(1,10);
obj_mod_02.alarm[0]=irandom_range(1,10);
obj_mod_03.alarm[0]=irandom_range(1,10);
obj_mod_04.alarm[0]=irandom_range(1,10);
obj_mod_05.alarm[0]=irandom_range(1,10);
obj_mod_06.alarm[0]=irandom_range(1,10);
obj_mod_07.alarm[0]=irandom_range(1,10);
obj_mod_08.alarm[0]=irandom_range(1,10);
obj_mod_09.alarm[0]=irandom_range(1,10);
obj_mod_10_12.alarm[0]=irandom_range(1,10);
obj_mod_13.alarm[0]=irandom_range(1,10);
obj_mod_14.alarm[0]=irandom_range(1,10);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.mus&lt;=0) 
{
if audio_is_playing(msc_LucidTrip_B) audio_stop_sound(msc_LucidTrip_B);
}

if instance_exists(obj_LeaveArea) with (obj_LeaveArea) {select_x=0; instance_destroy();}
if instance_exists(obj_Title_Bloom){with (obj_Title_Bloom) {instance_destroy();}}
if instance_exists(obj_Bloom){with (obj_Bloom) {instance_destroy();}}

if !instance_exists(obj_Quit_WorldMap) &amp;&amp; !instance_exists(obj_WorldMap_StageSelect) &amp;&amp; (can_back)
{

if (master.paused==false) //CONTROL INPUT ---------------------------------
{
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);

Key_Pause = keyboard_check_pressed(vk_enter);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Back = gamepad_button_check_pressed(global.playing_index, gp_face2);
Key_Skip = gamepad_button_check_pressed(global.playing_index, gp_face3);

//OVERIDE

    if (master.paused)
    {
    Key_Up = false;
    Key_Down = false;
    Key_Left = false;
    Key_Right = false;
    
    Key_Pause = false;
    Key_Jump = false;
    Key_Back = false;
    Key_Skip = false;
    }



if (Key_Skip) //CHEAT AND CLEAR FOR DEBUG PURPOSES
{
       // global.world_clear[world]=1;
}

if keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter)  Key_Jump=true;  
if keyboard_check_pressed(vk_up) Key_Up=true;
if keyboard_check_pressed(vk_down) Key_Down=true;
if keyboard_check_pressed(vk_left) Key_Left=true;
if keyboard_check_pressed(vk_right) Key_Right=true;


if (rest)
{
    if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
        {
        Key_Up = 1;
        alarm[0]=10; 
        rest=false;
        } 
    if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
        {
        Key_Down = 1; 
        alarm[0]=10; 
        rest=false;
        } 
    if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) 
        {
        Key_Leftp = 1; Key_Left = 1; 
        alarm[0]=10;
        rest=false;
        } 
    if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) 
        {
        Key_Rightp = 1; Key_Right = 1; 
        alarm[0]=10;
        rest=false;
        } 
}
}//END MASTER PAUSE

if (Key_Up) || (Key_Down) || (Key_Left) || (Key_Right)
{
last_world=world;

    
    switch(world)
    {
    case 0:   
    if (Key_Up) &amp;&amp; global.world_clear[0] world=1;
    if (Key_Up) &amp;&amp; global.world_clear[1] world=1;
    if (Key_Right) &amp;&amp; global.world_clear[0]  world=1;  
    if (Key_Right) &amp;&amp; global.world_clear[1]  world=1;   
    break;
    
    case 1: 
    if (Key_Left) world=0;
    if (Key_Up) &amp;&amp; global.world_clear[1] world=8;
    if (Key_Right) &amp;&amp; global.world_clear[1] world=2;    
    break;
    
    case 2:   
    if (Key_Up) 
    {
    if (global.world_clear[2]) || (global.world_clear[8])  world=9;   
    }
    
    if (Key_Down) &amp;&amp; global.world_clear[2] world=3;
    if (Key_Left) world=1;
    if (Key_Right) &amp;&amp; global.world_clear[2] world=5; 
    
    if (Key_Left) &amp;&amp; (Key_Up)
        { 
            if global.world_clear[1] || global.world_clear[2]
            world=8;
        } 
         
    if (Key_Right) &amp;&amp; (Key_Up) 
        {
        if (global.world_clear[1] &amp;&amp; global.world_clear[2] &amp;&amp; global.world_clear[3] &amp;&amp; global.world_clear[4] &amp;&amp; global.world_clear[5] &amp;&amp;
            global.world_clear[6] &amp;&amp; global.world_clear[7] &amp;&amp; global.world_clear[8] &amp;&amp; global.world_clear[9])
        world=10;
        }    
    break;
    
    case 3:   
    if (Key_Up) 
        {
        if global.world_clear[2] world=2;
        }
    if (Key_Down) 
        {
        if (global.world_clear[12])
        world=13;
        }
    if (Key_Right) 
        {
        if (global.world_clear[3]) || (global.world_clear[5])
        world=4;    
        }
    
    if (Key_Left) &amp;&amp; (Key_Up) world=1;     
    break;
    
    case 4:   
    if (Key_Up) 
    {
    world=5;
    }
    
    if (Key_Down) 
    {
    if (global.world_clear[12])
    world=13;
    }
    
    if (Key_Left) 
    {
    if (global.world_clear[2])
    world=3;
    }
    
    if (Key_Right) 
    {
    if (global.world_clear[13])
    world=14; 
    }
    
    if (Key_Left) &amp;&amp; (Key_Up)
    {
     world=2;
    } 
     
    if (Key_Right) &amp;&amp; (Key_Up) 
    {
    if (global.world_clear[2])
    world=5;   
    }
    
    if (Key_Left) &amp;&amp; (Key_Down) 
    {
    if (global.world_clear[12])
    world=13;  
    }
    
    if (Key_Right) &amp;&amp; (Key_Down) 
    {
    if (global.world_clear[13])
    world=14;
    }  
    break;
    
    case 5:   
    if (Key_Up) || (Key_Left) &amp;&amp; (Key_Up)
    {
     if (global.world_clear[1] &amp;&amp; global.world_clear[2] &amp;&amp; global.world_clear[3] &amp;&amp; global.world_clear[4] &amp;&amp; global.world_clear[5] &amp;&amp;
            global.world_clear[6] &amp;&amp; global.world_clear[7] &amp;&amp; global.world_clear[8] &amp;&amp; global.world_clear[9])
            world=10;
    }
    
    if (Key_Down) 
        {
        if (global.world_clear[3]) || (global.world_clear[5])
        world=4;
        }
    if (Key_Left) 
        {
        if (global.world_clear[1])
        world=2;
        }
    if (Key_Right) 
        {
        if (global.world_clear[5])
        world=6;
        } 
    

    if (Key_Right) &amp;&amp; (Key_Up)
        {
        if (global.world_clear[5])
        world=6;
        } 
        
    if (Key_Left) &amp;&amp; (Key_Down) 
        {
        if (global.world_clear[3]) || (global.world_clear[5])
        world=4;
        }
          
    if (Key_Right) &amp;&amp; (Key_Down) 
        {
        if (global.world_clear[3]) || (global.world_clear[5])
        world=4;
        }
        
    break;
    
    case 6:   
    if (Key_Up) 
    {
    if (global.world_clear[6]) //edited//
    world=7;
    }
    
    if (Key_Down) 
    {   
    if (global.world_clear[4] || global.world_clear[2])     
    world=5;
    }
    
    if (Key_Left) 
    {
     if (global.world_clear[1] &amp;&amp; global.world_clear[2] &amp;&amp; global.world_clear[3] &amp;&amp; global.world_clear[4] &amp;&amp; global.world_clear[5] &amp;&amp;
            global.world_clear[6] &amp;&amp; global.world_clear[7] &amp;&amp; global.world_clear[8] &amp;&amp; global.world_clear[9]) 
    world=10;
    else
    world=5;
    }
  
    
    if (Key_Left) &amp;&amp; (Key_Up)
    {
    if global.world_clear[6] //edited//
    world=7;
    }   
    
    if (Key_Left) &amp;&amp; (Key_Down) 
    {
    if global.world_clear[4] || global.world_clear[2] || global.world_clear[6] //edited//
    world=5;
    }  
    break;
    
    
    case 7:   

    if (Key_Down) 
        {
        if global.world_clear[5]
        world=6;
        }
        
    if (Key_Left) 
    {
     if (global.world_clear[1] &amp;&amp; global.world_clear[2] &amp;&amp; global.world_clear[3] &amp;&amp; global.world_clear[4] &amp;&amp; global.world_clear[5] &amp;&amp;
         global.world_clear[6] &amp;&amp; global.world_clear[7] &amp;&amp; global.world_clear[8] &amp;&amp; global.world_clear[9])
            world=10;
    }
    
    if (Key_Right) 
        {
        if global.world_clear[5]
        world=6;
        } 
      
    if (Key_Left) &amp;&amp; (Key_Down) 
    {
    if (global.world_clear[1] &amp;&amp; global.world_clear[2] &amp;&amp; global.world_clear[3] &amp;&amp; global.world_clear[4] &amp;&amp; global.world_clear[5] &amp;&amp;
         global.world_clear[6] &amp;&amp; global.world_clear[7] &amp;&amp; global.world_clear[8] &amp;&amp; global.world_clear[9])
    world=10;  
    }
    
    if (Key_Right) &amp;&amp; (Key_Down) 
    {
    if global.world_clear[5]
    world=6;  
    }
    break;
    
    
    
    
    
    
    case 8:   
    if (Key_Down) world=1;
    
    if (Key_Right) 
    {
    if global.world_clear[8] || global.world_clear[2] //edited//
    world=9;
    else
    world=2;
    } 
    

    if (Key_Right) &amp;&amp; (Key_Up) 
    {
    if global.world_clear[8] //edited//
    world=9;   
    }
    
    if (Key_Left) &amp;&amp; (Key_Down) 
    {
    world=1;  
    }
    
    if (Key_Right) &amp;&amp; (Key_Down) 
    {
    world=2;
    }  
    break;
    
    
    case 9:   
    if (Key_Down) 
    {
    if global.world_clear[1]
    world=2;
    }
    
    if (Key_Left)
    { 
    if global.world_clear[1] 
    world=8;
    }
    
    if (Key_Right) 
    {
     if (global.world_clear[1] &amp;&amp; global.world_clear[2] &amp;&amp; global.world_clear[3] &amp;&amp; global.world_clear[4] &amp;&amp; global.world_clear[5] &amp;&amp;
         global.world_clear[6] &amp;&amp; global.world_clear[7] &amp;&amp; global.world_clear[8] &amp;&amp; global.world_clear[9])
    world=10;
    } 
    
    if (Key_Left) &amp;&amp; (Key_Up) 
    { 
    if global.world_clear[1] 
    world=8;
    }  
    
    if (Key_Right) &amp;&amp; (Key_Up) 
    {
     if (global.world_clear[1] &amp;&amp; global.world_clear[2] &amp;&amp; global.world_clear[3] &amp;&amp; global.world_clear[4] &amp;&amp; global.world_clear[5] &amp;&amp;
         global.world_clear[6] &amp;&amp; global.world_clear[7] &amp;&amp; global.world_clear[8] &amp;&amp; global.world_clear[9])
    world=10;
    }
      
    if (Key_Left) &amp;&amp; (Key_Down) 
    {
    if global.world_clear[1]
    world=8;  
    }
    
    if (Key_Right) &amp;&amp; (Key_Down) 
    {
    if (global.world_clear[1] &amp;&amp; global.world_clear[2] &amp;&amp; global.world_clear[3] &amp;&amp; global.world_clear[4] &amp;&amp; global.world_clear[5] &amp;&amp;
         global.world_clear[6] &amp;&amp; global.world_clear[7] &amp;&amp; global.world_clear[8] &amp;&amp; global.world_clear[9])
    world=10;
    } 
    break;
    
    case 10:   
    if (Key_Up) 
    {
    if global.world_clear[10]
    world=11;
    }
    if (Key_Down) world=5;
    if (Key_Left) world=9;
    if (Key_Right) world=7; 
    
    if (Key_Left) &amp;&amp; (Key_Up) world=9;  
    if (Key_Right) &amp;&amp; (Key_Up) world=7;   
    if (Key_Left) &amp;&amp; (Key_Down) world=2;  
    if (Key_Right) &amp;&amp; (Key_Down) world=6;  
    break;
    
    case 11:   
    if (Key_Up) 
    {
    if global.world_clear[11]
    world=12;
    }
    if (Key_Down) world=10;
    break;
    
    case 12:   
    if (Key_Down) world=11;
    break;
    
    case 13:   
    if (Key_Up) world=4;
    if (Key_Right) 
    {
    if global.world_clear[13]
    world=14;
    } 
    
    if (Key_Left) &amp;&amp; (Key_Up) world=3;  
    break;
    
    case 14:   
    if (Key_Up) world=4;
    if (Key_Left) world=13;
    
    if (Key_Left) &amp;&amp; (Key_Up) world=4;   
    break;
    
    }
    
    if  (last_world!=world) 
    {
    audio_sound_pitch(snd_Cine_Bash,random_range(.95,1.05));
    audio_play_sound(snd_Cine_Bash,10,false);
    }

}

if (Key_Jump)
    {         
        if (world==0) //TUTORIAL MENU
        {
          if !instance_exists(obj_WorldMap_Tutorial)
            {
                if (global.ranked==true) &amp;&amp; (global.world_clear[world]==1)
                {
                audio_play_sound(snd_diggweed,12,false);
                }
                else
                {
                instance_create(25,625,obj_WorldMap_Tutorial);
                can_back=false;
                }
            }
        
        }
        else //REGULAR MENU
        {
            if !instance_exists(obj_WorldMap_StageSelect)
            {
                  if (global.ranked==true) &amp;&amp; (global.world_clear[world]==1)
                  {
                  audio_play_sound(snd_diggweed,12,false);
                  }
                  else
                  {
                  instance_create(25,625,obj_WorldMap_StageSelect);
                  can_back=false;
                  }
            }
        }
 
    }
    
if (select)
{
   gamepad_set_vibration(global.playing_index, 1, 1);
}

//SHOW HIDE AVITAR
if (world!=1) {obj_Avitar_mod_01.visible=false; obj_Avitar_mod_01.impact=2;}
if (world!=2) {obj_Avitar_mod_02.visible=false; obj_Avitar_mod_02.impact=2;}
if (world!=3) {obj_Avitar_mod_03.visible=false; obj_Avitar_mod_03.impact=2;}
if (world!=4) {obj_Avitar_mod_04.visible=false; obj_Avitar_mod_04.impact=2;}
if (world!=5) {obj_Avitar_mod_05.visible=false; obj_Avitar_mod_05.impact=2;}
if (world!=6) {obj_Avitar_mod_06.visible=false; obj_Avitar_mod_06.impact=2;}
if (world!=7) {obj_Avitar_mod_07.visible=false; obj_Avitar_mod_07.impact=2;}
if (world!=8) {obj_Avitar_mod_08.visible=false; obj_Avitar_mod_08.impact=2;}
if (world!=9) {obj_Avitar_mod_09.visible=false; obj_Avitar_mod_09.impact=2;}
if (world!=10) {obj_Avitar_mod_10.visible=false; obj_Avitar_mod_10.impact=2;}
if (world!=11) {obj_Avitar_mod_11.visible=false; obj_Avitar_mod_11.impact=2;}
if (world!=12) {obj_Avitar_mod_12.visible=false; obj_Avitar_mod_12.impact=2;}
if (world!=13) {obj_Avitar_mod_13.visible=false; obj_Avitar_mod_13.impact=2;}
if (world!=14) {obj_Avitar_mod_14.visible=false; obj_Avitar_mod_14.impact=2;}

switch(world)
{
case 1: obj_Avitar_mod_01.visible=true; break;
case 2: obj_Avitar_mod_02.visible=true; break;
case 3: obj_Avitar_mod_03.visible=true; break;
case 4: obj_Avitar_mod_04.visible=true; break;
case 5: obj_Avitar_mod_05.visible=true; break;
case 6: obj_Avitar_mod_06.visible=true; break;
case 7: obj_Avitar_mod_07.visible=true; break;
case 8: obj_Avitar_mod_08.visible=true; break;
case 9: obj_Avitar_mod_09.visible=true; break;
case 10: obj_Avitar_mod_10.visible=true; break;
case 11: obj_Avitar_mod_11.visible=true; break;
case 12: obj_Avitar_mod_12.visible=true; break;
case 13: obj_Avitar_mod_13.visible=true; break;
case 14: obj_Avitar_mod_14.visible=true; break;
}


if (Key_Back) &amp;&amp;  (can_back==true)
{
if !instance_exists(obj_Quit_WorldMap)
    instance_create(100,150,obj_Quit_WorldMap);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if instance_exists(obj_DJ)
{
with (obj_DJ)
    {
        audio_stop_sound(music_track);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen() offset=1.5 else offset=1;
draw_set_alpha(1);
draw_rectangle_color(0,0,1280*offset,720*offset,make_color_rgb(113,113,113),make_color_rgb(113,113,113),make_color_rgb(23,23,23),make_color_rgb(33,33,33),false);
draw_set_color(make_color_rgb(120,120,120));
draw_set_alpha(.25);

for (a=0;a&lt;1280*offset; a+=25)
{
    draw_line((a+grid_x)*offset,0,(a+grid_x)*offset,720*offset);  
}

for (b=0;b&lt;720*offset; b+=25)
{
    draw_line(0,(b+grid_y)*offset,1280*offset,(b+grid_y)*offset);  
}

 grid_x+=.25*offset; 
 grid_y-=.25*offset; 
 if (grid_x&gt;25) grid_x=0; 
 if (grid_y&lt;0) grid_y=25; 
 
 draw_set_alpha(1);
 draw_set_color(c_white);
 
//Draw CONTROLS --------------------------------------------------------------------------------------
if( obj_mod_01.start==false) &amp;&amp; (obj_mod_01.finish=false)
{
    if !instance_exists(obj_WorldMap_StageSelect) &amp;&amp; (select=false)
    {
    draw_set_halign(fa_left);
    draw_set_font(fnt_LowGun);
    
    draw_set_color(c_black); draw_set_alpha(.25);
    draw_sprite_ext(spr_xbox_A,0,(50-2)*offset,(695+2)*offset,.45*offset,.45*offset,0,c_black,.4);
    draw_sprite_ext(spr_xbox_B,0,(150-2)*offset,(695+2)*offset,.45*offset,.45*offset,0,c_black,.4);
    draw_text_transformed((50-2)*offset,(695+2)*offset,"    - Select",.5*offset,.5*offset,0);
    draw_text_transformed((150-2)*offset,(695+2)*offset,"    - Quit to Title Menu",.5*offset,.5*offset,0);
    
    draw_set_color(c_white); draw_set_alpha(1);
    draw_sprite_ext(spr_xbox_A,0,50*offset,695*offset,.45*offset,.45*offset,0,c_white,1);
    draw_sprite_ext(spr_xbox_B,0,150*offset,695*offset,.45*offset,.45*offset,0,c_white,1);
    draw_text_transformed(50*offset,695*offset,"    - Select",.5*offset,.5*offset,0);
    draw_text_transformed(150*offset,695*offset,"    - Quit to Title Menu",.5*offset,.5*offset,0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
