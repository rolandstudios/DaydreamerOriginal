<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Ray</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>-1</persistent>
  <parentName>par_Shoot</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO)
{
instance_destroy();
}
else
{
x1=x;
y1=y;

damage=.01;
color=c_white;

fire_y=par_HERO.y-25;
fire_x=par_HERO.x;

scale=.1;
cone_up=true;

image_xscale=0;
image_yscale=.1;
speed=0;
s_speed=speed;

dist=0;
dark=instance_create(x,y,obj_Screen_Darken);

with(dark)
{
    max_dark=.1; 
    inc=.1; 
    hold=100; 
    depth=2;
}
if (global.rumble) gamepad_set_vibration(global.playing_index,scale*.5,scale*.5);
audio_sound_pitch(snd_BombCharge,1.25*global.game_speed);
audio_play_sound(snd_BombCharge,12,false);

instance_create(x,y,obj_Aura_Ripple_stat_short);
if !instance_exists(obj_static_noise_B)
    instance_create(x,y,obj_static_noise_B);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_static_noise_B){ with (obj_static_noise_B) {fade_up=false;}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_pitch(snd_HitEQ,global.game_speed);
audio_play_sound(snd_HitEQ,55,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO)
{
instance_destroy();
}
else
{
if (s_speed&lt;=0)
{
        fire_y=par_HERO.y-25;
        fire_x=par_HERO.x;
        
        if (par_HERO.sprite_index==spr_Old_Olivia_Diagnal_Shoot_Split)
        {    
            fire_y=par_HERO.y+15;
            fire_x=par_HERO.x-15*par_HERO.image_xscale;
        }
        
        if (par_HERO.sprite_index==spr_Old_Olivia_Jump_Shoot)
        {    
            fire_x=par_HERO.x+25*par_HERO.image_xscale;
            fire_y=fire_y-8-par_HERO.vsp;
        }

        switch(par_HERO.ray_look)
        {
        case 12:
        fire_y=fire_y-70;
        fire_x=fire_x-20*par_HERO.image_xscale;
        image_angle = 90;
        break;
        
        case 3:
        fire_y=fire_y-28;
        fire_x=fire_x+45;
        image_angle = 0; 
        break;
        
        case 9:
        fire_y=fire_y-28;
        fire_x=fire_x-45;
        image_angle  = 180; 
        break;
        
        case 2:
        fire_y=fire_y-52;
        fire_x=fire_x+22;
        
            if (par_HERO.crouch)
            image_angle = 33;
            else
            image_angle = 45;
        break;
        
        case 10:
        fire_y=fire_y-52;
        fire_x=fire_x-22;
        if (par_HERO.crouch)
            image_angle = 147;
            else
            image_angle = 135;   
        break;
        
        case 6:
        fire_y=fire_y+25;
        if (par_HERO.crouch)
        {
            fire_y+=33;
        }
        if (par_HERO.crouch)
        fire_x=fire_x-1*image_xscale;
        else
        fire_x=fire_x-5*par_HERO.image_xscale;
        
        image_angle  = 270;    
        break;
        
        case 5:
        fire_y=fire_y+7;
        fire_x=fire_x+62;
        if (par_HERO.crouch)
        {
            fire_y+=11;
            fire_x+=11;
        }
        image_angle = 315;
        break;
        
        case 7:
        fire_y=fire_y+7;
        fire_x=fire_x-62;
        if (par_HERO.crouch)
        {
            fire_y+=11;
            fire_x-=11;
        }
        image_angle = 225;
        break;
        }      


        if (par_HERO.sprite_index==spr_Old_Olivia_Diagnal_Shoot_Split)
        {    
            fire_y=par_HERO.y-20;
            fire_x=par_HERO.x+15*par_HERO.image_xscale;
        }
        
        if (par_HERO.crouch) 
        {
        fire_y+=45; //edit 10/28/15
        if (par_HERO.Key_Up) 
            {
            if !(par_HERO.Key_Left) &amp;&amp; !(par_HERO.Key_Right)
            fire_x+=15*par_HERO.image_xscale;
            }
        }
        
        if (global.rumble) gamepad_set_vibration(global.playing_index,scale*.5,scale*.5);
        
        with (dark) //INC DARKNESS
            {
            image_alpha=.2*other.image_yscale; 
            }
}
else
{
    gamepad_set_vibration(global.playing_index,0,0);
}

            if (par_HERO.firing==false) || (par_HERO.energy&lt;=0) || (par_HERO.not_grounded_count&gt;=30) || (par_HERO.vsp&lt;0)//|| (par_HERO.grounded==false) //edit 031616
            {
            if instance_exists(obj_static_noise_B){ with (obj_static_noise_B) {fade_up=false;}}
              
            
                if (s_speed&lt;=0)
                {
                s_speed=1.25;
                with (dark){instance_destroy();}
                if !instance_exists(obj_Aura_Ripple_stat) instance_create(x,y,obj_Aura_Ripple_stat); 
                //instance_create(x,y,obj_Aura_Ripple_stat_short);
                instance_create(x,y,obj_ScreenFlash);
                direction=image_angle;
                
                audio_sound_pitch(snd_monster13_Zap_Aura,global.game_speed);
                audio_play_sound(snd_monster13_Zap_Aura,11,false);
                
                audio_sound_pitch(snd_HeavyDamage,global.game_speed);
                audio_play_sound(snd_HeavyDamage,9,false);
                }
            }
            image_speed=.5*global.game_speed;
            
            
//MEETING ENEMY START ----------------------------------
if place_meeting(x,y,par_Enemy_Body)
{
    /*
    if !audio_is_playing(snd_tripple_sound) 
    {
    audio_sound_pitch(snd_tripple_sound,random_range(1.1,1.2)*global.game_speed);
    audio_play_sound(snd_tripple_sound,15,false);
    }
    */
    
    inst=instance_place(x,y,par_Enemy_Body);
    if (inst==noone)
    inst=instance_nearest(x,y,par_Enemy_Body);

if (inst!=noone)
{
if (inst.type==1)
{
 xplode=instance_create(inst.x+irandom_range(-25,25),inst.y+irandom_range(-25,25),obj_Explosion_B); 
 xplode_sm=instance_create(inst.x+irandom_range(-35,35),inst.y+irandom_range(-25,25),obj_Explosion_tempo);
 
 with (xplode)
 {
 image_xscale=random_range(.5,.75);
 image_yscale=image_xscale;
 depth=other.depth+irandom_range(-2,2);
 loot=false;
 if !place_meeting(x,y,par_Enemy) instance_destroy();
 }
 
 with (xplode_sm) //SMALL TEMPO
 {
 image_xscale=random_range(.5,.75);
 image_yscale=image_xscale;
 depth=other.depth+irandom_range(-3,0);
 loot=false;
 if !place_meeting(x,y,par_Enemy) instance_destroy();
 }

if (alarm[3] &lt;=-1) 
        {   
        alarm[3]=7;
        }
    //x3 = lengthdir_x(inst.x,image_angle);
    //y3 = lengthdir_y(inst.y,image_angle);   
    //x3 = abs(inst.x-x);
    //y3 = abs(inst.y-y);   
    //dist=sqrt(x3*x3+y3*y3)/461; //CALCULATE XSCALE                     
}
}
}//else{dist=0;}   
//END MEETING ENEMY 
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[0]==-1) alarm[0]=30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[0]==-1) alarm[0]=30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (s_speed&lt;=0) //GROW OFFSET FROM PLAYER
{
    x=fire_x;
    y=fire_y;
    
    //Cone Offset
    x1 = lengthdir_x(40+(2*image_yscale),image_angle);
    y1 = lengthdir_y(40+(2*image_yscale),image_angle);
    
    //Beam Offset
    x2 = lengthdir_x(50+(8*image_yscale),image_angle);
    y2 = lengthdir_y(50+(8*image_yscale),image_angle);
    
    repeat(round(image_yscale*2))
    {
        
        ang  = irandom_range(1,360);
        dist = irandom_range(1,200);
        wisp_x = x + lengthdir_x(dist,ang);
        wisp_y = y + lengthdir_y(dist,ang)-par_HERO.y_shoot_offset;
        
        with instance_create(wisp_x,wisp_y,obj_Ray_Wisp) 
        {
        scale=random_range(.1,.15);
        image_xscale=scale*other.image_yscale*2;
        image_yscale=scale*.5;
        s_speed=1+other.image_yscale*2;
        }
    }
}
else
{
    audio_stop_sound(snd_BombCharge);
    x1=0;
    x2=0;
    y1=0;
    y2=0;
    if (s_speed&lt;200) 
        {
            s_speed*=s_speed;
        }
      
        if (s_speed&gt;200)  
        {
            s_speed=200;
        }
}

if (cone_up)
    {
        if (scale&lt;1.2) 
            scale+=.02; //GROW CONE TO MAX SIZE
            else
            cone_up=false;
        
    }
    else
    {
        if (scale&gt;.15) scale-=.05; //was.8 //SHRINK CONE 
    }

    
    

if (image_yscale&lt;3) 
{

if (image_xscale&lt;2) image_xscale+=.25; //LENGTH FIRST
                    else
                    image_yscale+=.05; //THEN THICKNESS

if (image_yscale&gt;=3)//was 3 //REACHED MAX THICKNESS FIRE FORWARD
    {
    if (s_speed&lt;=0)
    {
    s_speed=1.25;
    instance_create(x,y,obj_Aura_Ripple_stat_short);
    instance_create(x,y,obj_ScreenFlash);
    direction=image_angle;
    with (dark){instance_destroy();}
    audio_play_sound(snd_monster13_Zap_Aura,11,false);
    audio_play_sound(snd_HeavyDamage,9,false);
    }
    }
}


damage=image_yscale*.45;
speed=s_speed*global.game_speed;



color=make_color_hsv(irandom_range(1,255),150,255);

hue=irandom_range(1,255);
color_cone=make_color_hsv(hue,image_yscale*35,255);
color_beam=make_color_hsv(hue,image_yscale*70,255);



if (s_speed&lt;=0)
{
draw_set_blend_mode(bm_add);
draw_sprite_ext(spr_wisp_A,image_index,x+x1,y+y1,2+4*image_yscale,2+4*image_yscale,0,color,.75) //DRAW GLOW //was 12
}

draw_set_blend_mode(bm_normal);
if (s_speed&lt;10) 
    {
        draw_sprite_ext(spr_Ray_Cone,image_index,x+x1,y+y1,scale*1.4,scale*1.4,image_angle,color_cone,1); //DRAW CONE
        cone_x = x + lengthdir_x(0,image_angle);
        cone_y = y + lengthdir_y(0,image_angle);
        cone_scale=.1;
    }
    else
    {
        draw_sprite_ext(spr_Ray_Cone,image_index,cone_x,cone_y,cone_scale,cone_scale,image_angle,color_cone,1); //DRAW CONE
        cone_scale*=.5;
    }
    
draw_sprite_ext(sprite_index,image_index,x+x2,y+y2,image_xscale,image_yscale,image_angle,color_beam,.6+(.133*image_yscale))       
draw_set_blend_mode(bm_add);       
draw_sprite_ext(sprite_index,image_index,x+x2,y+y2,image_xscale,image_yscale,image_angle,color_beam,.5); //DRAW RAY
draw_set_blend_mode(bm_normal);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
