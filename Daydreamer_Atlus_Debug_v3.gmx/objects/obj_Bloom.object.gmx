<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if !instance_exists(obj_vignette_b) instance_create(x,y,obj_vignette_b)

if (!instance_exists(par_HERO))
{
    instance_destroy();
}
else
{
alarm[0]=50;//Destroy and Recreate Bloom

draw_set_color(c_white);


if (global.blur_fx==3) //GOOD QUALITY [QUADRO]
{
type=2;
uni_time = shader_get_uniform(shd_radial_blur2,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_radial_blur2,"mouse_pos");
var_mouse_pos_x = par_HERO.x;
var_mouse_pos_y = par_HERO.y;

uni_resolution = shader_get_uniform(shd_radial_blur2,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;


uni_radial_blur_offset = shader_get_uniform(shd_radial_blur2,"radial_blur_offset");
var_radial_blur_offset = par_HERO.var_radial_blur_offset;


uni_radial_brightness = shader_get_uniform(shd_radial_blur2,"radial_brightness");
var_radial_brightness = 1;

uni_bloom = shader_get_uniform(shd_radial_blur2,"bloom");
var_bloom = par_HERO.bloom;

uni_blur_amount = shader_get_uniform(shd_radial_blur2,"blur_amount");
var_blur_amount = 10;
}


if (global.blur_fx==2) //GOOD QUALITY [GFX]
{
type=2;
uni_time = shader_get_uniform(shd_radial_blur,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_radial_blur,"mouse_pos");
var_mouse_pos_x = par_HERO.x;
var_mouse_pos_y = par_HERO.y;

uni_resolution = shader_get_uniform(shd_radial_blur,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;


uni_radial_blur_offset = shader_get_uniform(shd_radial_blur,"radial_blur_offset");
var_radial_blur_offset = par_HERO.var_radial_blur_offset;


uni_radial_brightness = shader_get_uniform(shd_radial_blur,"radial_brightness");
var_radial_brightness = 1;

uni_bloom = shader_get_uniform(shd_radial_blur,"bloom");
var_bloom = par_HERO.bloom;

uni_blur_amount = shader_get_uniform(shd_radial_blur,"blur_amount");
var_blur_amount = 10;
}

if (global.blur_fx==1) || (global.blur_fx==0)  //FAST QUALITY
{

type=1;

uni_time = shader_get_uniform(shd_radial_blur_fast,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_radial_blur_fast,"mouse_pos");
var_mouse_pos_x = par_HERO.x;
var_mouse_pos_y = par_HERO.y;

uni_resolution = shader_get_uniform(shd_radial_blur_fast,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;


uni_radial_blur_offset = shader_get_uniform(shd_radial_blur_fast,"radial_blur_offset");
var_radial_blur_offset = par_HERO.var_radial_blur_offset;


uni_radial_brightness = shader_get_uniform(shd_radial_blur_fast,"radial_brightness");
var_radial_brightness = 1;

uni_bloom = shader_get_uniform(shd_radial_blur_fast,"bloom");
var_bloom = par_HERO.bloom;
}

if  (global.blur_fx==0)
    {
        if (master.target_speed!=global.game_speed)
        {
            bloom = .3;
            var_radial_blur_offset = 0.00005;    
            blur_up=true;
            blur_max=0.015;
            blur_min=-0.005;
            blur_inc=0.00005;
            master_inc=500;
            type=0;
            multiply=1;
            multiply_inc=-.025;
        
        
            uni_time = shader_get_uniform(shd_radial_blur_fast,"time");
            var_time_var = 0;
            
            uni_mouse_pos = shader_get_uniform(shd_radial_blur_fast,"mouse_pos");
            var_mouse_pos_x = par_HERO.x;
            var_mouse_pos_y = par_HERO.y;
            
            uni_resolution = shader_get_uniform(shd_radial_blur_fast,"resolution");
            var_resolution_x = view_wview;
            var_resolution_y = view_hview;
            
            
            uni_radial_blur_offset = shader_get_uniform(shd_radial_blur_fast,"radial_blur_offset");
            var_radial_blur_offset = var_radial_blur_offset;
            
            
            uni_radial_brightness = shader_get_uniform(shd_radial_blur_fast,"radial_brightness");
            var_radial_brightness = 1;
            
            uni_bloom = shader_get_uniform(shd_radial_blur_fast,"bloom");
            var_bloom = bloom;
                
        }
        else
        {
            instance_destroy();
        }
    }
    
    

shader_enabled = true;
full_screen_effect = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,obj_Bloom);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO)
{
instance_destroy();
}
else
{
if !instance_exists(obj_vignette_b)
instance_create(x,y,obj_vignette_b)
if instance_exists(obj_WarpBlur) with(obj_WarpBlur) instance_destroy();

if keyboard_check(ord('Q')) par_HERO.bloom_max += 0.001;
if keyboard_check(ord('A')) par_HERO.bloom_max -= 0.001;

if keyboard_check(ord('W')) par_HERO.bloom_min += 0.001;
if keyboard_check(ord('S')) par_HERO.bloom_min -= 0.001;

if keyboard_check(ord('E')) par_HERO.blur_max += 0.00001;
if keyboard_check(ord('D')) par_HERO.blur_max -= 0.00001;

if keyboard_check(ord('R')) par_HERO.blur_min += 0.00001;
if keyboard_check(ord('F')) par_HERO.blur_min -= 0.00001;

if keyboard_check(ord('T')) par_HERO.master_inc += 1;
if keyboard_check(ord('G')) {if (par_HERO.master_inc&gt;1) par_HERO.master_inc -= 1;}

if keyboard_check(ord('X')) //SYNC
    {
    par_HERO.bloom=par_HERO.bloom_min; par_HERO.bloom_up=true;
    par_HERO.var_radial_blur_offset=par_HERO.blur_min; par_HERO.blur_up=true;
    }

/*
if instance_exists(obj_vignette_b)
{
if keyboard_check(ord('Y')) obj_vignette_b.image_alpha += 0.01;
if keyboard_check(ord('H')) {if (obj_vignette_b.image_alpha&gt;0) obj_vignette_b.image_alpha-= 0.01;}
}
*/

par_HERO.bloom_inc=(par_HERO.bloom_max-par_HERO.bloom_min)*(.01/(par_HERO.master_inc*.001));
par_HERO.blur_inc=(par_HERO.blur_max-par_HERO.blur_min)*(.01/(par_HERO.master_inc*.001));

if (par_HERO.bloom_up)
 par_HERO.bloom  += par_HERO.bloom_inc;
else
 par_HERO.bloom  -= par_HERO.bloom_inc;

  
if (par_HERO.bloom&gt;=par_HERO.bloom_max) par_HERO.bloom_up=false;
if (par_HERO.bloom&lt;=par_HERO.bloom_min) par_HERO.bloom_up=true;

//bloom = par_HERO.bloom;  

if (par_HERO.blur_up) 
 par_HERO.var_radial_blur_offset += par_HERO.blur_inc;
else
 par_HERO.var_radial_blur_offset -= par_HERO.blur_inc;

//var_radial_blur_offset = par_HERO.var_radial_blur_offset;

if (par_HERO.var_radial_blur_offset&gt;=par_HERO.blur_max) 
    {
    par_HERO.blur_up=false;
    }

if (par_HERO.var_radial_blur_offset&lt;=par_HERO.blur_min)
    {
      par_HERO.blur_up=true;  
    }

}

if(type!=global.blur_fx) //RESET
    {
    instance_destroy();
    instance_create(x,y,obj_Bloom);
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

var_time_var+=0.04;
var_mouse_pos_x = 640;
var_mouse_pos_y = 360;

if (global.blur_fx==3) //GOOD QUALITY [Quadro]
{

if shader_enabled shader_set(shd_radial_blur2);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_radial_blur_offset, par_HERO.var_radial_blur_offset/(global.game_speed*global.game_speed));
    shader_set_uniform_f(uni_radial_brightness, var_radial_brightness);
    shader_set_uniform_f(uni_bloom, par_HERO.bloom/global.game_speed);
    if window_get_fullscreen()
    offset=1.5; else offset=1;
    if full_screen_effect draw_surface_stretched_ext(application_surface, 0, 0, 1280*offset, 720*offset,c_white,1);
shader_reset();
}


if (global.blur_fx==2) //GOOD QUALITY [GFX]
{

if shader_enabled shader_set(shd_radial_blur);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_radial_blur_offset, par_HERO.var_radial_blur_offset/(global.game_speed*global.game_speed));
    shader_set_uniform_f(uni_radial_brightness, var_radial_brightness);
    shader_set_uniform_f(uni_bloom, par_HERO.bloom/global.game_speed);
    if window_get_fullscreen()
    offset=1.5; else offset=1;
    if full_screen_effect draw_surface_stretched_ext(application_surface, 0, 0, 1280*offset, 720*offset,c_white,1);
shader_reset();
}

if (global.blur_fx==1) //FAST QUALITY
{
if (global.game_speed&lt;1) 
    var_radial_brightness=1+(1-global.game_speed)*.75;
    else
    var_radial_brightness=1;
    
if shader_enabled shader_set(shd_radial_blur_fast);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    
    if!instance_exists(obj_Inventory)
    shader_set_uniform_f(uni_radial_blur_offset, par_HERO.var_radial_blur_offset/(global.game_speed*global.game_speed));
    else
    shader_set_uniform_f(uni_radial_blur_offset, par_HERO.var_radial_blur_offset/(global.game_speed*obj_Inventory.orig_speed));
     
    shader_set_uniform_f(uni_radial_brightness, var_radial_brightness);
    shader_set_uniform_f(uni_bloom, par_HERO.bloom/global.game_speed);
    if window_get_fullscreen()
    offset=1.5; else offset=1;
    if full_screen_effect draw_surface_stretched_ext(application_surface, 0, 0, 1280*offset, 720*offset,c_white,1);
    
shader_reset();
}

if (global.blur_fx==0) //OFF
{

    if(type!=global.blur_fx) //RESET
        {
        instance_destroy();
        instance_create(x,y,obj_Bloom);
        }
        else
        {
        blur_inc=(blur_max-blur_min)*(.01/(master_inc*.001));
 
        
        if (blur_up) 
         var_radial_blur_offset += blur_inc;
        else
         var_radial_blur_offset -= blur_inc;
          
        if (var_radial_blur_offset&gt;=blur_max) 
            {
            blur_up=false;
            }
        
        if (var_radial_blur_offset&lt;=blur_min)
            {
              blur_up=true;  
              if (multiply&gt;=2) instance_destroy();
            }

            var_radial_brightness=1;
            
        if shader_enabled shader_set(shd_radial_blur_fast);
            shader_set_uniform_f(uni_time, var_time_var);
            shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
            shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
            
            if!instance_exists(obj_Inventory)
            shader_set_uniform_f(uni_radial_blur_offset, var_radial_blur_offset/(global.game_speed*multiply*multiply));
            else
            shader_set_uniform_f(uni_radial_blur_offset, var_radial_blur_offset/(global.game_speed*obj_Inventory.orig_speed));
             
            shader_set_uniform_f(uni_radial_brightness, var_radial_brightness);
            shader_set_uniform_f(uni_bloom, bloom/multiply);
            if window_get_fullscreen()
            offset=1.5; else offset=1;
            if full_screen_effect draw_surface_stretched_ext(application_surface, 0, 0, 1280*offset, 720*offset,c_white,1);
            
        shader_reset();
        
        multiply+=multiply_inc;
        if (multiply&lt;=.5) multiply_inc=.025;
        }
}

/*
if instance_exists(obj_debug)
{
    if (!global.dof)
    {
    draw_set_font(fnt_Arial);
    draw_text(100,400,"[Q/A] Bloom Max: " + string(par_HERO.bloom_max));
    draw_text(100,420,"[W/S] Bloom Min: " + string(par_HERO.bloom_min));
    draw_text(100,440,"[E/D]  Blur Max: (" + string(par_HERO.blur_max*100)+")/100");
    draw_text(100,460,"[R/F]  Blur Min: (" + string(par_HERO.blur_min*100)+")/100");
    draw_text(100,480,"[T/G] Master Inc: " + string(par_HERO.master_inc)+" [X]-SYNC");
    draw_text(100,500,"Bloom: " + string(par_HERO.bloom));
    draw_text(100,520,"Blur: (" + string(par_HERO.var_radial_blur_offset*100)+")/100");
    
    if instance_exists(obj_vignette_b)
    {
    draw_text(100,540,"[Y/H] Vignette: (" + string(obj_vignette_b.image_alpha*100)+")/100");
    }
    }
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
