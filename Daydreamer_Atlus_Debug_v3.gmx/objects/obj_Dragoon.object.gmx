<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Crosshair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO)
{
instance_destroy();
}
else
{
if instance_exists(obj_Inventory) instance_destroy();
target_count=0;

global.CutScene=true;

target_A=false;
target_B=false;
target_C=false;
target_D=false;
target_E=false;
target_F=false;
target_G=false;
target_H=false;
target_I=false;
target_J=false;

par_HERO.turn=false;

//image_xscale=3;
//image_yscale=3;
factor=10;
x=x+irandom_range(200,300)*par_HERO.image_xscale;

slope = ((y-par_HERO.y+par_HERO.y_shoot_offset*1.2)/(x-par_HERO.x));
if (slope&gt;1) slope=1;
if (slope&lt;-1)  slope=-1;
slope = abs(((1 + slope)/2)*45);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
    {
    if (global.HERO_type==0)
    par_HERO.sprite_index = spr_Young_Olivia_Shoot_Straight;
    else
    par_HERO.sprite_index = spr_Old_Olivia_Shoot_Straight;
    
    par_HERO.image_index=10;
    }

global.CutScene=false;
if (global.rumble) 
{
if (sign(par_HERO.image_xscale)==1)
gamepad_set_vibration(global.playing_index, .7, 1);
else
gamepad_set_vibration(global.playing_index, .7, 1);
par_HERO.alarm[11]=7;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) instance_destroy();
if (par_HERO.hp&lt;=0) instance_destroy();


Key_Left = gamepad_button_check(global.playing_index,global.gp_D_Left);     
Key_Right = gamepad_button_check(global.playing_index,global.gp_D_Right);
Key_Up = gamepad_button_check(global.playing_index,global.gp_D_Up);
Key_Down = gamepad_button_check(global.playing_index,global.gp_D_Down);

Key_Fire = gamepad_button_check(global.playing_index,global.gp_Fire); 


if keyboard_check_direct(global.kb_Fire)  Key_Fire = true;


if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) Key_Up = 1;  
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) Key_Down = 1;
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) Key_Left = 1;
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) Key_Right = 1;

if (gamepad_axis_value(global.playing_index, gp_axislh)==0) {Key_Left = 0; Key_Right = 0;}
if (gamepad_axis_value(global.playing_index, gp_axislv)==0) {Key_Up = 0; Key_Down=0;}

//Keyboard inputs
if keyboard_check_direct(global.kb_Left) Key_Left=true;
if keyboard_check_direct(global.kb_Right) Key_Right=true;
if keyboard_check_direct(global.kb_Up) Key_Up = true;
if keyboard_check_direct(global.kb_Down) Key_Down = true;



image_angle=image_angle-4;
//SLOPE CALCULATE--------
if (x!=par_HERO.x)
{
slope = ((y-par_HERO.y+par_HERO.y_shoot_offset*2)/(x-par_HERO.x));
if (slope&gt;1) slope=1;
if (slope&lt;-1)  slope=-1;
slope = abs(((1 + slope)/2)*45);

if (x&gt;par_HERO.x) 
    {
    par_HERO.image_xscale=1;
    if (par_HERO.west_east==0)
    {
    if (global.HERO_type==1) 
        {
        par_HERO.turn=true;
        par_HERO.sprite_index=spr_Old_Olivia_Dragoon_Turn;
        par_HERO.image_index=0;
        }
    if (global.HERO_type==0) 
        {
        par_HERO.turn=true;
        par_HERO.sprite_index=spr_Young_Olivia_Dragoon_Turn;
        par_HERO.image_index=0;
        }
    }    
    par_HERO.west_east=1;
    }
    else
    {
    par_HERO.image_xscale=-1;
    if (par_HERO.west_east==1)
    {
    if (global.HERO_type==1) 
        {
        par_HERO.turn=true;
        par_HERO.sprite_index=spr_Old_Olivia_Dragoon_Turn;
        par_HERO.image_index=0;
        }
        
    if (global.HERO_type==0) 
        {
        par_HERO.turn=true;
        par_HERO.sprite_index=spr_Young_Olivia_Dragoon_Turn;
        par_HERO.image_index=0;
        }
    }
    par_HERO.west_east=0;
    slope=45-slope;
    }
}

if (image_angle&lt;0) image_angle=360;

if (Key_Left)||(Key_Right)||(Key_Up)||(Key_Down)
{
    if (factor&lt;16) factor+=.25;
}
else
{
    if (factor&gt;10) factor-=.25;
}

//was 16
if (Key_Left) {if(x&gt;view_xview) x=x-factor;}
if (Key_Right) {if(x&lt;view_xview+1280) x=x+factor;}
if (Key_Up) {if(y&gt;view_yview) y=y-factor; }
if (Key_Down) {if(y&lt;view_yview+720) y=y+factor; }

if (!Key_Fire) 
{

if(target_count&gt;0)
{
audio_sound_pitch(snd_Laser_Cannon_A,global.game_speed);
audio_play_sound(snd_Laser_Cannon_A,10,false);

if (target_A) 
    {
    if instance_exists(inst_A)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_A.x-other.A_x;
        target_y=other.inst_A.y-other.A_y;
        enemy=other.inst_A;
        enemy_offset_x=other.A_x;
        enemy_offset_y=other.A_y;
        }
    }
if (target_B) 
    {
    if instance_exists(inst_B)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_B.x-other.B_x;
        target_y=other.inst_B.y-other.B_y;
        enemy=other.inst_B;
        enemy_offset_x=other.B_x;
        enemy_offset_y=other.B_y;
        }
    }
if (target_C) 
    {
    if instance_exists(inst_C)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_C.x-other.C_x;
        target_y=other.inst_C.y-other.C_y;
        enemy=other.inst_C;
        enemy_offset_x=other.C_x;
        enemy_offset_y=other.C_y;
        }
    }
if (target_D) 
    {
    if instance_exists(inst_D)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_D.x-other.D_x;
        target_y=other.inst_D.y-other.D_y;
        enemy=other.inst_D;
        enemy_offset_x=other.D_x;
        enemy_offset_y=other.D_y;
        }
    }
if (target_E) 
    {
    if instance_exists(inst_E)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_E.x-other.E_x;
        target_y=other.inst_E.y-other.E_y;
        enemy=other.inst_E;
        enemy_offset_x=other.E_x;
        enemy_offset_y=other.E_y;
        }
    }   

if (target_F) 
    {
    if instance_exists(inst_F)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=irandom_range(3,10);
        image_xscale=random_range(.25,1);
        target_x=other.inst_F.x-other.F_x;
        target_y=other.inst_F.y-other.F_y;
        enemy=other.inst_F;
        enemy_offset_x=other.F_x;
        enemy_offset_y=other.F_y;
        }
    }
if (target_G) 
    {
    if instance_exists(inst_G)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_G.x-other.G_x;
        target_y=other.inst_G.y-other.G_y;
        enemy=other.inst_G;
        enemy_offset_x=other.G_x;
        enemy_offset_y=other.G_y;
        }
    }
if (target_H) 
    {
    if instance_exists(inst_H)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_H.x-other.H_x;
        target_y=other.inst_H.y-other.H_y;
        enemy=other.inst_H;
        enemy_offset_x=other.H_x;
        enemy_offset_y=other.H_y;
        }
    }
if (target_I) 
    {
    if instance_exists(inst_I)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_I.x-other.I_x;
        target_y=other.inst_I.y-other.I_y;
        enemy=other.inst_I;
        enemy_offset_x=other.I_x;
        enemy_offset_y=other.I_y;
        }
    }
if (target_J) 
    {
    if instance_exists(inst_J)
    with instance_create(par_HERO.x+irandom_range(-10,10),par_HERO.y+irandom_range(-10,10)-par_HERO.y_shoot_offset,obj_Dragoon_Blast)
        {
        s_speed=random_range(3,5);
        image_xscale=random_range(.25,1);
        target_x=other.inst_J.x-other.J_x;
        target_y=other.inst_J.y-other.J_y;
        enemy=other.inst_J;
        enemy_offset_x=other.J_x;
        enemy_offset_y=other.J_y;
        }
    }   
 target_count=0; 

}

instance_destroy();
}

if position_meeting(x,y,par_Enemy_Body)
{




var inst
//inst = instance_nearest(x, y, par_Enemy_Body);
inst = instance_position(x, y, par_Enemy_Body);
//inst = instance_place(x, y, par_Enemy_Body);
if (inst.type==1)
{
audio_sound_pitch(snd_lockON,global.game_speed);
audio_sound_pitch(snd_droid_activate,global.game_speed);


if !audio_is_playing(snd_lockON)
{ 
   if(target_count&lt;10) &amp;&amp; (par_HERO.energy&gt;=5)
   {
    target_count=target_count+1;
    par_HERO.energy-=5;
   
   switch(target_count)
  {
    case 1:
    audio_play_sound(snd_lockON,10,false);
    audio_play_sound(snd_droid_activate,10,false);
    inst_A = instance_position(x,y,par_Enemy_Body);;
    
    A_x=(inst_A.x-x)+irandom_range(-2,2);
    A_y=(inst_A.y-y)+irandom_range(-2,2);
    A_alpha=0;
    target_A=true;
    break;

    case 2:
    audio_play_sound(snd_lockON,10,false);
    inst_B = instance_position(x,y,par_Enemy_Body);;
    if (inst_A != inst_B) audio_play_sound(snd_droid_activate,10,false);
    
    B_x=(inst_B.x-x)+irandom_range(-2,2);
    B_y=(inst_B.y-y)+irandom_range(-2,2);
    B_alpha=0;
    target_B=true;
    break;
    
    case 3:
    audio_play_sound(snd_lockON,10,false);
    inst_C = instance_position(x,y,par_Enemy_Body);;
    if (inst_C != inst_B) audio_play_sound(snd_droid_activate,10,false);
    
    C_x=(inst_C.x-x)+irandom_range(-2,2);
    C_y=(inst_C.y-y)+irandom_range(-2,2);
    C_alpha=0;
    target_C=true;
    break;
    
    case 4:
    audio_play_sound(snd_lockON,10,false);
    inst_D = instance_position(x,y,par_Enemy_Body);;
    if (inst_D != inst_C) audio_play_sound(snd_droid_activate,10,false);
    
    D_x=(inst_D.x-x)+irandom_range(-2,2);
    D_y=(inst_D.y-y)+irandom_range(-2,2);
    D_alpha=0;
    target_D=true;
    break;
    
    case 5:
    audio_play_sound(snd_lockON,10,false);
    inst_E = instance_position(x,y,par_Enemy_Body);;
    if (inst_E != inst_D) audio_play_sound(snd_droid_activate,10,false);
    
    E_x=(inst_E.x-x)+irandom_range(-2,2);
    E_y=(inst_E.y-y)+irandom_range(-2,2);
    E_alpha=0;
    target_E=true;
    break;
    
    case 6:
    audio_play_sound(snd_lockON,10,false);
    inst_F = instance_position(x,y,par_Enemy_Body);;
    if (inst_F != inst_E) audio_play_sound(snd_droid_activate,10,false);
    
    F_x=(inst_F.x-x)+irandom_range(-2,2);
    F_y=(inst_F.y-y)+irandom_range(-2,2);
    F_alpha=0;
    target_F=true;
    break;

    case 7:
    audio_play_sound(snd_lockON,10,false);
    inst_G = instance_position(x,y,par_Enemy_Body);;
    if (inst_G != inst_F) audio_play_sound(snd_droid_activate,10,false);
    
    G_x=(inst_G.x-x)+irandom_range(-2,2);
    G_y=(inst_G.y-y)+irandom_range(-2,2);
    G_alpha=0;
    target_G=true;
    break;
    
    case 8:
    audio_play_sound(snd_lockON,10,false);
    inst_H = instance_position(x,y,par_Enemy_Body);;
    if (inst_H != inst_G) audio_play_sound(snd_droid_activate,10,false);
    
    H_x=(inst_H.x-x)+irandom_range(-2,2);
    H_y=(inst_H.y-y)+irandom_range(-2,2);
    H_alpha=0;
    target_H=true;
    break;
    
    case 9:
    audio_play_sound(snd_lockON,10,false);
    inst_I = instance_position(x,y,par_Enemy_Body);;
    if (inst_I != inst_H) audio_play_sound(snd_droid_activate,10,false);
    
    I_x=(inst_I.x-x)+irandom_range(-2,2);
    I_y=(inst_I.y-y)+irandom_range(-2,2);
    I_alpha=0;
    target_I=true;
    break;
    
    case 10:
    audio_play_sound(snd_lockON,10,false);
    inst_J = instance_position(x,y,par_Enemy_Body);;
    if (inst_J != inst_I) audio_play_sound(snd_droid_activate,10,false);
    
    J_x=(inst_J.x-x)+irandom_range(-2,2);
    J_y=(inst_J.y-y)+irandom_range(-2,2);
    J_alpha=0;
    target_J=true;
    break;


  }//END SWITCH
  }
}
}//end if type 1
}//END MEETING ENEMY
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Enemy_Body">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

/*

var inst
//inst = instance_nearest(x, y, par_Enemy);
inst = instance_position(x, y, par_Enemy);
//inst = instance_place(x, y, par_Enemy);
if (inst.type==1)
{
audio_sound_pitch(snd_lockON,global.game_speed);
audio_sound_pitch(snd_droid_activate,global.game_speed);


if !audio_is_playing(snd_lockON)
{ 
   if(target_count&lt;10) &amp;&amp; (par_HERO.energy&gt;=5)
   {
    target_count=target_count+1;
    par_HERO.energy-=5;
   
   switch(target_count)
  {
    case 1:
    audio_play_sound(snd_lockON,10,false);
    audio_play_sound(snd_droid_activate,10,false);
    inst_A = instance_position(x,y,par_Enemy);;
    
    A_x=(inst_A.x-x)+irandom_range(-2,2);
    A_y=(inst_A.y-y)+irandom_range(-2,2);
    A_alpha=0;
    target_A=true;
    break;

    case 2:
    audio_play_sound(snd_lockON,10,false);
    inst_B = instance_position(x,y,par_Enemy);;
    if (inst_A != inst_B) audio_play_sound(snd_droid_activate,10,false);
    
    B_x=(inst_B.x-x)+irandom_range(-2,2);
    B_y=(inst_B.y-y)+irandom_range(-2,2);
    B_alpha=0;
    target_B=true;
    break;
    
    case 3:
    audio_play_sound(snd_lockON,10,false);
    inst_C = instance_position(x,y,par_Enemy);;
    if (inst_C != inst_B) audio_play_sound(snd_droid_activate,10,false);
    
    C_x=(inst_C.x-x)+irandom_range(-2,2);
    C_y=(inst_C.y-y)+irandom_range(-2,2);
    C_alpha=0;
    target_C=true;
    break;
    
    case 4:
    audio_play_sound(snd_lockON,10,false);
    inst_D = instance_position(x,y,par_Enemy);;
    if (inst_D != inst_C) audio_play_sound(snd_droid_activate,10,false);
    
    D_x=(inst_D.x-x)+irandom_range(-2,2);
    D_y=(inst_D.y-y)+irandom_range(-2,2);
    D_alpha=0;
    target_D=true;
    break;
    
    case 5:
    audio_play_sound(snd_lockON,10,false);
    inst_E = instance_position(x,y,par_Enemy);;
    if (inst_E != inst_D) audio_play_sound(snd_droid_activate,10,false);
    
    E_x=(inst_E.x-x)+irandom_range(-2,2);
    E_y=(inst_E.y-y)+irandom_range(-2,2);
    E_alpha=0;
    target_E=true;
    break;
    
    case 6:
    audio_play_sound(snd_lockON,10,false);
    inst_F = instance_position(x,y,par_Enemy);;
    if (inst_F != inst_E) audio_play_sound(snd_droid_activate,10,false);
    
    F_x=(inst_F.x-x)+irandom_range(-2,2);
    F_y=(inst_F.y-y)+irandom_range(-2,2);
    F_alpha=0;
    target_F=true;
    break;

    case 7:
    audio_play_sound(snd_lockON,10,false);
    inst_G = instance_position(x,y,par_Enemy);;
    if (inst_G != inst_F) audio_play_sound(snd_droid_activate,10,false);
    
    G_x=(inst_G.x-x)+irandom_range(-2,2);
    G_y=(inst_G.y-y)+irandom_range(-2,2);
    G_alpha=0;
    target_G=true;
    break;
    
    case 8:
    audio_play_sound(snd_lockON,10,false);
    inst_H = instance_position(x,y,par_Enemy);;
    if (inst_H != inst_G) audio_play_sound(snd_droid_activate,10,false);
    
    H_x=(inst_H.x-x)+irandom_range(-2,2);
    H_y=(inst_H.y-y)+irandom_range(-2,2);
    H_alpha=0;
    target_H=true;
    break;
    
    case 9:
    audio_play_sound(snd_lockON,10,false);
    inst_I = instance_position(x,y,par_Enemy);;
    if (inst_I != inst_H) audio_play_sound(snd_droid_activate,10,false);
    
    I_x=(inst_I.x-x)+irandom_range(-2,2);
    I_y=(inst_I.y-y)+irandom_range(-2,2);
    I_alpha=0;
    target_I=true;
    break;
    
    case 10:
    audio_play_sound(snd_lockON,10,false);
    inst_J = instance_position(x,y,par_Enemy);;
    if (inst_J != inst_I) audio_play_sound(snd_droid_activate,10,false);
    
    J_x=(inst_J.x-x)+irandom_range(-2,2);
    J_y=(inst_J.y-y)+irandom_range(-2,2);
    J_alpha=0;
    target_J=true;
    break;


  }//END SWITCH
  }
}
}//end if type 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if (target_A) 
    {
    if (A_alpha&lt;1) A_alpha=A_alpha+.1;
    if instance_exists(inst_A)
    draw_sprite_ext(spr_LockON,0,inst_A.x-A_x,inst_A.y-A_y,2-A_alpha,2-A_alpha,360-(360*A_alpha),c_white,A_alpha);
    }
if (target_B) 
    {
    if (B_alpha&lt;1) B_alpha=B_alpha+.1;
    if instance_exists(inst_B)
    draw_sprite_ext(spr_LockON,0,inst_B.x-B_x,inst_B.y-B_y,2-B_alpha,2-B_alpha,360-(360*B_alpha),c_white,B_alpha);
    }
if (target_C) 
    {
    if (C_alpha&lt;1) C_alpha=C_alpha+.1;
    if instance_exists(inst_C)
    draw_sprite_ext(spr_LockON,0,inst_C.x-C_x,inst_C.y-C_y,2-C_alpha,2-C_alpha,360-(360*C_alpha),c_white,C_alpha);
    }
if (target_D) 
    {
    if (D_alpha&lt;1) D_alpha=D_alpha+.1;
    if instance_exists(inst_D)
    draw_sprite_ext(spr_LockON,0,inst_D.x-D_x,inst_D.y-D_y,2-D_alpha,2-D_alpha,360-(360*D_alpha),c_white,D_alpha);
    }
if (target_E) 
    {
    if (E_alpha&lt;1) E_alpha=E_alpha+.1;
    if instance_exists(inst_E)
    draw_sprite_ext(spr_LockON,0,inst_E.x-E_x,inst_E.y-E_y,2-E_alpha,2-E_alpha,360-(360*E_alpha),c_white,E_alpha);
    }
    
if (target_F) 
    {
    if (F_alpha&lt;1) F_alpha=F_alpha+.1;
    if instance_exists(inst_F)
    draw_sprite_ext(spr_LockON,0,inst_F.x-F_x,inst_F.y-F_y,2-F_alpha,2-F_alpha,360-(360*F_alpha),c_white,F_alpha);
    }
if (target_G) 
    {
    if (G_alpha&lt;1) G_alpha=G_alpha+.1;
    if instance_exists(inst_G)
    draw_sprite_ext(spr_LockON,0,inst_G.x-G_x,inst_G.y-G_y,2-G_alpha,2-G_alpha,360-(360*G_alpha),c_white,G_alpha);
    }
if (target_H) 
    {
    if (H_alpha&lt;1) H_alpha=H_alpha+.1;
    if instance_exists(inst_H)
    draw_sprite_ext(spr_LockON,0,inst_H.x-H_x,inst_H.y-H_y,2-H_alpha,2-H_alpha,360-(360*H_alpha),c_white,H_alpha);
    }
if (target_I) 
    {
    if (I_alpha&lt;1) I_alpha=I_alpha+.1;
    if instance_exists(inst_I)
    draw_sprite_ext(spr_LockON,0,inst_I.x-I_x,inst_I.y-I_y,2-I_alpha,2-I_alpha,360-(360*I_alpha),c_white,I_alpha);
    }
if (target_J) 
    {
    if (J_alpha&lt;1) J_alpha=J_alpha+.1;
    if instance_exists(inst_J)
    draw_sprite_ext(spr_LockON,0,inst_J.x-J_x,inst_J.y-J_y,2-J_alpha,2-J_alpha,360-(360*J_alpha),c_white,J_alpha);
    }
draw_self(); 
//draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle+45,image_blend,image_alpha);

//draw_text(x+64,y,"Targets: " + string(target_count));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,4</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
