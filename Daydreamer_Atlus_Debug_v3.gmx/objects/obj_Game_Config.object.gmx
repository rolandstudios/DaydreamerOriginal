<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init_diffiulty=global.difficulty;
metal_hit=false;
grow=0;
grow_c=0;
arrow_frame=0;
shift_back=0;
front_scale=1;
rest=true;
audio_play_sound(snd_gamestart, 10,false);
volume=string(global.vol);
music=string(global.mus);
orig_y=-90*.667;
orig_x=-150*.667;
set_y=orig_y;
set_x=orig_x;
opac=.22;
y=500;
y_expand=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_Pause)
    {
    obj_Pause.can_select=false; 
    obj_Pause.alarm[5]=15; //was 30
    }
    
if (global.platform==1)
{
    if (init_diffiulty!=global.difficulty)
    {
    scr_Save_Difficulty();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>neck_char=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CONTROL INPUT ------------------------------------

Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);
if keyboard_check_pressed(vk_enter) Key_Pause = true;

    Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
    Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
    if keyboard_check_pressed(vk_up) Key_Up=true;
    if keyboard_check_pressed(vk_down) Key_Down=true;

Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);


Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);


if keyboard_check_pressed(vk_space) Key_Jump=true;
if keyboard_check_pressed(vk_escape) Key_Pause =true;

if keyboard_check(vk_left) Key_Left=true;
if keyboard_check(vk_right) Key_Right=true;


if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
    {
    Key_Up = 1;
    alarm[1]=10; 
     rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
    {
    Key_Down = 1; 
    alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) 
    {
    Key_Left = 1; 
    if (y==460) || (y==480) alarm[1]=2; else alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) 
    {
     Key_Right = 1; 
    if (y==460) || (y==480) alarm[1]=2; else alarm[1]=10; 
    rest=false;
    } 
}

if (master.paused)
{
Key_Pause = false;
Key_Up = false;
Key_Down = false;
Key_Jump = false;
Key_Fire = false;
Key_Left = false;
Key_Right = false;
}//end master paused

if (Key_Up == 1) || keyboard_check_pressed(vk_up) 
{ 
    shift_back=0;
    audio_play_sound(snd_selectA, 10, false);
        if (y&gt;500) 
        {
        y=y-30;
        }
        else
        {
        y=620;
        audio_play_sound(snd_selectA, 10, false);
        }
}


if (Key_Down ==1) || keyboard_check_pressed(vk_down) 
{

        shift_back=0;
        audio_play_sound(snd_selectA, 10, false);
        if(y&lt;620)
        {
        y=y+30;
        }
        else
        {
        y=500;
        }
}

if (y==500) &amp;&amp; (global.ranked==false) //DIFFICULTLY
{
if (Key_Jump) || (Key_Right) || (Key_Left)
{
if(Key_Left) 
{
 
    switch (global.difficulty)
    {
    case .5: global.difficulty=  2; break; // Extreme
    case .75: global.difficulty=.5; break; // Easy
    case 1: global.difficulty=.75; break; // Medium
    case 2: global.difficulty=1; break; // Hard
    }
    
    audio_play_sound(snd_selectA, 10,false);
    
}

if(Key_Right) 
{
    switch (global.difficulty)
    {
    case .5: global.difficulty=  .75; break; // Easy
    case .75: global.difficulty=1; break; // Hard
    case 1: global.difficulty=2; break; // Extreme
    case 2: global.difficulty=.5; break; // Easy
    }
    audio_play_sound(snd_selectA, 10,false);
}
}
}

if (y==530)
{
    //RUMBLE
    if (Key_Left) || (Key_Right) || (Key_Jump) 
    {
    audio_play_sound(snd_gamestart, 10,false);
    if(global.rumble==false)
    global.rumble=true;
    else
    global.rumble=false;
    }
}

if (y==560) //Auto PICKUP
{
    if(Key_Jump) || (Key_Left) || (Key_Right)
    {
    audio_play_sound(snd_gamestart, 10,false);
    
    if(global.auto_pickup==false)
        {
        global.auto_pickup=true;
        }
        else
        {
        global.auto_pickup=false;
        }
    }
}


if (y==590) //Auto PICKUP
{
    if(Key_Jump) || (Key_Left) || (Key_Right)
    {
    audio_play_sound(snd_gamestart, 10,false);
    
    if(global.auto_swap==false)
        {
        global.auto_swap=true;
        }
        else
        {
        global.auto_swap=false;
        }
    }
}



//QUIT
if (y==620) &amp;&amp; (Key_Jump)
{
    audio_play_sound(snd_capped_out,10,false);
    instance_destroy();
}

if (Key_Fire)
{
    audio_play_sound(snd_capped_out,10,false);
    instance_destroy();     
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{
offset=1.5;
}
else
{
offset=1;
}

rumble_name="Rumble";
if (global.platform==1) ||  (global.platform==3)  rumble_name="Vibration";

set_x=orig_x*offset;
set_y=orig_y*offset;

if (y_expand&gt;=180)
grow_c+=.25;

//DRAW FRAME
//DRAW FRAME
draw_set_color(c_white); draw_set_alpha(.1);
draw_rectangle(set_x+500*offset,set_y+(609-y_expand*.5)*offset,set_x+810*offset,set_y+(609+y_expand*.5)*offset,false);
draw_set_color(c_white); draw_set_alpha(.15);
draw_rectangle(set_x+500*offset,set_y+(609-y_expand*.5)*offset,set_x+810*offset,set_y+(609+y_expand*.5)*offset,true);
draw_sprite_ext(spr_Menu_Trim_Top,0,set_x+655*offset,set_y+(609-y_expand*.5)*offset,.667*offset,.667*offset,0,c_white,1); //TOP FRAME
draw_sprite_ext(spr_Menu_Trim_Bottom,0,set_x+655*offset,set_y+(609+y_expand*.5)*offset,.667*offset,.667*offset,0,c_white,1); //BOTTOM FRAME


if (y_expand&lt;260) y_expand+=30;
if (y_expand&lt;=90) &amp;&amp; (metal_hit==false)
    {
    metal_hit=true;
    audio_play_sound(snd_HitMetal,10,false);
    } 
if (y_expand&gt;260) y_expand=260;
if (shift_back&lt;4) shift_back+=.25;
draw_set_halign(fa_center);
draw_set_valign(fa_center);

draw_set_font(fnt_LowGun);
draw_set_halign(fa_left); set_x-=(65*offset);
draw_set_color(c_white); draw_set_alpha(1);


if (y_expand&gt;=260)
{

draw_set_color(c_white) 
front_scale=.8;

if(y==500) //DIFFICULTY
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
switch(global.difficulty)
{
case .50:
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+502*offset+shift_back*.4*offset,"Difficulty: [Easy]",front_scale*offset,front_scale*offset,0);
break;

case .75: 
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+502*offset+shift_back*.4*offset,"Difficulty: [Medium]",front_scale*offset,front_scale*offset,0);
break;

case 1:
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+502*offset+shift_back*.4*offset,"Difficulty: [Hard]",front_scale*offset,front_scale*offset,0);
break;

case 2:
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+502*offset+shift_back*.4*offset,"Difficulty: [Extreme]",front_scale*offset,front_scale*offset,0);
break;

}
draw_set_color(c_white); draw_set_alpha(1);
}

if (global.ranked) //LOCK DIFFICULTY IF RANKED
    {
    global.difficulty=2;
    draw_set_color(c_gray);
    }

switch(global.difficulty)
{
case .50:
draw_text_transformed(set_x+610*offset,set_y+500*offset,"Difficulty: [Easy]",front_scale*offset,front_scale*offset,0);
break;

case .75: 
draw_text_transformed(set_x+610*offset,set_y+500*offset,"Difficulty: [Medium]",front_scale*offset,front_scale*offset,0);
break;

case 1:
draw_text_transformed(set_x+610*offset,set_y+500*offset,"Difficulty: [Hard]",front_scale*offset,front_scale*offset,0);
break;

case 2:
draw_text_transformed(set_x+610*offset,set_y+500*offset,"Difficulty: [Extreme]",front_scale*offset,front_scale*offset,0);
break;
}



draw_set_color(c_white) 
front_scale=.8;


if(y==530) //RUMBLE
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
if (global.rumble==true)
{
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+532*offset+shift_back*.4*offset,string(rumble_name)+" [on]",front_scale*offset,front_scale*offset,0);
}
    else
{
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+532*offset+shift_back*.4*offset,string(rumble_name)+" [off]",front_scale*offset,front_scale*offset,0);
}
draw_set_color(c_white); draw_set_alpha(1);
}

if (global.rumble==true)
{
draw_text_transformed(set_x+610*offset,set_y+530*offset,string(rumble_name)+" [on]",front_scale*offset,front_scale*offset,0);
}
    else
{
draw_text_transformed(set_x+610*offset,set_y+530*offset,string(rumble_name)+" [off]",front_scale*offset,front_scale*offset,0);
}

front_scale=.8;


if(y==560) //AUTOPICKUP
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
if (global.auto_pickup=true)
{
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+562*offset+shift_back*.4*offset,"Auto Equip [on]",front_scale*offset,front_scale*offset,0);
}
    else
{
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+562*offset+shift_back*.4*offset,"Auto Equip [off]",front_scale*offset,front_scale*offset,0);
}
draw_set_color(c_white); draw_set_alpha(1);
}

if (global.auto_pickup==true)
{
draw_text_transformed(set_x+610*offset,set_y+560*offset,"Auto Equip [on]",front_scale*offset,front_scale*offset,0);
}
    else
{
draw_text_transformed(set_x+610*offset,set_y+560*offset,"Auto Equip [off]",front_scale*offset,front_scale*offset,0);
}

front_scale=.8;


if(y==590) //AUTO SWAP
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
if (global.auto_swap=true)
{
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+592*offset+shift_back*.4*offset,"Auto Swap [on]",front_scale*offset,front_scale*offset,0);
}
    else
{
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+592*offset+shift_back*.4*offset,"Auto Swap [off]",front_scale*offset,front_scale*offset,0);
}
draw_set_color(c_white); draw_set_alpha(1);
}

if (global.auto_swap==true)
{
draw_text_transformed(set_x+610*offset,set_y+590*offset,"Auto Swap [on]",front_scale*offset,front_scale*offset,0);
}
    else
{
draw_text_transformed(set_x+610*offset,set_y+590*offset,"Auto Swap [off]",front_scale*offset,front_scale*offset,0);
}

/*
front_scale=.8;

if(y==590) //Language
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+592*offset+shift_back*.4*offset,"Language: [English]",offset*front_scale,offset*front_scale,image_angle);
draw_set_color(c_white); draw_set_alpha(1);
}
draw_text_transformed(set_x+610*offset,set_y+590*offset,"Language: [English]",offset*front_scale,offset*front_scale,image_angle);
front_scale=.8;

*/

if(y==620) //BACK
{
draw_set_color(c_black); draw_set_alpha(.75);
front_scale=.8;
draw_text_transformed(set_x+608*offset+shift_back*offset,set_y+622*offset+shift_back*.4*offset,"Back",offset*front_scale,offset*front_scale,image_angle);
draw_set_color(c_white); draw_set_alpha(1);
}
draw_text_transformed(set_x+610*offset,set_y+620*offset,"Back",offset*front_scale,offset*front_scale,image_angle);
front_scale=.8;

draw_sprite_ext(spr_Pause_Arrow,arrow_frame,set_x+600*offset,(y-54)*offset,.5*offset,.5*offset,0,c_white,1);
arrow_frame+=.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
