<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO)
{instance_destroy();}
else
{
if instance_exists(obj_Bloom)
with (obj_Bloom){instance_destroy();}
draw_set_color(c_white);
//if (global.blur_fx==0) || (!instance_exists(par_HERO)) instance_destroy(); //edit 10/30/15


if (global.blur_fx==3)
{
uni_time = shader_get_uniform(shd_radial_blur2,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_radial_blur2,"mouse_pos");
var_mouse_pos_x = par_HERO.x+10*par_HERO.hsp;
var_mouse_pos_y = par_HERO.y;

uni_resolution = shader_get_uniform(shd_radial_blur2,"resolution");
//var_resolution_x = view_wview;
//var_resolution_y = view_hview;
var_resolution_x = 1280;
var_resolution_y = 720;

uni_radial_blur_offset = shader_get_uniform(shd_radial_blur2,"radial_blur_offset");
var_radial_blur_offset = 0.05;
//blur_up=true;

uni_radial_brightness = shader_get_uniform(shd_radial_blur2,"radial_brightness");
var_radial_brightness = 1;

uni_bloom = shader_get_uniform(shd_radial_blur2,"bloom");
var_bloom = par_HERO.bloom;

uni_blur_amount = shader_get_uniform(shd_radial_blur2,"blur_amount");
var_blur_amount = 30;
}


if (global.blur_fx==2)
{
uni_time = shader_get_uniform(shd_radial_blur,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_radial_blur,"mouse_pos");
var_mouse_pos_x = par_HERO.x+10*par_HERO.hsp;
var_mouse_pos_y = par_HERO.y;

uni_resolution = shader_get_uniform(shd_radial_blur,"resolution");
//var_resolution_x = view_wview;
//var_resolution_y = view_hview;
var_resolution_x = 1280;
var_resolution_y = 720;

uni_radial_blur_offset = shader_get_uniform(shd_radial_blur,"radial_blur_offset");
var_radial_blur_offset = 0.05;
//blur_up=true;

uni_radial_brightness = shader_get_uniform(shd_radial_blur,"radial_brightness");
var_radial_brightness = 1;

uni_bloom = shader_get_uniform(shd_radial_blur,"bloom");
var_bloom = par_HERO.bloom;

uni_blur_amount = shader_get_uniform(shd_radial_blur,"blur_amount");
var_blur_amount = 30;
}

if (global.blur_fx==1) ||  (global.blur_fx==0) //edit 10/30/15
{
uni_time = shader_get_uniform(shd_radial_blur_fast,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_radial_blur_fast,"mouse_pos");
var_mouse_pos_x = par_HERO.x+10*par_HERO.hsp;
var_mouse_pos_y = par_HERO.y;

uni_resolution = shader_get_uniform(shd_radial_blur_fast,"resolution");
//var_resolution_x = view_wview;
//var_resolution_y = view_hview;
var_resolution_x = 1280;
var_resolution_y = 720;

uni_radial_blur_offset = shader_get_uniform(shd_radial_blur_fast,"radial_blur_offset");
var_radial_blur_offset = 0.05;
//blur_up=true;

uni_radial_brightness = shader_get_uniform(shd_radial_blur_fast,"radial_brightness");
var_radial_brightness = 1;

uni_bloom = shader_get_uniform(shd_radial_blur_fast,"bloom");
var_bloom = par_HERO.bloom;

uni_blur_amount = shader_get_uniform(shd_radial_blur_fast,"blur_amount");
var_blur_amount = 30;
}


shader_enabled = true;
full_screen_effect = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Bloom) instance_create(x,y,obj_Bloom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var_radial_blur_offset=abs(par_HERO.hsp)*.0005;
if (par_HERO.warping==false) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
    offset=1.5; else offset=1;

var_time_var+=0.04;

if (global.blur_fx==3)  //GOOD QUALITY
{
var_mouse_pos_x = (par_HERO.x+50*par_HERO.hsp-view_xview)*offset;
var_mouse_pos_y = (par_HERO.y-view_yview)*offset;

if shader_enabled shader_set(shd_radial_blur2);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_radial_blur_offset, var_radial_blur_offset);
    shader_set_uniform_f(uni_radial_brightness, var_radial_brightness);
    shader_set_uniform_f(uni_bloom, var_bloom);
    shader_set_uniform_f(uni_blur_amount, var_blur_amount);
    
    if full_screen_effect draw_surface_stretched(application_surface, 0, 0, 1280*offset, 720*offset);
shader_reset();
}


if (global.blur_fx==2)  //GOOD QUALITY
{
var_mouse_pos_x = (par_HERO.x+50*par_HERO.hsp-view_xview)*offset;
var_mouse_pos_y = (par_HERO.y-view_yview)*offset;

if shader_enabled shader_set(shd_radial_blur);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_radial_blur_offset, var_radial_blur_offset);
    shader_set_uniform_f(uni_radial_brightness, var_radial_brightness);
    shader_set_uniform_f(uni_bloom, var_bloom);
    shader_set_uniform_f(uni_blur_amount, var_blur_amount);
    
    if full_screen_effect draw_surface_stretched(application_surface, 0, 0, 1280*offset, 720*offset);
shader_reset();
}

if (global.blur_fx==1) ||  (global.blur_fx==0)//FAST QUALITY //edit 10/30/15
{
if (global.game_speed&lt;1) 
    var_radial_brightness=1+(1-global.game_speed)*.75;
    else
    var_radial_brightness=1;

var_mouse_pos_x = (par_HERO.x+50*par_HERO.hsp-view_xview)*offset;
var_mouse_pos_y = (par_HERO.y-view_yview)*offset;

    if shader_enabled shader_set(shd_radial_blur_fast);
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_radial_blur_offset, var_radial_blur_offset);
    shader_set_uniform_f(uni_radial_brightness, var_radial_brightness);
    shader_set_uniform_f(uni_bloom, var_bloom);
    shader_set_uniform_f(uni_blur_amount, var_blur_amount);
    
    if full_screen_effect draw_surface_stretched(application_surface, 0, 0, 1280*offset, 720*offset);
    shader_reset();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
