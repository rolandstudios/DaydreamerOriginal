<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Crosshair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>offset_x=0;
offset_y=0;

Seek=true;
Seek_Ease=true;

Focus=false;

Focus_x=x;
Focus_y=y;


Look_UP=false;
Look_DOWN=false;
inc=5;
look_speed=0;
elevator=false;
color_track=false;
uniform_blend=false;
v_comp=110;
dof_type=0;


look_inc=12;

Focus_yield=false;

last_x=x;
last_y=y;

//view_hborder=512;
//view_vborder=256;

x=par_HERO.x+offset_x;
y=par_HERO.y+offset_y;
view_object[0]=obj_camera_offset;
//secondary=0;
Col=c_white;

Col_h=colour_get_hue(Col);
Col_s=colour_get_saturation(Col);
Col_v=colour_get_value(Col);

target_Col_h = Col_h;
target_Col_s = Col_s;

orig_x[0] = background_x[0];
orig_y[0] = background_y[0];

orig_x[1] = background_x[1];
orig_y[1] = background_y[1];

orig_x[2] = background_x[2];
orig_y[2] = background_y[2];

orig_x[3] = background_x[3];
orig_y[3] = background_y[3];

orig_x[4] = background_x[4];
orig_y[4] = background_y[4];

orig_x[5] = background_x[5];
orig_y[5] = background_y[5];

orig_x[6] = background_x[6];
orig_y[6] = background_y[6];

blur[0]=0;
blur[1]=0;
blur[2]=0;
blur[3]=0;
blur[4]=0;
blur[5]=0;
blur[6]=0;

slot=0;

//DEPTH OF FIELD ----
timeCounter = 0;
oscillatorValue = 0;
//rad=.3;
rad=1.0;
//-------------------

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.color_blend=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if !instance_exists(par_HERO) instance_destroy();
//CREATE OFFSET NULL--------------------------------

    if !instance_exists(obj_camera_offset_dummy) instance_create(x,y,obj_camera_offset_dummy);
    view_object[0]=obj_camera_offset_dummy;   
    
    view_hspeed[0] = -1;
    view_vspeed[0] = -1;


//CAMERA SPEED-------------------------------------------------------

if (par_HERO.ladder==false) 
{
if (Seek==false) &amp;&amp; (Focus==false)
{
        if (Look_UP) 
        {            
            offset_y-=look_speed;
            
            if (offset_y&lt;-300) 
                {                
                    look_speed*=.7; //ease   
                }
                else
                {
                    look_speed+=2;
                }
            
            
            if (par_HERO.sprite_index != spr_Old_Olivia_Look_Up) &amp;&amp; (par_HERO.sprite_index != spr_Young_Olivia_Look_Up)
                {
                Seek=true;
                speed=look_speed;
                Look_UP=false;
                look_speed=0;
                }
                
        }

        if (Look_DOWN) 
        {
        
        if  (!par_HERO.firing) offset_y+=look_speed 
        
        if (offset_y&gt;300) 
            {
                look_speed*=.7; //ease
            }
            else
            {
                look_speed+=2;
            }
        
        
        
        if (par_HERO.sprite_index != spr_Old_Olivia_Crouch) &amp;&amp;  (par_HERO.sprite_index != spr_Young_Olivia_Crouch) 
            {
            Seek=true;
            speed=look_speed;
            Look_DOWN=false;
            look_speed=0;
            }  
        }
}

}// END NOT LADDER


//FOR POINT OF INTEREST SEEK ------------------------------------------------------------------
if (Focus)
{
direction = point_direction(x,y,Focus_x,Focus_y);

        if point_distance(x, y, Focus_x, Focus_y) &lt;= (speed*10)//was (300)  //EASE
        {
            speed*=.7;
            if (speed&lt;.5) speed=.5; //was .25
        }
        else
        {
            if(speed&lt;12) speed+=.5; //ACCEL
        }
  
    if point_distance(x, y, Focus_x, Focus_y) &lt;= (speed) //LOCK ON
    {
                speed=0;
                x=Focus_x;
                y=Focus_y;
    }
    
       
    if place_meeting(x,y,obj_camera_snap_to)
    {
        if instance_exists(obj_camera_offset_dummy)
            {
            obj_camera_offset_dummy.x=x + lengthdir_x(speed,direction);
            obj_camera_offset_dummy.y=y + lengthdir_y(speed,direction)+obj_camera_offset_dummy.y_offset;
            obj_camera_offset_dummy.shift_x=0;
            obj_camera_offset_dummy.shift_y=0;
            }
    }
    
}

//END FOCUS-----------------------------------------------------------


//FOR ORIGIN DRIFT BACK TO HERO --------------------------------------
if (Seek) //Seek Start -----------------------------------------------
{
   
        if point_distance(x, y, par_HERO.x, par_HERO.y) &lt;= (speed*10)//EASE
        {
            speed*=.7;
            if (speed&lt;.5) speed=.5; //was .25
        }
        else
        {
            if(speed&lt;12) speed+=.5;
        }                   
  
    
    x+=par_HERO.hsp*global.game_speed;
    y+=par_HERO.vsp*global.game_speed;
    
    
    direction = point_direction(x,y,par_HERO.x,par_HERO.y);
    
 
 if point_distance(x, y, par_HERO.x, par_HERO.y) &lt;= (speed) // was (speed+5)
    {
            //speed=point_distance(x, y, par_HERO.x, par_HERO.y);
            speed=0;
            Seek=false;
            offset_x=0;
            offset_y=0;
            look_speed=0;
    }    
 
    offset_y = (y-par_HERO.y);
    look_speed=0;

}

//End Seek---------------------------------------------------------


if (!Seek) &amp;&amp; (!Focus) //OFFSET FOR LOOKING ONLY
{  
    x=par_HERO.x+offset_x;
    y=par_HERO.y+offset_y;        
    speed=0;
}
      
//Background parallax -----------------------------------------------

            
if (global.Parallax==true)
{
//SKY
if (background_hspeed[0]==0)
{
    background_x[0] = orig_x[0] + view_xview[0]/2; 
}
else
{
    background_x[0]+=background_hspeed[0]*global.game_speed;
}

//FarBG
background_x[1] = orig_x[1] + view_xview[0]/4;

//MidBG
background_x[3] = orig_x[3] + view_xview[0]/6;

//NearBG
background_x[4] = orig_x[4] + view_xview[0]/8;

//FG BG --------------
background_x[5] = orig_x[5] + view_xview[0]/10;

background_x[6] = orig_x[6] + view_xview[0]/12;

}//End Parallax

//Vertical parallax
if (global.VParallax==true)
{
//SKY
if (background_hspeed[0]==0)
{
    background_y[0] = orig_y[0] + view_yview[0]/2; 
}


//FarBG
background_y[1] = orig_y[1] + view_yview[0]/4;

//MidBG
background_y[3] = orig_y[3] +  view_yview[0]/6;

//NearBG
background_y[4] = orig_y[4] +  view_yview[0]/8;

background_y[5] = orig_y[5] +  view_yview[0]/12;

background_y[6] = orig_y[6] +  view_yview[0]/14;


}//End Parallax


//COLOR BLENDING ----------

if(color_track==true)
{
if (target_Col_h &gt; Col_h) Col_h +=1; 
if (target_Col_h &lt; Col_h) Col_h -=1; 
if (target_Col_s &gt; Col_s) Col_s +=1; 
if (target_Col_s &lt; Col_s) Col_s -=1;
}




if (global.color_blend)
{
    if (global.platform==1) ||  (global.platform==2)  ||  (global.platform==3)
    hue_shift=610; // (ADD + 610 to HUE FOR PS4 background only) 
    else
    hue_shift=0;

if(uniform_blend==true)
{
    
    //BG--------------- (ADD + 610 to HUE FOR PS4 background only) 
    background_blend[0] = make_color_hsv(Col_h+ hue_shift,Col_s*.5,Col_v);
    background_blend[1] = make_color_hsv(Col_h+ hue_shift,Col_s*.5,Col_v);
    background_blend[2] = make_color_hsv(Col_h+ hue_shift,Col_s*.5,Col_v);
    background_blend[3] = make_color_hsv(Col_h+ hue_shift,Col_s*.5,Col_v);
    background_blend[4] = make_color_hsv(Col_h+ hue_shift,Col_s*.5,Col_v);
    background_blend[5] = make_color_hsv(Col_h+ hue_shift,Col_s*.5,Col_v);
    background_blend[6] = make_color_hsv(Col_h+ hue_shift,Col_s*.5,Col_v);
    
    //OBJECTS----------
    var i;
    for (i = 0; i &lt; instance_count; i += 1;)
       {
           with (instance_id[i]) 
            {
                if (image_blend!=c_red)
                image_blend = make_color_hsv(other.Col_h,other.Col_s*.5,colour_get_value(image_blend));
            }
       }
}
else
{
         
    
    //BG--------------- (ADD + 610 to HUE FOR PS4 background only) 
    background_blend[0] = make_color_hsv(Col_h+ hue_shift,Col_s,Col_v);
    background_blend[1] = make_color_hsv(Col_h+ hue_shift,Col_s,Col_v);
    background_blend[2] = make_color_hsv(Col_h+ hue_shift,Col_s,Col_v);
    background_blend[3] = make_color_hsv(Col_h+ hue_shift,Col_s,Col_v);
    background_blend[4] = make_color_hsv(Col_h+ hue_shift,Col_s,Col_v);
    background_blend[5] = make_color_hsv(Col_h+ hue_shift,Col_s,Col_v);
    background_blend[6] = make_color_hsv(Col_h+ hue_shift,Col_s,Col_v);
    
    
    //OBJECTS----------
    var i;
    for (i = 0; i &lt; instance_count; i += 1;)
       {
           with (instance_id[i]) 
            {
                if (image_blend!=c_red)
                image_blend =  make_color_hsv(other.Col_h,other.Col_s*.5,colour_get_value(image_blend));
            }
       }
       
}

}


if (elevator)
{
if (y&gt;obj_Tunnel_Cliff_E_Elevator.y-100) 
{
y=obj_Tunnel_Cliff_E_Elevator.y-100;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Col!=c_white)
{
Col=c_white;

Col_h=colour_get_hue(Col);
Col_s=colour_get_saturation(Col);
Col_v=colour_get_value(Col);

target_Col_h = Col_h;
target_Col_s = Col_s;


background_blend[0] = make_color_hsv(Col_h,Col_s,Col_v);
background_blend[1] = make_color_hsv(Col_h,Col_s,Col_v);
background_blend[2] = make_color_hsv(Col_h,Col_s,Col_v);
background_blend[3] = make_color_hsv(Col_h,Col_s,Col_v);
background_blend[4] = make_color_hsv(Col_h,Col_s,Col_v);
background_blend[5] = make_color_hsv(Col_h,Col_s,Col_v);
background_blend[6] = make_color_hsv(Col_h,Col_s,Col_v);
 //OBJECTS----------
    var i;
    for (i = 0; i &lt; instance_count; i += 1;)
       {
           with (instance_id[i]) 
            {
                if (image_blend!=c_red)
                image_blend =  make_color_hsv(other.Col_h,other.Col_s*.5,colour_get_value(image_blend));
            }
       }
 }
 
global.color_blend=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view_object[0] = self;
if !instance_exists(obj_Wisp_draw) instance_create(x,y,obj_Wisp_draw);
if instance_exists(par_HERO)
{
offset_x=0;
offset_y=0;
x=par_HERO.x+offset_x;
y=par_HERO.y+offset_y;
}

background_visible[0]=false;
background_visible[1]=false;
background_visible[2]=false;
background_visible[3]=false;
background_visible[4]=false;
background_visible[5]=false;
background_visible[6]=false;

   if(global.theme!=12)
   background_colour= c_black;
   else
   background_colour= c_white;
   background_showcolour = true;

orig_x[0] = background_x[0];
orig_y[0] = background_y[0];

orig_x[1] = background_x[1];
orig_y[1] = background_y[1];

orig_x[2] = background_x[2];
orig_y[2] = background_y[2];

orig_x[3] = background_x[3];
orig_y[3] = background_y[3];

orig_x[4] = background_x[4];
orig_y[4] = background_y[4];

orig_x[5] = background_x[5];
orig_y[5] = background_y[5];

orig_x[6] = background_x[6];
orig_y[6] = background_y[6];

Col = background_blend[0];

Col_h=colour_get_hue(Col);
Col_s=colour_get_saturation(Col);
Col_v=colour_get_value(Col);

target_Col_h = Col_h;
target_Col_s = Col_s;
color_track=false;

elevator=false;
Focus=false;

//case 0: //ORIGINAL
//case 1: //MusroomForrest
//case 2: //Collector Boss
//case 3: //Tutorial Murky Outer Scifi
//case 4: //Tunnel
//case 5: //Green Hills
//case 6: //Valley
//case 7: //Sky Core [scofolding]
//case 8: //Factory
//case 9: //Dark Core
//case 10: //GreenForrest
//case 11: //Cave
//case 12: //LS

switch(global.theme) //BLUR PRESETS
{
case 0: //ORIGINAL
rad=1;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

case 1: //MusroomForrest
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_windstorm) audio_stop_sound(amb_windstorm);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_Magical) audio_play_sound(amb_Magical,11,true);

rad=1;
blur[0]=2;
blur[1]=1.5;
blur[2]=1.04;
blur[3]=.82;
blur[4]=.5;
blur[5]=.5;
blur[6]=.5;
break;

case 2: //Collector Boss
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_windstorm) audio_play_sound(amb_windstorm,11,true);

rad=1;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

case 3: //Tutorial Murky Outer Scifi
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_windstorm) audio_play_sound(amb_windstorm,11,true);

rad=.32;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.5;
blur[6]=.25;
break;

case 4: //Tunnel
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_windstorm) audio_stop_sound(amb_windstorm);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_Factory) audio_play_sound(amb_Factory,11,true);

rad=.5;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

case 5: //Green Hills
global.dof=false;
if audio_is_playing(amb_windstorm) audio_stop_sound(amb_windstorm);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_birds) audio_play_sound(amb_birds,10,true);

rad=1;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

case 6: //Valley
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_windstorm) audio_play_sound(amb_windstorm,11,true);

rad=.8;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

case 7: //Sky Core
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if !audio_is_playing(amb_Factory) audio_play_sound(amb_Factory,12,true);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_windstorm) audio_play_sound(amb_windstorm,11,true);
rad=1.27;
blur[0]=2;
blur[1]=.28;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.4;
blur[6]=.7;
break;

case 8: //Factory
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_windstorm) audio_stop_sound(amb_windstorm);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_Factory) audio_play_sound(amb_Factory,11,true);
rad=.75;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.5;
blur[6]=.25;
break;

case 9: //Dark Core
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_windstorm) audio_play_sound(amb_windstorm,11,true);
rad=1;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

case 10: //Forest
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_windstorm) audio_stop_sound(amb_windstorm);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_Magical) audio_play_sound(amb_Magical,11,true);
rad=1;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

case 11: //Cave
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_windstorm) audio_stop_sound(amb_windstorm);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_Psy) audio_stop_sound(amb_Psy);
if !audio_is_playing(amb_Caves) audio_play_sound(amb_Caves,11,true);
rad=1;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

case 12: //LS
global.dof=false;
if audio_is_playing(amb_birds) audio_stop_sound(amb_birds);
if audio_is_playing(amb_Factory) audio_stop_sound(amb_Factory);
if audio_is_playing(amb_Caves) audio_stop_sound(amb_Caves);
if audio_is_playing(amb_Magical) audio_stop_sound(amb_Magical);
if audio_is_playing(amb_windstorm) audio_stop_sound(amb_windstorm);
if !audio_is_playing(amb_Psy) audio_play_sound(amb_Psy,11,true);

//STOP MUSIC
audio_pause_sound(obj_DJ.music_track);
audio_stop_sound(obj_DJ.music_track);
        
rad=1;
blur[0]=2;
blur[1]=1;
blur[2]=.75;
blur[3]=.75;
blur[4]=.5;
blur[5]=.25;
blur[6]=.25;
break;

}

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Depth of Field Draw ------------------------------------------

if (global.dof)
{   
if (dof_type==0) //[SEPERATE BLURS] ----------------------------------------------------------------------------------------------------------------------------------------------
{
            background_visible[0]=false;
            background_visible[1]=false;
            background_visible[2]=false;
            background_visible[3]=false;
            background_visible[4]=false;
            background_visible[5]=false;
            background_visible[6]=false;
            depth=100;
            visible=true;

                timeCounter += 0.02;
                oscillatorValue = sin(timeCounter);
       
                var u_vRatio = shader_get_uniform(shader_blur, "u_vRatio");
                var u_threshold = shader_get_uniform(shader_blur, "u_threshold");
                           
                //var radius = 0.005;
                var radius = rad * 0.001;  
                var a
                
                shader_set(shader_blur);
                shader_set_uniform_f(1,1);
                shader_set_uniform_f(u_threshold, radius*blur[0]);
                if background_exists(background_index[0]) //DRAW SKY
                {
                //draw_background_stretched_ext(background_index[0],0,0,room_width,room_height,background_blend[0],1);    
                draw_background_tiled_ext(background_index[0],background_x[0],background_y[0],background_xscale[0],background_yscale[0],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);                                       
                }
                
                
                if background_exists(background_index[1])
                {
                shader_set_uniform_f(u_threshold, radius*blur[1]);    
                    if (background_vtiled[1]==true)
                    {
                    draw_background_tiled_ext(background_index[1],background_x[1],background_y[1],background_xscale[1],background_yscale[1],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[1]*background_xscale[1]);a&lt;room_width;a+=background_width[1]*background_xscale[1])
                        {
                        draw_background_ext(background_index[1],a+background_x[1],background_y[1],background_xscale[1],background_yscale[1],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[2])
                {
                    shader_set_uniform_f(u_threshold, radius*blur[2]); 
                    if (background_vtiled[2]==true)
                    {
                    draw_background_tiled_ext(background_index[2],background_x[2],background_y[2],background_xscale[2],background_yscale[2],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[2]*background_xscale[2]);a&lt;room_width;a+=background_width[2]*background_xscale[2])
                        {
                        draw_background_ext(background_index[2],a+background_x[2],background_y[2],background_xscale[2],background_yscale[2],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                
                
                if background_exists(background_index[3])
                {
                    
                    shader_set_uniform_f(u_threshold, radius*blur[3]); 
                    if (background_vtiled[3]==true)
                    {
                    draw_background_tiled_ext(background_index[3],background_x[3],background_y[3],background_xscale[3],background_yscale[3],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[3]*background_xscale[3]);a&lt;room_width;a+=background_width[3]*background_xscale[3])
                        {
                        draw_background_ext(background_index[3],a+background_x[3],background_y[3],background_xscale[3],background_yscale[3],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[4])
                {
                    
                    shader_set_uniform_f(u_threshold, radius*blur[4]); 
                    if (background_vtiled[4]==true)
                    {
                    draw_background_tiled_ext(background_index[4],background_x[4],background_y[4],background_xscale[4],background_yscale[4],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[4]*background_xscale[4]);a&lt;room_width;a+=background_width[4]*background_xscale[4])
                        {
                        draw_background_ext(background_index[4],a+background_x[4],background_y[4],background_xscale[4],background_yscale[4],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                 if background_exists(background_index[5])
                {
                    
                    shader_set_uniform_f(u_threshold, radius*blur[5]); 
                    if (background_vtiled[5]==true)
                    {
                    draw_background_tiled_ext(background_index[5],background_x[5],background_y[5],background_xscale[5],background_yscale[5],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[5]*background_xscale[5]);a&lt;room_width;a+=background_width[5]*background_xscale[5])
                        {
                        draw_background_ext(background_index[5],a+background_x[5],background_y[5],background_xscale[5],background_yscale[5],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                 if background_exists(background_index[6])
                {
                    
                    shader_set_uniform_f(u_threshold, radius*blur[6]); 
                    if (background_vtiled[6]==true)
                    {
                    draw_background_tiled_ext(background_index[6],background_x[6],background_y[6],background_xscale[6],background_yscale[6],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[6]*background_xscale[6]);a&lt;room_width;a+=background_width[6]*background_xscale[6])
                        {
                        draw_background_ext(background_index[6],a+background_x[6],background_y[6],background_xscale[6],background_yscale[6],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                
                
                //shader_set_uniform_f(u_threshold, 0.0015 * oscillatorValue);
                //draw_background_tiled_ext(bg_Eggs,obj_background.x2,obj_background.y2,1,1,c_white,1);
               
            draw_set_blend_mode(bm_normal);
            shader_reset();
            
            
            if (global.debug)
            {
            draw_set_font(fnt_Arial);
            draw_set_alpha(1);
            draw_text(view_xview+100,view_yview+260,"global.theme: "+string(global.theme));
            draw_text(view_xview+100,view_yview+280,"Slot blur["+string(slot)+"]");
            draw_text(view_xview+100,view_yview+300,"Master Blur Radius [rad]:"+string(rad));
            //draw_text(view_xview+100,view_yview+320,"V_comp: "+string(v_comp));
            draw_text(view_xview+100,view_yview+320,"blur[0]: "+string(blur[0]));
            draw_text(view_xview+100,view_yview+340,"blur[1]: "+string(blur[1]));
            draw_text(view_xview+100,view_yview+360,"blur[2]: "+string(blur[2]));
            draw_text(view_xview+100,view_yview+380,"blur[3]: "+string(blur[3]));
            draw_text(view_xview+100,view_yview+400,"blur[4]: "+string(blur[4]));
            draw_text(view_xview+100,view_yview+420,"blur[5]: "+string(blur[5]));
            draw_text(view_xview+100,view_yview+440,"blur[6]: "+string(blur[6]));
            
            if keyboard_check(ord('0')) slot=0;
            if keyboard_check(ord('1')) slot=1;
            if keyboard_check(ord('2')) slot=2;
            if keyboard_check(ord('3')) slot=3;
            if keyboard_check(ord('4')) slot=4;
            if keyboard_check(ord('5')) slot=5;
            if keyboard_check(ord('6')) slot=6;
            
            if keyboard_check(ord('A'))
            {
            blur[0]=0;
            blur[1]=0;
            blur[2]=0;
            blur[3]=0;
            blur[4]=0;
            blur[5]=0;
            blur[6]=0;
            }
            
            if keyboard_check(ord('S'))
            {
            blur[0]=2;
            blur[1]=1;
            blur[2]=.75;
            blur[3]=.75;
            blur[4]=.5;
            blur[5]=.25;
            blur[6]=.25;
            }
            }
            
            
            if (global.debug) draw_self();
}//END DOF TYPE 0 
if (dof_type==1)//[UNIFORM BLUR] ------------------------------------------------------------------------------------------------------------ 
{
            background_visible[0]=false;
            background_visible[1]=false;
            background_visible[2]=false;
            background_visible[3]=false;
            background_visible[4]=false;
            background_visible[5]=false;
            background_visible[6]=false;
            depth=100;
            visible=true;

            timeCounter += 0.02;
            oscillatorValue = sin(timeCounter);
  
           
            var u_vRatio = shader_get_uniform(shader_blur, "u_vRatio");
            var u_threshold = shader_get_uniform(shader_blur, "u_threshold");
                       
            //var radius = 0.005;
            var radius = rad * 0.001;  
            var a
            
            shader_set(shader_blur);
            shader_set_uniform_f(1,1);
            shader_set_uniform_f(u_threshold, radius*1);
            if background_exists(background_index[0]) //DRAW SKY
                {
                draw_background_tiled_ext(background_index[0],background_x[0],background_y[0],background_xscale[0],background_yscale[0],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                }
                
                
                if background_exists(background_index[1])
                {  
                    if (background_vtiled[1]==true)
                    {
                    draw_background_tiled_ext(background_index[1],background_x[1],background_y[1],background_xscale[1],background_yscale[1],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[1]*background_xscale[1]);a&lt;room_width;a+=background_width[1]*background_xscale[1])
                        {
                        draw_background_ext(background_index[1],a+background_x[1],background_y[1],background_xscale[1],background_yscale[1],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[2])
                { 
                    if (background_vtiled[2]==true)
                    {
                    draw_background_tiled_ext(background_index[2],background_x[2],background_y[2],background_xscale[2],background_yscale[2],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[2]*background_xscale[2]);a&lt;room_width;a+=background_width[2]*background_xscale[2])
                        {
                        draw_background_ext(background_index[2],a+background_x[2],background_y[2],background_xscale[2],background_yscale[2],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                
                
                if background_exists(background_index[3])
                {
                    
                    if (background_vtiled[3]==true)
                    {
                    draw_background_tiled_ext(background_index[3],background_x[3],background_y[3],background_xscale[3],background_yscale[3],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[3]*background_xscale[3]);a&lt;room_width;a+=background_width[3]*background_xscale[3])
                        {
                        draw_background_ext(background_index[3],a+background_x[3],background_y[3],background_xscale[3],background_yscale[3],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[4])
                {
                    
                    if (background_vtiled[4]==true)
                    {
                    draw_background_tiled_ext(background_index[4],background_x[4],background_y[4],background_xscale[4],background_yscale[4],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[4]*background_xscale[4]);a&lt;room_width;a+=background_width[4]*background_xscale[4])
                        {
                        draw_background_ext(background_index[4],a+background_x[4],background_y[4],background_xscale[4],background_yscale[4],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                 if background_exists(background_index[5])
                {
                    
                    if (background_vtiled[5]==true)
                    {
                    draw_background_tiled_ext(background_index[5],background_x[5],background_y[5],background_xscale[5],background_yscale[5],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[5]*background_xscale[5]);a&lt;room_width;a+=background_width[5]*background_xscale[5])
                        {
                        draw_background_ext(background_index[5],a+background_x[5],background_y[5],background_xscale[5],background_yscale[5],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                  if background_exists(background_index[6])
                {
                     
                    if (background_vtiled[6]==true)
                    {
                    draw_background_tiled_ext(background_index[6],background_x[6],background_y[6],background_xscale[6],background_yscale[6],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[6]*background_xscale[6]);a&lt;room_width;a+=background_width[6]*background_xscale[6])
                        {
                        draw_background_ext(background_index[6],a+background_x[6],background_y[6],background_xscale[6],background_yscale[6],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
               
            draw_set_blend_mode(bm_normal);
            shader_reset();
            draw_text(view_xview+100,view_yview+300,"Rad: "+string(rad));
            draw_text(view_xview+100,view_yview+320,"V_comp: "+string(v_comp));
            
            if (global.debug) draw_self(); 
                


}//END DOF TYPE 1 --------------------------------------------------------------------------------------------------------------------------      
}    
else // NO DOF -----------------------------------
{
            if(global.manuel_draw) //DRAW BACKGROUNDS AS OBJECTS
            {
            
            //OBJECT BG DRAW
            //background_visible[0]=false;
            background_visible[0]=true;
            
            background_visible[1]=false;
            background_visible[2]=false;
            background_visible[3]=false;
            background_visible[4]=false;
            background_visible[5]=false;
            background_visible[6]=false;
            depth=100;
            visible=true;

            if background_exists(background_index[0]) //DRAW SKY
                {  
                    
                    if (background_htiled[0]==true) &amp;&amp; (background_vtiled[0]==true)
                    {
                    
                    draw_background_tiled_ext(background_index[0],background_x[0],background_y[0],background_xscale[0],background_yscale[0],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    
                    }
                    else
                    {
                    //PLANET DRAW --------------------------------------
                    //draw_set_blend_mode(bm_add);                                                 
                    //draw_background_ext(background_index[0],background_x[0],background_y[0],background_xscale[0],background_yscale[0],0,c_white,.5);       
                    //draw_set_blend_mode(bm_normal);     
                    //PLANET DRAW --------------------------------------
                    }
                }
                
                
                if background_exists(background_index[1])
                {  
                    if (background_vtiled[1]==true)
                    {
                    draw_background_tiled_ext(background_index[1],background_x[1],background_y[1],background_xscale[1],background_yscale[1],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[1]*background_xscale[1]);a&lt;room_width;a+=background_width[1]*background_xscale[1])
                        {
                        draw_background_ext(background_index[1],a+background_x[1],background_y[1],background_xscale[1],background_yscale[1],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[2])
                { 
                    if (background_vtiled[2]==true)
                    {
                    draw_background_tiled_ext(background_index[2],background_x[2],background_y[2],background_xscale[2],background_yscale[2],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[2]*background_xscale[2]);a&lt;room_width;a+=background_width[2]*background_xscale[2])
                        {
                        draw_background_ext(background_index[2],a+background_x[2],background_y[2],background_xscale[2],background_yscale[2],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                
                
                if background_exists(background_index[3])
                {
                    
                    if (background_vtiled[3]==true)
                    {
                    draw_background_tiled_ext(background_index[3],background_x[3],background_y[3],background_xscale[3],background_yscale[3],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[3]*background_xscale[3]);a&lt;room_width;a+=background_width[3]*background_xscale[3])
                        {
                        draw_background_ext(background_index[3],a+background_x[3],background_y[3],background_xscale[3],background_yscale[3],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[4])
                {
                    
                    if (background_vtiled[4]==true)
                    {
                    draw_background_tiled_ext(background_index[4],background_x[4],background_y[4],background_xscale[4],background_yscale[4],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[4]*background_xscale[4]);a&lt;room_width;a+=background_width[4]*background_xscale[4])
                        {
                        draw_background_ext(background_index[4],a+background_x[4],background_y[4],background_xscale[4],background_yscale[4],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                 if background_exists(background_index[5])
                {
                    
                    if (background_vtiled[5]==true)
                    {
                    draw_background_tiled_ext(background_index[5],background_x[5],background_y[5],background_xscale[5],background_yscale[5],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[5]*background_xscale[5]);a&lt;room_width;a+=background_width[5]*background_xscale[5])
                        {
                        draw_background_ext(background_index[5],a+background_x[5],background_y[5],background_xscale[5],background_yscale[5],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                  if background_exists(background_index[6])
                {
                     
                    if (background_vtiled[6]==true)
                    {
                    draw_background_tiled_ext(background_index[6],background_x[6],background_y[6],background_xscale[6],background_yscale[6],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[6]*background_xscale[6]);a&lt;room_width;a+=background_width[6]*background_xscale[6])
                        {
                        draw_background_ext(background_index[6],a+background_x[6],background_y[6],background_xscale[6],background_yscale[6],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
               
            draw_set_blend_mode(bm_normal);
            if (global.debug) draw_self();
            }
            else
            {
            
            //NORMAL BG DRAW--------------------------------
            
            background_visible[0]=true;
            background_visible[1]=true;
            background_visible[2]=true;
            background_visible[3]=true;
            background_visible[4]=true;
            background_visible[5]=true;
            background_visible[6]=true;
            visible=true;
            depth=-4;
            
            background_blend[0]=c_white;
                  
         
            
            //-----------------------------------------------
            }

}   

if (global.debug) 
{
    if (Seek)
    {
    //draw_self();
    draw_sprite_ext(sprite_index,0,par_HERO.x,par_HERO.y-25,.5,.5,0,c_blue,1);
    }
    
    if (Focus)
    {
    //draw_self();
    draw_sprite_ext(sprite_index,0,Focus_x,Focus_y-25,.7,.7,0,c_red,1);
    }
    
    draw_sprite_ext(sprite_index,0,x,y-25,1,1,0,c_white,1);
    
    if instance_exists(obj_camera_offset_dummy)
    {
    draw_sprite_ext(sprite_index,0,obj_camera_offset_dummy.x,obj_camera_offset_dummy.y-25,1,1,0,c_yellow,1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
