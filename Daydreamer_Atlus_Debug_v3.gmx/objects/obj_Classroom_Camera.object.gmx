<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Crosshair</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>offset_x=0;
offset_y=0;
inc=5;
color_track=false;
uniform_blend=false;
v_comp=110;
dof_type=0;
Focus=false;
Focus_x=x;
Focus_y=y;
look_inc=12;

orig_x=x;
orig_y=y;

targ_x=x;
targ_y=y;
direction=0;

//x=par_HERO.x+offset_x;
//y=par_HERO.y+offset_y;
//view_object[0]=obj_camera_offset;
//secondary=0;
Col=c_white;

Col_h=colour_get_hue(Col);
Col_s=colour_get_saturation(Col);
Col_v=colour_get_value(Col);

target_Col_h = Col_h;
target_Col_s = Col_s;

orig_x[0] = background_x[0];
orig_y[0] = background_y[0];

orig_x[1] = background_x[1];
orig_y[1] = background_y[1];

orig_x[2] = background_x[2];
orig_y[2] = background_y[2];

orig_x[3] = background_x[3];
orig_y[3] = background_y[3];

orig_x[4] = background_x[4];
orig_y[4] = background_y[4];

orig_x[5] = background_x[5];
orig_y[5] = background_y[5];

orig_x[6] = background_x[6];
orig_y[6] = background_y[6];

blur[0]=0;
blur[1]=0;
blur[2]=0;
blur[3]=0;
blur[4]=0;
blur[5]=0;
blur[6]=0;

slot=0;

//DEPTH OF FIELD ----
timeCounter = 0;
oscillatorValue = 0;
//rad=.3;
rad=1.0;
//-------------------

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.xboxcontroller == false)
{
Key_Left = keyboard_check(vk_left);
Key_Right = keyboard_check(vk_right);
Key_Up = keyboard_check(vk_up);
Key_Down = keyboard_check(vk_down);

Key_Jump = keyboard_check_pressed(vk_space);
}

if (global.xboxcontroller == true)
{
Key_Left = gamepad_button_check(0, gp_padl);
Key_Right = gamepad_button_check(0, gp_padr);
Key_Up = gamepad_button_check(0, gp_padu);
Key_Down = gamepad_button_check(0, gp_padd);

switch (global.ctlstyle)
{
    case 1:
    Key_Jump = gamepad_button_check_pressed(0, gp_face1);
    Key_Fire = gamepad_button_check_pressed(0, gp_face2);
    Key_Firing = gamepad_button_check(0, gp_face2); 
    Key_Melee = gamepad_button_check_pressed(0, gp_face3);
    break;
    
    case 2:
    Key_Jump = gamepad_button_check_pressed(0, gp_face1);
    Key_Fire = gamepad_button_check_pressed(0, gp_face3);
    Key_Firing = gamepad_button_check(0, gp_face3);
    Key_Melee = gamepad_button_check_pressed(0, gp_face2);
    break;
    
    case 3:
    Key_Jump = gamepad_button_check_pressed(0, gp_face2);
    Key_Fire = gamepad_button_check_pressed(0, gp_face1);
    Key_Firing = gamepad_button_check(0, gp_face1);
    Key_Melee = gamepad_button_check_pressed(0, gp_face3);
    break;

}
Key_Weapon = gamepad_button_check_pressed(0, gp_face4);
Key_Pause = gamepad_button_check_pressed(0,gp_start);
Key_Select = gamepad_button_check_pressed(0,gp_select);
Key_Left_Shoulder = gamepad_button_check_pressed(0,gp_shoulderl);
Key_Right_Shoulder = gamepad_button_check_pressed(0,gp_shoulderr);

Key_Left_Trigger = gamepad_button_check_pressed(0,gp_shoulderlb);
Key_Right_Trigger = gamepad_button_check_pressed(0,gp_shoulderrb);


if (gamepad_axis_value(0, gp_axislv)&lt;-.5) Key_Up = 1;  
if (gamepad_axis_value(0, gp_axislv)&gt;.5) Key_Down = 1;
if (gamepad_axis_value(0, gp_axislh)&lt;-.5) Key_Left = 1;
if (gamepad_axis_value(0, gp_axislh)&gt;.5) Key_Right = 1;

if (gamepad_axis_value(0, gp_axislh)==0) {Key_Left = 0; Key_Right = 0;}
if (gamepad_axis_value(0, gp_axislv)==0) {Key_Up = 0; Key_Down=0;}

}//END XBOX CONTROLLER TRUE

direction=point_direction(x,y,targ_x,targ_y);
//speed=5;

if (y&lt;targ_y+70) &amp;&amp; (y&gt;targ_y-70) 
{
    if (x&lt;targ_x+70) &amp;&amp; (x&gt;targ_x-70) 
        {
        speed*=.9;
        }
        else
        {
        if (speed&lt;20) speed+=1;
        }

}
else
{
if (speed&lt;20) speed+=1;
}


//x=mouse_x;
//y=mouse_y;
if (Key_Pause) || keyboard_check_pressed(vk_enter)
{
instance_create(x,y,obj_Pause);
}

 
/*
if (Key_Left) x-=5;
if (Key_Right) x+=5;
if (Key_Up) y-=5;
if (Key_Down) y+=5;
*/


//Background parallax -----------------------------------------------

            
if (global.Parallax==true)
{
//SKY
background_x[0] = orig_x[0] + view_xview[0]/2; 

//FarBG
background_x[1] = orig_x[1] + view_xview[0]/4;

//MidBG
background_x[3] = orig_x[3] + view_xview[0]/6;

//NearBG
background_x[4] = orig_x[4] + view_xview[0]/8;

//FG BG --------------
background_x[5] = orig_x[5] + view_xview[0]/10;

background_x[6] = orig_x[6] + view_xview[0]/12;

}//End Parallax

//Vertical parallax
if (global.VParallax==true)
{
//SKY
background_y[0] = orig_y[0] + view_yview[0]/2; 

//FarBG
background_y[1] = orig_y[1] + view_yview[0]/4;

//MidBG
background_y[3] = orig_y[3] +  view_yview[0]/6;

//NearBG
background_y[4] = orig_y[4] +  view_yview[0]/8;

background_y[5] = orig_y[5] +  view_yview[0]/10;

background_y[6] = orig_y[6] +  view_yview[0]/12;


}//End Parallax

//COLOR BLEND ----------
if(color_track==true)
{
if (target_Col_h &gt; Col_h) Col_h +=1; 
if (target_Col_h &lt; Col_h) Col_h -=1; 
if (target_Col_s &gt; Col_s) Col_s +=1; 
if (target_Col_s &lt; Col_s) Col_s -=1;
}


if(uniform_blend==true)
{
    //BG---------------
    background_blend[0] = make_color_hsv(Col_h,Col_s*.5,Col_v);
    background_blend[1] = make_color_hsv(Col_h,Col_s*.5,Col_v);
    background_blend[2] = make_color_hsv(Col_h,Col_s*.5,Col_v);
    background_blend[3] = make_color_hsv(Col_h,Col_s*.5,Col_v);
    background_blend[4] = make_color_hsv(Col_h,Col_s*.5,Col_v);
    background_blend[5] = make_color_hsv(Col_h,Col_s*.5,Col_v);
    background_blend[6] = make_color_hsv(Col_h,Col_s*.5,Col_v);
    
    //OBJECTS----------
    var i;
    for (i = 0; i &lt; instance_count; i += 1;)
       {
           with (instance_id[i]) 
            {
                if (image_blend!=c_red)
                image_blend = make_color_hsv(other.Col_h,other.Col_s*.5,colour_get_value(image_blend));
            }
       }
}
else
{
         
    //BG---------------
    background_blend[0] = make_color_hsv(Col_h,Col_s,Col_v);
    background_blend[1] = make_color_hsv(Col_h,Col_s,Col_v);
    background_blend[2] = make_color_hsv(Col_h,Col_s,Col_v);
    background_blend[3] = make_color_hsv(Col_h,Col_s,Col_v);
    background_blend[4] = make_color_hsv(Col_h,Col_s,Col_v);
    background_blend[5] = make_color_hsv(Col_h,Col_s,Col_v);
    background_blend[6] = make_color_hsv(Col_h,Col_s,Col_v);
    
    //OBJECTS----------
    var i;
    for (i = 0; i &lt; instance_count; i += 1;)
       {
           with (instance_id[i]) 
            {
                if (image_blend!=c_red)
                image_blend =  make_color_hsv(other.Col_h,other.Col_s*.5,colour_get_value(image_blend));
            }
       }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (background_visible[0]==false) //BLACK SCREEN IF NOT LOADED
    {
    draw_set_alpha(1);
    draw_rectangle_color(0,0,1920,1080,c_black,c_black,c_black,c_black,false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Depth of Field Draw ------------------------------------------
//draw_self();

if (global.dof)
{   
if (dof_type==0)//[SEPERATE BLURS] ----------------------------------------------------------------------------------------------------------------------------------------------
{
            background_visible[0]=false;
            background_visible[1]=false;
            background_visible[2]=false;
            background_visible[3]=false;
            background_visible[4]=false;
            background_visible[5]=false;
            background_visible[6]=false;
            depth=100;
            visible=true;

            timeCounter += 0.02;
            oscillatorValue = sin(timeCounter);
  
           
            var u_vRatio = shader_get_uniform(shader_blur, "u_vRatio");
            var u_threshold = shader_get_uniform(shader_blur, "u_threshold");
                       
            //var radius = 0.005;
            var radius = rad * 0.001;  
            var a
            
            shader_set(shader_blur);
                shader_set_uniform_f(1,1);
                
                shader_set_uniform_f(u_threshold, radius*blur[0]);
                if background_exists(background_index[0]) //DRAW SKY
                {
                //draw_background_stretched_ext(background_index[0],0,0,room_width,room_height,background_blend[0],1);
                draw_background_tiled_ext(background_index[0],background_x[0],background_y[0],background_xscale[0],background_yscale[0],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                }
                
                
                if background_exists(background_index[1])
                {
                shader_set_uniform_f(u_threshold, radius*blur[1]);    
                    if (background_vtiled[1]==true)
                    {
                    draw_background_tiled_ext(background_index[1],background_x[1],background_y[1],background_xscale[1],background_yscale[1],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[1]*background_xscale[1]);a&lt;room_width;a+=background_width[1]*background_xscale[1])
                        {
                        draw_background_ext(background_index[1],a+background_x[1],background_y[1],background_xscale[1],background_yscale[1],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[2])
                {
                    shader_set_uniform_f(u_threshold, radius*blur[2]); 
                    if (background_vtiled[2]==true)
                    {
                    draw_background_tiled_ext(background_index[2],background_x[2],background_y[2],background_xscale[2],background_yscale[2],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[2]*background_xscale[2]);a&lt;room_width;a+=background_width[2]*background_xscale[2])
                        {
                        draw_background_ext(background_index[2],a+background_x[2],background_y[2],background_xscale[2],background_yscale[2],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                
                
                if background_exists(background_index[3])
                {
                    
                    shader_set_uniform_f(u_threshold, radius*blur[3]); 
                    if (background_vtiled[3]==true)
                    {
                    draw_background_tiled_ext(background_index[3],background_x[3],background_y[3],background_xscale[3],background_yscale[3],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[3]*background_xscale[3]);a&lt;room_width;a+=background_width[3]*background_xscale[3])
                        {
                        draw_background_ext(background_index[3],a+background_x[3],background_y[3],background_xscale[3],background_yscale[3],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[4])
                {
                    
                    shader_set_uniform_f(u_threshold, radius*blur[4]); 
                    if (background_vtiled[4]==true)
                    {
                    draw_background_tiled_ext(background_index[4],background_x[4],background_y[4],background_xscale[4],background_yscale[4],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[4]*background_xscale[4]);a&lt;room_width;a+=background_width[4]*background_xscale[4])
                        {
                        draw_background_ext(background_index[4],a+background_x[4],background_y[4],background_xscale[4],background_yscale[4],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                 if background_exists(background_index[5])
                {
                    
                    shader_set_uniform_f(u_threshold, radius*blur[5]); 
                    if (background_vtiled[5]==true)
                    {
                    draw_background_tiled_ext(background_index[5],background_x[5],background_y[5],background_xscale[5],background_yscale[5],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[5]*background_xscale[5]);a&lt;room_width;a+=background_width[5]*background_xscale[5])
                        {
                        draw_background_ext(background_index[5],a+background_x[5],background_y[5],background_xscale[5],background_yscale[5],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                 if background_exists(background_index[6])
                {
                    
                    shader_set_uniform_f(u_threshold, radius*blur[6]); 
                    if (background_vtiled[6]==true)
                    {
                    draw_background_tiled_ext(background_index[6],background_x[6],background_y[6],background_xscale[6],background_yscale[6],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[6]*background_xscale[6]);a&lt;room_width;a+=background_width[6]*background_xscale[6])
                        {
                        draw_background_ext(background_index[6],a+background_x[6],background_y[6],background_xscale[6],background_yscale[6],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                
                
                //shader_set_uniform_f(u_threshold, 0.0015 * oscillatorValue);
                //draw_background_tiled_ext(bg_Eggs,obj_background.x2,obj_background.y2,1,1,c_white,1);
               
            draw_set_blend_mode(bm_normal);
            shader_reset();
            
            
            if (global.debug)
            {
            draw_set_font(fnt_Arial);
            draw_set_alpha(1);
            draw_text(view_xview+100,view_yview+260,"global.theme: "+string(global.theme));
            draw_text(view_xview+100,view_yview+280,"Slot blur["+string(slot)+"]");
            draw_text(view_xview+100,view_yview+300,"Master Blur Radius [rad]:"+string(rad));
            //draw_text(view_xview+100,view_yview+320,"V_comp: "+string(v_comp));
            draw_text(view_xview+100,view_yview+320,"blur[0]: "+string(blur[0]));
            draw_text(view_xview+100,view_yview+340,"blur[1]: "+string(blur[1]));
            draw_text(view_xview+100,view_yview+360,"blur[2]: "+string(blur[2]));
            draw_text(view_xview+100,view_yview+380,"blur[3]: "+string(blur[3]));
            draw_text(view_xview+100,view_yview+400,"blur[4]: "+string(blur[4]));
            draw_text(view_xview+100,view_yview+420,"blur[5]: "+string(blur[5]));
            draw_text(view_xview+100,view_yview+440,"blur[6]: "+string(blur[6]));
            
            if keyboard_check(ord('0')) slot=0;
            if keyboard_check(ord('1')) slot=1;
            if keyboard_check(ord('2')) slot=2;
            if keyboard_check(ord('3')) slot=3;
            if keyboard_check(ord('4')) slot=4;
            if keyboard_check(ord('5')) slot=5;
            if keyboard_check(ord('6')) slot=6;
            
            if keyboard_check(ord('A'))
            {
            blur[0]=0;
            blur[1]=0;
            blur[2]=0;
            blur[3]=0;
            blur[4]=0;
            blur[5]=0;
            blur[6]=0;
            }
            
            if keyboard_check(ord('S'))
            {
            blur[0]=2;
            blur[1]=1;
            blur[2]=.75;
            blur[3]=.75;
            blur[4]=.5;
            blur[5]=.25;
            blur[6]=.25;
            }
            }
            
            
            if (global.debug) draw_self();
}//END DOF TYPE 0 
if (dof_type==1)//[UNIFORM BLUR] ------------------------------------------------------------------------------------------------------------ 
{
            background_visible[0]=false;
            background_visible[1]=false;
            background_visible[2]=false;
            background_visible[3]=false;
            background_visible[4]=false;
            background_visible[5]=false;
            background_visible[6]=false;
            depth=100;
            visible=true;

            timeCounter += 0.02;
            oscillatorValue = sin(timeCounter);
  
           
            var u_vRatio = shader_get_uniform(shader_blur, "u_vRatio");
            var u_threshold = shader_get_uniform(shader_blur, "u_threshold");
                       
            //var radius = 0.005;
            var radius = rad * 0.001;  
            var a
            
            shader_set(shader_blur);
            shader_set_uniform_f(1,1);
            shader_set_uniform_f(u_threshold, radius*1);
            if background_exists(background_index[0]) //DRAW SKY
                {
                draw_background_tiled_ext(background_index[0],background_x[0],background_y[0],background_xscale[0],background_yscale[0],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                }
                
                
                if background_exists(background_index[1])
                {  
                    if (background_vtiled[1]==true)
                    {
                    draw_background_tiled_ext(background_index[1],background_x[1],background_y[1],background_xscale[1],background_yscale[1],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[1]*background_xscale[1]);a&lt;room_width;a+=background_width[1]*background_xscale[1])
                        {
                        draw_background_ext(background_index[1],a+background_x[1],background_y[1],background_xscale[1],background_yscale[1],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[2])
                { 
                    if (background_vtiled[2]==true)
                    {
                    draw_background_tiled_ext(background_index[2],background_x[2],background_y[2],background_xscale[2],background_yscale[2],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[2]*background_xscale[2]);a&lt;room_width;a+=background_width[2]*background_xscale[2])
                        {
                        draw_background_ext(background_index[2],a+background_x[2],background_y[2],background_xscale[2],background_yscale[2],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                
                
                if background_exists(background_index[3])
                {
                    
                    if (background_vtiled[3]==true)
                    {
                    draw_background_tiled_ext(background_index[3],background_x[3],background_y[3],background_xscale[3],background_yscale[3],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[3]*background_xscale[3]);a&lt;room_width;a+=background_width[3]*background_xscale[3])
                        {
                        draw_background_ext(background_index[3],a+background_x[3],background_y[3],background_xscale[3],background_yscale[3],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[4])
                {
                    
                    if (background_vtiled[4]==true)
                    {
                    draw_background_tiled_ext(background_index[4],background_x[4],background_y[4],background_xscale[4],background_yscale[4],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[4]*background_xscale[4]);a&lt;room_width;a+=background_width[4]*background_xscale[4])
                        {
                        draw_background_ext(background_index[4],a+background_x[4],background_y[4],background_xscale[4],background_yscale[4],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                 if background_exists(background_index[5])
                {
                    
                    if (background_vtiled[5]==true)
                    {
                    draw_background_tiled_ext(background_index[5],background_x[5],background_y[5],background_xscale[5],background_yscale[5],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[5]*background_xscale[5]);a&lt;room_width;a+=background_width[5]*background_xscale[5])
                        {
                        draw_background_ext(background_index[5],a+background_x[5],background_y[5],background_xscale[5],background_yscale[5],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                  if background_exists(background_index[6])
                {
                     
                    if (background_vtiled[6]==true)
                    {
                    draw_background_tiled_ext(background_index[6],background_x[6],background_y[6],background_xscale[6],background_yscale[6],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[6]*background_xscale[6]);a&lt;room_width;a+=background_width[6]*background_xscale[6])
                        {
                        draw_background_ext(background_index[6],a+background_x[6],background_y[6],background_xscale[6],background_yscale[6],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
               
            draw_set_blend_mode(bm_normal);
            shader_reset();
            draw_text(view_xview+100,view_yview+300,"Rad: "+string(rad));
            draw_text(view_xview+100,view_yview+320,"V_comp: "+string(v_comp));
            
            if (global.debug) draw_self(); 
                


}//END DOF TYPE 1 --------------------------------------------------------------------------------------------------------------------------      
}    
else // NO DOF -----------------------------------
{
            /*
            //OBJECT BG DRAW
            background_visible[0]=false;
            background_visible[1]=false;
            background_visible[2]=false;
            background_visible[3]=false;
            background_visible[4]=false;
            background_visible[5]=false;
            background_visible[6]=false;
            depth=100;
            visible=true;

            if background_exists(background_index[0]) //DRAW SKY
                {
                draw_background_tiled_ext(background_index[0],background_x[0],background_y[0],background_xscale[0],background_yscale[0],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                }
                
                
                if background_exists(background_index[1])
                {  
                    if (background_vtiled[1]==true)
                    {
                    draw_background_tiled_ext(background_index[1],background_x[1],background_y[1],background_xscale[1],background_yscale[1],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[1]*background_xscale[1]);a&lt;room_width;a+=background_width[1]*background_xscale[1])
                        {
                        draw_background_ext(background_index[1],a+background_x[1],background_y[1],background_xscale[1],background_yscale[1],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[2])
                { 
                    if (background_vtiled[2]==true)
                    {
                    draw_background_tiled_ext(background_index[2],background_x[2],background_y[2],background_xscale[2],background_yscale[2],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[2]*background_xscale[2]);a&lt;room_width;a+=background_width[2]*background_xscale[2])
                        {
                        draw_background_ext(background_index[2],a+background_x[2],background_y[2],background_xscale[2],background_yscale[2],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                
                
                if background_exists(background_index[3])
                {
                    
                    if (background_vtiled[3]==true)
                    {
                    draw_background_tiled_ext(background_index[3],background_x[3],background_y[3],background_xscale[3],background_yscale[3],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[3]*background_xscale[3]);a&lt;room_width;a+=background_width[3]*background_xscale[3])
                        {
                        draw_background_ext(background_index[3],a+background_x[3],background_y[3],background_xscale[3],background_yscale[3],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                if background_exists(background_index[4])
                {
                    
                    if (background_vtiled[4]==true)
                    {
                    draw_background_tiled_ext(background_index[4],background_x[4],background_y[4],background_xscale[4],background_yscale[4],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[4]*background_xscale[4]);a&lt;room_width;a+=background_width[4]*background_xscale[4])
                        {
                        draw_background_ext(background_index[4],a+background_x[4],background_y[4],background_xscale[4],background_yscale[4],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                 if background_exists(background_index[5])
                {
                    
                    if (background_vtiled[5]==true)
                    {
                    draw_background_tiled_ext(background_index[5],background_x[5],background_y[5],background_xscale[5],background_yscale[5],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[5]*background_xscale[5]);a&lt;room_width;a+=background_width[5]*background_xscale[5])
                        {
                        draw_background_ext(background_index[5],a+background_x[5],background_y[5],background_xscale[5],background_yscale[5],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
                
                  if background_exists(background_index[6])
                {
                     
                    if (background_vtiled[6]==true)
                    {
                    draw_background_tiled_ext(background_index[6],background_x[6],background_y[6],background_xscale[6],background_yscale[6],make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                    }
                    else
                    {
                    for(a=-2*(background_width[6]*background_xscale[6]);a&lt;room_width;a+=background_width[6]*background_xscale[6])
                        {
                        draw_background_ext(background_index[6],a+background_x[6],background_y[6],background_xscale[6],background_yscale[6],0,make_color_hsv(Col_h,Col_s,Col_v-v_comp),1);
                        }
                    }
                }
               
            draw_set_blend_mode(bm_normal);
            if (global.debug) draw_self();

            */
            //NORMAL BG DRAW--------------------------------
            
            background_visible[0]=true;
            background_visible[1]=true;
            background_visible[2]=true;
            background_visible[3]=true;
            background_visible[4]=true;
            background_visible[5]=true;
            background_visible[6]=true;
            visible=true;
            depth=-4;
                  
            if (global.debug) draw_self();
            
            //-----------------------------------------------
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
