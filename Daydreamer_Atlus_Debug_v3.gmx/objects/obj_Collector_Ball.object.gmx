<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index=global.sprite[master.spr_Collector_Ball];

damage=15;
type=2;
hit=false;

angle=0;
turn=0;

color=c_white;

        last_x_A=x;
        last_y_A=y;
        last_angle_A=image_angle;
        
        last_x_B=x;
        last_y_B=y;
        last_angle_B=image_angle;
        
        last_x_C=x;
        last_y_C=y;
        last_angle_C=image_angle;
        
        last_x_D=x;
        last_y_D=y;
        last_angle_D=image_angle;
        
        last_x_E=x;
        last_y_E=y;
        last_angle_E=image_angle;
        
        last_x_F=x;
        last_y_F=y;
        last_angle_E=image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//audio_play_sound(snd_Collector_Belly_Splat_hit,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x,y,par_wall)
    {  
    if!place_meeting(x,y,obj_platform_128x4) &amp;&amp; !place_meeting(x,y,obj_Barrier_Lazer)
    {
    if (!hit)
        {
        audio_sound_pitch(snd_Collector_Belly_Splat,global.game_speed);
        audio_play_sound(snd_Collector_Belly_Splat_hit,10,false);
        hit=true;
        sprite_index=global.sprite[master.spr_Collector_Ball_Splash];
        image_index=0;
        image_speed=random_range(.5,.5);
        alarm[0]=irandom_range(7,15);
        /*
        splash_A_x=x+irandom_range(20,50);
        splash_A_y=y;//+irandom_range(-12,12);
        splash_A_scale=random_range(.5,.9);
        splash_A_angle=image_angle+irandom_range(-45,-25)*image_xscale;
        
        splash_B_x=x+irandom_range(-20,-50);
        splash_B_y=y;//+irandom_range(-12,12);
        splash_B_scale=random_range(.5,.9);
        splash_B_angle=image_angle+irandom_range(25,45)*image_xscale;
        */
        splash_A_x=x+irandom_range(75,100)*image_xscale;
        splash_A_y=y+10;//+irandom_range(-12,12);
        splash_A_scale=random_range(.5,.7);
        splash_A_angle=0;
        frame=irandom_range(2,3);
        
        splash_B_x=x+irandom_range(170,200)*image_xscale;
        splash_B_y=y+32;//+irandom_range(-12,12);
        splash_B_scale=random_range(.5,.7);
        splash_B_angle=angle-(turn+irandom_range(15,35))*image_xscale;
        }
    }
    }
    
vsp+=.6;
if (turn&lt;135) turn+=2;   
    
if (hit)
{
hsp=0;
vsp=0;
if (image_index&gt;=sprite_get_number(global.sprite[master.spr_Collector_Ball_Splash])-1)
 instance_destroy();
}
else
{

        last_x_F=last_x_E;
        last_y_F=last_y_E;
        last_angle_F=last_angle_E;    

        last_x_E=last_x_D;
        last_y_E=last_y_D;
        last_angle_E=last_angle_D;
        
        last_x_D=last_x_C;
        last_y_D=last_y_C;
        last_angle_D=last_angle_C;
        
        last_x_C=last_x_B;
        last_y_C=last_y_B;
        last_angle_C=last_angle_B;
        
        
        last_x_B=last_x_A;
        last_y_B=last_y_A;
        last_angle_B=last_angle_A;
        
        last_x_A=x;
        last_y_A=y;
        last_angle_A=image_angle;


}

image_speed=.5*global.game_speed;
image_angle=angle-turn*image_xscale;
x+=hsp*global.game_speed;
y+=vsp*global.game_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_exists(sprite_index))
{
if(!hit)
{
draw_sprite_ext(sprite_index, image_index-6,last_x_F, last_y_F, image_xscale*.25, image_yscale*.25, last_angle_C, c_white, .25 );
//draw_sprite_ext(sprite_index, image_index-2,last_x_B, last_y_B, image_xscale, image_yscale, last_angle_B, c_white, .5 );
draw_sprite_ext(sprite_index, image_index-4,last_x_D, last_y_D, image_xscale*.5, image_yscale*.5, last_angle_A, c_white, .5 );
//draw_sprite_ext(sprite_index, image_index-3,last_x_C, last_y_C, image_xscale, image_yscale, last_angle_C, c_white, .25 );
draw_sprite_ext(sprite_index, image_index-2,last_x_B, last_y_B, image_xscale*.75, image_yscale*.75, last_angle_B, c_white, .75 );
//draw_sprite_ext(sprite_index, image_index-1,last_x_A, last_y_A, image_xscale, image_yscale, last_angle_A, c_white, .75 );
draw_self();
}
else
{
if (image_index&gt;3)
draw_sprite_ext(sprite_index, image_index-frame,splash_A_x, splash_A_y, splash_A_scale, splash_A_scale*-1, 270, c_white, 1 );
//if (image_index&gt;1)
//draw_sprite_ext(sprite_index, image_index-1,splash_B_x, splash_B_y, splash_B_scale*sign(image_xscale), splash_B_scale, splash_B_angle, c_white, 1 );
draw_sprite_ext(sprite_index, image_index,x, y, image_xscale, image_yscale, image_angle, c_white, 1 );
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>62,50</point>
    <point>62,62</point>
  </PhysicsShapePoints>
</object>
