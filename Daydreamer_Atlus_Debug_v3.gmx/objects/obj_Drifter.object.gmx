<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy_Body</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//MEDIUM CONSUMER ----------------------

/*
if(master.spr_Medium_Consumer_Walk==0)
{
master.num+=1;
master.spr_Medium_Consumer_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Medium_Consumer_Walk.png",24,1,1,67,153);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_Medium_Consumer_Jump==0)
{
master.num+=1;
master.spr_Medium_Consumer_Jump=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Medium_Consumer_Jump.png",31,1,1,66,211);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Medium_Consumer_Turn==0)
{
master.num+=1;
master.spr_Medium_Consumer_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Medium_Consumer_Turn.png",13,1,1,117,150);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Medium_Consumer_Idle==0)
{
master.num+=1;
master.spr_Medium_Consumer_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Medium_Consumer_Idle.png",24,1,1,56,139);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Medium_Consumer_Bite==0)
{
master.num+=1;
master.spr_Medium_Consumer_Bite=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Medium_Consumer_Bite.png",25,1,1,95,200);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}
*/

//LITTLE CONSUMER -------------------

if(master.spr_Debris_Cloud==0)
{
master.num+=1;
master.spr_Debris_Cloud=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Debris_Cloud.png",56,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
sprite_collision_mask(global.sprite[master.num],  0, 2, 100, 90, 135, 125,2,225);
}

if(master.spr_Little_Consumer_Turn==0)
{
master.num+=1;
master.spr_Little_Consumer_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_Turn.png",13,1,1,96,80);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_Little_Consumer_Walk==0)
{
master.num+=1;
master.spr_Little_Consumer_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_Walk.png",25,1,1,64,76);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_Little_Consumer_Jump==0)
{
master.num+=1;
master.spr_Little_Consumer_Jump=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_Jump.png",25,1,1,63,118);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Little_Consumer_LookAround==0)
{
master.num+=1;
master.spr_Little_Consumer_LookAround=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_LookAround.png",31,1,1,63,79);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Little_Consumer_Bite==0)
{
master.num+=1;
master.spr_Little_Consumer_Bite=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_Bite.png",25,1,1,76,78);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}



//Load Buffs
//-------------------------------------
if(master.spr_Drifter_Arm_A==0)
{
master.num+=1;
master.spr_Drifter_Arm_A=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Drifter_Arm_A.png",30,0,1,128*.85,1007*.85);
sprite_collision_mask(global.sprite[master.num],  0, 2, 92, 0,158, 1008,1,225);
}


if(master.spr_Ship_Short==0)
{
master.num+=1;
master.spr_Ship_Short=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Ship_Short.png",9,1,1,445*.85,113*.85);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

//-------------------------------------


//Load Character Sprites
//-------------------------------------

if(master.spr_Drifter_Die==0)
{
master.num+=1;
master.spr_Drifter_Die=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Drifter_Die.png",15,0,1,208*.85,303*.85);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_Drifter_Cage==0)
{
master.num+=1;
master.spr_Drifter_Cage=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Drifter_Cage.png",30,0,1,205*.85,298*.85);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Drifter_Cage_Blast==0)
{
master.num+=1;
master.spr_Drifter_Cage_Blast=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Drifter_Cage_Blast.png",14,0,1,255*.85,305*.85);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Drifter_Blast==0)
{
master.num+=1;
master.spr_Drifter_Blast=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Drifter_Blast.png",32,0,1,225*.85,290*.85);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Drifter_Trigger==0)
{
master.num+=1;
master.spr_Drifter_Trigger=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Drifter_Trigger.png",18,0,1,195*.85,291*.85);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_Drifter_Idle==0)
{
master.num+=1;
master.spr_Drifter_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Drifter_Idle.png",29,0,1,208*.85,303*.85);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Drifter_Turn==0)
{
master.num+=1;
master.spr_Drifter_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Drifter_Turn.png",20,0,1,192*.85,289*.85);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

sprite_index=global.sprite[master.spr_Drifter_Idle]

//-------------------------------------


audio_sound_gain(snd_Drifter_Hover,1,0);
scale=image_yscale;
if instance_exists(par_HERO)
{
    if (par_HERO.x&lt;x)
    {
    image_xscale=-scale*1;
    west_east = 0;
    }
    else
    {
    image_xscale=scale*1;
    west_east = 1;
    }
}
else
{
image_xscale=scale*1;
west_east = 0;
}


hp=810;
rest=false;
activate=false;

hsp=0;
vsp=0;
setspeed = 5;
color=image_blend;
force_field=false;
force_field_index=0;

type=1;

//alarm[2]=500;

image_speed=.5
damage=7*global.difficulty;;
moveChoose=false;
moveChoice=1;
alarm[0]=25;
acel=0;
fire=false;
kickback=0;
float_up=true;
float_factor=0;
hit=false; 
trail=false;
max_hsp=20;
canTurn=true;
fired=false;
turns=0;

hero_hp=0;
hero_damage=0;


        last_x_A=x;
        last_y_A=y;
         
        last_x_B=x;
        last_y_B=y;
           
        last_x_C=x;
        last_y_C=y;
        
        last_x_D=x;
        last_y_D=y;
        
        last_x_E=x;
        last_y_E=y;
        
        last_x_F=x;
        last_y_F=y;
        
        last_x_G=x;
        last_y_G=y;
        
        last_x_H=x;
        last_y_H=y;
        
        last_x_I=x;
        last_y_I=y;
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> audio_stop_sound(snd_Drifter_Hover);   
    
if (hp&lt;=0) 
{
global.world_clear[2]=1;

    //STEAM
    if (global.platform==0)
    {
    if !steam_get_achievement("ach_Defeat_Doomflayer") 
        steam_set_achievement("ach_Defeat_Doomflayer");
    }
    //XBOX ONE
    if (global.platform==1)
    {        
        scr_XboxOne_Achievement(8);                                   
    }
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(8);                                   
    }      
      
with instance_create(x,y,obj_CheckPoint){World=2.5;Boss=true;}

//const=500/(4*60); //MIN CONSTANT
damage_bonus=round((100-hero_damage)*5);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=500;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus;
    boss_num=2;    
    }
}
   
   
 
   
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turns=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>trail=true;

        last_x_A=x;
        last_y_A=y;
         
        last_x_B=x;
        last_y_B=y;
           
        last_x_C=x;
        last_y_C=y;
        
        last_x_D=x;
        last_y_D=y;
        
        last_x_E=x;
        last_y_E=y;
        
        last_x_F=x;
        last_y_F=y;
        
        last_x_G=x;
        last_y_G=y;
        
        last_x_H=x;
        last_y_H=y;
        
        last_x_I=x;
        last_y_I=y;
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_blend=color;
audio_play_sound(snd_EnemyHit_A,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Short_Ship)
{
  with  instance_create(0,y,obj_Short_Ship)
  {
  desat=true;
  scale=.75;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if !audio_is_playing(snd_Drifter_Hover) audio_play_sound(snd_Drifter_Hover,14,true);
audio_sound_pitch(snd_Drifter_Hover,global.game_speed);
if (!activate)
{
if (par_HERO.x-400 &lt; bbox_right) &amp;&amp; (par_HERO.x + 400 &gt; bbox_left) 
{
    activate=true; 
}

activate=true; 

}
else
{ //START ACTIVATE


if (turns&gt;2) canTurn=false; //was 4

//check direction
if (par_HERO.x &gt; x) 
{

 if(moveChoice&lt;7) 
 {
 if(west_east == 0)  &amp;&amp; (canTurn==true)
        {  
       
            moveChoose=false;
            moveChoice=8;
            //audio_play_sound(snd_saberwhoosh,10,false);
            sprite_index = global.sprite[master.spr_Drifter_Turn];
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
          
         hsp=0;
         }
         else
         {
         west_east = 1;
         image_xscale = scale;
         }
  }
 
}


if (par_HERO.x &lt; x) 
{
    
    if(moveChoice&lt;7)  &amp;&amp; (canTurn==true)
    {
        if(west_east == 1)
        {
            moveChoose=false;
            moveChoice=8;
            //audio_play_sound(snd_saberwhoosh,10,false);
            sprite_index = global.sprite[master.spr_Drifter_Turn];
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
            hsp=0;
         }
         else
         {
            west_east = 0;
            image_xscale = -scale;
         }
  }
  
}



//Make Move Choice

if(moveChoose)
{
     force_field=false;
     n=irandom_range(1, 7);
            
     while(n==moveChoice)
        {
            n=irandom_range(1, 7);     
        }
         
      if (n==3)
        {
        if (instance_number(obj_Drifter_Arm)&gt;3) n=2;
        }
        
      if (n==7)
        {
        if (instance_exists(obj_Short_Ship)) n=2;
        }
              
     moveChoice=n;
     moveChoose=false;
    
    //Intialize Move
    switch(moveChoice)
    {
    case 1: //MOVE FOLLOW
    sprite_index = global.sprite[master.spr_Drifter_Idle];
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,400)/global.game_speed;
    acel=.1;
    float_up=true;
    float_factor=0;   
    hit=false;   
         
    break;
    
    case 2: //FLOAT
    sprite_index = global.sprite[master.spr_Drifter_Idle]; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,250)/global.game_speed;
    mid_Screen=false;
    acel=.1;
    float_up=true;
    float_factor=0;   
    break;
    
    case 3: //TRIGGER
    sprite_index = global.sprite[master.spr_Drifter_Trigger]; 
    image_index=0;
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,250)/global.game_speed;
    acel=.1;
    float_up=true;
    float_factor=0; 
    audio_sound_pitch(snd_Drifter_Lever,global.game_speed);  
    audio_play_sound(snd_Drifter_Lever,10,false);
    break;
    
    case 4: //BLAST
    if (alarm[1]&lt;=-1)
    {
    audio_sound_pitch(snd_Consumer_Laugh,global.game_speed);  
    audio_play_sound(snd_Consumer_Laugh,14,false);
    alarm[1]=2000/global.game_speed;
    }
    sprite_index = global.sprite[master.spr_Drifter_Idle];
    image_index=0; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,250)/global.game_speed;
    mid_Screen=false;
    acel=.1;
    float_up=true;
    float_factor=0;
    fired=false;   
    break;
    
    case 5: //Cage
     if (alarm[1]&lt;=-1)
    {
    audio_sound_pitch(snd_Consumer_Laugh,global.game_speed);
    audio_play_sound(snd_Consumer_Laugh,14,false);
    alarm[1]=2000/global.game_speed;
    }
    sprite_index = global.sprite[master.spr_Drifter_Idle];
    image_index=0; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,250)/global.game_speed;
    mid_Screen=false;
    acel=.1;
    float_up=true;
    float_factor=0;   
    
    lockon_x = par_HERO.x;
    lockon_y = view_yview+230;
    break;
    
    case 6: //Nova
    sprite_index = global.sprite[master.spr_Drifter_Idle];
    image_index=0; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,250)/global.game_speed;
    mid_Screen=false;
    acel=.1;
    float_up=true;
    float_factor=0;   
    
    lockon_x = par_HERO.x;
    lockon_y = view_yview+230;
    fired=false;
    break;
    
    case 7: //SUMMON
    sprite_index = global.sprite[master.spr_Drifter_Trigger]; 
    image_index=0;
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,250)/global.game_speed;
    acel=.1;
    float_up=true;
    float_factor=0;   
    mid_Screen=false;
    audio_sound_pitch(snd_Drifter_Lever,global.game_speed);
    audio_play_sound(snd_Drifter_Lever,10,false);
    break;
        
    }
    
}

//Make Move

switch(moveChoice)
{
        
        case 1: //MOVE FOLLOW
        canTurn=true;
        sprite_index = global.sprite[master.spr_Drifter_Idle];
        
        if (!hit)
        { 
         if(par_HERO.x&gt;x) 
         hsp = 10;
         else
         hsp=-10;
         
         if(par_HERO.y&gt;y) 
         vsp = 5;
         else
         vsp= -5;
         
         if (y+vsp&gt;par_HERO.y) vsp=0;
         
         
         if place_meeting(x+hsp,y+vsp,par_HERO)
            { 
            //audio_play_sound(snd_Got_special_A,10,false);
            hit=true;
            if (alarm[0]&gt;40) alarm[0]=40/global.game_speed;
            acel=.5;
            }
        }
        else
        {
        
         if(par_HERO.x&gt;x) 
         hsp = -10;
         else
         hsp= 10;
         
         if(par_HERO.y&gt;y) 
         vsp = -5;
         else
         vsp = 5;
         
         if (y+vsp&gt;par_HERO.y) vsp=0;
        
        }
     
        if (acel&lt;1)    
        acel=acel+.01;
        vsp=vsp*acel;
        hsp=hsp*acel;
        
        
        break;

       
        case 2: //MOVE FLOAT
        canTurn=true;
        sprite_index = global.sprite[master.spr_Drifter_Idle];        
        lockon=room_height-300;  
           
        if (par_HERO.x &gt; x) 
        {
             if(par_HERO.x&gt;x+400) 
             hsp = 5;
             else
             hsp = -5;
             
             if (x+400+hsp&gt;par_HERO.x) {hsp=0; acel=0;}
        }
        
        if (par_HERO.x &lt; x) 
        {
            if(par_HERO.x&lt;x-400)
            hsp= -5;
            else 
            hsp= 5;
            
            if (x-400+hsp&lt;par_HERO.x) {hsp=0; acel=0;}
        }      
        
        
        
       if (mid_Screen==true) //FLOATING
       {
        if(float_up) float_factor=float_factor+.2;
        if(!float_up) float_factor=float_factor-.2;
        
        if(float_factor&gt;=4) float_up=false;
        if(float_factor&lt;=-4) float_up=true;
        
        vsp = 0 - float_factor;
       }
       else
       {
        if (lockon &gt; y) {vsp=4;}
        if (lockon &lt; y) {vsp=-4;}
        
        if (y&lt;lockon+10) &amp;&amp; (y&gt;lockon-10) 
            {
            mid_Screen=true;
            //audio_play_sound(snd_saberwhoosh,10,false);
            float_up=true;
            float_factor=0;
            }
       }
       
        if (acel&lt;1)    
        acel=acel+.01;
        //vsp=vsp*acel;
        hsp=hsp*acel;
       
        break;
        
        case 3: //TRIGGER
        canTurn=true;
        sprite_index = global.sprite[master.spr_Drifter_Trigger];
        image_speed=.5*global.game_speed;
        alarm[0]=200/global.game_speed;
        
        if  (image_index&gt;=sprite_get_number(global.sprite[master.spr_Drifter_Trigger])-1)
        {
        moveChoose=true;
        with instance_create(par_HERO.x,0,obj_Drifter_Arm) {color=c_dkgray}
        }
        
       vsp=0;
       hsp=0;
             
        break;
        
        case 4: //Blast
      
        
        lockon=room_height-350;
        
        
        if (mid_Screen==false) //Seek Vantage Point
        {
        canTurn=true;
        sprite_index=global.sprite[master.spr_Drifter_Idle];
        image_speed=.5*global.game_speed;
        
        if (lockon &gt; y) {vsp=4;}
        if (lockon &lt; y) {vsp=-4;}
        
        if (y&lt;lockon+10) &amp;&amp; (y&gt;lockon-10) 
            {
            mid_Screen=true;
            audio_sound_pitch(snd_saberwhoosh,global.game_speed);
            audio_play_sound(snd_saberwhoosh,10,false);
            float_up=true;
            float_factor=0;
            
             sprite_index=global.sprite[master.spr_Drifter_Blast];
             image_index=0;
            }
       }
       else
       {
       canTurn=false;
       
        sprite_index=global.sprite[master.spr_Drifter_Blast];
        image_speed=.5*global.game_speed;
        
        if (round(image_index)==17) 
            {
            if (fired==false)
            {
            audio_sound_pitch(snd_monster13_Zap_C_Deep,global.game_speed);
            audio_play_sound(snd_monster13_Zap_C_Deep,10,false);
            instance_create(x+97*image_xscale*.85,y-155*image_yscale*.85,obj_Aura_Ripple_stat_short);
            
            if sign(image_xscale==1)
            {
            with instance_create(x+97*image_xscale*.85,y-155*image_yscale*.85,obj_Drifter_Blast)
                {
                direction=360;
                image_angle=360;
                west_east=1;
                }
            }
            else
            {
              with instance_create(x+97*image_xscale*.85,y-155*image_yscale*.85,obj_Drifter_Blast)
                {
                direction=0;
                image_angle=0;
                west_east=0;
                }                                    
            }
            
             with instance_create(x+97*image_xscale*.85,y-155*image_yscale*.85,obj_FireFlare)
                {
                image_xscale=other.image_xscale*3;
                image_yscale=3;
                depth=other.depth-1;
                }
            fired=true;
            }
        }
            hsp=0;
            vsp=0;
        
        if(image_index&gt;=sprite_get_number(global.sprite[master.spr_Drifter_Blast])-1)
            moveChoose=true;
       
       }
       
        if (acel&lt;1)    
        acel=acel+.01;
        hsp=hsp*acel;
         
        
       
        break;
        
        case 5: //Cage
        alarm[0]=100/global.game_speed;
        
        if (mid_Screen==false) //Seek Vantage Point
        {
        canTurn=true;
        sprite_index=global.sprite[master.spr_Drifter_Idle];
        image_speed=.5*global.game_speed;
        
        if (lockon_y &gt; y) {vsp=4;}
        if (lockon_y &lt; y) {vsp=-4;}
                 
        if (lockon_x &gt; x) {hsp=4;}
        if (lockon_x &lt; x) {hsp=-4;}
        
        if (x&lt;lockon_x+10) &amp;&amp; (x&gt;lockon_x-10) hsp=0;
        
        if (y&lt;lockon_y+10) &amp;&amp; (y&gt;lockon_y-10) 
            {
            vsp=0;
        if (x&lt;lockon_x+10) &amp;&amp; (x&gt;lockon_x-10) 
            {
            mid_Screen=true;
            audio_sound_pitch(snd_saberwhoosh,global.game_speed);
            audio_play_sound(snd_saberwhoosh,10,false);
            float_up=true;
            float_factor=0;
            
             sprite_index=global.sprite[master.spr_Drifter_Cage];
             image_index=0;
            }
            }
       }
       else
       {
        canTurn=false;
        sprite_index=global.sprite[master.spr_Drifter_Cage];
        image_speed=.5*global.game_speed;
        
        if (round(image_index)==20) 
        {
        audio_sound_pitch(snd_Drifter_Lever,global.game_speed);
        if !audio_is_playing(snd_Drifter_Lever)
        audio_play_sound(snd_Drifter_Lever,10,false);
        }
        if (round(image_index)==25)
            {
            audio_sound_pitch(snd_Drifter_Lever,global.game_speed);
            audio_play_sound(snd_Drifter_Lever,10,false);
            with instance_create(par_HERO.x+400*.85,0,obj_Drifter_Arm) {color=c_dkgray}
            with instance_create(par_HERO.x-400*.85,0,obj_Drifter_Arm) {color=c_dkgray}
            if (global.game_speed&lt;1) image_index=26;
            }
       
            hsp=0;
            vsp=0;
        
        if(image_index&gt;=sprite_get_number(global.sprite[master.spr_Drifter_Cage])-1)
            {
            //moveChoose=true;
            moveChoice=2;
            sprite_index = global.sprite[master.spr_Drifter_Idle]; 
            image_speed=.5*global.game_speed;
            alarm[0]=irandom_range(100,400)/global.game_speed;
            mid_Screen=false;
            acel=.1;
            float_up=true;
            float_factor=0; 
            }
       }
       
        if (acel&lt;1)    
        acel=acel+.01;
        hsp=hsp*acel;       
       
        break;
        
        case 6: //NOVA
        alarm[0]=100/global.game_speed;
        
        if (mid_Screen==false) //Seek Vantage Point
        {
        canTurn=true;
        sprite_index=global.sprite[master.spr_Drifter_Idle];
        image_speed=.5*global.game_speed;
        
        if (lockon_y &gt; y) {vsp=4;}
        if (lockon_y &lt; y) {vsp=-4;}
        
        
        
        
        if (lockon_x &gt; x) {hsp=4;}
        if (lockon_x &lt; x) {hsp=-4;}
        
        if (x&lt;lockon_x+10) &amp;&amp; (x&gt;lockon_x-10) hsp=0;
        
        if (y&lt;lockon_y+10) &amp;&amp; (y&gt;lockon_y-10) 
            {
            vsp=0;
        
        if (x&lt;lockon_x+10) &amp;&amp; (x&gt;lockon_x-10) 
            {
            mid_Screen=true;
            audio_sound_pitch(snd_saberwhoosh,global.game_speed);
            audio_play_sound(snd_saberwhoosh,10,false);
            float_up=true;
            float_factor=0;
            
             sprite_index=global.sprite[master.spr_Drifter_Cage];
             image_index=0;
             force_field_index=11;
            }
            }
       }
       else
       {
        canTurn=false;
        sprite_index=global.sprite[master.spr_Drifter_Cage];
        image_speed=.5*global.game_speed;
        
        
        if (image_index&gt;=22) &amp;&amp;  (image_index&lt;28)
        {
        force_field=true;
        force_field_index+=1;
        }
        else
        {
        force_field=false;
        }
        
        //if (image_index==25)
        if (round(image_index)==16)
            {
            if (fired==false)
            {
            instance_create(x,y,obj_Aura_Ripple_stat_short);
            instance_create(x,y,obj_ScreenFlash);
            audio_sound_pitch(snd_monster13_Zap_C_Deep,global.game_speed);
            audio_play_sound(snd_monster13_Zap_C_Deep,10,false);
            audio_sound_pitch(snd_monster13_Zap_C_Deep,global.game_speed);
            audio_play_sound(snd_monster13_Zap_Aura,10,false);
            
            
            instance_create(bbox_left,y-135*.85,obj_Drifter_Nova_L);
            instance_create(bbox_right,y-135*.85,obj_Drifter_Nova_R);
            
            with instance_create(bbox_left,y-135*.85,obj_FireFlare)
                {
                image_xscale=-3;
                image_yscale=3;
                depth=other.depth-1;
                }
                
            with instance_create(bbox_right,y-135*.85,obj_FireFlare)
                {
                image_xscale=3;
                image_yscale=3;
                depth=other.depth-1;
                }
            fired=true;
            }
            }
       
            hsp=0;
            vsp=0;
        
        if(image_index&gt;=sprite_get_number(global.sprite[master.spr_Drifter_Cage])-1)
            {
            //moveChoose=true;
            moveChoice=2;
            sprite_index = global.sprite[master.spr_Drifter_Idle]; 
            image_speed=.5*global.game_speed;
            alarm[0]=irandom_range(100,400)/global.game_speed;
            mid_Screen=false;
            acel=.1;
            float_up=true;
            float_factor=0; 
            }
       }
       
        if (acel&lt;1)    
        acel=acel+.01;
        hsp=hsp*acel;       
       
        break;

        case 7: //SUMMON                
        lockon=room_height-350;              
        if (mid_Screen==false) //Seek Vantage Point
        {
        canTurn=true;
        sprite_index=global.sprite[master.spr_Drifter_Idle];
        image_speed=.5*global.game_speed;
        
        if (lockon &gt; y) {vsp=4;}
        if (lockon &lt; y) {vsp=-4;}
        
        if (y&lt;lockon+10) &amp;&amp; (y&gt;lockon-10) 
            {
            mid_Screen=true;
            audio_sound_pitch(snd_saberwhoosh,global.game_speed);
            audio_play_sound(snd_saberwhoosh,10,false);
            float_up=true;
            float_factor=0;
            
             sprite_index=global.sprite[master.spr_Drifter_Trigger];
             image_index=0;
                
                var ship_y = irandom_range(300,900);
                
               if (sign(image_xscale)==1)
               {
               with  instance_create(room_width+300,ship_y,obj_Short_Ship)
                  {
                  switch(irandom_range(1,1)) //was 1,2
                    {
                    case 1: enemy_type=1; break;
                    case 2: enemy_type=3; break; //was 3
                    }
                  desat=true;
                  scale=.75;
                  self_destruct=true;
                  image_xscale=-1;
                  west_east=1;  
                  x_landing=other.x+900;
                  damage=0;
                  hsp=25;
                  max_hsp=30;
                  }
               }
               else
               {
                with  instance_create(-300,ship_y,obj_Short_Ship)
                  {
                  switch(irandom_range(1,1)) //was 1,2
                    {
                    case 1: enemy_type=1; break;
                    case 2: enemy_type=3; break;
                    }
                    
                  desat=true;
                  scale=.75;
                  self_destruct=true;
                  image_xscale=1;
                  west_east=0;  
                  x_landing=other.x-900;
                  damage=0;
                  hsp=25;
                  max_hsp=50;
                  }
               }                                                 
            }
       }
       else
       {
        canTurn=false;
        sprite_index=global.sprite[master.spr_Drifter_Trigger];
        image_speed=.5*global.game_speed;
        
        if (image_index==17)
            {
          
            }
       
            hsp=0;
            vsp=0;
        
        if(image_index&gt;=sprite_get_number(global.sprite[master.spr_Drifter_Trigger])-1)
            moveChoose=true;
       }
       
        if (acel&lt;1)    
        acel=acel+.01;
        hsp=hsp*acel;
         
        break;
  
        
        
        
        case 8: //Turn
        sprite_index = global.sprite[master.spr_Drifter_Turn]; 
        alarm[0]=200/global.game_speed;
        image_speed=.5*global.game_speed;
        

        hsp=0;
        vsp=0;

if  (image_index&gt;=sprite_get_number(global.sprite[master.spr_Drifter_Turn])-1)
    {
        moveChoose=true;
        turns+=1; alarm[5]=200;
        trail=false;
        alarm[4]=10/global.game_speed;
        
        last_x_A=x;
        last_y_A=y;
         
        last_x_B=x;
        last_y_B=y;
           
        last_x_C=x;
        last_y_C=y;
        
        last_x_D=x;
        last_y_D=y;
        
        last_x_E=x;
        last_y_E=y;
        
        last_x_F=x;
        last_y_F=y;
        
        last_x_G=x;
        last_y_G=y;
        
        last_x_H=x;
        last_y_H=y;
        
        last_x_I=x;
        last_y_I=y;
        
    sprite_index = global.sprite[master.spr_Drifter_Turn];    
    if(west_east == 0)
        {
        west_east=1;
        image_xscale=scale;
        x=x+(scale*100*.85); //TURN OFFSET
        sprite_index = global.sprite[master.spr_Drifter_Idle];
            //moveChoice=1;
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
        }
        else
        {
        west_east=0;
        image_xscale=-scale;
        x=x-(scale*100*.85); //TURN OFFSET
        sprite_index = global.sprite[master.spr_Drifter_Idle];
            //moveChoice=1;
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
        }
    }
    
break;
        
               
        
}//END SWITCH
//Confirm Movement 


if (kickback!=0) //KICK BACK
{
    hsp=kickback;
    kickback = kickback - sign(kickback);
    if (par_HERO.y&gt;y)
        vsp=-2; else vsp=2;
}


//TRAILS -------------------
        last_x_I=last_x_H;
        last_y_I=last_y_H;
        
        last_x_H=last_x_G;
        last_y_H=last_y_G;
        
        last_x_G=last_x_F;
        last_y_G=last_y_F;
        
        last_x_F=last_x_E;
        last_y_F=last_y_E;
        
        last_x_E=last_x_D;
        last_y_E=last_y_D;
        
        last_x_D=last_x_C;
        last_y_D=last_y_C;
        
        last_x_C=last_x_B;
        last_y_C=last_y_B;
        
        last_x_B=last_x_A;
        last_y_B=last_y_A;
                
        last_x_A=x;
        last_y_A=y;

//CONFIRM MOVE --

x=x+hsp*global.game_speed;
y=y+vsp*global.game_speed;

}//END ACTIVATE


if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (activate)
{
var shoot
shoot=instance_place(x,y,par_Shoot)
if (shoot==noone)
shoot=instance_nearest(x,y,par_Shoot)
if (shoot!=noone)
{


if place_meeting(x+hsp,y+vsp,obj_HERO_Melee)
    {
        if (obj_HERO_Melee.damage&gt;0)
        {

        hp=hp-obj_HERO_Melee.damage;
        
        if (alarm[3] &lt;=-1) 
        {   
        image_blend = c_red;
        alarm[3]=4;
        }
        
        }
    }
    else
    {
        
        if instance_exists(obj_Bomb) &amp;&amp; instance_exists(obj_Flame_02) ||  instance_exists(obj_Ray) &amp;&amp; instance_exists(obj_Flame_02)
        {
        if (alarm[3]==-1) 
            {
                if instance_exists(obj_Bomb)
                hp=hp-shoot.damage+obj_Bomb.damage;
                
                if instance_exists(obj_Ray)
                hp=hp-shoot.damage+obj_Ray.damage;        
            }
        }
        else
        {
            hp=hp-shoot.damage;
        }
               
                
        if (alarm[3] &lt;=-1)
        {
        alarm[3]=4; 
        image_blend = c_red;
        }
    }
        if (hp&lt;=0)
        {
        image_speed=0;
        hsp=0;
        image_blend = c_red;
            
        
        with instance_create(x,y-20,obj_Explosion_Drifter)
        {
        sprite_index=global.sprite[master.spr_Drifter_Die];
        boss_image_index=0;
        boss_image_speed=.5;
        boss_image_max=20;
        boss_image_xscale=other.image_xscale;
        boss_image_yscale=other.image_yscale;
        boss_image_angle=other.image_angle;
        boss_x=other.x;
        boss_y=other.y-20;
        boss_image_angle=other.image_angle;
        stripes=100;
        spread=300; 
        xplode=20;
        hologram=false; 
        }
                
        instance_destroy();
        if instance_exists (obj_WB_Health)  with (obj_WB_Health){instance_destroy();}

        }    
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
    if (image_blend!=c_red) image_blend=color;
    
    if (trail)
    {
    draw_sprite_ext(sprite_index, image_index-9,last_x_I, last_y_I, image_xscale, image_yscale, image_angle, image_blend, .1 );
   // draw_sprite_ext(sprite_index, image_index-7,last_x_G, last_y_G, image_xscale, image_yscale, image_angle, image_blend, .2 );
    draw_sprite_ext(sprite_index, image_index-5,last_x_E, last_y_E, image_xscale, image_yscale, image_angle, image_blend, .3 );
   // draw_sprite_ext(sprite_index, image_index-3,last_x_C, last_y_C, image_xscale, image_yscale, image_angle, image_blend, .4 );
    draw_sprite_ext(sprite_index, image_index-1,last_x_A, last_y_A, image_xscale, image_yscale, image_angle, image_blend, .5 );
    }
if (moveChoice!=6)
{
    //draw_self();
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, 1 );
}
else
{
    if (image_index&gt;=12) &amp;&amp; (image_index&lt;25) &amp;&amp; (mid_Screen)
    {
    var temp=image_index-11;
    //draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, 0.5 );
    draw_sprite_ext(global.sprite[master.spr_Drifter_Cage_Blast],temp, x, y, image_xscale, image_yscale, image_angle, image_blend, 1 );
    }
    else
    {
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, 1 );
    }
}

if (force_field==true)
{
draw_set_blend_mode(bm_add);
draw_sprite_ext(ForceField_B, force_field_index,x-40*image_xscale,y-30, 4.5, 4.5, 0, c_white,.1 );
draw_set_blend_mode(bm_normal);
}
//draw_text(x+150,y,"MoveChoice: " +string(moveChoice));
//draw_text(x+150,y+15,"vsp: " +string(vsp));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp=0;
//with instance_create(par_HERO.x,0,obj_Drifter_Arm) {color=c_dkgray}

/*
    moveChoice=5;
    sprite_index = global.sprite[master.spr_Drifter_Idle];
    image_index=0; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,250)/global.game_speed;
    mid_Screen=true;
    acel=.1;
    float_up=true;
    float_factor=0;   
    
    lockon_x = par_HERO.x;
    lockon_y = view_yview+230;
    
/*
    moveChoice=4;
    moveChoose=false;
    sprite_index = spr_Drifter_Idle;
    image_index=0; 
    image_speed=.5;
    alarm[0]=irandom_range(100,400);
    mid_Screen=false;
    acel=.1;
    float_up=true;
    float_factor=0;   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>238,289</point>
    <point>234,234</point>
  </PhysicsShapePoints>
</object>
