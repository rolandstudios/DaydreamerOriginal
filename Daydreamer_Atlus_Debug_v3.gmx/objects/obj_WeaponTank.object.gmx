<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_WeaponTank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=.5;
image_xscale=1;
image_yscale=1;
type = irandom_range(1,7);
found_spot=false;

move=0;
incFactor=.5;
floatFactor=random_range(0,32);
hit=false;
tag=false;
flash=1;
flash_count=.05;


scale=.1;
hold=0;
linked=false;
change=false;

energy=100;
swap=false; //was true

reswap=false;
reswap_x=x;
reswap_y=y;

// 1 - Shoot A Straight Shot
// 2 - Shoot B Flame
// 3 - Shoot C Helix
// 4 - Shoot D Triple Shot
// 5 - Shoot E Homing
// 6 - Shoot F Bomb
// 7 - Shoot G Ray Gun

vsp=0;

if instance_exists(par_HERO)
{
speed=0;
direction=90;//point_direction(x,y,par_HERO.x,par_HERO.y);
}
if instance_exists(obj_Tunnel_Cliff_E_Elevator) direction=90;

if place_meeting(x,y,par_wall) visible=false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = irandom_range(1,7); 
//if (type==6) type=7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (par_HERO.tank_hold)
{
    if (linked)
    {
        if gamepad_button_check(global.playing_index,global.gp_Weapon) || keyboard_check_direct(global.kb_Weapon)
        {
        
        if (master.paused==false) hold+=1;
        
            if (hold&gt;=15) //was 25
            {
            hit=true; 
            if (par_HERO.weapon_A!=0)&amp;&amp;(par_HERO.weapon_B!=0)&amp;&amp;(par_HERO.weapon_C!=0)&amp;&amp;(par_HERO.weapon_D!=0) swap=true;
            hold=15;
            par_HERO.tank_hold=false;
            } 
        }
        else
        {
        hold=0;
        par_HERO.tank_hold=false;
        }
    }
    else
    {
        linked=false;
    }
}
else
{
        linked=false;
        if (hold&gt;0) hold-=1;
        
        if place_meeting(x,y,par_HERO)
        {       
            if (global.auto_pickup==false)
            {
                tag=true;
                linked=true;
                            
                if gamepad_button_check(global.playing_index,global.gp_Weapon) || keyboard_check_direct(global.kb_Weapon)
                {
                    par_HERO.tank_hold=true;
                    par_HERO.Key_Weapon=false;
                    audio_play_sound(snd_GameOver_Tick,12,false);
                    hold+=1;
                }             
            }
            else
            {
            hit=true;
            if (par_HERO.weapon_A!=0)&amp;&amp;(par_HERO.weapon_B!=0)&amp;&amp;(par_HERO.weapon_C!=0)&amp;&amp;(par_HERO.weapon_D!=0) swap=true;
            }
        }
        else
        {
            tag=false;
            hold=0;
        }
              
}



floatFactor=floatFactor+1;
if (floatFactor&gt;=50)
{
floatFactor=0;
incFactor= -(incFactor);
}
    if (change)
    {
        if (alarm[0]=-1) alarm[0]=100;
    }
    else
    {
    alarm[0]=200;
    }
    

if place_meeting(x,y,par_wall) &amp;&amp; (found_spot==false)
    {
    if (par_HERO.bbox_top&lt;y) vsp-=.25; else vsp=.25;
    speed+=.2*global.game_speed;
    visible=false;
    //direction=point_direction(x,y,par_HERO.x,par_HERO.y);
    } 
    else
    {
    found_spot=true;
    visible=true;
    speed=0;
    vsp=0;
    }
     

    
    
if (speed==0)
y=y+incFactor+vsp;
else
y=y+vsp;
   
image_speed=.5*global.game_speed;



if(hit)
{
if !instance_exists(obj_ScreenFlash) with instance_create(x,y,obj_ScreenFlash){hold_range=15;}
audio_play_sound(snd_droid_activate,10,false);
audio_play_sound(snd_circuit_breaker,10,false);
audio_play_sound(snd_Alarm_amped,10,false);
instance_create(x,y,obj_Twinkle_A);

if (par_HERO.weapon_A==0)
{
par_HERO.weapon_A=type;
par_HERO.weapon_A_energy=100;
par_HERO.weaponslot=1;
}
else if(par_HERO.weapon_B==0)
{
par_HERO.weapon_B=type;
par_HERO.weapon_B_energy=100;
par_HERO.weaponslot=2;
}
else if(par_HERO.weapon_C==0)
{
par_HERO.weapon_C=type;
par_HERO.weapon_C_energy=100;
par_HERO.weaponslot=3;
}
else if(par_HERO.weapon_D==0)
{
par_HERO.weapon_D=type;
par_HERO.weapon_D_energy=100;
par_HERO.weaponslot=4;
}
else
{
    switch(par_HERO.weaponslot)
    {
    case 1:
    par_HERO.weapon_A=type;
    par_HERO.weapon_A_energy=energy;
    break;
    
    case 2:
    par_HERO.weapon_B=type;
    par_HERO.weapon_B_energy=energy;
    break;
    
    case 3:
    par_HERO.weapon_C=type;
    par_HERO.weapon_C_energy=energy;
    break;
    
    case 4:
    par_HERO.weapon_D=type;
    par_HERO.weapon_D_energy=energy;
    break;
    }
}

last_type=par_HERO.weapontype;    
last_energy=par_HERO.energy;
par_HERO.weapontype=type;
par_HERO.energy=energy;
par_HERO.empty_slot=false;

//WEAPON TOOL TIPS -------------

if (par_HERO.tip_weapon[type]==0)
{

switch(type)
{
    case 1: //SHOOT STRAIGHT
    break;
    
    case 2: //FLAME
    if instance_exists(obj_TextPromt_LG_Side) 
        with (obj_TextPromt_LG_Side){instance_destroy();}
         
         txt = instance_create(x,y,obj_TextPromt_LG_Side);
         audio_sound_pitch(snd_Mega_Select,global.game_speed);
         audio_play_sound(snd_Mega_Select,10,false);
              
            with (txt)
            {
            promt = "Flame burns Energy quicker than most weapons#and is most effective in close range encounters.#Flame also does bonus burn damage on Organics.";
            alarm[1]=-1;
            hold=500;
            copystring_pos = 0;
            copystring = "";
            next_letter=true
            header="Flame"
            fade=0;
            shake=true;
            }
    break;
    
    case 3: //HELIX
    if instance_exists(obj_TextPromt_LG_Side) 
        with (obj_TextPromt_LG_Side){instance_destroy();}
         
         txt = instance_create(x,y,obj_TextPromt_LG_Side);
         audio_sound_pitch(snd_Mega_Select,global.game_speed);
         audio_play_sound(snd_Mega_Select,10,false);
              
            with (txt)
            {
            promt = "Helix Shot tracks in the general direction of the closest enemy#and is most effective in long range encounters.#The longer the shots travel the more damage they will deal.";
            alarm[1]=-1;
            hold=500;
            copystring_pos = 0;
            copystring = "";
            next_letter=true
            header="Helix Shot"
            fade=0;
            shake=true;
            }
    break;
    
    case 4: //Triple
    if instance_exists(obj_TextPromt_LG_Side) 
        with (obj_TextPromt_LG_Side){instance_destroy();}
         
         txt = instance_create(x,y,obj_TextPromt_LG_Side);
         audio_sound_pitch(snd_Mega_Select,global.game_speed);
         audio_play_sound(snd_Mega_Select,10,false);
              
            with (txt)
            {
            promt = "Shoots like Straight Shot but with a wider spread.#Useful for hitting enemies at any angle.";
            alarm[1]=-1;
            hold=500;
            copystring_pos = 0;
            copystring = "";
            next_letter=true
            header="Triple Shot"
            fade=0;
            shake=true;
            }
    break;
    
    case 5: //HOMING
    if instance_exists(obj_TextPromt_LG_Side) 
        with (obj_TextPromt_LG_Side){instance_destroy();}
         
         txt = instance_create(x,y,obj_TextPromt_LG_Side);
         audio_sound_pitch(snd_Mega_Select,global.game_speed);
         audio_play_sound(snd_Mega_Select,10,false);
              
            with (txt)
            {
            promt = "Hold down the [Fire] button and move the cross hair over your targets.#Once [Targeted] release the [Fire] button to fire a batch of homing shots.#You can lock on up to 10 targets at a time.";
            alarm[1]=-1;
            hold=500;
            copystring_pos = 0;
            copystring = "";
            next_letter=true
            header="Homing Shot"
            fade=0;
            shake=true;
            }
    break;
    
    case 6: //BOMB
    if instance_exists(obj_TextPromt_LG_Side) 
        with (obj_TextPromt_LG_Side){instance_destroy();}
         
         txt = instance_create(x,y,obj_TextPromt_LG_Side);
         audio_sound_pitch(snd_Mega_Select,global.game_speed);
         audio_play_sound(snd_Mega_Select,10,false);
              
            with (txt)
            {
            promt = "This weapon can be charged and will detonate#upon release. It will damage all enemies on screen.#This is a last resort weapon and will not recharge.";
            alarm[1]=-1;
            hold=500;
            copystring_pos = 0;
            copystring = "";
            next_letter=true
            header="Bomb"
            fade=0;
            shake=true;
            }
    break;
    
    case 7: //RAY GUN
    if instance_exists(obj_TextPromt_LG_Side) 
        with (obj_TextPromt_LG_Side){instance_destroy();}
         
         txt = instance_create(x,y,obj_TextPromt_LG_Side);
         audio_sound_pitch(snd_Mega_Select,global.game_speed);
         audio_play_sound(snd_Mega_Select,10,false);
              
            with (txt)
            {
            promt = "Just hold down [Fire] and blast away.#This will use a lot of Energy, but it will do a lot of damage. ";
            alarm[1]=-1;
            hold=500;
            copystring_pos = 0;
            copystring = "";
            next_letter=true
            header="Ray Gun"
            fade=0;
            shake=true;
            }
    break;
    
}
par_HERO.tip_weapon[type]=1;
}

//END TOOL TIPS ---------------

/*
if (swap) &amp;&amp; (global.auto_pickup==false)
{
    if (par_HERO.tip_weapon[8]==0) //4 WEAPON SWAP TOOL TIP
    {
    if instance_exists(obj_TextPromt_LG_Side) 
    
    with (obj_TextPromt_LG_Side){instance_destroy();}
         
         txt = instance_create(x,y,obj_TextPromt_LG_Side);
         audio_sound_pitch(snd_Mega_Select,global.game_speed);
         audio_play_sound(snd_Mega_Select,10,false);
              
            with (txt)
            {
            promt = "When a new weapon is picked up while already carrying 4 weapons, #the current weapon equipped is discarded and swapped in with the #new one. ";
            alarm[1]=-1;
            hold=500;
            copystring_pos = 0;
            copystring = "";
            next_letter=true
            header="TOOL TIP"
            fade=0;
            shake=true;
            }    
    par_HERO.tip_weapon[8]=1;
    }
    
    choke=50;
    
    swap_x=irandom_range(choke,200);
    swap_y=irandom_range(-10,10);
    if (irandom_range(1,2)==1) swap_x*=-1;
    
    while position_meeting(x+swap_x,y+swap_y,par_wall)
        {
         swap_x=irandom_range(choke,200);
         swap_y=irandom_range(-10,10);
         if (irandom_range(1,2)==1) swap_x*=-1;
         if (choke&gt;0) choke-=1;
        }
    
    with instance_create(x+swap_x,y+swap_y,obj_WeaponTank)
        {
        type=other.last_type;
        energy=other.last_energy;
        }
    
}
*/

if (swap)// &amp;&amp; (global.auto_pickup==true)
{

    if (par_HERO.tip_weapon[8]==0) //4 WEAPON SWAP TOOL TIP
    {
    if instance_exists(obj_TextPromt_LG_Side) 
    
    with (obj_TextPromt_LG_Side){instance_destroy();}
         
         txt = instance_create(x,y,obj_TextPromt_LG_Side);
         audio_sound_pitch(snd_Mega_Select,global.game_speed);
         audio_play_sound(snd_Mega_Select,10,false);
              
            with (txt)
            {
            promt = "When a new weapon is picked up while already carrying four weapons, #the current weapon equipped is discarded and swapped out with the #new one. ";
            alarm[1]=-1;
            hold=500;
            copystring_pos = 0;
            copystring = "";
            next_letter=true
            header="TOOL TIP"
            fade=0;
            shake=true;
            }    
    par_HERO.tip_weapon[8]=1;
    }
    
    
    if (reswap==false)
    {
    reswap_x=x;
    reswap_y=y;
    
    choke=110; //was 150
    swap_x=irandom_range(choke,choke+50);
    swap_y=irandom_range(-10,10);
    
    while place_meeting(x+swap_x,y+swap_y,par_wall) || place_meeting(x+swap_x,y+swap_y,par_HERO) 
        {
         swap_x=irandom_range(choke,choke+50);
         swap_y=irandom_range(-10,10);
         if (irandom_range(1,2)==1) swap_x*=-1;
         choke+=1; 
        }
        
        if (x+swap_x&gt;room_width) || (x+swap_x&lt;0) x=par_HERO.x;
        
        with instance_create(x+swap_x,y+swap_y,obj_WeaponTank)
        {
        reswap=true;
        reswap_x=other.reswap_x;
        reswap_y=other.reswap_y;
        type=other.last_type;
        energy=other.last_energy;
        }
    }
    else
    {
     with instance_create(reswap_x,reswap_y,obj_WeaponTank)
        {
        reswap=true;
        reswap_x=other.x;
        reswap_y=other.y;
        type=other.last_type;
        energy=other.last_energy;
        }    
    }
}

instance_destroy();
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 1 - Shoot A Straight Shot
// 2 - Shoot B Flame
// 3 - Shoot C Helix
// 4 - Shoot D Triple Shot
// 5 - Shoot E Homing
// 6 - Shoot F Bomb

draw_self();

if (alarm[0]&lt;100)
{
move+=0.1;
//image_blend=c_white;
//image_alpha=.7;
var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
var Filter = shader_get_uniform(shdr_Hologram,"Filter");
var Phase = shader_get_uniform(shdr_Hologram,"Phase");
shader_set(shdr_Hologram);
shader_set_uniform_f(Stripes,1000);
shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
shader_set_uniform_f(Phase,move);
}

switch(type)
{
    case 1:
    draw_sprite(spr_UI_Shoot_A,0,x+1,y+1);
    break;
    
    case 2:
    draw_sprite_ext(spr_UI_Shoot_B,0,x+1,y+1,.8,.8,0,c_white,1);
    break;
    
    case 3:
    draw_sprite(spr_UI_Shoot_C,0,x+1,y+2);
    break;
    
    case 4:
    draw_sprite(spr_UI_Shoot_D,0,x+1,y+2);
    break;
    
    case 5:
    draw_sprite(spr_UI_Shoot_E,0,x+1,y+1);
    break;
    
    case 6:
    draw_sprite(spr_UI_Shoot_F,0,x+1,y+1);
    break;
    
    case 7:
    draw_sprite(spr_UI_Shoot_G,0,x+1,y+1);
    break;
}

if (alarm[0]&lt;100) shader_reset();

if (tag)
{
depth=-3;
tag_size=.85;

    if (hold&lt;=0)
    {
    //FLASH INC ------
    if (flash&gt;=1) flash_count*=-1;
    if (flash&lt;=0) flash_count*=-1;
    flash+=flash_count;
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(fnt_BytePolice);
    
    //if (scale&lt;1) scale*=1.25;
    //if (scale&gt;1) scale=1;
    scale=1;
    
    draw_set_alpha(.25+flash*.25);
    draw_set_color(c_black);
    draw_text_transformed(x-2,y-38,"[Hold     to Equip]",tag_size*scale,tag_size*scale,0); 
    draw_sprite_ext(pad_def(global.gp_Weapon),0,x-18*scale,y-40,.5*tag_size*scale,.5*tag_size*scale,0,c_black,.5);
    
    draw_set_alpha(.5+flash*.5);
    draw_set_color(c_white);
    draw_text_transformed(x,y-40,"[Hold     to Equip]",tag_size*scale,tag_size*scale,0); 
    draw_sprite_ext(pad_def(global.gp_Weapon),0,x-16*scale,y-42,.5*tag_size*scale,.5*tag_size*scale,0,c_white,1);
    }
    else
    {
    //scale=.1;
    draw_set_color(c_white);
    y_shift=45;
    
    draw_set_alpha(.5);
    draw_rectangle_color(x-25,y-y_shift,x+25,y-y_shift+2,c_white,c_white,c_white,c_white,false);
    draw_set_alpha(1);
    draw_rectangle_color(x-25,y-y_shift,x-25+(2*hold*(25/15)),y-y_shift+2,c_white,c_white,c_white,c_white,false);
        
    draw_line(x-27,y-y_shift-2,x-27,y-y_shift+4);
    draw_line(x-27,y-y_shift-2,x-23,y-y_shift-2);
    draw_line(x-27,y-y_shift+4,x-23,y-y_shift+4);
    
    draw_line(x+27,y-y_shift-2,x+27,y-y_shift+4);
    draw_line(x+27,y-y_shift-2,x+23,y-y_shift-2);
    draw_line(x+27,y-y_shift+4,x+23,y-y_shift+4);
    }

    //DRAW ENERGY
    
    y_shift_low=25;
    draw_set_alpha(.5);
    
    draw_rectangle_color(x-25, y+y_shift_low, x-16, y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); //-15 bar
    draw_rectangle_color(x-14, y+y_shift_low, x-6,  y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); //-5 bar
    draw_rectangle_color(x-4,  y+y_shift_low, x+4,  y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); // 5 bar
    draw_rectangle_color(x+6,  y+y_shift_low, x+14, y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); // 15 bar
    draw_rectangle_color(x+16, y+y_shift_low, x+25, y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); //15 bar
    
    draw_set_alpha(1);
    
    if (energy&gt;=20) draw_rectangle_color(x-25,y+y_shift_low,x-16,y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); //-15 bar           
    if (energy&gt;=40) draw_rectangle_color(x-14,y+y_shift_low,x-6,y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); //-5 bar
    if (energy&gt;=60) draw_rectangle_color(x-4,y+y_shift_low,x+4,y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); // 5 bar
    if (energy&gt;=80) draw_rectangle_color(x+6,y+y_shift_low,x+14,y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); // 15 bar
    if (energy&gt;=100) draw_rectangle_color(x+16,y+y_shift_low,x+25,y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); //15 bar
    
    if (energy&lt;20)  
    {draw_rectangle_color(x-25,y+y_shift_low,x-25+floor(energy*.5),y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false);}
    else
    {
        if (energy&lt;40)  {draw_rectangle_color(x-14,y+y_shift_low,x-25+floor(energy*.5),y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false);} 
        else
        {
            if (energy&lt;60)  {draw_rectangle_color(x-4,y+y_shift_low,x-25+floor(energy*.5),y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false);}
            else
            { 
                if (energy&lt;80)  {draw_rectangle_color(x+6,y+y_shift_low,x-25+floor(energy*.5)-1,y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false);}
                else
                {   
                    if (energy&lt;100) {draw_rectangle_color(x+16,y+y_shift_low,x-25+floor(energy*.5)-1,y+y_shift_low+2,c_yellow,c_yellow,c_yellow,c_yellow,false); }
                }
            }
        }
    }

}
else
{
//scale=.1;
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>53,27</point>
    <point>54,54</point>
  </PhysicsShapePoints>
</object>
