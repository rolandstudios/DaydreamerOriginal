<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mod_04</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move=0;
pos_x=761;
pos_y=491;

finish=false;

end_x=pos_x;
end_y=2000;

x_offset=2;
y_offset=21;

orig_x=x;
orig_y=y;

speed=1;
direction=point_direction(x,y,pos_x,pos_y);
start=true;

hov=irandom_range(1,360);
select_hov=irandom_range(1,360);
flash_hov=irandom_range(1,360);
impact=2;

alpha=.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed=random_range(.5,5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen() offset=1.5 else offset=1;

if (start)
{
  if (global.world_clear[3]==0) &amp;&amp; (global.world_clear[5]==0)
    {
    move+=0.1;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    Samples=500;
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,Samples);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    }
    
    //ACTUALLY DRAW THE ISLAND
    if (global.ranked==true) &amp;&amp; (global.world_clear[4]==1)
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_red,1);
    else
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_white,1);

    if (global.world_clear[3]==0) &amp;&amp; (global.world_clear[5]==0) shader_reset();
    
if (speed&lt;45) speed*=1.25;
if (speed&gt;45) speed=45;
direction=point_direction(x,y,pos_x,pos_y);

if (x&lt;pos_x+25) &amp;&amp; (x&gt;pos_x-25)
    {
    if (y&lt;pos_y+25) &amp;&amp; (y&gt;pos_y-25)
        {
        y=pos_y;
        x=pos_x;
        start=false;
        speed=0;
        }
    }
}

if (finish)
{
if (global.world_clear[3]==0) &amp;&amp; (global.world_clear[5]==0) 
    {
    move+=0.1;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    Samples=500;
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,Samples);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    }
    
    //ACTUALLY DRAW THE ISLAND
    if (global.ranked==true) &amp;&amp; (global.world_clear[4]==1)
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_red,1);
    else
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_white,1);

    if (global.world_clear[3]==0) &amp;&amp; (global.world_clear[5]==0)  shader_reset();

if (speed&lt;45) speed*=1.25;
if (speed&gt;45) speed=45;
direction=point_direction(x,y,end_x,end_y);
if (x&lt;end_x+25) &amp;&amp; (x&gt;end_x-25)
    {
    if (y&lt;end_y+25) &amp;&amp; (y&gt;end_y-25)
        {
        y=end_y;
        x=end_x;
        //start=false;
        speed=0;
        }
    }
}

if (start==false) &amp;&amp; (finish==false)
{

if instance_exists(obj_WorldMap_ctl)
{    
    if (global.world_clear[3]==0) &amp;&amp; (global.world_clear[5]==0)
    {
    move+=0.1;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    Samples=500;
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,Samples);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    }
        
    //ACTUALLY DRAW THE ISLAND
    if (global.ranked==true) &amp;&amp; (global.world_clear[4]==1)
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_red,1);
    else
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_white,1);
    
    if (global.world_clear[3]==0) &amp;&amp; (global.world_clear[5]==0) shader_reset();
    
    //DRAW CURSOR
    if (obj_WorldMap_ctl.world==4)
    {
        if (obj_WorldMap_ctl.select)
        {
        shader_set(shdr_blackandwhite);
        color=make_colour_hsv(irandom_range(1,255),255,255);
        draw_sprite_ext(spr_mod_04_Select,0,(x+x_offset)*offset,(y+y_offset)*offset,(image_xscale+(sin(hov)*.003))*offset,(image_yscale+(sin(hov)*.003))*offset,image_angle,color,1);
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_mod_04_Select,0,(x+x_offset)*offset,(y+y_offset)*offset,(image_xscale+(sin(hov)*.003))*offset,(image_yscale+(sin(hov)*.003))*offset,image_angle,color,1);
        draw_set_blend_mode(bm_normal);
        shader_reset();
        }
        else
        {
        
        if (impact&gt;0)
        {
        draw_sprite_ext(spr_mod_04_Select,0,(x+x_offset)*offset,(y+y_offset)*offset,(image_xscale*(1 +.03*impact))*offset,(image_yscale*(1 +.03*impact))*offset,image_angle,c_white,1);
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_mod_04_Select,0,(x+x_offset)*offset,(y+y_offset)*offset,(image_xscale*(1 +.03*impact))*offset,(image_yscale*(1 +.03*impact))*offset,image_angle,c_white,.25);
        draw_set_blend_mode(bm_normal);
        impact-=1;
        }
        else
        {
        draw_sprite_ext(spr_mod_04_Select,0,(x+x_offset)*offset,(y+y_offset)*offset,(image_xscale+(sin(hov)*.01))*offset,(image_yscale+(sin(hov)*.01))*offset,image_angle,c_white,1);
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_mod_04_Select,0,(x+x_offset)*offset,(y+y_offset)*offset,(image_xscale+(sin(hov)*.01))*offset,(image_yscale+(sin(hov)*.01))*offset,image_angle,c_white,.25);
        draw_set_blend_mode(bm_normal);
        }
        
        }   
    }
    else
    {
    impact=2;
    }
    
   
    //DRAW GHOSTING
    if (global.world_clear[3]==1) || (global.world_clear[5]==1)
    {
    if (obj_WorldMap_ctl.world==3) || (obj_WorldMap_ctl.world==13) || (obj_WorldMap_ctl.world==14) || (obj_WorldMap_ctl.world==5)  
    {
    shader_set(shdr_blackandwhite);
    draw_sprite_ext(spr_mod_04_Select,0,(x+x_offset)*offset,(y+y_offset)*offset,(image_xscale+(sin(hov)*.003))*offset,(image_yscale+(sin(hov)*.003))*offset,image_angle,c_aqua,abs(sin(flash_hov))*1);
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_mod_04_Select,0,(x+x_offset)*offset,(y+y_offset)*offset,(image_xscale+(sin(hov)*.003))*offset,(image_yscale+(sin(hov)*.003))*offset,image_angle,c_aqua,abs(sin(flash_hov))*.25);
    draw_set_blend_mode(bm_normal);
    shader_reset();
    }
    }
    
    if (obj_WorldMap_ctl.select)
    flash_hov+=1;
    else
    flash_hov+=.05;


}

select_hov+=.1;
hov+=.05;
y+=sin(hov)*.05;

}
 
 

   

 


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
