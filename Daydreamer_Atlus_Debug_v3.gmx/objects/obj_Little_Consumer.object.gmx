<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------
if(master.spr_Little_Consumer_Turn==0)
{
master.num+=1;
master.spr_Little_Consumer_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_Turn.png",13,1,1,96,80);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_Little_Consumer_Walk==0)
{
master.num+=1;
master.spr_Little_Consumer_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_Walk.png",25,1,1,64,76);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_Little_Consumer_Jump==0)
{
master.num+=1;
master.spr_Little_Consumer_Jump=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_Jump.png",25,1,1,63,118);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Little_Consumer_LookAround==0)
{
master.num+=1;
master.spr_Little_Consumer_LookAround=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_LookAround.png",31,1,1,63,79);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Little_Consumer_Bite==0)
{
master.num+=1;
master.spr_Little_Consumer_Bite=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Little_Consumer_Bite.png",25,1,1,76,78);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}



active = false;
hp = 20;
init_hp=hp;
setspeed = 3 + random_range(1,3);
activate=false;
framespeed=.5;
scale=abs(image_xscale);
trys=0;
jumps=0;
thrust=1;
kickback=0;
jumped=false;
always_active=false;

scale=scale*random_range(.7,1.1);
image_xscale=scale;
image_yscale=scale;
west_east = 0;
swing_range = false;
grav = 1;
grounded = false;
hsp=0;
vsp=0;
jhsp=0;
stuck=0;
damage=5*global.difficulty;
moveChoose=false;
moveChoice=2;
not_grounded=0;
vcollide=true;
check_x=true;
check_y=true;
desat=false;
turning=0;
bites=0;
view =  instance_create(x,y,obj_Little_Consumer_view);
sprite_index=spr_collide4;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(view)
{
with (view) {instance_destroy();}
}
if (hp&lt;=0) global.Points+=irandom_range(5,20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.rumble) gamepad_set_vibration(global.playing_index, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turning=0;
//bites=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumps=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kickback=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if !instance_exists(view)
{
 //instance_destroy();
}
else
{


if (obj_camera_offset.x-1280 &lt; x) &amp;&amp; (obj_camera_offset.x + 1280 &gt; x) || (check_x==false)
{
    if (obj_camera_offset.y-720&lt;y) &amp;&amp; (obj_camera_offset.y + 720 &gt; y) || (check_y==false)
    {
    active=true;
    }
}
else 
{
   if(grounded) active=false;
}
if (always_active) active=true;

if (!active) //ACTIVE BEGIN
{
    if !place_meeting(x,y,obj_EnemyCheck)
    { 
    instance_deactivate_object(view);
    instance_deactivate_object(self);
    }
}

if (active)
{
var HERO=instance_nearest(x,y,par_Goodguy);
sprite_index=spr_collide4;

//CHECK TO TURN 

if(moveChoice==2)// || (moveChoose)
    {
     if (HERO.x &lt; x)
        {
        if (moveChoice==1) hsp=0; //Idle
        if (moveChoice==2) hsp=-setspeed; //Walk 
                
            if(west_east == 1)
            {
            alarm[0]=100;
            moveChoose=false;
            moveChoice=6;
            turning+=1;
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Turn];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            hsp=0;
            }
            else
            {
            west_east=0;
            image_xscale = -scale;
            }
       }
               
        if (HERO.x &gt; x)
        {
        if (moveChoice==1) hsp=0; //Idle
        if (moveChoice==2) hsp=setspeed; //Walk 
                
            if(west_east == 0)
            {
            alarm[0]=100;
            moveChoose=false;
            moveChoice=6;
            turning+=1;
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Turn];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            hsp=0;
            }
            else
            {
            west_east=1;
            image_xscale = scale;
            }
       }
     }   
        

//CheckMeleeRange
if(HERO.x &lt; x) &amp;&amp; (HERO.x &gt; x - 150*scale) || (HERO.x &gt; x) &amp;&amp; (HERO.x &lt; x + 150*scale) 
 {
 swing_range = true;
 }
 else
 {
 swing_range = false;
 }
 
 if(moveChoose==true) //INITIALIZE MOVE CHOICE
    {    
         
         n=irandom_range(1,2);
         
         if (moveChoice==2) moveChoice=1; else moveChoice=2;
         
         if(moveChoice==2)
            {  
            if (!place_meeting(x+(70*hsp*scale),bbox_bottom+40,par_wall)) //Dont Fall off Cliff
                moveChoice=4;
            }
            
        switch(moveChoice)
            {
            case 1:
            view.sprite_index=global.sprite[master.spr_Little_Consumer_LookAround];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            alarm[0]=irandom_range(50,100);
            break;
            
            case 2:
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Walk];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            alarm[0]=irandom_range(50,300);
            stuck=0;
            not_grounded=0;
            break;
            
            case 3:
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Bite];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            alarm[0]=500;
            bit=false;
            break;
            
            case 4:
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Jump];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            alarm[0]=500;
            jhsp=setspeed*sign(image_xscale);
            thrust=1;
            jumped=false;
            break;
            }//END SWITCH
            
        moveChoose=false;           
    }

if(swing_range)
 {
 if (grounded) &amp;&amp; (moveChoice==2)
    {
     moveChoose=false;
     moveChoice=3;
     bit=false;
     view.sprite_index=global.sprite[master.spr_Little_Consumer_Bite];
     view.image_index=0;
     view.image_speed=.5*global.game_speed;
     alarm[0]=500;
    }
 }

switch(moveChoice) //EXECUTE MOVE
{
case 1: //IDLE
view.sprite_index=global.sprite[master.spr_Little_Consumer_LookAround];
view.image_speed=.5*global.game_speed;
hsp=0;
//vsp=0;
if (view.image_index&gt;=sprite_get_number(view.sprite_index)-1) 
    moveChoose=true;
break;

case 2: //WALK
view.sprite_index=global.sprite[master.spr_Little_Consumer_Walk];
view.image_speed=.5*global.game_speed;
//vsp=0;


if (!grounded) 
not_grounded+=1; else not_grounded=0;

break;

case 3: //BITE
view.sprite_index=global.sprite[master.spr_Little_Consumer_Bite];
view.image_speed=.5*global.game_speed;
alarm[0]=500;

            if (bites&gt;3)
            {
            bites=0;
                switch(irandom_range(1,2))
                {
                case 1:
                moveChoose=false;
                moveChoice=1;
                view.sprite_index=global.sprite[master.spr_Little_Consumer_LookAround];
                view.image_index=0;
                view.image_speed=.5*global.game_speed;
                alarm[0]=irandom_range(50,100);
                bites=0;
                break;
                
                case 2:
                turning=0;
                stuck=0;
                view.sprite_index = global.sprite[master.spr_Little_Consumer_Jump];
                moveChoice=4;
                jumped=false;
                moveChoose=false;
                view.image_speed=.5*global.game_speed;
                view.image_index=0;
                jhsp=setspeed*sign(image_xscale);
                acel=1;
                alarm[0]=500;
                thrust=irandom_range(4,6)*.25;
                break;             
                }
            }
hsp=0;
//vsp=0;
if (view.image_index==5)
    {
    audio_sound_pitch(snd_cartoon_bite, random_range(.85,1.15));
    audio_play_sound(snd_cartoon_bite,10,false);
    }
if (view.image_index&gt;=sprite_get_number(view.sprite_index)-1)
    { 
    moveChoose=true;
    bites+=1;
    }
break;

case 4: //JUMP
view.sprite_index=global.sprite[master.spr_Little_Consumer_Jump];
alarm[0]=500;

if (view.image_index&lt;6)
    {
    hsp=0;
    if place_meeting(x,y,obj_Short_Ship) vsp=0;
    view.image_speed=.5*global.game_speed;
    }
else
{
        if (view.image_index&gt;=6) &amp;&amp; (view.image_index&lt;7) 
            {
            if (jumped==false)
            {
            vsp=random_range(-15,-8)*scale*thrust;   
            if (vsp&lt;-15) vsp=-15;        
            grounded = 0;
            jumped=true;
            }
            }
            
        if(!grounded)
            {
            hsp=jhsp*thrust;  
            if (view.image_index&gt;=23)
                    view.image_speed = 0;
            }   
            else
            {
                hsp=0;
                view.image_speed = .5*global.game_speed;
            }          
}//END IF IMAGE INDEX IS LESS THEN 6
            

if (view.image_index&gt;=sprite_get_number(view.sprite_index)-1)
    { 
    moveChoose=true;
    alarm[3]=60;
    jumps+=1;
    thrust=1;
    
    if (jumps&gt;2)
        {
            moveChoice=5;
            moveChoose=false;
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Walk];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            alarm[0]=100;
            stuck=0;
            not_grounded=0;
            jumps=0;
        }
    
    }
/*
if place_meeting(x+hsp,y,par_wall) 
{   
    while place_meeting(x+hsp,y,par_wall) x=x-sign(image_xscale);    
}
*/
break;

case 5: //WALK AWAY
view.sprite_index=global.sprite[master.spr_Little_Consumer_Walk];
view.image_speed=.5*global.game_speed;
//vsp=0;

if (HERO.x &gt; x)
{
    image_xscale = scale;
    hsp=setspeed;   
}

if (HERO.x &lt; x) 
{
    image_xscale = -scale;
    hsp=-setspeed;
}

hsp*=-1;
image_xscale*=-1;

if (!grounded) 
not_grounded+=1; else not_grounded=0;

break;

case 6: //TURN
            
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Turn];
            view.image_speed=.5*global.game_speed;
            swing_range=false;
            alarm[0]=100;

if (turning&gt;3)
        {
            turning=0;
            stuck=0;
            view.sprite_index = global.sprite[master.spr_Little_Consumer_Jump];
            moveChoice=4;
            jumped=false;
            moveChoose=false;
            view.image_speed=.5*global.game_speed;
            view.image_index=0;
            jhsp=setspeed*sign(image_xscale);
            acel=1;
            alarm[0]=500;
            thrust=irandom_range(4,6)*.25;
        }

            hsp=0;
            //vsp=0;
            
            if (view.image_index&gt;=12) 
            {
                    
                  
                    moveChoose=true;
                    
                        if (west_east==0)
                        {
                        image_xscale=scale;
                        //x=x-(scale*25); //TURN OFFSET
                        alarm[4]=50/global.game_speed;
                        west_east = 1;
                        }
                        else 
                        {
                        //x=x+(scale*25); //TURN OFFSET
                        alarm[4]=50/global.game_speed;
                        image_xscale=-scale;
                        west_east = 0;
                        }
                    
                    view.image_index=0;
               
            }
            break;

} //END SWITCH



vsp=vsp+grav*global.game_speed;
                    

if (kickback!=0) //KICK BACK
{
    hsp=kickback;
    vsp=-1;
    kickback = kickback - sign(kickback);
}


// Collisions -------------------------------------------------
if place_meeting(x+hsp,y,par_wall) 
{   
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp =0;
        
        if(moveChoice==2)|| (moveChoice==5) //IF STUCK BY BARRIER
        {
        stuck=stuck+1;
        if(stuck&gt;1)
            {
            stuck=0;
            view.sprite_index = global.sprite[master.spr_Little_Consumer_Jump];
            moveChoice=4;
            jumped=false;
            moveChoose=false;
            view.image_speed=.5*global.game_speed;
            view.image_index=0;
            jhsp=setspeed*sign(image_xscale);
            acel=1;
            alarm[0]=500;
            thrust=1+jumps*.2;
            if (thrust&gt;1.5) thrust=1.5;
            }
        }         
    }
    else
    {
        y=y-yplus;
    }    
}

if(moveChoice==2) || (moveChoice==5)
{  
if (!place_meeting(x+(32*scale*sign(hsp)),y+15*scale,par_wall)) //IF ABOUT TO FALL OFF CLIFF
    {
    n = irandom_range(1,2) //randomly choose
    //n=2;
    if (n==1) //REVERSE DIRECTION
    {
      switch(moveChoice)
        {
        case 2:
            moveChoice=5;
            moveChoose=false;
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Walk];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            alarm[0]=100;
            stuck=0;
            not_grounded=0;
            jumps=0;
        break
        
        case 5:
            moveChoice=2;
            moveChoose=false;
            view.sprite_index=global.sprite[master.spr_Little_Consumer_Walk];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            alarm[0]=300;
            stuck=0;
            not_grounded=0;
        break;
        }
      }
      else //JUMP
      {
            stuck=0;
            view.sprite_index = global.sprite[master.spr_Little_Consumer_Jump];
            moveChoice=4;
            moveChoose=false;
            view.image_speed=.5*global.game_speed;
            view.image_index=0;
            jhsp=setspeed*sign(image_xscale);
            acel=1;
            jumped=false;
            alarm[0]=500;
            thrust=irandom_range(4,6)*.25;
      }
    
    }
}

if instance_exists(obj_PearStore_inside)
{
vsp=0;
hsp=0;
}

//Commit to Horizontal movement
x = x + hsp*global.game_speed;

//Vertical Collision
if (vsp&gt;=0)
{

if place_meeting(x,y+vsp,par_wall) 
{ 
    while (!place_meeting(x,y+sign(vsp),par_wall)) y=y+sign(vsp);
     
    if (sign(vsp) == 1)
    {
        if (vsp&gt;10) //ADD RUMBLE SHOCK TO LAND
        {
         if (scale&gt;=.7)
         {
            alarm[5]=vsp*.25;
            if (alarm[5]&gt;10) alarm[5]=10;
            var vibration=alarm[5]*.5*scale; 
            if (vibration&gt;1) vibration=1;
            if (global.rumble) gamepad_set_vibration(global.playing_index, vibration, vibration);
         }
        }
        
        grounded = 1; //Enable First Jump        
        grav=.6;
    }
    vsp=0;
}
else
{
   grounded = 0;
}
}
//Commit to Verical movement

y = y + vsp*global.game_speed;

//TRACK COLLIDE ----------------------------------
if place_meeting(x,y+1,par_Track)
{
    var track 
    track = instance_position(x,y,par_Track);
    if (track ==noone)
    track = instance_nearest(x,y,par_Track);
    
    if (bbox_bottom&lt;=track.bbox_top+1*abs(track.image_yscale)) 
    {
    x = x+(track.image_speed*1.57*track.image_xscale);
    }
}
//END TRACK --------------------------------------

}//END ACTIVE

if (view.bbox_top&gt;room_height)
{

if (x&gt;view_xview) &amp;&amp; (x&lt;view_xview+1280)
{
    if instance_exists (obj_Waves)
    {
       audio_sound_pitch(snd_splash_light, random_range(1,1.2));
       audio_play_sound(snd_splash_light,10,false);
       with  instance_create(x,room_height,obj_Splash) {depth=other.depth;}
    }
    
    else
    {
        audio_sound_pitch(snd_consumerdie,random_range(.9,1.1)*global.game_speed);
        audio_play_sound(snd_consumerdie,10,false);
    }
}

if instance_exists(view) with (view) {instance_destroy();}
instance_destroy();
}

}//END VIEW EXISTS
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_spikes">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0;
hsp=0;
image_blend = c_red;
audio_sound_pitch(snd_consumerdie,random_range(.9,1.1)*global.game_speed);
audio_play_sound(snd_consumerdie,10,false);

with instance_create(x,y,obj_StarBurst)
            {
            image_xscale=1*other.image_xscale;
            image_yscale=1*other.image_yscale;
            image_angle=irandom_range(1,360);
            image_blend=c_red;
            depth=-2;
            }
            
with instance_create(x,y,obj_BloodSplash)
{
image_xscale=1;
image_yscale=1;
}

if (alarm[4]==-1) alarm[4]=5;
if instance_exists(view) with (view) {instance_destroy();}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(view) with (view) {instance_destroy();}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if (grounded) image_blend=c_red; else image_blend=c_white;
if sprite_exists(sprite_index) draw_self();
}}

//draw_set_font(fnt_Arial);
//draw_text(x+128,y-140,"ctrl[X]: " + string(x)+" ctrl[Y]: " + string(y));
//draw_text(x+128,y-120,"view[X]: " + string(view.x)+" view[Y]: " + string(view.y));


//draw_text(x+128,y-100,"vsp: " + string(vsp));
//draw_text(x+128,y-80 ,"hsp: " + string(hsp));

//draw_text(x+128,y-80 ,"thrust: " + string(thrust))
//draw_text(x+128,y-100,"jumps: " + string(jumps));

//draw_text(x+128,y-60 ,"alarm[0]: " + string(alarm[0]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>128,100</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
