<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[9] = room_speed;
last_ps_eth_counter = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ps4_ethernet_available)
{
    global.ps4_net_check_result = -1;
    global.ps4_old_net_check_result = global.ps4_net_check_result;
    psn_check_np_availability(0, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if the user is still signed into psn
psn_np_status(0);
alarm[9] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (is_undefined(async_load[? "event_type"])) exit;

show_debug_message("game room system event: " + json_encode(async_load));

if (async_load[? "event_type"] == "gamepad discovered" )
{
    for(i=0;i&lt;gamepad_get_device_count();i++)
    {
        if (gamepad_is_connected(i))
        {
            psn_init_trophy(i);
        }
    }
}
else if (async_load[? "event_type"] == "np_availability")
{   
    // psn has become unavailable 
    global.ps4_net_check_result = async_load[? "result"];
    global.ps4_old_net_check_result = global.ps4_net_check_result;
    
//    psn has become available/unavailable and you should 
//    check global.ps4_net_check_result to see which
}
else if (async_load[? "event_type"] == "psn_enetDown")
{
    // the ps4 has lost it's network connection
    if (async_load[? "eth_counter"] &gt; last_ps_eth_counter)
    {
        global.ps4_old_net_check_result = global.ps4_net_check_result;
        global.ps4_net_check_result = 0;
        last_ps_eth_counter = async_load[? "eth_counter"];
        global.ps4_ethernet_available = false;
    }
}
else if (async_load[? "event_type"] == "psn_enetUp")
{
    // the ps4 has found it's network connection
    if (async_load[? "eth_counter"] &gt; last_ps_eth_counter)
    {
        global.ps4_net_check_result = global.ps4_old_net_check_result;
        last_ps_eth_counter = async_load[? "eth_counter"];
        global.ps4_ethernet_available = true;
        alarm[10] = room_speed;
   }
}
else if (async_load[? "event_type"] == "np_status")
{
    // ps4 user has signed into or out of psn
    if (async_load[? "result"] == 0)
    {
        global.ps4_net_check_result = 0;
    }
    else if (async_load[? "result"] == 1)
    {
        if (global.ps4_net_check_result == 0 and alarm[10] &lt; 0)
        {
            global.ps4_ethernet_available = true;
            // maybe try again to see if we're allowed now
            alarm[10] = room_speed;
        }
    }
}
else if (async_load[? "event_type"] == "user_psn_signed_out")
{
    global.ps4_net_check_result = 0;
}
else if (async_load[? "event_type"] == "user_psn_signed_in")
{
    alarm[10] = room_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ps4_net_check_result == 0)
    draw_text(10, 10, "psn features not allowed");
else
    draw_text(10, 10, "psn features are allowed");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
