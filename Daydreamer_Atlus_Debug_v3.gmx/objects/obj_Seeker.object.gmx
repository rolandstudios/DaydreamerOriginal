<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy_Body</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------


if(master.Seeker_Bite==0)
{
master.num+=1;
master.Seeker_Bite=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\Seeker_Bite.png",17,0,1,389,228);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.Seeker_Boost==0)
{
master.num+=1;
master.Seeker_Boost=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\Seeker_Boost.png",26,0,1,372,114);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.Seeker_Turn==0)
{
master.num+=1;
master.Seeker_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\Seeker_Turn.png",26,0,1,388,93);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.Seeker_Swim==0)
{
master.num+=1;
master.Seeker_Swim=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\Seeker_Swim.png",25,0,1,388,93);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

sprite_index=global.sprite[master.Seeker_Swim];


moveChoice=1;
moveChoose=false;
hp=15;
init_hp=hp;
rest=false;
turns=0;
bites=0;
active=true;

swing_range=false;
activate=false;

west_east = 1;
setspeed = 2 + random_range(1,3);
hsp=0;
vsp=0;
type=1;
//color=image_blend;
color=make_colour_hsv(0,0,200);

scale = image_yscale;
damage=5*global.difficulty;

acel=0;
fire=false;
kickback=0;
float_up=true;
float_factor=0; 
active=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) global.Points+=irandom_range(20,50);

with instance_create(x-32*image_xscale,y,obj_StarBurst)
            {
            image_xscale=3*other.image_xscale;
            image_yscale=3*other.image_yscale;
            image_angle=irandom_range(1,360);
            depth=-2;
            }

with instance_create(x-32*image_xscale,y,obj_BloodSplash)
{
image_xscale=1;
image_yscale=1;

    //color=make_color_rgb(210,235,255);
    lurker=true;
}
audio_sound_pitch(snd_SIN_Scream,random_range(1.1,1.2)*global.game_speed);
audio_play_sound(snd_SIN_Scream,10,false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bites=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turns=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_EnemyHit_A</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if (!active)
{
if (par_HERO.x-2280 &lt; bbox_right) &amp;&amp; (par_HERO.x + 2280 &gt; bbox_left) 
    {
    active=true; 
    }

}
else
{ 
//START ACTIVATE
//FIX DOOR CLIPPING
//if place_meeting(x,y,obj_Vertical_Shaft_top)
//depth=-14;
//else
//depth=-1;



//Check Center Range
if (par_HERO.x&lt;x+30) &amp;&amp; (par_HERO.x&gt;x-30) center=true;else center=false;


//check Swing Range
if (moveChoice!=3)
{
if(par_HERO.bbox_top &lt; y) &amp;&amp; (par_HERO.bbox_top &gt; y - 100) || (par_HERO.bbox_top &gt; y) &amp;&amp; (par_HERO.bbox_top &lt; y + 100) 
 {
    if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - 150) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + 150) 
     {
     swing_range = true;
     }
     else
     {
     swing_range = false;
     }
 }
}

//check direction
if (par_HERO.x &gt; x) 
{
 if (moveChoice!=5)&amp;&amp; (moveChoice!=3)
 hsp = 8;
 if(moveChoice&lt;3)
 {
 if(west_east == 0)
        {  
        
            moveChoose=false;
            moveChoice=5;
            //audio_play_sound(snd_saberwhoosh,10,false);
            sprite_index = global.sprite[master.Seeker_Turn];
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
        
         
         //hsp=0;
         }
         else
         {
         west_east = 1;
         image_xscale = scale;
         }
  }
}


if (par_HERO.x &lt; x) 
{
   if (moveChoice!=5) &amp;&amp; (moveChoice!=3)
    hsp= - 8;
    if(moveChoice&lt;3)
    {
        if(west_east == 1)
        {
            moveChoose=false;
            moveChoice=5;
            //audio_play_sound(snd_saberwhoosh,10,false);
            sprite_index = global.sprite[master.Seeker_Turn];
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
            //hsp=0;
         }
         else
         {
            west_east = 0;
            image_xscale = -scale;
         }
  }
}



//Make Move Choice

if(moveChoose)
{
     n=irandom_range(1, 3);
            
     while(n==moveChoice)
        {
            n=irandom_range(1, 3);       
        }
         
     moveChoice=n;
     moveChoose=false;
    
    //Intialize Move
    switch(moveChoice)
    {
    case 1: //MOVE FOLLOW
    sprite_index=global.sprite[master.Seeker_Swim]; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(50,200)/global.game_speed;
    acel=.1;
    float_up=true;
    float_factor=0;   
    break;
    
    case 2: //FLOAT
    sprite_index=global.sprite[master.Seeker_Swim]; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(50,200)/global.game_speed;
    acel=.1;
    float_up=true;
    float_factor=0;   
    break;
    
    case 3: //Boost
    sprite_index=global.sprite[master.Seeker_Boost]; 
    image_index=0;
    image_speed=.5*global.game_speed;
    acel=.1;
    audio_sound_pitch(snd_seeker_boost,global.game_speed);
    audio_play_sound(snd_seeker_boost,10,false);
    break;
    }
}//END MOVE CHOOSE

//Make Move

switch(moveChoice)
{
 case 1: //MOVE FOLLOW
        damage=3*global.difficulty;
        sprite_index=global.sprite[master.Seeker_Swim];
        image_speed=.5*global.game_speed;
        
        if (par_HERO.bbox_top &gt; y) {vsp=setspeed*.25;}
        if (par_HERO.bbox_top &lt; y) {vsp=-setspeed*.25;}
        
        if (acel&lt;1)    
            acel=acel+.01*global.game_speed;
        vsp=vsp*acel;
        hsp=hsp*acel;
        
        if (swing_range) &amp;&amp; (bites&lt;2)
        {
         moveChoice=4;
         bites+=1;
         sprite_index=global.sprite[master.Seeker_Bite];
         image_speed=.5*global.game_speed;
         image_index=0;
         alarm[0]=200/global.game_speed;
         audio_sound_pitch(snd_seeker_bite,global.game_speed);
         audio_play_sound(snd_seeker_bite,10,false);
        }
        
        break;
        
 case 2: //MOVE FLOAT
        damage=3*global.difficulty;
        sprite_index=global.sprite[master.Seeker_Swim];
        image_speed=.5*global.game_speed;
        
        hsp=hsp/2;
        
        
        
        if(float_up) float_factor=float_factor+.1;
        if(!float_up) float_factor=float_factor-.1;
        
        if(float_factor&gt;=5*scale) float_up=false;
        if(float_factor&lt;=-5*scale) float_up=true;
        vsp = float_factor;
        
        if (par_HERO.bbox_top &gt; y) {vsp+=setspeed*.1;}
        if (par_HERO.bbox_top &lt; y) {vsp-=setspeed*.1;}
        
         if (swing_range) &amp;&amp; (bites&lt;2)
         {
         bites+=1;
         moveChoice=4;
         sprite_index=global.sprite[master.Seeker_Bite];
         image_speed=.5*global.game_speed;
         image_index=0;
         alarm[0]=200/global.game_speed;
         audio_sound_pitch(snd_seeker_bite,global.game_speed);
         audio_play_sound(snd_seeker_bite,10,false);
         }
         
        break;
        
 case 3: //BOOST
        damage=3*global.difficulty;
        sprite_index=global.sprite[master.Seeker_Boost];
        image_speed=.5*global.game_speed;
         
        if (image_index&lt;10) 
            {
                //hsp=0;
                hsp*=.9;
            }
            else
            {
                //hsp=sign(image_xscale)*30;
                hsp=sign(image_xscale)*(45-image_index);
            }
        if (par_HERO.y &gt; y) {vsp=setspeed*.1;}
        if (par_HERO.y &lt; y) {vsp=-setspeed*.1;}
        
        if (image_index&gt;=24) moveChoose=true;
        break;
        
  case 4: //BITE
        damage=10*global.difficulty;
        sprite_index=global.sprite[master.Seeker_Bite];
        image_speed=.5*global.game_speed;
        
        
        if (image_index&gt;8) &amp;&amp; (image_index&lt;12)
        {
        hsp=sign(image_xscale)*30;
        vsp=7.5;
        }
        else
        {
        hsp=0;
        vsp=0;
        }
        
        if (image_index&gt;=15) 
        {
        //moveChoose=true;
            alarm[3]=400/global.game_speed;
            moveChoice=3;
            sprite_index=global.sprite[master.Seeker_Boost]; 
            image_index=0;
            image_speed=.5*global.game_speed;
            acel=.1;
            audio_sound_pitch(snd_seeker_boost,global.game_speed);
            audio_play_sound(snd_seeker_boost,10,false);
            swing_range = false;
        }
        
        break;
        
 case 5: //Turn
        damage=3*global.difficulty;
        sprite_index=global.sprite[master.Seeker_Turn]; 
        image_speed=.5*global.game_speed;

        //hsp=0;
        //vsp=0;
        hsp*=.9;
        vsp*=.9;

    if (image_index&gt;=23) 
    {
    moveChoose=true;
       
    if(west_east == 0)
        {
        west_east=1;
        sprite_index = global.sprite[master.Seeker_Swim];
        image_xscale=-(image_xscale);
        x=x+(scale*300); //TURN OFFSET
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
            turns+=1;
            alarm[2]=200/global.game_speed;
            
        }
        else
        {
        west_east=0;
        sprite_index = global.sprite[master.Seeker_Swim];
        image_xscale=-(image_xscale);
        x=x-(scale*300); //TURN OFFSET
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
            turns+=1;
            alarm[2]=200/global.game_speed;
        }
    
        
    if (turns&gt;2)
        {
        moveChoose=false;
        moveChoice=3;
        sprite_index=global.sprite[master.Seeker_Boost]; 
        image_index=0;
        image_speed=.5*global.game_speed;
        acel=.1
        turns=0;
        audio_sound_pitch(snd_seeker_boost,global.game_speed);
        audio_play_sound(snd_seeker_boost,10,false);
        }
    
    }
    
    
    break;

}


if (kickback!=0) //KICK BACK
{
    hsp=kickback;
    kickback = kickback - sign(kickback);
    if (par_HERO.y&gt;y)
        vsp=-2; else vsp=2;
}

//Commit to Horizontal movement
 x = x+hsp*global.game_speed;
 
//Dont fly to low
if(y&gt;room_height-300)
    {
    if (vsp&gt;0) vsp=0;
    }
    
y=y+vsp*global.game_speed;
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var shoot
shoot=instance_place(x,y,par_Shoot)
if (shoot==noone)
shoot=instance_nearest(x,y,par_Shoot)
if (shoot!=noone)
{
hp=hp-shoot.damage;

if (hp&lt;0)
{
//instance_create(x,y-100,obj_Explosion_B);
instance_destroy();
}
if (alarm[1] &lt;=-1) 
{
image_blend = c_red;
alarm[1]=4; 
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
if (image_blend!=c_red)
    image_blend=color;
    
    draw_self();
    
    if (global.enemy_hp)
    {
    draw_rectangle_color(x,bbox_top-25,x+(init_hp),bbox_top-22,c_red,c_red,c_red,c_red,false);
    draw_rectangle_color(x,bbox_top-25,x+(hp),bbox_top-22,c_green,c_green,c_green,c_green,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>124,92</point>
    <point>256,256</point>
  </PhysicsShapePoints>
</object>
