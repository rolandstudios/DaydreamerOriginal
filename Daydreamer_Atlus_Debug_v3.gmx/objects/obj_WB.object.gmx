<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy_Body</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//Load Buffs
//-------------------------------------
if(master.spr_Absorb==0)
{
master.num+=1;
master.spr_Absorb=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Absorb.png",17,0,1,128,116);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

//-------------------------------------


//Load Character Sprites
//-------------------------------------
if(master.spr_WB_Explode==0)
{
master.num+=1;
master.spr_WB_Explode=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_WB_Explode.png",23,0,1,116,256);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_WB_Fly==0)
{
master.num+=1;
master.spr_WB_Fly=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_WB_Fly.png",49,0,1,144,288);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_WB_Glide==0)
{
master.num+=1;
master.spr_WB_Glide=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_WB_Glide.png",16,0,1,241,103);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_WB_Scream==0)
{
master.num+=1;
master.spr_WB_Scream=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_WB_Scream.png",49,0,1,234,274);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_WB_Storm==0)
{
master.num+=1;
master.spr_WB_Storm=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_WB_Storm.png",25,0,1,148,288);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_WB_Turn==0)
{
master.num+=1;
master.spr_WB_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_WB_Turn.png",19,0,1,257,287);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

sprite_index=global.sprite[master.spr_WB_Fly]

//-------------------------------------



scale=image_yscale;
if instance_exists(obj_HERO)
{
    if (par_HERO.x&lt;x)
    {
    image_xscale=-scale;
    west_east = 0;
    }
    else
    {
    image_xscale=scale;
    west_east = 1;
    }
}
else
{
image_xscale=scale;
west_east = 0;
}
burn=false;
burns=0;

hp=720;
rest=false;
activate=false;

hsp=0;
vsp=0;
setspeed = 5;
cansweep=2;
type=1;
scream=0;

image_speed=.5
damage=7*global.difficulty;;
moveChoose=false;
moveChoice=1;
alarm[0]=25;
acel=0;
fire=false;
kickback=0;
float_up=true;
float_factor=0; 
s_speed=0;
hero_hp=0;
hero_damage=0;
swoops=0;
flyup=true;
mount=false;

        last_x_A=x;
        last_y_A=y;
         
        last_x_B=x;
        last_y_B=y;
           
        last_x_C=x;
        last_y_C=y;
        
        last_x_D=x;
        last_y_D=y;
        
        last_x_E=x;
        last_y_E=y;
        
        last_x_F=x;
        last_y_F=y;
        
        last_x_G=x;
        last_y_G=y;
        
        last_x_H=x;
        last_y_H=y;
        
        last_x_I=x;
        last_y_I=y;
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) 
{
global.world_clear[11]=1;

    //STEAM
    if (global.platform==0)
    {
       if !steam_get_achievement("ach_Defeat_Dawnwing") 
            steam_set_achievement("ach_Defeat_Dawnwing");
    }
    //XBOX ONE
    if (global.platform==1)
    {     
        scr_XboxOne_Achievement(17);                                       
    }
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(17);                                   
    } 
        
with instance_create(x,y,obj_CheckPoint){World=11.5;Boss=true;}

//const=500/(4*60); //MIN CONSTANT
damage_bonus=round((100-hero_damage)*5);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=500;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus; 
    boss_num=11;    
    }
}
   
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (burns&gt;0)
    {
        with instance_create(x,y,obj_burn_damage)
            {
            image_xscale=5;
            image_yscale=5;
            damage=1;
            }   
    burns-=1;
    alarm[9]=10/global.game_speed;
    }
    else
    {
    burn=false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (moveChoice==5)
{
depth=-1;
image_angle=0
direction=0;
s_speed=0;
speed=0;
moveChoose=false;

sprite_index=global.sprite[master.spr_WB_Fly]; 
image_speed=.5*global.game_speed;
image_xscale=scale;
image_yscale=scale;

  if (x&gt;par_HERO.x)
                {
                x=room_width+400;
                west_east=0;
                hsp=-5;
                }
                else
                {
                x=-400;
                west_east=1;
                hsp=5;
                }
    
y=632;                 
moveChoice=1;
alarm[0]=550/global.game_speed;
acel=.1;
float_up=true;
float_factor=0;     
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_Absorb)
with (obj_Absorb) {instance_destroy();}

instance_create(x,y,obj_Absorb);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_create(x,y,obj_Aura_Ripple_stat);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_EnemyHit_A</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kickback=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if (!activate)
{
    if (par_HERO.x-400 &lt; bbox_right) &amp;&amp; (par_HERO.x + 400 &gt; bbox_left) 
    {
        activate=true; 
    }
        activate=true; 
}
else
{ //START ACTIVATE

//FIX DOOR CLIPPING
if place_meeting(x,y,par_Top)
depth=-14;
else
depth=-1;



if(moveChoose)
{
     n=irandom_range(1, 5);
            
     while(n==moveChoice)
        {
            n=irandom_range(1, 5);       
        }
      if (n==5)
        {
        t=irandom_range(1,3)
        if (t==1) n=5; else n=1;  
        }  
        
        
     moveChoice=n;
     moveChoose=false;
    
    //Intialize Move
    switch(moveChoice)
    {
    case 1: //MOVE FOLLOW
    sprite_index=global.sprite[master.spr_WB_Fly]; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,300)/global.game_speed;
    acel=.1;
    float_up=true;
    float_factor=0;   
    
    c=irandom_range(1,3)
    if (c==1) alarm[5]=irandom_range(20,50)/global.game_speed; //ENABLE ABSORB
    
    break;
    
    case 2: //FLOAT
    sprite_index=global.sprite[master.spr_WB_Fly]; 
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(300,500)/global.game_speed;
    acel=.1;
    float_up=true;
    float_factor=0;   
    mount=false;
    break;
    
    case 3: //SCREAM
    sprite_index=global.sprite[master.spr_WB_Scream]; 
    image_index=0;
    image_speed=.5*global.game_speed;
    scream=5;
    audio_sound_pitch(snd_IndustrialRoar,global.game_speed);
    audio_play_sound(snd_IndustrialRoar,10,false);
    break;
    
    case 4: //STORM
    sprite_index=global.sprite[master.spr_WB_Storm]; 
    image_index=0;
    image_speed=.5*global.game_speed;
    alarm[0]=irandom_range(100,300)/global.game_speed;
    if instance_exists(obj_Screen_Shake)
        with(obj_Screen_Shake) {instance_destroy();}
    
        with instance_create(x,y,obj_Screen_Shake)
            {
            alarm[0]=other.alarm[0];
            }
                   
    with instance_create(x,y,obj_rainControler)
        {
            if(other.image_xscale&lt;0)
            {
            direction=225;
            amount=2;           
            }
            else
            {
            direction=315;
            amount=2;
            }
            
            image_xscale=20;
            image_yscale=3;
            depth=10;
            set_speed=50;
            image_alpha=.5;
        }
    
    with instance_create(x,y,obj_WB_Storm_Controler)
        {
            if(other.image_xscale&lt;0)
            {
            direction=225;
            amount=1;
            }
            else
            {
            direction=315;
            amount=1;
            }
        }
    break;
    
    case 5: //GLIDE
    sprite_index=global.sprite[master.spr_WB_Fly]; 
    image_speed=.5*global.game_speed;
    swoops=3;
    flyup=false;
    depth=-32;
    //alarm[6]=1200; //RESET ALARM
    break;
    
    }
    
}

//Make Move

switch(moveChoice)
{
        
        case 1: //MOVE FOLLOW
        sprite_index=global.sprite[master.spr_WB_Fly];
        image_speed=.5*global.game_speed;
        
        speed=0;
        s_speed=0;
                
        if (acel&lt;1) acel=acel+.01;
        
        if (par_HERO.x &gt; x){hsp=5;}        
        if (par_HERO.x &lt; x){hsp=-5;}
        
        if (par_HERO.y &gt; y) {vsp=2;}
        if (par_HERO.y &lt; y) {vsp=-2;}
        
        vsp=vsp*acel;
        hsp=hsp*acel;
        
        if (par_HERO.x &gt; x) 
        {
        if(west_east == 0) //TURN INIT
                {          
                    moveChoose=false;
                    moveChoice=6;
                    audio_sound_pitch(snd_saberwhoosh,global.game_speed);
                    audio_play_sound(snd_saberwhoosh,10,false);
                    sprite_index = global.sprite[master.spr_WB_Turn];
                    image_speed=.5*global.game_speed;
                    image_index=0;
                    alarm[0]=200/global.game_speed;                 
                    //hsp=0;
                 }
                 else
                 {
                 west_east = 1;
                 image_xscale = scale;
                 }  
        }
        
        
        if (par_HERO.x &lt; x) 
        {      
                if(west_east == 1)
                {
                    moveChoose=false;
                    moveChoice=6;
                    audio_sound_pitch(snd_saberwhoosh,global.game_speed);
                    audio_play_sound(snd_saberwhoosh,10,false);
                    sprite_index = global.sprite[master.spr_WB_Turn];
                    image_speed=.5*global.game_speed;
                    image_index=0;
                    alarm[0]=200/global.game_speed;
                    //hsp=0;
                 }
                 else
                 {
                    west_east = 0;
                    image_xscale = -scale;
                 }  
        }

        
        break;

       
        case 2: //MOVE FLOAT
        sprite_index=global.sprite[master.spr_WB_Fly];
        image_speed=.5*global.game_speed;
        speed=0;
        s_speed=0;
        
        
                                
        if (mount==false)
        {        
        if (500 &gt; y) {vsp=4;}
        if (500 &lt; y) {vsp=-4;}
        if (y&lt;510)&amp;&amp; (y&gt;500){mount=true}
        float_factor=0;
        hsp=0;
        hsp*=.9;
        acel=0;        
        } 
        else
        {
            float_factor+=.04*global.game_speed;
            y+=sin(float_factor)*6;
            vsp=0;
            
            if (par_HERO.x &gt; x) 
            {
             hsp = 8;
            }
            else
            {
             hsp = -8;
            }
            if (acel&lt;1) acel+=.01
            hsp*=acel;
        }
        
        if (par_HERO.x &gt; x) 
        {
        if(west_east == 0) //TURN INIT
                {          
                    moveChoose=false;
                    moveChoice=6;
                    audio_sound_pitch(snd_saberwhoosh,global.game_speed);
                    audio_play_sound(snd_saberwhoosh,10,false);
                    sprite_index = global.sprite[master.spr_WB_Turn];
                    image_speed=.5*global.game_speed;
                    image_index=0;
                    alarm[0]=200/global.game_speed;                 
                    //hsp=0;
                 }
                 else
                 {
                 west_east = 1;
                 image_xscale = scale;
                 }  
        }
        
        
        if (par_HERO.x &lt; x) 
        {      
                if(west_east == 1)
                {
                    moveChoose=false;
                    moveChoice=6;
                    audio_sound_pitch(snd_saberwhoosh,global.game_speed);
                    audio_play_sound(snd_saberwhoosh,10,false);
                    sprite_index = global.sprite[master.spr_WB_Turn];
                    image_speed=.5*global.game_speed;
                    image_index=0;
                    alarm[0]=200/global.game_speed;
                    //hsp=0;
                 }
                 else
                 {
                    west_east = 0;
                    image_xscale = -scale;
                 }  
        }

        break;
        
        case 3: //SCREAM
        sprite_index=global.sprite[master.spr_WB_Scream]; 
        image_speed=.5*global.game_speed;
        
        //hsp=0;
        hsp*=.9;
        vsp=0;
        speed=0;
        s_speed=0;
        
        if (round(image_index)==8) 
            {
           if !audio_is_playing(snd_AnrgryRoar)
                {
                audio_sound_pitch(snd_AnrgryRoar,global.game_speed);
                audio_play_sound(snd_AnrgryRoar,10,false);
                audio_sound_pitch(snd_RoarDistant,global.game_speed);
                audio_play_sound(snd_RoarDistant,101,false);
                instance_create(x,y,obj_Aura_Ripple_stat);
                instance_create(x,y,obj_Screen_Shake);
                }
            }
            
            if (image_index&gt;10) &amp;&amp; (image_index&lt;25)
                {
                if (scream&lt;15) scream +=.5;
                if (par_HERO.x&lt;x) &amp;&amp; (sign(image_xscale)==-1) ||  (par_HERO.x&gt;x) &amp;&amp; (sign(image_xscale)==1)
                {
                with (par_HERO)
                    {
                    if !place_meeting(x+2*(other.image_xscale)*global.game_speed,y,par_wall) &amp;&amp; !place_meeting(x+(5*other.image_xscale),y,obj_Vertical_Shaft) &amp;&amp; !place_meeting(x+(10*other.image_xscale),y,obj_Track_C)
                        x = x+(other.scream*other.image_xscale)*global.game_speed;
                    }
                }
                }
        
        if (image_index&gt;=47) 
            {
                moveChoose=true;
            }
        break; 
        
        case 4: //STORM
        sprite_index=global.sprite[master.spr_WB_Storm]; 
        image_speed=.5*global.game_speed;
        
      
        hsp*=.9;
        vsp=0;   
        speed=0;
        s_speed=0;
        
        if (image_index&gt;=24) image_index=10;
        
        with (par_HERO)
            {
                if !place_meeting(x+(8*other.image_xscale),y,par_wall)
                    x = x+(8*other.image_xscale)*global.game_speed;
            }
            
        if (alarm[0]&lt;5)
        {
        if instance_exists(obj_rainControler) 
                with (obj_rainControler) {instance_destroy();}
        if instance_exists(obj_WB_Storm_Controler) 
                with (obj_WB_Storm_Controler) {instance_destroy();}
        }    
            
        if (alarm[0]=-1) 
            {
            moveChoose=true;
            }
        break;
        
        case 5: //GLIDE
        
        alarm[0]=300;
        
        if (flyup==false) //INIT DIVES
        {        
        vsp=-5;
        hsp*=.9;
        speed=0;
        s_speed=0;
        
        sprite_index=global.sprite[master.spr_WB_Fly];
        image_speed=.5*global.game_speed; 
        
        if (y&lt;-200) 
            {
            audio_sound_pitch(snd_RoarDistant,global.game_speed);
            audio_play_sound(snd_RoarDistant,101,false);
            flyup=true;
            x=par_HERO.x+irandom_range(-720,720);
            if (x&lt;0) x=0;
            if (x&gt;room_width) x=room_width;
            
            y=-150
            direction = point_direction(x, y, par_HERO.x, par_HERO.y)
            image_angle = direction; 
            
            s_speed=5;
            
            last_x_A=x;
            last_y_A=y;
         
            last_x_B=x;
            last_y_B=y;
           
            last_x_C=x;
            last_y_C=y;
        
            last_x_D=x;
            last_y_D=y;
        
            last_x_E=x;
            last_y_E=y;
            
            last_x_F=x;
            last_y_F=y;
            
            last_x_G=x;
            last_y_G=y;
            
            last_x_H=x;
            last_y_H=y;
            
            last_x_I=x;
            last_y_I=y;
            }
        }
        else //FLY UP IS TRUE
        {
        
        last_x_I=last_x_H;
        last_y_I=last_y_H;
        
        last_x_H=last_x_G;
        last_y_H=last_y_G;
        
        last_x_G=last_x_F;
        last_y_G=last_y_F;
        
        last_x_F=last_x_E;
        last_y_F=last_y_E;
        
        last_x_E=last_x_D;
        last_y_E=last_y_D;
        
        last_x_D=last_x_C;
        last_y_D=last_y_C;
        
        last_x_C=last_x_B;
        last_y_C=last_y_B;
        
        last_x_B=last_x_A;
        last_y_B=last_y_A;
                
        last_x_A=x;
        last_y_A=y;
                
        sprite_index=global.sprite[master.spr_WB_Glide]; 
        image_xscale=scale*1.2;
        image_yscale=scale*1.2;
        
        hsp*=.9;
        vsp*=.9;
        
        if (s_speed&lt;30) s_speed=s_speed*1.04;
                            
        }//END NOT FLYUP
        
        
         if (y&gt;room_height+450) 
            {
            audio_sound_pitch(snd_RoarDistant,global.game_speed);
            audio_play_sound(snd_RoarDistant,101,false);
            swoops-=1;
            s_speed=5;
            y=-200            
            x=par_HERO.x+irandom_range(-720,720);
            if (x&lt;0) x=0;
            if (x&gt;room_width) x=room_width;
            direction = point_direction(x, y, par_HERO.x, par_HERO.y)
            image_angle = direction; 
            }
        
        
        if(swoops&lt;=0) //FINISH UP AND RESPAWN
            {
            depth=-1;
            image_angle=0;
            direction=0;
            s_speed=0;
            speed=0;
            
            sprite_index=global.sprite[master.spr_WB_Fly]; 
            image_speed=.5*global.game_speed;
            image_xscale=scale;
            image_yscale=scale;
            
            if (x&gt;par_HERO.x)
                {
                x=room_width+400;
                west_east=0;
                hsp=-5;
                }
                else
                {
                x=-400;
                west_east=1;
                hsp=5;
                }
                
            y=632+irandom_range(-300,0);                  
            moveChoice=1;
            moveChoose=false;
            alarm[0]=550/global.game_speed;
            acel=.1;
            float_up=true;
            float_factor=0;        
            }
         
        speed=s_speed*global.game_speed;    
        break; 
        
        
        case 6: //Turn
        sprite_index=global.sprite[master.spr_WB_Turn]; 
        image_speed=.5*global.game_speed;
       

        //hsp=0;
        hsp*=.9;
        vsp*=.9;
        speed=0;
        s_speed=0;

if (image_index&gt;=sprite_get_number(sprite_index)-1) //was 18 
    {
    moveChoose=true;
       
    if(west_east == 0)
        {
        west_east=1;
        image_xscale=-(image_xscale);
        sprite_index = sprite_index=global.sprite[master.spr_WB_Fly];
        x=x+(scale*0); //TURN OFFSET
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
        }
        else
        {
        west_east=0;
        image_xscale=-(image_xscale);
        sprite_index = sprite_index=global.sprite[master.spr_WB_Fly];
        x=x-(scale*0); //TURN OFFSET
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[0]=200/global.game_speed;
        }
    }
    
break;
        
               
        
}//END SWITCH




if(round(image_index==0)) || (round(image_index)==12) || (round(image_index)==24)
{

    audio_sound_gain(snd_BatFlap, 1, 0);
    audio_sound_pitch(snd_BatFlap, random_range(.7,1.3)*global.game_speed);
    audio_play_sound(snd_BatFlap,10,false);
    
}

//Confirm Movement 


if (kickback &gt; .5) //KICK BACK
{
    hsp=kickback;
    kickback *=.9;
}

x=x+hsp*global.game_speed;

//Dont fly to low
if (x&gt;room_width+400) x=room_width+400;
if (x&lt;-400) x=-400;
if (y&lt;-400) y=-400;

if(y&gt;room_height-300){if (vsp&gt;0) vsp=0;}
y=y+vsp*global.game_speed;

}//END ACTIVATE


if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_WB_Health)
{
var shoot
shoot=instance_place(x,y,par_Shoot)
if (shoot==noone)
shoot=instance_nearest(x,y,par_Shoot)
if (shoot!=noone)
{

if place_meeting(x+hsp,y+vsp,obj_HERO_Melee)
    {
        if (obj_HERO_Melee.damage&gt;0)
        {         
            if (alarm[2]==-1) 
            {
            alarm[2]=8;            
            if (par_HERO.x&gt;x)
            kickback=-5+par_HERO.hsp*.5; 
            else 
            kickback=5+par_HERO.hsp*.5;
            }
            
            hp=hp-obj_HERO_Melee.damage;
            
            if (alarm[3]&lt;=-1) 
            {   
            image_blend = c_red;
            alarm[3]=4;
            }        
        }
    }
    else
    {
        if instance_exists(obj_Bomb) &amp;&amp; instance_exists(obj_Flame_02) ||  instance_exists(obj_Ray) &amp;&amp; instance_exists(obj_Flame_02)
        {
        if (alarm[3]==-1) 
            {
                if instance_exists(obj_Bomb)
                hp=hp-shoot.damage+obj_Bomb.damage;
                
                if instance_exists(obj_Ray)
                hp=hp-shoot.damage+obj_Ray.damage;        
            }
        }
        else
        {
            hp=hp-shoot.damage;
        }
        
        if (alarm[3] &lt;=-1)
        {
        alarm[3]=4; 
        image_blend = c_red;
        }
    }
    
if place_meeting(x,y,obj_Flame_02)
{
    if (burn==false)
    {
    alarm[9]=10;
    burn=true;
    burns=15;
    }
}
        
        if (hp&lt;=0)
        {
        image_speed=0;
        hsp=0;
        image_blend = c_red;
        
        with instance_create(x,y,obj_Explosion_WB)
        {
        sprite_index=global.sprite[master.spr_WB_Explode];
        boss_image_index=0;
        boss_image_speed=.5;
        boss_image_max=20;
        boss_image_xscale=other.image_xscale;
        boss_image_yscale=other.image_yscale;
        boss_image_angle=other.image_angle;
        boss_x=other.x;
        boss_y=other.y;
        boss_image_angle=other.image_angle;
        stripes=100;
        spread=300; 
        xplode=20;
        hologram=false; 
        }
        
        instance_destroy();
        if instance_exists (obj_WB_Health)  with (obj_WB_Health){instance_destroy();}
        }    
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_font(fnt_Arial_Big);
draw_set_color(c_white);
draw_set_alpha(1);
var y_text=200;
draw_text(5,y_text+100,"alarm[0]: "+string(alarm[0]));
draw_text(5,y_text+120,"moveChoice: "+string(moveChoice));
draw_text(5,y_text+140,"west_east: "+string(west_east));
draw_text(5,y_text+160,"hsp "+string(hsp));
draw_text(5,y_text+180,"vsp: "+string(vsp));
draw_text(5,y_text+200,"sprite_index: "+string(sprite_index));
draw_text(5,y_text+220,"iamge_index: "+string(image_index));
draw_text(5,y_text+240,"X: "+string(x));
draw_text(5,y_text+260,"Y: "+string(y));
draw_text(5,y_text+280,"Speed: "+string(speed));
draw_text(5,y_text+300,"Direction: "+string(direction));
draw_text(5,y_text+320,"acel: "+string(acel));
draw_text(5,y_text+340,"swoops: "+string(swoops));
draw_text(5,y_text+360,"flyup: "+string(flyup));
draw_text(5,y_text+380,"float_factor: "+string(float_factor));
draw_text(5,y_text+400,"alarm[6]: "+string(alarm[6]));
draw_text(5,y_text+420,"s_speed: "+string(s_speed));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{

    if (sprite_index==global.sprite[master.spr_WB_Glide])
    {
    draw_sprite_ext(sprite_index, image_index-9,last_x_I, last_y_I, image_xscale, image_yscale, image_angle, image_blend, .1 );
    //draw_sprite_ext(sprite_index, image_index-8,last_x_H, last_y_H, image_xscale, image_yscale, image_angle, image_blend, .15 );
    draw_sprite_ext(sprite_index, image_index-7,last_x_G, last_y_G, image_xscale, image_yscale, image_angle, image_blend, .2 );
    //draw_sprite_ext(sprite_index, image_index-6,last_x_F, last_y_F, image_xscale, image_yscale, image_angle, image_blend, .25 );
    draw_sprite_ext(sprite_index, image_index-5,last_x_E, last_y_E, image_xscale, image_yscale, image_angle, image_blend, .3 );
    //draw_sprite_ext(sprite_index, image_index-4,last_x_D, last_y_D, image_xscale, image_yscale, image_angle, image_blend, .35 );
    draw_sprite_ext(sprite_index, image_index-3,last_x_C, last_y_C, image_xscale, image_yscale, image_angle, image_blend, .4 );
    //draw_sprite_ext(sprite_index, image_index-2,last_x_B, last_y_B, image_xscale, image_yscale, image_angle, image_blend, .45 );
    draw_sprite_ext(sprite_index, image_index-1,last_x_A, last_y_A, image_xscale, image_yscale, image_angle, image_blend, .5 );
    }
   
    if (sprite_index!=BossTrigger)
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>238,289</point>
    <point>234,234</point>
  </PhysicsShapePoints>
</object>
