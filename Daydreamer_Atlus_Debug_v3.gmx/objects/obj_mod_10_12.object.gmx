<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mod_10_12</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pos_x=675;
pos_y=208;

finish=false;

end_x=pos_x;
end_y=-2000;

x_offset_A=-1;
y_offset_A=154;

x_offset_B=-1;
y_offset_B=53;

x_offset_C=2;
y_offset_C=-49;

orig_x=x;
orig_y=y;

speed=1;
direction=point_direction(x,y,pos_x,pos_y);
start=true;

hov_A=irandom_range(1,360);
hov_B=irandom_range(1,360);
hov_C=irandom_range(1,360);

select_hov=irandom_range(1,360);

flash_hov_A=irandom_range(1,360);
flash_hov_B=irandom_range(1,360);
flash_hov_C=irandom_range(1,360);

impact_A=2;
impact_B=2;
impact_C=2;
move=0;

alpha=.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed=random_range(.5,5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen() offset=1.5 else offset=1;

if (start)
{
 if (global.world_clear[1]==0) || (global.world_clear[2]==0) || (global.world_clear[3]==0) || (global.world_clear[4]==0) || (global.world_clear[5]==0) ||
    (global.world_clear[6]==0) || (global.world_clear[7]==0) || (global.world_clear[8]==0) || (global.world_clear[9]==0)
    {
    move+=0.1;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    Samples=500;
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,Samples);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    }
    
    //ACTUALLY DRAW THE ISLAND
    if (global.ranked==true) &amp;&amp; (global.world_clear[10]==1) &amp;&amp; (global.world_clear[11]==1) &amp;&amp; (global.world_clear[12]==1)
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_red,1);
    else
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_white,1);


 if (global.world_clear[1]==0) || (global.world_clear[2]==0) || (global.world_clear[3]==0) || (global.world_clear[4]==0) || (global.world_clear[5]==0) ||
    (global.world_clear[6]==0) || (global.world_clear[7]==0) || (global.world_clear[8]==0) || (global.world_clear[9]==0)
     shader_reset();

if (speed&lt;45) speed*=1.25;
if (speed&gt;45) speed=45;
direction=point_direction(x,y,pos_x,pos_y);
if (x&lt;pos_x+25) &amp;&amp; (x&gt;pos_x-25)
    {
    if (y&lt;pos_y+25) &amp;&amp; (y&gt;pos_y-25)
        {
        y=pos_y;
        x=pos_x;
        start=false;
        speed=0;
        }
    }
}

if (finish)
{
 if (global.world_clear[1]==0) || (global.world_clear[2]==0) || (global.world_clear[3]==0) || (global.world_clear[4]==0) || (global.world_clear[5]==0) ||
    (global.world_clear[6]==0) || (global.world_clear[7]==0) || (global.world_clear[8]==0) || (global.world_clear[9]==0)
    {
    move+=0.1;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    Samples=500;
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,Samples);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    }
    
    //ACTUALLY DRAW THE ISLAND
    if (global.ranked==true) &amp;&amp; (global.world_clear[10]==1) &amp;&amp; (global.world_clear[11]==1) &amp;&amp; (global.world_clear[12]==1)
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_red,1);
    else
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_white,1);

 if (global.world_clear[1]==0) || (global.world_clear[2]==0) || (global.world_clear[3]==0) || (global.world_clear[4]==0) || (global.world_clear[5]==0) ||
    (global.world_clear[6]==0) || (global.world_clear[7]==0) || (global.world_clear[8]==0) || (global.world_clear[9]==0)
     shader_reset();
     
if (speed&lt;45) speed*=1.25;
if (speed&gt;45) speed=45;
direction=point_direction(x,y,end_x,end_y);
if (x&lt;end_x+25) &amp;&amp; (x&gt;end_x-25)
    {
    if (y&lt;end_y+25) &amp;&amp; (y&gt;end_y-25)
        {
        y=end_y;
        x=end_x;
        //start=false;
        speed=0;
        }
    }
}

if (start==false) &amp;&amp; (finish==false)
{
if instance_exists(obj_WorldMap_ctl)
{
    //Draw Island
 if (global.world_clear[1]==0) || (global.world_clear[2]==0) || (global.world_clear[3]==0) || (global.world_clear[4]==0) || (global.world_clear[5]==0) ||
    (global.world_clear[6]==0) || (global.world_clear[7]==0) || (global.world_clear[8]==0) || (global.world_clear[9]==0)
    {
    move+=0.1;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    Samples=500;
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,Samples);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    }
    
    
    if (obj_WorldMap_ctl.world==7) alpha=.75; else alpha=1;
    
    //ACTUALLY DRAW THE ISLAND
    if (global.ranked==true) &amp;&amp; (global.world_clear[10]==1) &amp;&amp; (global.world_clear[11]==1) &amp;&amp; (global.world_clear[12]==1)
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_red,alpha);
    else
    draw_sprite_ext(sprite_index,0,(x)*offset,(y)*offset,image_xscale*offset,image_yscale*offset,image_angle,c_white,alpha);
    
  if(global.world_clear[1]==0) || (global.world_clear[2]==0) || (global.world_clear[3]==0) || (global.world_clear[4]==0) || (global.world_clear[5]==0) ||
    (global.world_clear[6]==0) || (global.world_clear[7]==0) || (global.world_clear[8]==0) || (global.world_clear[9]==0)
    shader_reset();
     
    
        if (obj_WorldMap_ctl.select)
        {
        shader_set(shdr_blackandwhite);
        color=make_colour_hsv(irandom_range(1,255),255,255);
        if (obj_WorldMap_ctl.world==10) draw_sprite_ext(spr_mod_10_Select,0,(x+x_offset_A)*offset,(y+y_offset_A)*offset,(image_xscale+(sin(hov_A)*.003))*offset,(image_yscale+(sin(hov_A)*.003))*offset,image_angle,color,1);
        if (obj_WorldMap_ctl.world==11) draw_sprite_ext(spr_mod_11_Select,0,(x+x_offset_B)*offset,(y+y_offset_B)*offset,(image_xscale+(sin(hov_B)*.003))*offset,(image_yscale+(sin(hov_B)*.003))*offset,image_angle,color,1);
        if (obj_WorldMap_ctl.world==12) draw_sprite_ext(spr_mod_12_Select,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale+(sin(hov_C)*.003))*offset,(image_yscale+(sin(hov_C)*.003))*offset,image_angle,color,1);
        draw_set_blend_mode(bm_add);
        if (obj_WorldMap_ctl.world==10) draw_sprite_ext(spr_mod_10_Select,0,(x+x_offset_A)*offset,(y+y_offset_A)*offset,(image_xscale+(sin(hov_A)*.003))*offset,(image_yscale+(sin(hov_A)*.003))*offset,image_angle,color,1);
        if (obj_WorldMap_ctl.world==11) draw_sprite_ext(spr_mod_11_Select,0,(x+x_offset_B)*offset,(y+y_offset_B)*offset,(image_xscale+(sin(hov_B)*.003))*offset,(image_yscale+(sin(hov_B)*.003))*offset,image_angle,color,1);
        if (obj_WorldMap_ctl.world==12) draw_sprite_ext(spr_mod_12_Select,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale+(sin(hov_C)*.003))*offset,(image_yscale+(sin(hov_C)*.003))*offset,image_angle,color,1);
        draw_set_blend_mode(bm_normal);
        shader_reset();
        }
        else
        {
        
        
        if (obj_WorldMap_ctl.world==10)
        {           
           if (impact_A&gt;0)
            {
            draw_sprite_ext(spr_mod_10_Select,0,(x+x_offset_A)*offset,(y+y_offset_A)*offset,(image_xscale*(1 +.03*impact_A))*offset,(image_yscale*(1 +.03*impact_A))*offset,image_angle,c_white,1);
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(spr_mod_10_Select,0,(x+x_offset_A)*offset,(y+y_offset_A)*offset,(image_xscale*(1 +.03*impact_A))*offset,(image_yscale*(1 +.03*impact_A))*offset,image_angle,c_white,.25);
            draw_set_blend_mode(bm_normal);
            impact_A-=1;
            }
            else
            {
            draw_sprite_ext(spr_mod_10_Select,0,(x+x_offset_A)*offset,(y+y_offset_A)*offset,(image_xscale+(sin(hov_A)*.01))*offset,(image_yscale+(sin(hov_A)*.01))*offset,image_angle,c_white,1);
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(spr_mod_10_Select,0,(x+x_offset_A)*offset,(y+y_offset_A)*offset,(image_xscale+(sin(hov_A)*.01))*offset,(image_yscale+(sin(hov_A)*.01))*offset,image_angle,c_white,.25);
            draw_set_blend_mode(bm_normal);
            }           
        }
        else
        {
        impact_A=2;
        }
        
        
        if (obj_WorldMap_ctl.world==11)
        {           
           if (impact_B&gt;0)
            {
            draw_sprite_ext(spr_mod_11_Select,0,(x+x_offset_B)*offset,(y+y_offset_B)*offset,(image_xscale*(1 +.03*impact_B))*offset,(image_yscale*(1 +.03*impact_B))*offset,image_angle,c_white,1);
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(spr_mod_11_Select,0,(x+x_offset_B)*offset,(y+y_offset_B)*offset,(image_xscale*(1 +.03*impact_B))*offset,(image_yscale*(1 +.03*impact_B))*offset,image_angle,c_white,.25);
            draw_set_blend_mode(bm_normal);
            impact_B-=1;
            }
            else
            {
            draw_sprite_ext(spr_mod_11_Select,0,(x+x_offset_B)*offset,(y+y_offset_B)*offset,(image_xscale+(sin(hov_B)*.01))*offset,(image_yscale+(sin(hov_B)*.01))*offset,image_angle,c_white,1);
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(spr_mod_11_Select,0,(x+x_offset_B)*offset,(y+y_offset_B)*offset,(image_xscale+(sin(hov_B)*.01))*offset,(image_yscale+(sin(hov_B)*.01))*offset,image_angle,c_white,.25);
            draw_set_blend_mode(bm_normal);
            }           
        }
        else
        {
        impact_B=2;
        }
        
        
        if (obj_WorldMap_ctl.world==12)
        {           
           if (impact_C&gt;0)
            {
            draw_sprite_ext(spr_mod_12_Select,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale*(1 +.03*impact_C))*offset,(image_yscale*(1 +.03*impact_C))*offset,image_angle,c_white,1);
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(spr_mod_12_Select,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale*(1 +.03*impact_C))*offset,(image_yscale*(1 +.03*impact_C))*offset,image_angle,c_white,.25);
            draw_set_blend_mode(bm_normal);
            impact_C-=1;
            }
            else
            {
            draw_sprite_ext(spr_mod_12_Select,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale+(sin(hov_C)*.01))*offset,(image_yscale+(sin(hov_C)*.01))*offset,image_angle,c_white,1);
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(spr_mod_12_Select,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale+(sin(hov_C)*.01))*offset,(image_yscale+(sin(hov_C)*.01))*offset,image_angle,c_white,.25);
            draw_set_blend_mode(bm_normal);
            }           
        }
        else
        {
        impact_C=2;
        }
        }//END NOT WORLD SELECT
      
      
      
    //DRAW GHOSTING MOD 10
 if (global.world_clear[1]==1) &amp;&amp;  (global.world_clear[2]==1)  &amp;&amp;  (global.world_clear[3]==1) &amp;&amp;  (global.world_clear[4]==1) &amp;&amp;  (global.world_clear[5]==1) &amp;&amp;
    (global.world_clear[6]==1) &amp;&amp;  (global.world_clear[7]==1)  &amp;&amp;  (global.world_clear[8]==1) &amp;&amp;  (global.world_clear[9]==1) 
    {

    if (obj_WorldMap_ctl.world==11) || (obj_WorldMap_ctl.world==2) || (obj_WorldMap_ctl.world==5) || (obj_WorldMap_ctl.world==6) || (obj_WorldMap_ctl.world==7) || (obj_WorldMap_ctl.world==9)
    {
    shader_set(shdr_blackandwhite);
    draw_sprite_ext(spr_mod_10_Select,0,(x+x_offset_A)*offset,(y+y_offset_A)*offset,(image_xscale+(sin(hov_A)*.003))*offset,(image_yscale+(sin(hov_A)*.003))*offset,image_angle,c_aqua,abs(sin(flash_hov_A))*1);
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_mod_10_Select,0,(x+x_offset_A)*offset,(y+y_offset_A)*offset,(image_xscale+(sin(hov_A)*.003))*offset,(image_yscale+(sin(hov_A)*.003))*offset,image_angle,c_aqua,abs(sin(flash_hov_A))*.25);
    draw_set_blend_mode(bm_normal);
    shader_reset();
    }
    
    //DRAW GHOSTING MOD 11
    if (global.world_clear[10]==1)
    {
    if (obj_WorldMap_ctl.world==10) || (obj_WorldMap_ctl.world==12)
    {
    shader_set(shdr_blackandwhite);
    draw_sprite_ext(spr_mod_11_Select,0,(x+x_offset_B)*offset,(y+y_offset_B)*offset,(image_xscale+(sin(hov_B)*.003))*offset,(image_yscale+(sin(hov_B)*.003))*offset,image_angle,c_aqua,abs(sin(flash_hov_B))*1);
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_mod_11_Select,0,(x+x_offset_B)*offset,(y+y_offset_B)*offset,(image_xscale+(sin(hov_B)*.003))*offset,(image_yscale+(sin(hov_B)*.003))*offset,image_angle,c_aqua,abs(sin(flash_hov_B))*.25);
    draw_set_blend_mode(bm_normal);
    shader_reset();
    }
    }
    
    //DRAW GHOSTING MOD 12
    if (global.world_clear[11]==1)
    {
    if (obj_WorldMap_ctl.world==11) 
    {
    shader_set(shdr_blackandwhite);
    draw_sprite_ext(spr_mod_12_Select,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale+(sin(hov_C)*.003))*offset,(image_yscale+(sin(hov_C)*.003))*offset,image_angle,c_aqua,abs(sin(flash_hov_C))*1);
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_mod_12_Select,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale+(sin(hov_C)*.003))*offset,(image_yscale+(sin(hov_C)*.003))*offset,image_angle,c_aqua,abs(sin(flash_hov_C))*.25);
    draw_set_blend_mode(bm_normal);
    shader_reset();
    }
    }
    
    }
    
   
      //DRAW non-Select WIRE  ------------------------------------------
        move+=0.1;
        var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
        var Filter = shader_get_uniform(shdr_Hologram,"Filter");
        var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    
        Samples=400;//500;
        shader_set(shdr_Hologram);
        shader_set_uniform_f(Stripes,Samples);
        shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
        shader_set_uniform_f(Phase,move);
            
        if (obj_WorldMap_ctl.world!=11) &amp;&amp; (obj_WorldMap_ctl.world!=12) &amp;&amp;  (obj_WorldMap_ctl.world!=10) || (global.world_clear[10]==0)
        {
            draw_set_blend_mode(bm_normal);
            draw_sprite_ext(spr_mod_11_wire,0,(x+x_offset_B+2)*offset,(y+y_offset_B)*offset,(image_xscale+(sin(hov_B)*.01))*offset,(image_yscale+(sin(hov_B)*.01))*offset,image_angle,c_white,.75);
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(spr_mod_11_wire,0,(x+x_offset_B+2)*offset,(y+y_offset_B)*offset,(image_xscale+(sin(hov_B)*.01))*offset,(image_yscale+(sin(hov_B)*.01))*offset,image_angle,c_white,.75);
        }
            
        if (obj_WorldMap_ctl.world!=12) &amp;&amp; (obj_WorldMap_ctl.world!=11) || (global.world_clear[11]==0)
        {
            draw_set_blend_mode(bm_normal);
            draw_sprite_ext(spr_mod_12_wire,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale+(sin(hov_C)*.01))*offset,(image_yscale+(sin(hov_C)*.01))*offset,image_angle,c_white,.75);
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(spr_mod_12_wire,0,(x+x_offset_C)*offset,(y+y_offset_C)*offset,(image_xscale+(sin(hov_C)*.01))*offset,(image_yscale+(sin(hov_C)*.01))*offset,image_angle,c_white,.75);
        }
    
        draw_set_blend_mode(bm_normal);
        shader_reset();
    //------------------------------------------------------------------
    
}

    if (obj_WorldMap_ctl.select)
    {
    flash_hov_A+=1;
    flash_hov_B+=1;
    flash_hov_C+=1;
    }
    else
    {
    flash_hov_A+=.05;
    flash_hov_B+=.05;
    flash_hov_C+=.05;
    }

select_hov+=.1;
hov_A+=.05;
hov_B+=.05;
hov_C+=.05;
y+=sin(hov_A)*.05;
}
/*
if keyboard_check_pressed(vk_up) y_offset_A-=1;
if keyboard_check_pressed(vk_down) y_offset_A+=1;
if keyboard_check_pressed(vk_left) x_offset_A-=1;
if keyboard_check_pressed(vk_right) x_offset_A+=1;

draw_set_color(c_white);
draw_text(50,600,"x_offset: " + string(x_offset_A));
draw_text(50,620,"y_offset: " + string(y_offset_A));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
