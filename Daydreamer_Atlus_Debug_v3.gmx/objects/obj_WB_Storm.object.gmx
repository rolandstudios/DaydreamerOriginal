<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_SIN_Shot_B</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damage=1;
image_speed=.5*global.game_speed;
type=1;
hp=5;
image_index=9;
image_speed=0;
s_speed=30;

image_yscale=random_range(.4,.8);
image_xscale=image_yscale*random_range(1,3);

audio_sound_pitch(snd_SoundStick, random_range(.7,1.3)*global.game_speed);
audio_play_sound(snd_SoundStick, 10 , false);


switch(irandom_range(1,2))
{
case 1: wave=90; break;
case 2: wave=270; break;
}


tilt=0;
tilt_up=true;
color=c_white;


        last_x_A=x;
        last_y_A=y;
        last_index_A=9;
        last_angle_A=image_angle;
        
        last_x_B=x;
        last_y_B=y;
        last_index_B=9;
        last_angle_B=image_angle;
        
        last_x_C=x;
        last_y_C=y;
        last_index_C=9;
        last_angle_C=image_angle;
        
         last_x_D=x;
        last_y_D=y;
        last_index_D=9;
        last_angle_D=image_angle;
        
        last_x_E=x;
        last_y_E=y;
        last_index_E=9;
        last_angle_E=image_angle;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_EnemyHit_A</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(irandom_range(1,2))
{
case 1: target_y = -300; break;
case 2: target_y = room_height+300; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_WB) 
{
    instance_destroy();
}



if (hp&lt;=0)
{
audio_sound_pitch(snd_lurkerdie,random_range(.9,1.3)*global.game_speed);
audio_play_sound(snd_lurkerdie,10,false);
    with instance_create(x,y,obj_BloodSplash)
    {
    image_xscale=.5*other.image_yscale;
    image_yscale=.5*other.image_yscale;
    loot=false;
    }
    instance_destroy();
}

var index=17-((tilt+14)*.6)
if (index&lt;0) index=0;
if (index&gt;16) index=16;
image_index=index;


if (tilt_up)
{
direction+=1;
image_angle+=1;
tilt+=.5;
if (tilt&gt;=14) tilt_up=false;
}
else
{
direction-=1;
image_angle-=1;
tilt-=.5;
if (tilt&lt;=-14) tilt_up=true;
}
if place_meeting(x,y,obj_Track_C)
    {
    audio_sound_pitch(snd_lurkerdie,random_range(.9,1.3)*global.game_speed);
    audio_play_sound(snd_lurkerdie,10,false);
    with instance_create(x,y,obj_BloodSplash)
    {
    image_xscale=.5*other.image_yscale;
    image_yscale=.5*other.image_yscale;
    loot=false;
    }    
    /*
    with instance_create(x,y,obj_Spark_D)
        {
        color=c_white;
        image_angle=other.image_angle;
        image_xscale=3;
        image_yscale=3;
        }
    */
    instance_destroy();
    
    }

if place_meeting(x,y,obj_HERO) 
    color=c_red;
    else
    color=c_white;
 
        last_x_E=last_x_D;
        last_y_E=last_y_D;
        last_index_E=last_index_D;
        last_angle_E=last_angle_D;
 
        last_x_D=last_x_C;
        last_y_D=last_y_C;
        last_index_D=last_index_C;
        last_angle_D=last_angle_C;       
 
        last_x_C=last_x_B;
        last_y_C=last_y_B;
        last_index_C=last_index_B;
        last_angle_C=last_angle_B;
        
        
        last_x_B=last_x_A;
        last_y_B=last_y_A;
        last_index_B=last_index_A;
        last_angle_B=last_angle_A;
        
        last_x_A=x;
        last_y_A=y;
        last_index_A=image_index;
        last_angle_A=image_angle;       


image_speed=.5*global.game_speed;
speed=s_speed*global.game_speed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_HERO">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var shoot
shoot=instance_place(x,y,par_Shoot)
if (shoot==noone)
shoot=instance_nearest(x,y,par_Shoot)

    if (shoot!=noone)
    {
    hp-=shoot.damage;
    
        if (alarm[2] &lt;=-1)
        {
        alarm[2]=4; 
        image_blend = c_red;
        }
    }
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//col = make_color_rgb(75,97,107);
//col = make_color_rgb(21,68,90);
/*
draw_sprite_ext(sprite_index, image_index-3,last_x_C, last_y_C, image_xscale, image_yscale, last_angle_C, c_white, .25 );
draw_sprite_ext(sprite_index, image_index-2,last_x_B, last_y_B, image_xscale, image_yscale, last_angle_B, c_white, .5 );
draw_sprite_ext(sprite_index, image_index-1,last_x_A, last_y_A, image_xscale, image_yscale, last_angle_A, c_white, .75 );

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, 1 );
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, color, .75 );
draw_set_blend_mode(bm_normal);
*/
//col = make_color_rgb(75,97,107);
//col = make_color_rgb(21,68,90);
draw_sprite_ext(sprite_index, last_index_E, last_x_E, last_y_E, image_xscale*.3, image_yscale*.3, last_angle_E, c_white, .2 );
//draw_sprite_ext(sprite_index, last_index_D, last_x_D, last_y_D, image_xscale, image_yscale, last_angle_D, c_white, .75 );
draw_sprite_ext(sprite_index, last_index_C, last_x_C, last_y_C, image_xscale*.5, image_yscale*.5, last_angle_C, c_white, .35 );
//draw_sprite_ext(sprite_index, last_index_B, last_x_B, last_y_B, image_xscale, image_yscale, last_angle_B, c_white, .5 );
draw_sprite_ext(sprite_index, last_index_A, last_x_A, last_y_A, image_xscale*.7, image_yscale*.7, last_angle_A, c_white, .5 );

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, 1 );
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, .1 );
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
