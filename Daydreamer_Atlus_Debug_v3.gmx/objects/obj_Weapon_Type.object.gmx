<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x=425;
//y=34;

//orig_x=425;
//orig_y=34;

//orig_x=43;
//orig_y=93;

orig_x=43;
orig_y=83;

if (par_HERO.weapontype==1) sprite_index = spr_UI_Shoot_A;
if (par_HERO.weapontype==2) sprite_index = spr_UI_Shoot_B;
if (par_HERO.weapontype==3) sprite_index = spr_UI_Shoot_C;
if (par_HERO.weapontype==4) sprite_index = spr_UI_Shoot_D;
last_weapon=par_HERO.weaponslot;
image_speed=0;

pet_alpha_L=0;
pet_alpha_R=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_blend=c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) instance_destroy();
else
{
if (par_HERO.weapontype==0) sprite_index = noone;
if (par_HERO.weapontype==1) sprite_index = spr_UI_Shoot_A;
if (par_HERO.weapontype==2) sprite_index = spr_UI_Shoot_B;
if (par_HERO.weapontype==3) sprite_index = spr_UI_Shoot_C;
if (par_HERO.weapontype==4) sprite_index = spr_UI_Shoot_D;
if (par_HERO.weapontype==5) sprite_index = spr_UI_Shoot_E;
if (par_HERO.weapontype==6) sprite_index = spr_UI_Shoot_F;
if (par_HERO.weapontype==7) sprite_index = spr_UI_Shoot_G;
}

//x=view_xview+110;
//y=view_yview+50;

if (last_weapon!=par_HERO.weaponslot) 
    {
    image_blend=c_red;
    alarm[0]=4;
    }
last_weapon=par_HERO.weaponslot;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
{
/*
if keyboard_check(vk_up) orig_y-=1;
if keyboard_check(vk_down) orig_y+=1;
draw_text (x+100,y-15,"set_y: "+string(orig_y));

if keyboard_check(vk_left) orig_x-=1;
if keyboard_check(vk_right) orig_x+=1;
draw_text (x+100,y,"set_x: "+string(orig_x));
*/


if window_get_fullscreen()
{
offset=1.5
x=orig_x*offset;
y=orig_y*offset;
}
else
{
offset=1
x=orig_x*offset;
y=orig_y*offset;
}
image_xscale=offset;
image_yscale=offset;

//WeaponSLOT_A
if(par_HERO.weaponslot==1)
{draw_set_color(image_blend); draw_set_alpha(.5);}
else
{draw_set_color(c_white); draw_set_alpha(.25);}
draw_rectangle(x-11*offset,y+14*offset,x-7*offset,y+18*offset,false);
//WeaponSLOT_B
if(par_HERO.weaponslot==2)
{draw_set_color(image_blend); draw_set_alpha(.5);}
else
{draw_set_color(c_white); draw_set_alpha(.25);}
draw_rectangle(x-5*offset,y+14*offset,x-2*offset,y+18*offset,false);
//WeaponSLOT_C
if(par_HERO.weaponslot==3)
{draw_set_color(image_blend); draw_set_alpha(.5);}
else
{draw_set_color(c_white); draw_set_alpha(.25);}
draw_rectangle(x+0*offset,y+14*offset,x+4*offset,y+18*offset,false);
//WeaponSLOT_D
if(par_HERO.weaponslot==4)
{draw_set_color(image_blend); draw_set_alpha(.5);}
else
{draw_set_color(c_white); draw_set_alpha(.25);}
draw_rectangle(x+6*offset,y+14*offset,x+9*offset,y+18*offset,false);


draw_set_color(c_white);
draw_set_alpha(1);

draw_sprite_ext(spr_WeaponType,0,x-(32*offset),y-(24*offset),offset,offset,image_angle,c_white,image_alpha);
if sprite_exists(sprite_index) draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha);

//DRAW PET HUD ------
pet_x=390;//was 394
pet_y=10;

    draw_set_color(c_gray);  draw_set_alpha(.3) 
    draw_rectangle((pet_x+4)*offset,  (pet_y+17)*offset, (pet_x+6)*offset,  (pet_y+29)*offset, false);
    draw_rectangle((pet_x+55)*offset, (pet_y+17)*offset, (pet_x+58)*offset, (pet_y+29)*offset, false);   
    draw_set_color(c_white); 
                 
    if (par_HERO.Key_Pet_L) {pet_alpha_L=.5; draw_set_color(c_red);}  
    if (par_HERO.Key_Pet_R) {pet_alpha_R=.5; draw_set_color(c_red);}

        if (pet_alpha_L&gt;0) 
        {
        draw_set_alpha(pet_alpha_L) 
        draw_rectangle((pet_x+4)*offset, (pet_y+17)*offset, (pet_x+6)*offset, (pet_y+29)*offset, false);
        pet_alpha_L-=.01;
        }
        
        if (pet_alpha_R&gt;0) 
        {
        draw_set_alpha(pet_alpha_R) 
        draw_rectangle((pet_x+55)*offset, (pet_y+17)*offset, (pet_x+58)*offset, (pet_y+29)*offset, false);
        pet_alpha_R-=.01;
        }
    
        draw_set_alpha(1); draw_set_color(c_white);   
    
        
//DRAW PET FRAME
draw_sprite_ext(spr_PetType,0,pet_x*offset,pet_y*offset,offset,offset,image_angle,c_white,image_alpha);
//DRAW PET ICON
switch(par_HERO.pet)
{
case 0: 
if instance_exists(obj_FuzzyTurtle) shader_set(shdr_blackandwhite);
draw_sprite_ext(spr_Turtle_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, 1*offset,1*offset,0, c_white,1); 
if instance_exists(obj_FuzzyTurtle) shader_reset();
break;

case 1: 
if instance_exists(obj_GingerPup) shader_set(shdr_blackandwhite);
draw_sprite_ext(spr_Pup_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, 1*offset,1*offset,0, c_white,1); 
if instance_exists(obj_GingerPup) shader_reset();
break;

case 2: 
if instance_exists(obj_MeowCat) shader_set(shdr_blackandwhite);
draw_sprite_ext(spr_Cat_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, 1*offset,1*offset,0, c_white,1); 
if instance_exists(obj_MeowCat) shader_reset();
break;

case 3: 
if instance_exists(obj_Weasel) shader_set(shdr_blackandwhite);
draw_sprite_ext(spr_Weasel_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, 1*offset,1*offset,0, c_white,1); 
if instance_exists(obj_Weasel) shader_reset();
break;

case 4: 
if instance_exists(obj_Duck) shader_set(shdr_blackandwhite);
draw_sprite_ext(spr_Duck_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, 1*offset,1*offset,0, c_white,1); 
if instance_exists(obj_Duck) shader_reset();
break;
}

draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_BytePolice);

draw_set_alpha(.75);
//draw_text_transformed((pet_x+31)*offset,(pet_y+41)*offset,"Lvl: "+string(global.pets[par_HERO.pet]),.45*offset,.45*offset,0);
//draw_text_transformed((pet_x+31)*offset,(pet_y+41)*offset,"Lvl "+string(global.pets[par_HERO.pet]),.6*offset,.6*offset,0);
draw_set_font(fnt_Orbitron);
draw_text_transformed((pet_x+31)*offset,(pet_y+41)*offset,"Lvl "+string(global.pets[par_HERO.pet]),.5*offset,.45*offset,0);
draw_set_alpha(1);

}
    
/*
//DRAW PET HUD ------
pet_x=315;
pet_y=59;
//DRAW PET FRAME
draw_sprite_ext(spr_WeaponType,0,pet_x*offset,pet_y*offset,offset,offset,image_angle,c_white,image_alpha);
//DRAW PET ICON
switch(par_HERO.pet)
{
case 0: draw_sprite_ext(spr_Turtle_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
case 1: draw_sprite_ext(spr_Pup_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
case 2: draw_sprite_ext(spr_Cat_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
case 3: draw_sprite_ext(spr_Weasel_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
case 4: draw_sprite_ext(spr_Duck_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
}

//DRAW PET HUD ------
pet_x=10;
pet_y=108;
//DRAW PET FRAME
draw_sprite_ext(spr_WeaponType,0,pet_x*offset,pet_y*offset,offset,offset,image_angle,c_white,image_alpha);
//DRAW PET ICON
switch(par_HERO.pet)
{
case 0: draw_sprite_ext(spr_Turtle_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
case 1: draw_sprite_ext(spr_Pup_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
case 2: draw_sprite_ext(spr_Cat_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
case 3: draw_sprite_ext(spr_Weasel_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
case 4: draw_sprite_ext(spr_Duck_icon,0,(pet_x+31)*offset,(pet_y+23)*offset, .8*offset,.8*offset,0, c_white,1); break;
}








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
