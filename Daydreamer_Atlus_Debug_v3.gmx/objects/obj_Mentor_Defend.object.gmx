<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy_Body</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.Mentor_Fire==0)
{
master.num+=1;
master.Mentor_Fire=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Mentor_Fire.png",31,1,1,143,234);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Mentor_Thomp==0)
{
master.num+=1;
master.Mentor_Thomp=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Mentor_Thomp.png",28,1,1,230,232);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Mentor==0)
{
master.num+=1;
master.Mentor=master.num;
global.sprite[master.num] = sprite_add(working_directory+"\Imports\spr_Mentor_Hang.png",51,1,1,167,234);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Mentor_Uniform==0)
{
master.num+=1;
master.Mentor_Uniform=master.num;
global.sprite[master.num] = sprite_add(working_directory+"\Imports\spr_Mentor_Uniform.png",44,1,1,231,232);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}


sprite_index = global.sprite[master.Mentor];


hold=100;
hp=115;
init_hp=hp;;
damage=10*global.difficulty;;

image_speed=.5;
rewind=false;
enter=false;
swing_range=false;
type=1;
destroy_barrier=false;

moveChoose=false;
moveChoice=0;
canwonk=true;
shot_count=11;

orig_x=x;
orig_y=y;

x1=1; x2=1;
y1=1; y2=1;
dir=1;
max_y=100;
enter_range=400;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x,y,obj_camera_focus)
{   
    with instance_nearest(x, y, obj_camera_focus) {instance_destroy();}
}


if place_meeting(x,y,obj_camera_snap_to_Absolute_View)
{   
    with instance_nearest(x, y, obj_camera_snap_to_Absolute_View) {snap_back=true;}
} 

if place_meeting(x,y,obj_camera_snap_to)
{   
    with instance_nearest(x, y, obj_camera_snap_to) {instance_destroy();}
} 



if (destroy_barrier)
{
if instance_exists(obj_Barrier_Lazer) with (obj_Barrier_Lazer) instance_destroy();
}
if (hp&lt;=0) global.Points+=irandom_range(100,150);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    enter=true;
    rewind=false;
    image_speed=.5*global.game_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canwonk=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_pitch(snd_droid_gun,global.game_speed);
audio_play_sound(snd_droid_gun, 10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_EnemyHit_A</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
//Check Deactivate Range ------------------- //RANGE was 1400
if (par_HERO.x-2000 &lt; bbox_right) &amp;&amp; (par_HERO.x + 2000 &gt; bbox_left)
{
 if (par_HERO.y-500 &lt; bbox_bottom) &amp;&amp; (par_HERO.y + 500&gt; bbox_top)
    {activate=true;}
}    
    else 
    {activate=false;}


if (!activate)
{
instance_deactivate_object(self);
}

//FIX DOOR CLIPPING
if place_meeting(x,y,par_Top)
depth=-14;
else
depth=-1;

if instance_exists(obj_camera_offset)
{

    //Check Enter Range ------------------- //was par_HERO no obj_camera_offset
    if (obj_camera_offset.x-enter_range &lt; bbox_right) &amp;&amp; (obj_camera_offset.x + enter_range &gt; bbox_left) //was 400
    {
    if (moveChoice==0)// &amp;&amp; (alarm[5]==-1) //Enter 
        {
        enter=true;
        rewind=false;
        image_speed=.5*global.game_speed;
       // alarm[5]=irandom_range(100,200);
        }
    }
    
    else
    
    if (obj_camera_offset.x &gt; orig_x+1400) || (obj_camera_offset.x &lt; orig_x-1400) //Exit
    {
        if (moveChoice!=0) // &amp;&amp; (alarm[5]==-1) 
        {
        enter=false;
        rewind=true;
        moveChoice=0;
        //alarm[5]=irandom_range(100,200);
        }
    }

}

//CheckSwingRange
if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - 150) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + 150) 
 {
 swing_range = true;
 if (moveChoice!=5)
    {
    sprite_index=global.sprite[master.Mentor_Thomp];
    image_index=0;
    image_speed=.5*global.game_speed;
    moveChoose=false;
    }
 moveChoice=5;
 }
 else
 {
 swing_range = false;
 }


//Make Move Choice -------------------
if(moveChoose)
{
moveChoice=irandom_range(2,5);

if (moveChoice==1) //sets Idle Length
    {
    sprite_index=global.sprite[master.Mentor];
    image_index=20;
    image_speed=.5*global.game_speed;
    alarm[0]=30/global.game_speed;
    }
if (moveChoice==2) //sets frame to 0
    {
    sprite_index=global.sprite[master.Mentor_Fire];
    image_index=0;
    image_speed=.5*global.game_speed;
    }

if (moveChoice==3) //sets frame to 0
    {
    sprite_index=global.sprite[master.Mentor];
    image_index=20;
    image_speed=.5*global.game_speed;
    
    direction_x=irandom_range(-1,1)*4;
    direction_y=irandom_range(-1,1)*4;
    
    if (direction_x==0) &amp;&amp; (direction_y==0)
        {}
        else
        {
            audio_sound_pitch(snd_crane,global.game_speed);
            audio_play_sound(snd_crane,10,false);
        }
    }

if (moveChoice==4) //sets frame to 0
    {
    sprite_index=global.sprite[master.Mentor_Uniform];
    image_index=0;
    image_speed=.5*global.game_speed;
    shot_count=11;
    }

if (moveChoice==5) //sets frame to 0
    {
    sprite_index=global.sprite[master.Mentor_Thomp];
    image_index=0;
    image_speed=.5*global.game_speed;
    }
     
    moveChoose=false;
    
    
}

//Make Move -------------------

if(enter)
{
 sprite_index=global.sprite[master.Mentor];
 if(image_index==5) 
    {
    if(canwonk)
    {
    canwonk=false;
    alarm[3]=irandom_range(250,500)/global.game_speed;
    audio_sound_pitch(snd_Wonk, random_range(.5,1.5)*global.game_speed);
    audio_play_sound(snd_Wonk,10,false);
    }
    //instance_create(x-128*image_xscale,y+206*image_xscale,obj_Aura_Ripple_stat);
    }
 if(image_index==4) 
    {
    audio_sound_pitch(snd_droid_swift,global.game_speed);
    audio_play_sound(snd_droid_swift,10,false);
    }
    if (moveChoice==0) //IF Enter or Exit Stage
    {
        if (image_index&gt;=50)
        {
        moveChoose=true;
        enter=false;
        audio_sound_pitch(snd_droid_discharge,global.game_speed);
        audio_play_sound(snd_droid_discharge,10,false);
      //audio_play_sound(snd_Wonk,10,false);
        
        }
        else
        {
        moveChoose=false;
        moveChoice=0;
        }
    }
}


if (rewind)
{
 sprite_index=global.sprite[master.Mentor];
 image_speed=-.5*global.game_speed;
 if(image_index&lt;=0)
 {
 image_speed=0;
 }
}



switch(moveChoice)
{
case 0: //Entering or Exiting
break;

case 1: //Idle
sprite_index=global.sprite[master.Mentor];
image_speed=.5*global.game_speed;
if(image_index&gt;=50)
    {
    image_index=20;
    if (alarm[0]=-1) moveChoose=true;
    }


break;

case 2: //Fire Triple
/*
45x443 by   24x446  190deg frame 8
48x388 by   42x408  205deg frame 17
66x416 by   50x408  125deg frame 23
*/
sprite_index=global.sprite[master.Mentor_Fire];
damage=10*global.difficulty;;
//CREATE FIRE-----------------------------------------

    
        switch(image_index)
        {
        case 10:
        audio_sound_pitch(snd_Quadropod_Laser,global.game_speed);
        audio_play_sound(snd_Quadropod_Laser,10,false);
        with instance_create(x-(sprite_get_xoffset(global.sprite[master.Mentor_Fire])*image_xscale)+(22*image_xscale),y-(sprite_get_yoffset(global.sprite[master.Mentor_Fire])*image_yscale)+(417*image_yscale),obj_quadroPod_Fire)
        {
            damage=other.damage;
            speed=5;
            direction=190;
            image_angle=190;
            image_xscale=.5;
            image_yscale=.5;
        } 
        break;
        
        case 16:
        audio_sound_pitch(snd_Quadropod_Laser,global.game_speed);
        audio_play_sound(snd_Quadropod_Laser,10,false);
        with instance_create(x-(sprite_get_xoffset(global.sprite[master.Mentor_Fire])*image_xscale)+(39*image_xscale),y-(sprite_get_yoffset(global.sprite[master.Mentor_Fire])*image_yscale)+(381*image_yscale),obj_quadroPod_Fire)
        {
            damage=other.damage;
            speed=10;
            direction=205;
            image_angle=205;
            image_xscale=.5;
            image_yscale=.5;
        }  
        break;
        
        case 22:
        audio_sound_pitch(snd_Quadropod_Laser,global.game_speed);
        audio_play_sound(snd_Quadropod_Laser,10,false);
        with instance_create(x-(sprite_get_xoffset(global.sprite[master.Mentor_Fire])*image_xscale)+(36*image_xscale),y-(sprite_get_yoffset(global.sprite[master.Mentor_Fire])*image_yscale)+(385*image_yscale),obj_quadroPod_Fire)
        {
            damage=other.damage;
            speed=10;
            //direction=135;
            //image_angle=135;
            direction=145;
            image_angle=145;
            image_xscale=.5;
            image_yscale=.5;
        }  
        break;
        }
if(image_index&gt;=30) moveChoose=true;
break;

    case 3: //Move
    sprite_index=global.sprite[master.Mentor];
    damage=5;
    image_speed=.5*global.game_speed;
    if(image_index&gt;=50)
    {
    image_index=20;
    }
    
    //if (y+direction_y &lt; orig_y) &amp;&amp; (y+direction_y&gt;orig_y-400) 
            y=y+direction_y*global.game_speed;
    //if (y+direction_x &lt; orig_x+200) &amp;&amp; (x+direction_x&gt;orig_x-200)
            x=x+direction_x*global.game_speed;
    if (y&gt;=orig_y) direction_y=-3;
    if (y&lt;=orig_y-max_y) direction_y=5;
    if (x&gt;=orig_x+200) direction_x=-4;
    if (x&lt;=orig_x-200) direction_x=4;
        
    
    if !audio_is_playing(snd_crane) moveChoose=true;
    break;
 
    case 4:
    sprite_index=global.sprite[master.Mentor_Uniform];
    image_speed=.5*global.game_speed;
    damage=2*global.difficulty;
    //if (alarm[2]==-1) alarm[2]=irandom_range(2,4);

if (image_index&gt;=11)
{        
switch(round(image_index))
{
case 11:
x1=144; y1=397;
x2=82;  y2=435;
break;

case 12:
x1=129; y1=364;
x2=32;  y2=410;
break;

case 13:
x1=125; y1=346;
x2=30;  y2=345;
break;

case 14:
x1=115; y1=333;
x2=21;  y2=332;
break;

case 15:
x1=103; y1=320;
x2=20;  y2=317;
break;

case 16:
x1=89; y1=311;
x2=11; y2=305;
break;

case 17:
x1=79; y1=304;
x2=10; y2=303;
break;

case 18:
x1=66; y1=294;
x2=6;  y2=295;
break;

case 19:
x1=55; y1=290;
x2=9;  y2=287;
break;

case 20:
x1=45; y1=285;
x2=9;  y2=280;
break;

case 21:
x1=38; y1=277;
x2=4;  y2=276;
break;

case  22:
x1=29; y1=270;
x2=3;  y2=271;
break;

case  23:
x1=24; y1=269;
x2=2;  y2=266;
break;

case  24:
x1=17; y1=267;
x2=2;  y2=262;
break;

case  25:
x1=12; y1=264;
x2=1;  y2=253;
break;

case  26:
x1=10; y1=263;
x2=1;  y2=251;
break;

case  27:
x1=9; y1=262;
x2=1;  y2=253;
break;

case  28:
x1=7; y1=263;
x2=1;  y2=250;
break;

case  29:
x1=8; y1=260;
x2=1;  y2=244;
break;

case  30:
x1=13; y1=256;
x2=1;  y2=237;
break;

case  31:
x1=14; y1=251;
x2=1;  y2=221;
break;

case  32:
x1=15; y1=248;
x2=3;  y2=225;
break;

case  33:
x1=15; y1=248;
x2=3;  y2=225;
break;

case  34:
x1=14; y1=252;
x2=1;  y2=217;
break;

case  35:
x1=13; y1=251;
x2=1;  y2=232;
break;

case  36:
x1=12; y1=256;
x2=1;  y2=243;
break;

case  37:
x1=16; y1=268;
x2=1;  y2=257;
break;

case  38:
x1=22; y1=295;
x2=2;  y2=287;
break;

case  39:
x1=32; y1=328;
x2=4;  y2=321;
break;

case  40:
x1=49; y1=361;
x2=13;  y2=355;
break;

case  41:
x1=67; y1=390;
x2=11;  y2=391;
break;

case  42:
x1=85; y1=416;
x2=25;  y2=425;
break;

case  43:
x1=105; y1=436;
x2=40;  y2=448;
break;
}

if (shot_count==round(image_index))
{
  dir = point_direction(x1, y1, x2, y2);
        if (alarm[2]=-1) alarm[2]=3/global.game_speed;
        with instance_create(x-(sprite_get_xoffset(global.sprite[master.Mentor_Uniform])*image_xscale)+(x1*image_xscale),y-(sprite_get_yoffset(global.sprite[master.Mentor_Uniform])*image_yscale)+(y1*image_yscale),obj_Mentor_Fire)
        {
            
            damage=other.damage;
            depth=other.depth-1;
            speed=20;
            direction = other.dir;
            image_angle = other.dir;
            image_xscale=1;
            image_yscale=.5;
            image_speed=1.5;
        } 
shot_count+=2;
}    
}  
    
    if (image_index&gt;=42) moveChoose=true;
    break;
    
    case 5:
    sprite_index=global.sprite[master.Mentor_Thomp];
    damage=20*global.difficulty;
    image_speed=.5*global.game_speed;
    
    if (y&lt;orig_y) y+=4;
    if (image_index==5) 
    {
    audio_sound_pitch(snd_circuit_breaker,global.game_speed);
    audio_play_sound(snd_circuit_breaker,10,false);   
    }
    if (image_index&gt;=26) moveChoose=true;
    break;
    
}//END SWITCH
}


















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var shoot
shoot=instance_place(x,y,par_Shoot)
if (shoot==noone)
shoot=instance_nearest(x,y,par_Shoot)
if (shoot!=noone)
{
hp=hp-shoot.damage; //Take Damage

if (hp&lt;0) //Xplode
{

   with instance_create(x,y,obj_Explosion_Boss)
    {
    boss_image_index=other.image_index;
    boss_sprite_index=other.sprite_index;
    boss_image_xscale=other.image_xscale;
    boss_image_yscale=other.image_yscale;
    boss_image_angle=other.image_angle;
    boss_x=other.x;
    boss_y=other.y;
    boss_image_angle=other.image_angle;
    xplode=24;
    rate=4;
    stripes=200;
    }

instance_destroy();
}

if (alarm[1] &lt;=-1) //Reset Red Hit Flash
{
image_blend = c_red;
alarm[1]=4; 
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
draw_self();

if (global.enemy_hp)
    {
    draw_rectangle_color(x,bbox_bottom+25,x+(init_hp),bbox_bottom+22,c_red,c_red,c_red,c_red,false);
    draw_rectangle_color(x,bbox_bottom+25,x+(hp),bbox_bottom+22,c_green,c_green,c_green,c_green,false);
    }
}
//draw_text(x-200,y,string(dir));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>316,547</point>
    <point>320,320</point>
  </PhysicsShapePoints>
</object>
