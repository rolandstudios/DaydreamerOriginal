<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with par_HERO{instance_destroy();}
gamepad_set_vibration(global.playing_index, 0, 0); 
audio_play_sound(snd_GameOver,10,false);
//instance_activate_object(obj_debug);
instance_deactivate_object(master);

    
alpha_up=false;
image_alpha=1;
copystring_pos = 0;
copystring = "";
next_letter=true;

switch(global.platform)
{
case 0: promt = "Press Start"; break; //PC
case 1: promt = "Press A to Continue"; break; //XBOX
case 3: promt = "Press X to Continue"; break; //PS4
}

next_char=false;
alarm[0]=5;
cont=false;
space=0;

//LEADER BOARDS LOAD / INIT -------------------------------------------------------------------------------

if (global.platform==1) //XBOXONE
{
    
    //scr_XboxOne_Achievement(0); //SETUP STATS    
    
    if (global.signed_in) 
    {           
        achievement_load_leaderboard("RankedScore", 1, 15, achievement_filter_all_players);
    }
    got_score=false;
    grow=160;
    len=-1;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_object(master);
image_alpha=1;
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(global.playing_index, 0, 0);
image_alpha=1;
draw_set_alpha(1);
room_goto(rm_TitleScreen);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next_char=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if instance_exists(obj_QuitGame) //DELETE PAUSE POPUP MENU IF IT STILL EXSISTS
    {
        with (obj_QuitGame)instance_destroy();
    }
    


Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);
Key_Pause = keyboard_check_pressed(vk_enter);
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Left = gamepad_button_check(global.playing_index, gp_padl);
Key_Right = gamepad_button_check(global.playing_index, gp_padr);

/*    //OVERIDE
    if (global.platform==1) //XBOXONE
    {
        if (master.paused)
        {
        Key_Pause = false;
        Key_Up = false;
        Key_Down = false;
        Key_Jump = false;
        Key_Left = false;
        Key_Right = false;
        }
    }
*/

if (keyboard_check_pressed(vk_anykey)) Key_Jump=true;
if (Key_Pause) Key_Jump=true;

if(Key_Jump) &amp;&amp; (cont==false)
{
cont=true;
if (alarm[1]==-1) alarm[1]=50;

audio_stop_all();
audio_sound_pitch(snd_HitMetal,1.1);
audio_play_sound(snd_HitMetal, 10,false);
audio_sound_pitch(snd_droid_activate,1);
audio_play_sound(snd_droid_activate, 10,false);

if (global.rumble) gamepad_set_vibration(global.playing_index, 1, 1);
}

if (alarm[1]&lt;5) gamepad_set_vibration(global.playing_index, 0, 0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (global.platform==1) //XBOX LEADERBOARDS
{
if (global.signed_in)
{

    var ident = ds_map_find_value(async_load, "id");
    if ident == achievement_leaderboard_info
    {
       var lbid = ds_map_find_value(async_load,"leaderboardid");
       if lbid == "RankedScore" || lbid == "leaderboard1id"
       {
      
          len = ds_map_find_value(async_load,"numentries");
          
             for(var i = 0; i &lt; len; i++;)
             {
             steam_name[i]  = ds_map_find_value(async_load, "Player" + string(i));
             steam_rank[i]  = ds_map_find_value(async_load, "Rank" + string(i));
             steam_score[i] = ds_map_find_value(async_load, "Score" + string(i));
             }
          
          got_score=true; 
      }           
   
   }

}
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    
if (global.platform==1) //XBOX LEADERBOARDS
{
    if (got_score) &amp;&amp; (global.signed_in)
    {
        draw_set_alpha(1);
        if (grow&gt;180)
        {
        draw_set_color(c_yellow);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_font(fnt_Score);
        draw_text_transformed(640,100,"Leaderboard",.7,.7,0);
        
        draw_set_color(c_red);
        draw_set_halign(fa_left);
        draw_set_font(fnt_Orbitron);
        
        draw_text_transformed(440-100,150,"Rank ",1,1,0);
        draw_text_transformed(550-100,150,"Xbox ID",1,1,0);
        draw_text_transformed(750+100,150,"Score",1,1,0);
        
        draw_set_color(make_color_hsv(128,90,255));
        draw_set_alpha(.5);
        }
        
        if (cont==false)
        {
        if (grow&lt;480) grow+=20;
        if (grow&gt;480) grow=380;
        }
        else
        {
        if (grow&gt;180) grow-=20;
        if (grow&lt;180) grow=180;
        }
        
        if (grow&gt;180)
        draw_roundrect(400-100,160,900+100,grow,true);
        
        draw_set_alpha(1);
        draw_set_color(c_white);
        
        if (grow&gt;=380) &amp;&amp;  (cont==false)
        {
            for(i = 0; i &lt; len; i++;)
            {
            draw_text_transformed(450-100,180+20*i,string(steam_rank[i]),1,1,0);
            draw_text_transformed(550-100,180+20*i,string(steam_name[i]),1,1,0);
            draw_text_transformed(750+100,180+20*i,string(steam_score[i]),1,1,0);
            }
            
            for(i = len; i &lt; 15; i++;)
            {
            draw_text_transformed(450-100,180+20*i,string(i+1),1,1,0);
            draw_text_transformed(550-100,180+20*i,"--",1,1,0);
            draw_text_transformed(750+100,180+20*i,"--",1,1,0);
            }
        }
        
    }
}    
   

      
    
    if (next_char)
    {
    copystring_pos += 1;
    copystring = string_copy(promt,0,copystring_pos);
    letter=string_char_at(promt,copystring_pos);
    alarm[0]=1;
    next_char=false;
    }



draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_center);

draw_set_font(fnt_LowGun);
draw_set_alpha(image_alpha);
draw_set_blend_mode(bm_add);

if (cont==false)
{
    if(space&lt;2) space+=.25;
}
else
{
    if(space&gt;0)space-=.5;
}
if (cont==false) || (alarm[1]&gt;2)
{
if (round(space)==0) draw_text(view_xview+640,view_yview+550,  "["+string(copystring)+"]");
if (round(space)==1) draw_text(view_xview+640,view_yview+550, "[ "+string(copystring)+" ]");
if (round(space)==2) draw_text(view_xview+640,view_yview+550,"[  "+string(copystring)+"  ]");
}

if (alpha_up==false)
    {
        if (cont==false)
        image_alpha=image_alpha-.02;
        else
        image_alpha=image_alpha-.25;
        
        if (image_alpha&lt;=0)
            {alpha_up=true;}
    }

if (alpha_up==true)
    {
        if (cont==false)
        image_alpha=image_alpha+.02;
        else
        image_alpha=image_alpha+.25;
        
        if (image_alpha&gt;=1)
            {alpha_up=false;}
    }
        
draw_set_blend_mode(bm_normal);





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
