<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy_Body</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------

if(master.spr_Terror_Idle==0)
{
master.num+=1;
master.spr_Terror_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Terror_Idle.png",30,0,1,144,130);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Terror_Turn==0)
{
master.num+=1;
master.spr_Terror_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Terror_Turn.png",17,0,1,142,126);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Terror_Shoot==0)
{
master.num+=1;
master.spr_Terror_Shoot=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Terror_Shoot.png",21,0,1,160,151);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}
sprite_index=global.sprite[master.spr_Terror_Idle];

//scale = image_xscale;
over_Tree=true;
on_Tree=false;

if (image_yscale==1)
{
scale=random_range(1,1.2);
image_xscale=scale;
image_yscale=scale;
}
else
scale=image_yscale;

hp=55*scale;
init_hp=hp;
rest=false;
activate=false;
target_x=x;
target_y=y;
angle=0;
angle_inc=0;
target_angle=0;


west_east = 0;
setspeed = 3 + random_range(1,5);
hsp=0;
vsp=0;
type=1;
amp_A=0;
amp_B=0;

image_speed=.5*global.game_speed;
damage=4*scale*global.difficulty;
moveChoose=true;
moveChoice=1;
acel=0;
fire=false;
kickback=0;
color=c_white;
acel_inc=.1;
ghost=false;
ghost_transition=false;
ghost_scale=1;
alarm[3]=200;
under_tree=false;

        last_x_A=x;
        last_y_A=y;
         
        last_x_B=x;
        last_y_B=y;
           
        last_x_C=x;
        last_y_C=y;
        
        last_x_D=x;
        last_y_D=y;
        
        last_x_E=x;
        last_y_E=y;
        
        last_x_F=x;
        last_y_F=y;
        
        last_x_G=x;
        last_y_G=y;
        
        last_x_H=x;
        last_y_H=y;
        
        last_x_I=x;
        last_y_I=y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) global.Points+=irandom_range(5,10);

obj_camera_offset.target_Col_s=0;

with instance_create(x,y,obj_StarBurst)
            {
            image_xscale=3*other.image_xscale;
            image_yscale=3*other.image_yscale;
            image_angle=irandom_range(1,360);
            depth=-2;
            }
            
audio_sound_pitch(snd_SIN_Scream,random_range(1.1,1.2)*global.game_speed);
audio_play_sound(snd_SIN_Scream,10,false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !place_meeting(x,y,par_wall)
{
    if (ghost==true)
    {
        ghost=false;
    }
else
{
    ghost=true;
}
    ghost_transition=true;
}
alarm[3]=200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kickback=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>color=c_white;
audio_play_sound(snd_EnemyHit_A,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if (hp&lt;=0)
{
with instance_create(x,y,obj_BloodSplash)
{
image_xscale=2*other.image_yscale;
image_yscale=2*other.image_yscale;
color=c_aqua;
lurker=true;
}
instance_destroy();
}

if (par_HERO.x-1000 &lt; bbox_right) &amp;&amp; (par_HERO.x + 1000 &gt; bbox_left) 
{
    if (par_HERO.y-1000 &lt;y) &amp;&amp; (par_HERO.y + 1000 &gt; y) 
    {
        if (!activate) {rest=false;}
        activate=true;                         
    }
        obj_camera_offset.target_Col_h=120;
        obj_camera_offset.target_Col_s=255;
        color_track=true;
        
} //If in view - Activate 
else
{
        obj_camera_offset.target_Col_s=0;
}

if (!activate)
{
instance_deactivate_object(self);
}

if (activate)
{
if (ghost) type=2; else type=1;
//check direction
if (par_HERO.x &gt; x) 
{
 

 if(moveChoice&lt;4)
 {
 if(west_east==0) 
        {  
            moveChoose=false;
            moveChoice=7;
            audio_sound_pitch(snd_SIN_Whoosh,random_range(.8,1.2)*global.game_speed);
            if !audio_is_playing(snd_SIN_Whoosh) audio_play_sound(snd_SIN_Whoosh,10,false);
            sprite_index = global.sprite[master.spr_Terror_Turn];
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[1]=200/global.game_speed;
                
         //hsp=0;
         }
         else
         {
         west_east = 1;
         image_xscale = scale;
         if (moveChoice!=3)&amp;&amp;(moveChoice!=7)  hsp = 14;
         }
  }
}


if (par_HERO.x &lt; x) 
{
    
    if(moveChoice&lt;4)
    {
        if(west_east == 1)
        {
            moveChoose=false;
            moveChoice=7;
            audio_sound_pitch(snd_SIN_Whoosh,random_range(.8,1.2)*global.game_speed);
             if !audio_is_playing(snd_SIN_Whoosh)audio_play_sound(snd_SIN_Whoosh,10,false);
            sprite_index = global.sprite[master.spr_Terror_Turn];
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[1]=200/global.game_speed;
            //hsp=0;
         }
         else
         {
            west_east = 0;
            image_xscale = -scale;
            if (moveChoice!=3)&amp;&amp;(moveChoice!=7) hsp= - 14;
         }
  }
}



    //Make Move Choice
    if(moveChoose)
    {
        moveChoice=irandom_range(1,5);
        
        if (ghost) &amp;&amp; (moveChoice==3)
        {
         while (moveChoice==3) moveChoice=irandom_range(1,5);
        }
        
        alarm[1]=irandom_range(90,150)/global.game_speed;
        moveChoose=false;
        
        //acel=.25;
        float_up=true;
        float_factor=0; 
        image_angle=0;
        angle=0;
                
        
        switch(moveChoice)
        {
        case 1:
            audio_sound_pitch(snd_SIN_Moan,random_range(.8,1.2)*global.game_speed);
             if !audio_is_playing(snd_SIN_Moan)audio_play_sound(snd_SIN_Moan,10,false);
        break;
        
        case 3:         
        sprite_index=global.sprite[master.spr_Terror_Shoot];
        image_index=0;
        target_x=par_HERO.x;
        target_y=par_HERO.y;
        amp_A=0;
        amp_B=0;
        
        if (target_x&lt;x) target_x=x+abs(target_x-x);
        
        target_angle = point_direction(x, y, target_x, target_y);      
        
        if (target_angle&gt;=0) &amp;&amp; (target_angle&lt;=90) angle=0;
        
        if (target_angle&gt;=270) &amp;&amp; (target_angle&lt;=360) angle=360;
        
        target_x=par_HERO.x;
            //if (angle&lt;-75) angle=-75;
            //if (angle&gt;75) angle=75;                
        break;
        
            case 4:
            if (y&lt;par_HERO.y) moveChoice=5;
            v_vsp=0;
            alarm[1]=irandom_range(40,50)/global.game_speed;
            break;
            
            case 5:
            //Dash Away
            v_vsp=0;
            alarm[1]=irandom_range(50,100)/global.game_speed;
            break;
        
        }//END Switch   
    }//END moveChoose

//Make Move
switch(moveChoice)
{        
        case 1: //FOLLOW FAST
        sprite_index=global.sprite[master.spr_Terror_Idle];
        image_speed=.5*global.game_speed;
        
        if (acel&gt;=1)acel_inc=-.01;
        if (acel&lt;=0)acel_inc=.01;
        acel=acel+acel_inc;
         
        vsp=vsp*acel;
        hsp=hsp*acel;     
        break;
       
        case 2: //FOLLOW SLOW
        sprite_index=global.sprite[master.spr_Terror_Idle];
        image_speed=.5*global.game_speed;
        hsp=hsp/2;        
        
        if(float_up) float_factor=float_factor+.25;
        if(!float_up) float_factor=float_factor-.25;
        
        if(float_factor&gt;=3*scale) float_up=false;
        if(float_factor&lt;=-3*scale) float_up=true;
        
        vsp = float_factor;   
        break;
        
        case 3: //SHOOT
        sprite_index=global.sprite[master.spr_Terror_Shoot];
        image_speed=.5*global.game_speed;

        hsp*=.9;
        vsp*=.9;                 
                
         if (image_index&lt;16)
         {
         if (target_angle&gt;0) &amp;&amp; (target_angle&lt;90)
         {
            if (target_angle&gt;angle) angle+=amp_A;
            if (amp_A&lt;8) amp_A+=.1*global.game_speed;
         }
         
         if (target_angle&gt;270) &amp;&amp; (target_angle&lt;360)
         {
            if (target_angle&lt;angle) angle-=amp_A; 
            if (amp_A&lt;8) amp_A+=.1*global.game_speed;          
         }
         }
         else
         {
          if (target_angle&gt;0) &amp;&amp; (target_angle&lt;90)
         {
            if (0&lt;angle) angle-=amp_B;
            if (amp_B&lt;10) amp_B+=.1*global.game_speed;;
         }
         
         if (target_angle&gt;270) &amp;&amp; (target_angle&lt;360)
         {
            if (360&gt;angle) angle+=amp_B;
            if (amp_B&lt;10) amp_B+=.1*global.game_speed;             
         }
         }
        
        image_angle=angle;
        
        
        if (image_index==12) ||  (image_index==16)
        {
       // if (image_index==12) instance_create(x,y,obj_Aura_Ripple_stat_short);               
        target = point_direction(x, y, target_x, target_y); 
        //CONSTRAINTS 
                      
        if (target&gt;75) &amp;&amp; (target&lt;90) target=75;
        if (target&gt;90) &amp;&amp; (target&lt;105) target=105;
        if (target&gt;255) &amp;&amp; (target&lt;250) target=255;
        if (target&gt;270) &amp;&amp; (target&lt;285) target=285;
                                                    
            audio_sound_pitch(snd_monster13_Zap_A,random_range(.8,1.2)*global.game_speed);
            audio_play_sound(snd_monster13_Zap_A,10,false);
        if (image_index==12)
        {
         x1 = lengthdir_x(110*image_yscale, target);
         y1 = lengthdir_y(110*image_yscale, target);
             
        with instance_create(x+x1,y+y1,obj_Terror_Shot)
            {
                image_xscale=3*other.scale;
                image_yscale=2*other.scale; 
                              
                image_angle=other.target;
                direction=other.target;
                speed=25;
                depth=other.depth-1;
            }
        }
        
        if (image_index==16)
        {    
        x1 = lengthdir_x(120*image_yscale, target);
        y1 = lengthdir_y(120*image_yscale, target);
         
        with instance_create(x+x1,y+y1,obj_Terror_Shot)
            {
                image_xscale=3*.9*other.scale;
                image_yscale=2*.9*other.scale; 
                              
                image_angle=other.target;
                direction=other.target;
                speed=25;
                depth=other.depth-1;
            }
        }
        
        }
        
        
        if (image_index&gt;=sprite_get_number(sprite_index)-1) moveChoose=true; 
        break;
        
        case 4: //FOLLOW SLOW
        sprite_index=global.sprite[master.spr_Terror_Idle];
        image_speed=.5*global.game_speed;
        hsp=hsp/4;        
        if (par_HERO.y-250&lt;y) v_vsp -= .2; else v_vsp += .5; //was -=.4 
        vsp=v_vsp;   
        break;
        
        case 5: //DASH AWAY
        sprite_index=global.sprite[master.spr_Terror_Idle];
        image_speed=.5*global.game_speed;
        hsp=20*sign(image_xscale);
        if (acel&lt;1) acel+=.01;
        hsp=hsp*acel;
        vsp=0;   
        break;
        
        case 7: //Turn
        image_angle=0;
        
        sprite_index=global.sprite[master.spr_Terror_Turn]; 
        image_speed=.5*global.game_speed;
        hsp*=.9;
        vsp*=.9;
        
        //hsp=0;
        //vsp=0;

if (image_index&gt;=sprite_get_number(sprite_index)-1) 
    {
    moveChoose=true;      
    if(west_east == 0)
        {
        west_east=1;
        image_xscale=-(image_xscale);
        sprite_index =  sprite_index=global.sprite[master.spr_Terror_Idle]; 
        //x=x+(scale*173); //TURN OFFSET
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[1]=200/global.game_speed;
        }
        else
        {
        west_east=0;
        image_xscale=-(image_xscale);
       sprite_index =  sprite_index=global.sprite[master.spr_Terror_Idle]; 
        //x=x-(scale*173); //TURN OFFSET
            image_speed=.5*global.game_speed;
            image_index=0;
            alarm[1]=200/global.game_speed;
        }
        
        last_x_A=x;
        last_y_A=y;
         
        last_x_B=x;
        last_y_B=y;
           
        last_x_C=x;
        last_y_C=y;
        
        last_x_D=x;
        last_y_D=y;
        
        last_x_E=x;
        last_y_E=y;
        
        last_x_F=x;
        last_y_F=y;
        
        last_x_G=x;
        last_y_G=y;
        
        last_x_H=x;
        last_y_H=y;
        
        last_x_I=x;
        last_y_I=y
    }
    
break;     
}//END SWITCH
          
        
        last_x_I=last_x_H;
        last_y_I=last_y_H;
        
        last_x_H=last_x_G;
        last_y_H=last_y_G;
        
        last_x_G=last_x_F;
        last_y_G=last_y_F;
        
        last_x_F=last_x_E;
        last_y_F=last_y_E;
        
        last_x_E=last_x_D;
        last_y_E=last_y_D;
        
        last_x_D=last_x_C;
        last_y_D=last_y_C;
        
        last_x_C=last_x_B;
        last_y_C=last_y_B;
        
        last_x_B=last_x_A;
        last_y_B=last_y_A;
                
        last_x_A=x;
        last_y_A=y;
        
//Confirm Movement 


if (kickback!=0) //KICK BACK
{
    hsp=kickback;
    kickback = kickback - sign(kickback);
    if (par_HERO.y&gt;y)
        vsp=-2; else vsp=2;
}

x=x+hsp*global.game_speed;

//Dont fly to low
if(y&gt;room_height-300)
    {
    if (vsp&gt;0) vsp=0;
    }

y=y+vsp*global.game_speed;

}//END ACTIVATE




//Tree Weave
if(ghost)
{
    if (ghost_transition)
    {
    depth =-35;
    if (image_alpha&gt;0)
        { 
        image_alpha-=.025;
        }
        else
        {
        ghost_transition=false;
        }
    }
    else
    {
    depth=12;
    if (image_alpha&lt;.25) image_alpha+=.025;
    }
    
damage=0;  
if (ghost_scale&gt;.7) ghost_scale-=.01;
}
else
{
    if (ghost_transition)
    {
    depth =12;
    if (image_alpha&gt;0)
        { 
        image_alpha-=.025;
        }
        else
        {
        ghost_transition=false;
        }
    }
    else
    {
    depth=-35
    if (image_alpha&lt;1) image_alpha+=.025;
    }

    damage=4*scale*global.difficulty;
    if (ghost_scale&lt;1) ghost_scale+=.01;
}


}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (!over_Tree)
var shoot
shoot=instance_place(x,y,par_Shoot)
if (shoot==noone)
shoot=instance_nearest(x,y,par_Shoot)
if (shoot!=noone)
{
if (image_alpha==1)
{
if place_meeting(x+hsp,y+vsp,obj_HERO_Melee)
    {
        if (obj_HERO_Melee.damage&gt;0)
        {
         
        if (alarm[2] &lt;=-1) alarm[2]=8;
        if (par_HERO.x&gt;x)
        kickback=-20+par_HERO.hsp; else kickback=20+par_HERO.hsp;
        
        //vsp=-5;
        hp=hp-obj_HERO_Melee.damage;
        
        if (alarm[0] &lt;=-1) 
        {   
        color = c_red;
        alarm[0]=4;
        }
        
        }
    }
    else
    {
        hp=hp-shoot.damage;   
    
        if (alarm[0] &lt;=-1) 
        {   
        color = c_red;
        alarm[0]=4; 
        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
   //if (depth==12) color=c_red;
   //if (depth=-35) color=c_yellow;
   
   if (sprite_index!=global.sprite[master.spr_Terror_Turn])
    {
    draw_sprite_ext(sprite_index, image_index-9,last_x_I, last_y_I, image_xscale*.5*ghost_scale, image_yscale*.5*ghost_scale, image_angle*sign(image_xscale), color, .1*image_alpha );
    draw_sprite_ext(sprite_index, image_index-7,last_x_G, last_y_G, image_xscale*.6*ghost_scale, image_yscale*.6*ghost_scale, image_angle*sign(image_xscale), color, .2*image_alpha );
    draw_sprite_ext(sprite_index, image_index-5,last_x_E, last_y_E, image_xscale*.7*ghost_scale, image_yscale*.7*ghost_scale, image_angle*sign(image_xscale), color, .3*image_alpha );
    draw_sprite_ext(sprite_index, image_index-3,last_x_C, last_y_C, image_xscale*.8*ghost_scale, image_yscale*.8*ghost_scale, image_angle*sign(image_xscale), color, .4*image_alpha );
    draw_sprite_ext(sprite_index, image_index-1,last_x_A, last_y_A, image_xscale*.9*ghost_scale, image_yscale*.9*ghost_scale, image_angle*sign(image_xscale), color, .5*image_alpha );
    }

draw_sprite_ext(sprite_index, image_index,x, y, image_xscale*ghost_scale, image_yscale*ghost_scale, image_angle*sign(image_xscale), color, image_alpha );


if (global.enemy_hp)
    {
    draw_rectangle_color(x,bbox_top-25,x+(init_hp),bbox_top-22,c_red,c_red,c_red,c_red,false);
    draw_rectangle_color(x,bbox_top-25,x+(hp),bbox_top-22,c_green,c_green,c_green,c_green,false);
    }
}

/*
draw_set_color(c_white);
draw_text(x,y-100,"on_Tree: "    + string(on_Tree));
draw_text(x,y-80,"over_Tree: "    + string(over_Tree));
draw_text(x,y-80,"image_alpha: "    + string(image_alpha));
*/
//draw_line(x,y,target_x,target_y);

/*
draw_text(x+200*image_xscale,y,"target angle: "    + string(target_angle));
draw_text(x+200*image_xscale,y+15,"angle: " + string(angle));
//draw_text(x+200*image_xscale,y+30,"angle inc: " + string(angle_inc));
draw_text(x+200*image_xscale,y+45,"image angle: " + string(image_angle));



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>236,117</point>
    <point>165,165</point>
  </PhysicsShapePoints>
</object>
