<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>-1</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PLATFORMS
//PC = 0
//XBOXONE = 1

//PS4 ASYNC SAVE = 3;
//NO SAVE CONSOLE= 4;

switch(os_type)
{
case os_windows: global.platform=0; break;
case os_xboxone: global.platform=1; break;
case os_ps4:     global.platform=3; break;
}

phase=0;
global.Online=false;

//ASYNC SAVE VARIABLES ------------
global.SaveFile="savefile.sav"; //PS4 SAVE FILE NAME
global.load_config=false;       //LOADED CONFIG AT START OF GAME
global.saving=false;            //BUFFER IS SAVING
global.loading=false;           //BUFFER IS LOADING
global.saveid=-1;               //SAVE BUFFER ID
global.loadid=-1;               //LOAD BUFFER ID
global.load_type=1;             //LOADING BETWEEN CONFIG / SAVE / SAVESELECT PREVIEW
global.load_room=false;         //ENABLE LOAD CHECKPOINT ROOM WHEN LOADING UP SAVE FROM MENU

if (global.platform==0) //PC STEAM
{
    global.playing_index=0;
}

if (global.platform==1) //XBOX
{
global.game_xb_user=global.xb_user;
activating_user = global.xb_user;
activating_user_pad = global.playing_index;
activating_user_name = xboxone_gamedisplayname_for_user(global.xb_user);
can_check_controller=true;
lost_connection_prompt=false;

global.spr_gamerpicture = xboxone_sprite_add_from_gamerpicture(global.xb_user, 64, 0, 0);
global.display_name = xboxone_gamedisplayname_for_user(global.xb_user); 

if (xboxone_user_is_signed_in(global.xb_user))
    global.signed_in=true;
    else
    global.signed_in=false;
    
scr_XboxOne_Achievement(0); //RICH PRESENCE

showing_account_picker = false; 
constrain_count=0; 
}

paused=false;
paused_vol=0;

paused_confirm=false;   
no_controller=false;
logout=false;
progress_lost=false;
restart=false;



if (global.platform==3) //PS4
{
global.UserName="no user";  //PS4 SIGNIN NAME
//global.playing_index=0;
alarm[9] = room_speed;
last_ps_eth_counter = -1;
}

//SET DEFAULT GAME CONFIG.INI VARIABLES -----------------------------------------------
           
    //SAVED GLOBALS
    global.blur_fx=0;       //BLOOM FX [0-3]
    global.vol=1;           //VOLUME VALUE
    global.mus=1;           //MUSIC VOLUME VALUME
    global.dof=false;       //DEPTH OF FIELD [NOT USED]
    global.difficulty=.75;  //DIFFICULTY
    global.vsync=true;      //VSYNC
    global.ctlstyle=1;      //GAME PAD CONFIGURATION [NOT USED]
    global.auto_pickup=false;   //AUTO PICK UP A WEAPON
    global.auto_swap=true;      //AUTO SWAP TO NEXT WEAPON WHEN AMMO IS OUT
    global.rumble=true;         //ENABLE RUMBLE PAK
    global.shock_fx = 1;         //SHOCK WAVE DISPLACEMENT SHADER FX
    
    //KEYBOARD BINDS
    global.kb_Left = 37;
    global.kb_Right = 39;
    global.kb_Up = 38;
    global.kb_Down = 40;
    global.kb_Jump = 32;
    global.kb_Melee = 90;
    global.kb_Fire = 162;
    global.kb_Weapon = 160;
    global.kb_Pause = 13;
    global.kb_Select = 69;
    global.kb_Left_Shoulder = 67;
    global.kb_Right_Shoulder = 88;
    global.kb_Left_Trigger = 81;
    global.kb_Right_Trigger = 87;
    global.kb_Pet_L = 219;
    global.kb_Pet_R = 221;
    
    //GAMEPAD BINDS
    global.gp_D_Left     = gp_padl;
    global.gp_D_Right    = gp_padr;
    global.gp_D_Up       = gp_padu;
    global.gp_D_Down     = gp_padd;
    global.gp_Jump     = gp_face1;
    global.gp_Melee    = gp_face3;
    global.gp_Fire     = gp_face2;
    global.gp_Weapon   = gp_face4;
    global.gp_Pause    = gp_start;
    global.gp_Select   = gp_select;
    global.gp_Left_Shoulder  =  gp_shoulderl;
    global.gp_Right_Shoulder =  gp_shoulderr;
    global.gp_Left_Trigger   =  gp_shoulderlb;
    global.gp_Right_Trigger  =  gp_shoulderrb;
    global.gp_Pet_L  =  gp_stickl;
    global.gp_Pet_R  =  gp_stickr;
     

//CREATE BLANK FOR ALL SAVE SLOTS -----------------------------------------

if (global.platform==3) //PS4 ONLY
{
var sl;
for (sl=1;sl&lt;9;sl+=1)
{
    global.SaveSlot_date[sl]="- EMPTY -";  //DATE
    global.SaveSlot_name[sl]="";             //HERO NAME
    global.SaveSlot_SavedRoom[sl]  =  -1;    //CHECKPOINT ROOM ID
    global.SaveSlot_SavedHP[sl]=100;         //Health           
    global.SaveSlot_SavedMoney[sl]=0;        //Money
                                 
    for(var a=0; a&lt;=2; a+=1) //Set Inventory
    {
        for (b=0;b&lt;=3;b+=1)
        {
            switch(sl)
            {
            case 1: global.SaveSlot_Inventory_1[a,b]=0; break; //empty slot
            case 2: global.SaveSlot_Inventory_2[a,b]=0; break; //empty slot
            case 3: global.SaveSlot_Inventory_3[a,b]=0; break; //empty slot
            case 4: global.SaveSlot_Inventory_4[a,b]=0; break; //empty slot
            case 5: global.SaveSlot_Inventory_5[a,b]=0; break; //empty slot
            case 6: global.SaveSlot_Inventory_6[a,b]=0; break; //empty slot
            case 7: global.SaveSlot_Inventory_7[a,b]=0; break; //empty slot
            case 8: global.SaveSlot_Inventory_8[a,b]=0; break; //empty slot
            }
        }
    } 
       
    global.SaveSlot_weapon_A[sl] = 0; //WEAPON SLOT 1 ID
    global.SaveSlot_weapon_B[sl] = 0; //WEAPON SLOT 2 ID
    global.SaveSlot_weapon_C[sl] = 0; //WEAPON SLOT 3 ID
    global.SaveSlot_weapon_D[sl] = 0; //WEAPON SLOT 4 ID
        
    global.SaveSlot_pets[sl,0]=1; //Turtle
    global.SaveSlot_pets[sl,1]=0; //Pup
    global.SaveSlot_pets[sl,2]=0; //Cat
    global.SaveSlot_pets[sl,3]=0; //Weasel
    global.SaveSlot_pets[sl,4]=0; //Duck
    
    global.SaveSlot_weapon_A_energy[sl]=100; //WEAPON SLOT 1 AMMO
    global.SaveSlot_weapon_B_energy[sl]=100; //WEAPON SLOT 2 AMMO
    global.SaveSlot_weapon_C_energy[sl]=100; //WEAPON SLOT 3 AMMO
    global.SaveSlot_weapon_D_energy[sl]=100; //WEAPON SLOT 4 AMMO
    
    global.SaveSlot_Hours[sl]=0;    //Speed Run Time
    global.SaveSlot_Minutes[sl]=0;  //Speed Run Time
    global.SaveSlot_Seconds[sl]=0;  //Speed Run Time

    global.SaveSlot_ranked_Minutes[sl]=10;  //Speed Run Time
    global.SaveSlot_ranked_Seconds[sl]=0;  //Speed Run Time
    
    global.SaveSlot_Points[sl]=0;   //SCORE
    global.SaveSlot_HERO_type[sl]=1; //ADULT / CHILD HERO
    
    global.SaveSlot_World[sl]=0;  //SET WORLD FOR WORLD MAP
    
        for (a=1;a&lt;=14;a+=1) //BOSS SCORE
        {  
            for (b=1;b&lt;=3;b+=1)
            {
                switch(sl)
                {
                case 1: global.SaveSlot_Boss_Score_1[a,b]=-1; break; //NOT BEATEN DEFAULT SCORE
                case 2: global.SaveSlot_Boss_Score_2[a,b]=-1; break; //NOT BEATEN DEFAULT SCORE
                case 3: global.SaveSlot_Boss_Score_3[a,b]=-1; break; //NOT BEATEN DEFAULT SCORE
                case 4: global.SaveSlot_Boss_Score_4[a,b]=-1; break; //NOT BEATEN DEFAULT SCORE
                case 5: global.SaveSlot_Boss_Score_5[a,b]=-1; break; //NOT BEATEN DEFAULT SCORE
                case 6: global.SaveSlot_Boss_Score_6[a,b]=-1; break; //NOT BEATEN DEFAULT SCORE
                case 7: global.SaveSlot_Boss_Score_7[a,b]=-1; break; //NOT BEATEN DEFAULT SCORE
                case 8: global.SaveSlot_Boss_Score_8[a,b]=-1; break; //NOT BEATEN DEFAULT SCORE
                }
            }
        }
        
        //WORLD PROGRESS
        for (c=0;c&lt;15;c+=1)
        {
            global.SaveSlot_world_clear[sl,c]=0; //WHICH WORLDS HAVE BEEN BEATEN
        }
        
     global.SaveSlot_difficulty[sl]=.75;
     global.SaveSlot_ranked[sl]=false;
     global.SaveSlot_worldmap[sl]=false;
     
}
}

//PLAYER GLOBAL DEFAULTS
//------------------------
global.date="- EMPTY -";  //DATE
global.name="";             //HERO NAME
global.SavedRoom  =  -1;    //CHECKPOINT ROOM ID
global.SavedHP=100;         //Health           
global.SavedMoney=0;        //Money

                            
for(var a=0; a&lt;=2; a+=1) //Set Inventory
{
    for (b=0;b&lt;=3;b+=1)
    {
        global.Inventory[a,b]=0; //empty slot
    }
} 
   
global.weapon_A = 0; //WEAPON SLOT 1 ID
global.weapon_B = 0; //WEAPON SLOT 2 ID
global.weapon_C = 0; //WEAPON SLOT 3 ID
global.weapon_D = 0; //WEAPON SLOT 4 ID
    
global.pets[0]=1; //Turtle
global.pets[1]=0; //Pup
global.pets[2]=0; //Cat
global.pets[3]=0; //Weasel
global.pets[4]=0; //Duck

global.weapon_A_energy=100; //WEAPON SLOT 1 AMMO
global.weapon_B_energy=100; //WEAPON SLOT 2 AMMO
global.weapon_C_energy=100; //WEAPON SLOT 3 AMMO
global.weapon_D_energy=100; //WEAPON SLOT 4 AMMO

global.Hours=0;    //Speed Run Time
global.Minutes=0;  //Speed Run Time    
global.Seconds=0;  //Speed Run Time

global.ranked_Minutes=10;  //Speed Run Time    
global.ranked_Seconds=0;  //Speed Run Time

global.Points=0;   //SCORE
global.HERO_type=1; //ADULT / CHILD HERO

global.World=0;  //SET WORLD FOR WORLD MAP

for (a=1;a&lt;=14;a+=1) //BOSS SCORE
{  
    for (b=1;b&lt;=3;b+=1)
    {
        global.Boss_Score[a,b]=-1; //NOT BEATEN DEFAULT SCORE
    }
}
//WORLD PROGRESS
for (c=0;c&lt;15;c+=1)
{
    global.world_clear[c]=0; //WHICH WORLDS HAVE BEEN BEATEN
}

global.ranked=false;  
global.worldmap=false;
   
//DEFAULT GAME VARIABLES -------------------------   
global.slot=1;
global.file=0;         
global.CutScene=false;              //Freeze Controls 
global.aa=0;                        //AnitAliasing (unused)
global.alwaysrun=true;              //Walk to Run Trigger (unused)
global.fullhealth=false;            //Grant FUll health during debug
global.xboxcontroller = true;       //Keybaord Gamepad swap (unused)
global.debug=false;                 //Debug mode
global.game_speed=1;                //Bullet Time Gamespeed
global.HERO_type=1;                 //SWAP BETWEEN DIFFERENT HERO TYPES (Young and Old)
global.creation = true;             //Tube Port into Level Start
global.gamestart=false;             //Enables Master Memory Flushing once game has started
global.newgame=false;               //Menu option
global.stageselect=false;           //Menu option
global.Trippy=false;                //Enables Wavy Shader 
global.promt="";                    //Global Text Dialog String
global.theme=0;                     //World Start theme (music ambience etc..)
global.enemy_hp=true;               //SHOW HUD of enemy health
global.World=1;                     //CURRENT WORLD PLAYER IS ON [0-14]
global.current_world=0;             //CURRENT WORLD PLAYER IS ON [0-14]   
global.manuel_draw=false;           //DRAW BACKGROUND AS REGUALR OBJECTS 
global.color_blend=false;           //GLOBLA IMAGE BLEND OVERIDE
global.Awakened=true;               //TITLE VOICE
global.Parallax=true;               //Horizontal Parallax
global.VParallax=false;             //Vertical Parallax
global.creation=true;               //Tube in at level start


//STEAM API INIT VARS
if (global.platform==0)
{
    global.steam_api = false;
    if steam_initialised()
    {
    if steam_stats_ready() &amp;&amp; steam_is_overlay_enabled()
       {
       global.steamapi = true;
       }
    }
} 
//------------------------

//PS4 INIT VARS
if (global.platform==3)
{
   // scr_PS4_Trophies(0); //STARTUP INIT
}

//LOAD CONFIG ---------------------------

if (global.platform=0) || (global.platform==1) //PC AND XBOX ONLY 
{
    scr_Load_Config();
}

if (global.platform==3) //PS4 ONLY
{
   scr_loadgame();         
}



//FINALIZE MUSIC AND COLOR CORRECTION ------------------------------------------------

global.brightness_amount = shader_get_uniform(shd_bright_contrast,"brightness_amount");
global.contrast_amount = shader_get_uniform(shd_bright_contrast,"contrast_amount");
global.b=0;
global.c=0;
   
//AMBIENT SOUNDS

audio_sound_gain(amb_Factory, .4 , 0);
audio_sound_gain(amb_Caves, .7 , 0);
audio_sound_gain(amb_Magical, .7 , 0);
audio_sound_gain(amb_Psy, .55 , 0);
audio_sound_gain(amb_windstorm, 1 , 0);
audio_sound_gain(amb_birds, .5 , 0);
 
//END INITIALIZE GAME -----------------------------------------------------------------------------------------------------------------------------------------
//END INITIALIZE GAME -----------------------------------------------------------------------------------------------------------------------------------------
//END INITIALIZE GAME -----------------------------------------------------------------------------------------------------------------------------------------
          
skip_flush=false;
background_flush=false;
sprite_flush=false;
texture_flush=false;
full_flush=false;

flushed=false;

step_x=1;
step_y=1;



draw_clock=true;
draw_bullet_time=true;

num=0; //Sprite Counter
b_num=0; //Background Counter

max_num=0; //max number of sprites loaded at time

flush=false;
alarm[0]=120;

target_speed=1; //Target Speed for Bullet time [works with global.gamespeed]

a=10;
b=10;
c=10;
d=10;
e=10;
f=10;
g=10;
h=10;
i=10;
j=10;

clock_text="[slow down]";


//------------------------------------------------------------------------------//
//---------------- BACKGROUND ID INIT ------------------------------------------//
//------------------------------------------------------------------------------//

bg_Cloud_Layer_B_half=0;

bg_bluesky=0;
bg_Grassy_Far_Far=0;
bg_Grassy_Far=0;
bg_Grassy_Mid=0;
bg_Grassy_Near=0;

bg_coolsky_A_tile=0;
bg_SkyCity_very_far=0;
bg_SkyCity_far=0;
bg_SkyCity_mid=0;
bg_SkyCity_near=0;

bg_SkyCity_very_far_dk=0;
bg_SkyCity_far_dk=0;
bg_SkyCity_mid_dk=0;
bg_SkyCity_near_dk=0;

bg_Techno_Tower_A=0;

bg_Tunnel_C=0;
bg_Tunnel_B=0;
bg_Tunnel_A=0;

bg_Tunnel_C_far=0;
bg_Cave_A=0;

bg_coolsky_A=0;
bg_Techno_Tower_B_bg_far=0;
bg_Techno_Tower_B_bg=0;
bg_Eggs_A1=0;
bg_Techno_Tower_B=0;

bg_stormy_warm=0;
bg_Mountains=0;
bg_Valley_Buildings=0;
bg_Valley_Near_Buildings=0;

bg_GreenForrest=0;

TrollQueenSky=0;
TrollQueen_Very_Far=0;
TrollQueen_Far_Far=0;
TrollQueen_Far=0;
TrollQueen_Mid=0;

bg_MushroomForrest_sky=0;
bg_MushroomForrest_BG_C=0;
bg_MushroomForrest_BG_B=0;
bg_MushroomForrest_BG_A=0;

DarkCORE_FAR=0;
DarkCORE_FG01=0;

//------------------------------------------------------------------------------//
//------------------- SPRITE ID INIT -------------------------------------------//
//------------------------------------------------------------------------------//

spr_Debris_Cloud=0;

//ScreenShots
spr_sh_01=0;
spr_sh_02=0;
spr_sh_03=0;
spr_sh_04=0;
spr_sh_05=0;
spr_sh_06=0;
spr_sh_07=0;
spr_sh_08=0;
spr_sh_09=0;
spr_sh_10=0;
spr_sh_11=0;
spr_sh_12=0;
spr_sh_13=0;
spr_sh_14=0;
spr_sh_15=0;
spr_sh_16=0;
spr_sh_17=0;
spr_sh_18=0;
spr_sh_19=0;
spr_sh_20=0;
spr_sh_21=0;
spr_sh_22=0;
spr_sh_23=0;
spr_sh_24=0;
spr_sh_25=0;
spr_sh_26=0;
spr_sh_27=0;
spr_sh_28=0;
spr_sh_29=0;
spr_sh_30=0;
spr_sh_31=0;
spr_sh_32=0;
spr_sh_33=0;


//END GAME
SWAP_spr_EndGame_Spire=0;
SWAP_spr_EndGame_Mountains=0;
spr_EndGame_Sky=0;

//FrameDrop
spr_FrameDrop_Glass=0;
spr_FrameDrop_Tech=0;

//Brother
spr_Brother_Idle=0;
spr_Brother_LookAt=0;

//TITLE MENU
spr_Atlus_Logo=0;
spr_Horizon=0;
RS_LOGO=0;
Menu_Arrow=0;
spr_Title_Template=0;
spr_Olivia_Title=0;
spr_Daydreamer_LOGO=0;
spr_Awakened=0;

spr_Cover_Olivia=0;
spr_Cover_Collector=0;
spr_Cover_BG=0;
spr_Cover_top=0;

//GameOver 
//spr_GameOver_Tag=0;

//GamePad Config
SWAP_spr_gamepad_0 =0;
SWAP_spr_gamepad_1 =0;

spr_Menu_BG_still = 0;

//ENVIRONMENT 
//Tech Islands
SWAP_spr_TechIsland_A =0;
SWAP_spr_TechIsland_B =0;
SWAP_spr_TechIsland_C =0;
SWAP_spr_TechIsland_D =0;
SWAP_spr_TechIsland_E =0;
SWAP_spr_TechIsland_F =0;

//SPACE
spr_nebula=0;
bg_Earth=0;;



//ClassRoom
SWAP_spr_Olivia_Sit=0;
SWAP_spr_Classroom=0;
SWAP_spr_Classroom_FG_A=0;
SWAP_spr_Classroom_FG_B=0;
SWAP_spr_Classroom_FG_C=0;
SWAP_spr_Classroom_FG_D=0;
SWAP_spr_Classroom_FG_E=0;
SWAP_spr_GateKeeper=0;
SWAP_spr_GateKeeper_white=0;

//House
SWAP_spr_House_Boxes=0;
SWAP_spr_House_TV=0;
SWAP_spr_Washer=0;
SWAP_spr_Fan=0;
SWAP_spr_Laundry_A=0;
SWAP_spr_Laundry_B=0;
SWAP_spr_Laundry_C=0;
SWAP_spr_Laundry_D=0;
SWAP_spr_Laundry_E=0;
SWAP_spr_Olivia_House_Door=0;
SWAP_spr_Olivia_House=0;
SWAP_spr_Olivia_House_collide=0;
SWAP_spr_Dirt_Mound_A=0;

//Chamber Plats
SWAP_spr_Chamber_Plat_A=0;
SWAP_spr_Chamber_Plat_B=0;
SWAP_spr_Chamber_Plat_C=0;
SWAP_spr_Chamber_Plat_D=0;
SWAP_spr_Chamber_Plat_E=0;
SWAP_spr_Chamber_Plat_F=0;
SWAP_spr_Chamber_Plat_G=0;
SWAP_spr_Chamber_Plat_H=0;

SWAP_spr_Chamber_Plat_A_collide=0;
SWAP_spr_Chamber_Plat_B_collide=0;
SWAP_spr_Chamber_Plat_C_collide=0;
SWAP_spr_Chamber_Plat_D_collide=0;
SWAP_spr_Chamber_Plat_E_collide=0;
SWAP_spr_Chamber_Plat_F_collide=0;
SWAP_spr_Chamber_Plat_G_collide=0;
SWAP_spr_Chamber_Plat_H_collide=0;

//TUBE AND TANK
SWAP_spr_Tube_Water=0;
SWAP_spr_Tube_Glass=0;
spr_Old_Olivia_Conform=0;


//LS Plats
SWAP_spr_Morph_Plat_A=0;
SWAP_spr_Morph_Plat_B=0;

SWAP_spr_LS_Plat_B=0;
SWAP_spr_LS_Plat_C=0;
SWAP_spr_LS_Plat_D=0;
SWAP_spr_LS_Plat_E=0;

SWAP_spr_LS_Long_Plat_A=0;
SWAP_spr_LS_Long_Plat_B=0;
SWAP_spr_LS_Long_Plat_C=0;
SWAP_spr_LS_Long_Plat_D=0;
SWAP_spr_LS_Long_Plat_E=0;
SWAP_spr_LS_Long_Plat_F=0;
SWAP_spr_LS_Long_Plat_G1=0;
SWAP_spr_LS_Long_Plat_G2=0;
SWAP_spr_LS_Long_Plat_H=0;
SWAP_spr_LS_Long_Plat_I1=0;
SWAP_spr_LS_Long_Plat_I2=0;
SWAP_spr_LS_Long_Plat_J=0;
SWAP_spr_LS_Long_Plat_K=0;
SWAP_spr_LS_Long_Plat_L=0;
SWAP_spr_LS_Long_Plat_M=0;
SWAP_spr_LS_Long_Plat_N=0;
SWAP_spr_LS_Long_Plat_O=0;
SWAP_spr_LS_Long_Plat_P=0;
SWAP_spr_LS_Long_Plat_Q=0;



SWAP_spr_LS_Long_Plat_A_collide=0;
SWAP_spr_LS_Long_Plat_B_collide=0;
SWAP_spr_LS_Long_Plat_C_collide=0;
SWAP_spr_LS_Long_Plat_D_collide=0;
SWAP_spr_LS_Long_Plat_E_collide=0;
SWAP_spr_LS_Long_Plat_F_collide=0;
SWAP_spr_LS_Long_Plat_G1_collide=0;
SWAP_spr_LS_Long_Plat_G2_collide=0;
SWAP_spr_LS_Long_Plat_H_collide=0;
SWAP_spr_LS_Long_Plat_I1_collide=0;
SWAP_spr_LS_Long_Plat_I2_collide=0;
SWAP_spr_LS_Long_Plat_J_collide=0;
SWAP_spr_LS_Long_Plat_K_collide=0
SWAP_spr_LS_Long_Plat_L_collide=0
SWAP_spr_LS_Long_Plat_M_collide=0
SWAP_spr_LS_Long_Plat_N_collide=0
SWAP_spr_LS_Long_Plat_O_collide=0
SWAP_spr_LS_Long_Plat_P_collide=0
SWAP_spr_LS_Long_Plat_Q_collide=0

SWAP_spr_LS_Door=0;
SWAP_spr_LS_Door_top=0;
SWAP_spr_LS_Door_collide=0;

//JUNKYARD----------------------------------------------
SWAP_spr_JunkYard_Ground_A=0;
SWAP_spr_JunkYard_Ground_B=0;
SWAP_spr_JunkYard_Ground_C=0;
SWAP_spr_JunkYard_Ground_D=0;
SWAP_spr_JunkYard_Ground_E=0;
SWAP_spr_JunkYard_Ground_F=0;
SWAP_spr_JunkYard_Ground_G=0;
SWAP_spr_JunkYard_Ground_H=0;
SWAP_spr_JunkYard_Ground_I=0;
SWAP_spr_JunkYard_Ground_J=0;
SWAP_spr_JunkYard_Ground_K=0;
SWAP_spr_JunkYard_Ground_L=0;

SWAP_spr_SlimePlat_A=0;

SWAP_spr_JunkYard_Ground_A_collide=0;
SWAP_spr_JunkYard_Ground_B_collide=0;
SWAP_spr_JunkYard_Ground_C_collide=0;
SWAP_spr_JunkYard_Ground_D_collide=0;
SWAP_spr_JunkYard_Ground_E_collide=0;
SWAP_spr_JunkYard_Ground_F_collide=0;
SWAP_spr_JunkYard_Ground_G_collide=0;
SWAP_spr_JunkYard_Ground_H_collide=0;
SWAP_spr_JunkYard_Ground_I_collide=0;
SWAP_spr_JunkYard_Ground_J_collide=0;
SWAP_spr_JunkYard_Ground_K_collide=0;
SWAP_spr_JunkYard_Ground_L_collide=0;


SWAP_spr_TirePile_high=0;
SWAP_spr_TirePile_long=0;
SWAP_spr_TirePile_small=0;
SWAP_spr_TirePile_smallb=0;
SWAP_spr_LotsofJunks=0;
SWAP_spr_Pipes_A=0;
SWAP_spr_Debris_D=0;
SWAP_spr_Debris_E=0;
SWAP_spr_Debris_F=0;
SWAP_spr_Debris_G=0;
SWAP_spr_JunkPile_A=0;
SWAP_spr_JunkPile_B=0;
SWAP_spr_JunkPile_C=0;
SWAP_spr_JunkPile_D=0;
SWAP_spr_JunkPile_E=0;
SWAP_spr_JunkPile_F=0;
SWAP_spr_JunkPile_G=0;
SWAP_spr_JunkPile_H=0;

//GRASSY HILLS------------------------------------------

SWAP_spr_GrassyHill_00=0;
SWAP_spr_GrassyHill_01=0;
SWAP_spr_GrassyHill_02=0;
SWAP_spr_GrassyHill_03=0;
SWAP_spr_GrassyHill_04=0;
SWAP_spr_GrassyHill_05=0;
SWAP_spr_GrassyHill_06=0;
SWAP_spr_GrassyHill_07=0;
SWAP_spr_GrassyHill_08=0;
SWAP_spr_GrassyHill_09=0;
SWAP_spr_GrassyHill_10=0;
SWAP_spr_GrassyHill_11=0;
SWAP_spr_GrassyHill_12=0;
SWAP_spr_GrassyHill_13=0;
SWAP_spr_GrassyHill_14=0;
SWAP_spr_GrassyHill_15=0;
SWAP_spr_GrassyHill_16=0;
SWAP_spr_GrassyHill_17=0;
SWAP_spr_GrassyHill_18=0;
SWAP_spr_GrassyHill_19=0;

SWAP_spr_GrassyHill_00_collide=0;
SWAP_spr_GrassyHill_01_collide=0;
SWAP_spr_GrassyHill_02_collide=0;
SWAP_spr_GrassyHill_03_collide=0;
SWAP_spr_GrassyHill_04_collide=0;
SWAP_spr_GrassyHill_05_collide=0;
SWAP_spr_GrassyHill_06_collide=0;
SWAP_spr_GrassyHill_07_collide=0;
SWAP_spr_GrassyHill_08_collide=0;
SWAP_spr_GrassyHill_09_collide=0;
SWAP_spr_GrassyHill_10_collide=0;
SWAP_spr_GrassyHill_11_collide=0;
SWAP_spr_GrassyHill_12_collide=0;
SWAP_spr_GrassyHill_13_collide=0;
SWAP_spr_GrassyHill_14_collide=0;
SWAP_spr_GrassyHill_15_collide=0;
SWAP_spr_GrassyHill_16_collide=0;
SWAP_spr_GrassyHill_17_collide=0;
SWAP_spr_GrassyHill_18_collide=0;
SWAP_spr_GrassyHill_19_collide=0;

SWAP_spr_Street_A=0;
SWAP_spr_Street_B=0;
SWAP_spr_Street_C=0;
SWAP_spr_Street_D=0;
SWAP_spr_Street_E=0;
SWAP_spr_Street_F=0;
SWAP_spr_Street_G=0;

SWAP_spr_Street_A_collide=0;
SWAP_spr_Street_B_collide=0;
SWAP_spr_Street_C_collide=0;
SWAP_spr_Street_D_collide=0;
SWAP_spr_Street_E_collide=0;
SWAP_spr_Street_F_collide=0;
SWAP_spr_Street_G_collide=0;

SWAP_spr_Island_A=0;
SWAP_spr_Island_B=0;
SWAP_spr_Island_C=0;
SWAP_spr_Island_D=0;
SWAP_spr_Island_E=0;
SWAP_spr_Island_F=0;
SWAP_spr_Island_G=0;
SWAP_spr_Island_H=0;

SWAP_spr_House_A=0;
SWAP_spr_House_B=0;
SWAP_spr_House_C=0;
SWAP_spr_House_D=0;
SWAP_spr_House_E=0;
SWAP_spr_House_F=0;
SWAP_spr_House_G=0;
SWAP_spr_House_H=0;
SWAP_spr_House_I=0;
SWAP_spr_House_J=0;
SWAP_spr_House_K=0;
SWAP_spr_House_L=0;
SWAP_spr_House_M=0;
SWAP_spr_House_N=0;

SWAP_spr_GrassyHILLs_Mountains_A=0;

//CRYPT-------------------------------------------

SWAP_spr_Crypt_A=0;
SWAP_spr_Crypt_B=0;
SWAP_spr_Crypt_C=0;
SWAP_spr_Crypt_D=0;
SWAP_spr_Crypt_E=0;
SWAP_spr_Crypt_F=0;

SWAP_spr_Crypt_A_collide=0;
SWAP_spr_Crypt_B_collide=0;
SWAP_spr_Crypt_C_collide=0;
SWAP_spr_Crypt_D_collide=0;
SWAP_spr_Crypt_E_collide=0;
SWAP_spr_Crypt_F_collide=0;

//--------------------------------------
// Capsoles

SWAP_spr_left_capsole=0;
SWAP_spr_left_capsole_dark=0;
SWAP_spr_middle_Capsole=0;
SWAP_spr_middle_CapsoleDark=0;

// Alien Eggs
SWAP_spr_AlienEgg_B=0;
SWAP_spr_AlienEgg_C=0;
SWAP_spr_AlienEgg_D=0;

//Barrier
SWAP_spr_Barrier=0;
SWAP_spr_Barrier_Lazer=0;
SWAP_spr_Lazer_Damage=0;

//FX
SWAP_spr_Volume_Flare_A=0;

//BUILDINGS------------------------------------

//Pear Store
SWAP_spr_PearStore_0=0;
SWAP_spr_PearStore_1=0;
spr_PearStore_Door=0;
SWAP_spr_PearStore_inside=0;
SWAP_spr_PearStore_inside_collide=0;

// Hotels
SWAP_spr_Hotel_Sign_L=0;
SWAP_spr_Hotel_Sign_R=0;

SWAP_spr_Hotel_A=0;
SWAP_spr_Hotel_B=0;

SWAP_spr_Hotel_A_collide=0;
SWAP_spr_Hotel_B_collide=0;

SWAP_spr_Hotel_A_top=0;
SWAP_spr_Hotel_B_top=0;

//Dolphin Store

SWAP_spr_DolphinStore=0;
SWAP_spr_DolphinStore_Tank_top=0;

SWAP_spr_DolphinStore_collide=0;
//---------------------------------------------

//Crates

SWAP_spr_Crate_Center_Single=0;
SWAP_spr_Crate_Center_Double=0;
SWAP_spr_Crate_Center_Tripple=0;
SWAP_spr_Crate_Right_Single=0;
SWAP_spr_CrateDark_Right_Single=0;
SWAP_spr_Crate_Right_Double=0;
SWAP_spr_CrateDark_Right_Double=0;
SWAP_spr_Crate_Right_Tiple=0;
SWAP_spr_CrateDark_Right_Tiple=0;

SWAP_spr_Crate_Round_A=0;
SWAP_spr_Crate_Round_B=0;
SWAP_spr_Crate_Round_A_LED=0;
SWAP_spr_Crate_Round_B_LED=0;
SWAP_spr_Crate_B_01=0;
SWAP_spr_Crate_B_02=0;
SWAP_spr_Crate_B_03=0;
SWAP_spr_Crate_C_01=0;

//Spike Boxes
SWAP_spr_SpikeBox_A=0;
SWAP_spr_SpikeBox_B=0;
SWAP_spr_SpikeBox_C=0;

//Scaffolding
SWAP_spr_FG_Scaf_A=0;
SWAP_spr_FG_Scaf_B=0;
SWAP_spr_FG_Scaf_C=0;
SWAP_spr_FG_Scaf_D=0;

SWAP_spr_Tall_Scaffolding_A=0;
SWAP_spr_Tall_Scaffolding_B=0;
SWAP_spr_Tall_Scaffolding_C=0;

SWAP_spr_Short_Platform_Left=0;
SWAP_spr_Center_Short_Platform=0;
SWAP_spr_Tall_platform_Center=0;
SWAP_spr_small_Catwalk_Suspension=0;
SWAP_spr_small_Catwalk_suspension_with_shadow=0;
SWAP_spr_Stack_A=0;
SWAP_spr_Stack_B=0;

//Tracks
SWAP_spr_Track_A=0;
SWAP_spr_Track_B=0;
SWAP_spr_Track_C=0;

//PowerCore
SWAP_spr_PowerCore=0;
SWAP_spr_Orb=0;

SWAP_spr_Suspend_Catwalk_Center=0;
SWAP_spr_Suspend_Catwalk_Dark=0;
SWAP_spr_FloatPlat_Center=0;
SWAP_spr_FloatPlat_Right=0;
SWAP_spr_Catwalk_Side=0;
SWAP_spr_Catwalk_Side_small=0;
SWAP_spr_Catwalk_Side_med=0;

SWAP_spr_Scaffolding_Tri_PlatformDark_High_Right=0;
SWAP_spr_Scaffolding_Tri_PlatformDark_High_Right_collide=0;
SWAP_spr_Scaffolding_Tri_PlatformDark_High_Right_Short=0;
SWAP_spr_scaffolding_double=0;

//Rocks

SWAP_spr_Mound_Bolder_A_Center_dark=0;

//Mountains-----------------------
SWAP_spr_Moutain_A01=0;
SWAP_spr_Moutain_A03=0;
SWAP_spr_Moutain_A04=0;
SWAP_spr_Moutain_B01=0;
SWAP_spr_Moutain_B02=0;
SWAP_spr_Moutain_B03=0;
SWAP_spr_Moutain_B04=0;

SWAP_spr_Moutain_A01_collide=0;
SWAP_spr_Moutain_A03_collide=0;
SWAP_spr_Moutain_A04_collide=0;
SWAP_spr_Moutain_B01_collide=0;
SWAP_spr_Moutain_B02_collide=0;
SWAP_spr_Moutain_B03_collide=0;
SWAP_spr_Moutain_B04_collide=0;

//THE VALLEY--------------------------------------

SWAP_spr_BV_Plat_Post=0;
SWAP_spr_BV_Plat_A=0;
SWAP_spr_BV_Plat_B=0;
SWAP_spr_BV_Plat_C=0;
SWAP_spr_BV_Plat_D=0;
SWAP_spr_BV_Plat_E1=0;
SWAP_spr_BV_Plat_E2=0;
SWAP_spr_BV_Plat_F=0;
SWAP_spr_BV_Plat_G=0;
SWAP_spr_BV_Cliff_Back=0;
SWAP_spr_BV_Cliff_Side=0;
SWAP_spr_BV_Shack_A=0;
SWAP_spr_BV_Shack_B=0;
SWAP_spr_BV_TreePlat_A=0;
SWAP_spr_BV_TreePlat_B=0;
SWAP_spr_Narrow_Plat_A=0;
SWAP_spr_Narrow_Plat_B=0;
SWAP_spr_Narrow_Plat_C=0;
SWAP_spr_Narrow_Plat_D=0;

SWAP_spr_BV_Plat_A_collide=0;
SWAP_spr_BV_Plat_B_collide=0;
SWAP_spr_BV_Plat_D_collide=0;
SWAP_spr_BV_Plat_F_collide=0;
SWAP_spr_BV_Plat_Post_collide=0;
SWAP_spr_BV_Shack_A_collide=0;
SWAP_spr_BV_Shack_B_collide=0;
SWAP_spr_BV_TreePlat_A_collide=0;
SWAP_spr_BV_TreePlat_B_collide=0;

SWAP_spr_BurgermanValley_BK_A_small=0;
SWAP_spr_BurgermanValley_BK_B_small=0;

//Green Forrest--------------------------------------
SWAP_spr_Thorns_B=0;
SWAP_spr_GreenForrest_Dirt_A=0;

SWAP_spr_GreenForrest_Log_A=0;
SWAP_spr_GreenForrest_Log_B=0;
SWAP_spr_GreenForrest_Log_C=0;
SWAP_spr_GreenForrest_Log_D=0;

SWAP_spr_GreenForrest_Log_A_collide=0;
SWAP_spr_GreenForrest_Log_B_collide=0;
SWAP_spr_GreenForrest_Log_C_collide=0;
SWAP_spr_GreenForrest_Log_D_collide=0;

SWAP_spr_GreenForrest_Tree_A=0;
SWAP_spr_GreenForrest_Tree_B=0;
SWAP_spr_GreenForrest_Tree_C=0;
SWAP_spr_GreenForrest_Stump_A=0;
SWAP_spr_GreenForrest_Stump_B=0;
SWAP_spr_GreenForrest_Stump_C=0;
SWAP_spr_GreenForrest_BG_A=0;
SWAP_spr_GreenForrest_BG_B=0;
SWAP_spr_GreenForrest_BG_C=0;
SWAP_spr_GreenForrest_BG_D=0;
SWAP_spr_GreenForrest_Hedge_Top=0;
SWAP_spr_GreenForrest_Hedge_Back=0;
SWAP_spr_GreenForrest_Hedge_small=0;

//Mushroom Forrest--------------------------------------

SWAP_spr_MushroomForrest_PLAT_A=0;
SWAP_spr_MushroomForrest_PLAT_B=0;
SWAP_spr_MushroomForrest_PLAT_C=0;
SWAP_spr_MushroomForrest_PLAT_D=0;
SWAP_spr_MushroomForrest_PLAT_E=0;
SWAP_spr_MushroomForrest_PLAT_F=0;
SWAP_spr_MushroomForrest_PLAT_G=0;
SWAP_spr_MushroomForrest_PLAT_H=0;
SWAP_spr_MushroomForrest_PLAT_I=0;
SWAP_spr_MushroomForrest_PLAT_J=0;
SWAP_spr_MushroomForrest_PLAT_K=0;
SWAP_spr_MushroomForrest_PLAT_L=0;
SWAP_spr_MushroomForrest_PLAT_M=0;
SWAP_spr_MushroomForrest_PLAT_N=0;
SWAP_spr_MushroomForrest_PLAT_O=0;
SWAP_spr_MushroomForrest_PLAT_P=0;
SWAP_spr_MushroomForrest_PLAT_Q=0;
SWAP_spr_MushroomForrest_PLAT_R1=0;
SWAP_spr_MushroomForrest_PLAT_R2=0;
SWAP_spr_MushroomForrest_PLAT_S1=0;
SWAP_spr_MushroomForrest_PLAT_S2=0;
SWAP_spr_MushroomForrest_Tree_A=0;
SWAP_spr_MushroomForrest_Tree_B=0;
SWAP_spr_MushroomForrest_Tree_C=0;

SWAP_spr_MushroomForrest_PLAT_A_collide=0;
SWAP_spr_MushroomForrest_PLAT_B_collide=0;
SWAP_spr_MushroomForrest_PLAT_C_collide=0;
SWAP_spr_MushroomForrest_PLAT_D_collide=0;
SWAP_spr_MushroomForrest_PLAT_E_collide=0;
SWAP_spr_MushroomForrest_PLAT_F_collide=0;
SWAP_spr_MushroomForrest_PLAT_G_collide=0;
SWAP_spr_MushroomForrest_PLAT_H_collide=0;
SWAP_spr_MushroomForrest_PLAT_I_collide=0;
SWAP_spr_MushroomForrest_PLAT_J_collide=0;
SWAP_spr_MushroomForrest_PLAT_K_collide=0;
SWAP_spr_MushroomForrest_PLAT_L_collide=0;
SWAP_spr_MushroomForrest_PLAT_M_collide=0;
SWAP_spr_MushroomForrest_PLAT_N_collide=0;

//DARKCORE----------------------------------------

//Factory
SWAP_spr_trollfactory_FG=0;
SWAP_spr_trollfactory_FG_collide=0;

//BedRock
SWAP_spr_RockyGround_With_Bolders_dark=0;
SWAP_spr_RockyGround_With_Bolders=0;

//Cliffs
SWAP_spr_Tunnel_Cliff_A=0;
SWAP_spr_Tunnel_Cliff_B=0;
SWAP_spr_Tunnel_Cliff_C=0;
SWAP_spr_Tunnel_Cliff_D=0;
SWAP_spr_Tunnel_Cliff_E=0;
SWAP_spr_Tunnel_Cliff_F=0;
SWAP_spr_Tunnel_Cliff_G=0;
SWAP_spr_Tunnel_Cliff_H=0;

SWAP_spr_Tunnel_Cliff_A_collide=0;
SWAP_spr_Tunnel_Cliff_B_collide=0;
SWAP_spr_Tunnel_Cliff_C_collide=0;
SWAP_spr_Tunnel_Cliff_D_collide=0;
SWAP_spr_Tunnel_Cliff_E_collide=0;
SWAP_spr_Tunnel_Cliff_F_collide=0;
SWAP_spr_Tunnel_Cliff_G_collide=0;
SWAP_spr_Tunnel_Cliff_H_collide=0;

//LEDS
SWAP_spr_Right_Hallway_LED=0;
SWAP_spr_Diagonal_A_LED=0;
SWAP_spr_Hor_Right_Bridge_small_LED=0;
SWAP_spr_LongBridge_LED=0;
SWAP_spr_PearStore_LED=0;
SWAP_spr_Right_Room_A_LED=0;
SWAP_spr_Right_RoomC01_LED=0;
SWAP_spr_Right_TowerB_LED=0;
SWAP_spr_Stack_LED=0;
SWAP_spr_Tower_I_LED=0;
SWAP_spr_Right_Warehouse_LED=0;
SWAP_spr_Right_RoomC_LED=0;
SWAP_spr_Right_TowerC01_LED=0;
SWAP_spr_Tower_J_LED=0;
SWAP_spr_Tower_K_LED=0;
SWAP_spr_Right_TowerD02_LED=0;
SWAP_spr_Right_TowerA_LED=0;
SWAP_spr_Tower_H_LED=0;
SWAP_spr_LBridge_B_LED=0;
SWAP_spr_UBridge_LED=0;
SWAP_spr_TBridge_LED=0;
SWAP_spr_Tunnel_Cliff_E_LED=0;

//Bridges
SWAP_spr_Bridge_Angle_A=0;
SWAP_spr_Bridge_Angle_B=0;
SWAP_spr_Bridge_Angle_C=0;
SWAP_spr_Bridge_Angle_D=0;
SWAP_spr_Bridge_Double_A=0;
SWAP_spr_Right_Room_A=0;
SWAP_spr_Right_TowerA=0;
SWAP_spr_Right_Warehouse=0;
SWAP_spr_Right_Apartment_A01=0;
SWAP_spr_Right_TowerB=0;
SWAP_spr_Right_TowerC01=0;
SWAP_spr_Right_RoomC=0;
SWAP_spr_Right_TowerD01=0;
SWAP_spr_Right_TowerD02=0;
SWAP_spr_Hor_Right_Bridge_small=0;
SWAP_spr_Ver_Low_Bridge=0;
SWAP_spr_Right_Hallway=0;
SWAP_spr_V_Hallway_Right=0;
SWAP_spr_Naked_Bridge_Right=0;
SWAP_spr_Naked_Bridge_Right_Slim=0;
SWAP_spr_Naked_Bridge_Slim=0;
SWAP_spr_Ver_Mid_Bridge_Dark=0;
SWAP_spr_Ver_Mid_Bridge_Dark_clean=0;
SWAP_spr_Tower_E=0;
SWAP_spr_Tower_F=0;
SWAP_spr_Tower_G=0;
SWAP_spr_Tower_H=0;
SWAP_spr_Tower_I=0;
SWAP_spr_Tower_J=0;
SWAP_spr_Tower_K=0;
SWAP_spr_Diagonal_A=0;
SWAP_spr_LBridge_A=0;
SWAP_spr_LBridge_B=0;
SWAP_spr_TBridge=0;
SWAP_spr_UBridge=0;
SWAP_spr_LongBridge=0;
SWAP_spr_Bridge_single_center=0;
SWAP_spr_Bridge_single_right=0;

SWAP_spr_Bridge_Angle_A_collide=0;
SWAP_spr_Bridge_Angle_B_collide=0;
SWAP_spr_Bridge_Angle_C_collide=0;
SWAP_spr_Bridge_Angle_D_collide=0;
SWAP_spr_Bridge_Double_A_collide=0;

SWAP_spr_Right_Room_A_collide=0;
SWAP_spr_Right_TowerA_collide=0;
SWAP_spr_Right_Warehouse_collide=0;
SWAP_spr_Right_Apartment_A01_collide=0;
SWAP_spr_Right_TowerB_collide=0;
SWAP_spr_Right_TowerC01_collide=0;
SWAP_spr_Right_RoomC_collide=0;
SWAP_spr_Right_TowerD01_collide=0;
SWAP_spr_Right_TowerD02_collide=0;
SWAP_spr_Hor_Right_Bridge_small_collide=0;
SWAP_spr_Ver_Low_Bridge_collide=0;
SWAP_spr_Right_Hallway_collide=0;
SWAP_spr_V_Hallway_Right_collide=0;
SWAP_spr_Naked_Bridge_Right_collide=0;
SWAP_spr_Naked_Bridge_Right_Slim_collide=0;
SWAP_spr_Naked_Bridge_Slim_collide=0;
SWAP_spr_Tower_E_collide=0;
SWAP_spr_Tower_F_collide=0;
SWAP_spr_Tower_G_collide=0;
SWAP_spr_Tower_H_collide=0;
SWAP_spr_Tower_I_collide=0;
SWAP_spr_Tower_J_collide=0;
SWAP_spr_Tower_K_collide=0;
SWAP_spr_Diagonal_A_collide=0;
SWAP_spr_LBridge_A_collide=0;
SWAP_spr_LBridge_B_collide=0;
SWAP_spr_TBridge_collide=0;
SWAP_spr_UBridge_collide=0;
SWAP_spr_LongBridge_collide=0;
SWAP_spr_Bridge_single_center_collide=0;
SWAP_spr_Bridge_single_right_collide=0;


//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// INITIALIZE IMPORT SPRITES
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//Valley --------------------------------------------------------------------------------
SWAP_spr_BurgermanValley_LONG_PLAT_A=0;
SWAP_spr_BurgermanValley_LONG_PLAT_A_collide=0;
SWAP_spr_BurgermanValley_LONG_PLAT_B=0;
SWAP_spr_BurgermanValley_LONG_PLAT_B_collide=0;
SWAP_spr_BurgermanValley_LONG_PLAT_C=0;
SWAP_spr_BurgermanValley_LONG_PLAT_C_collide=0;

SWAP_spr_BurgermanValley_BK_A=0;
SWAP_spr_BurgermanValley_BK_A_collide=0;
SWAP_spr_BurgermanValley_BK_B=0;
SWAP_spr_BurgermanValley_BK_B_collide=0;

//Misc --------------------------------------------------------------------------------
Garbage_Collector=0;
LS_Tile_A=0;
spr_LS_Ground=0;
Anime_Lines=0;
TubeIN =0;
surf =0;
TallBlast=0;
FatBlast=0;

//Dolphin
spr_Dolphin_Swim=0;
spr_Dolphin_Idle=0;

//Dolphin Trainer
spr_DolphinMan_Idle=0;
spr_DolphinMan_Show=0;

//Mentor --------------------------------------------------------------------------------
Mentor=0;
Mentor_Fire=0;
Mentor_Uniform=0;
Mentor_Thomp=0;

//Clouds --------------------------------------------------------------------------------
PinkCloud=0;
BlueCloud=0;
OrangeCloud=0;

//TrollQueen --------------------------------------------------------------------------
TrollQueen_Explode=0;
TrollQueen_Turn=0;
TrollQueen_Stand=0;
TrollQueen_Walk=0;
TrollQueen_Fire=0;
TrollQueen_GetUP=0;
TrollQueen_Swing=0;
TrollQueen_Jump=0;
TrollQueen_SlamGround=0;
TrollQueen_Sit=0;
TrollQueen_BackHand=0;
TrollQueen_UpperCut=0;


//Mr Grin ------------------------------------------------------------------------------
spr_MrGrin_Explode=0;
spr_MrGrin_Walk=0;
spr_MrGrin_Idle=0;
spr_MrGrin_Jump=0;
spr_MrGrin_Clone=0;
spr_MrGrin_Turn=0;
spr_MrGrin_Shoot_UP=0;
spr_MrGrin_Shoot_Down=0;
spr_MrGrin_Shoot_Forward_Down=0;
spr_MrGrin_Shoot_Forward_UP=0;
spr_MrGrin_Shoot_Forward_Single=0;
spr_MrGrin_Shoot_Forward=0;

//Rabbit ------------------------------------------------------------------------------
spr_Rabbit_Explode=0;
spr_Rabbit_Idle=0;
spr_Rabbit_Bomb=0;
spr_Rabbit_Jump=0;
spr_Rabbit_Turn=0;
spr_Rabbit_Walk=0;
spr_Rabbit_ShootUP=0;
spr_Rabbit_ShootDown=0;

spr_Rabbit_Egg_A=0;
spr_Rabbit_Egg_B=0;
spr_Rabbit_Egg_C=0;

//Collector ---------------------------------------------------------------------------
Collector_Backhand=0;
Collector_Shoot=0;
Collector_UpperCut=0;
Collector_Walk=0;
Collector_Idle=0;

spr_Collector_Turn=0;
spr_Collector_Belly=0;
spr_Collector_Explode=0;

spr_Collector_Ball=0;
spr_Collector_Ball_Splash=0;


spr_Collector_Fire =  0;
Collector_Sit=0;

//Mech Collector ---------------------------------------------------------------------------
spr_Mechollector_Explode=0;
spr_Mechollector_Walk=0;
spr_Mechollector_Stand=0;
spr_Mechollector_Shoot=0;
spr_Mechollector_Turn=0;
spr_Mechollector_Jump=0;
spr_Mechollector_GroundBlast=0;
//White Bat ---------------------------------------------------------------------------
spr_WB_Explode=0;
spr_WB_Fly=0;
spr_WB_Glide=0;
spr_WB_Scream=0;
spr_WB_Storm=0;
spr_WB_Turn=0;
//Buffs
spr_Absorb=0;
spr_Absorb_header=0;

//Creeper ------------------------------------------------------------------------------
Creeper_Bite=0;
Creeper_Spray=0;
Creeper_Stand=0;
Creeper_Turn=0;
Creeper_Walk=0;

//BurgerMan ------------------------------------------------------------------------------
BM_Point=0;
BM_Walk=0;
BM_Idle=0;

//Medium Consumer ---------------------------------
spr_Medium_Consumer_Walk=0;
spr_Medium_Consumer_Jump=0;
spr_Medium_Consumer_Turn=0;
spr_Medium_Consumer_Idle=0;
spr_Medium_Consumer_Bite=0;

//Consumer Kart ------------------------------------------------------------------------------
Consumer_Kart_Turn=0;
Consumer_Kart_Ride=0;

//Seeker ------------------------------------------------------------------------------
Seeker_Bite=0;
Seeker_Boost=0;
Seeker_Swim=0;
Seeker_Turn=0;

//Robot -------------------------------------------------------------------------------
Robot_Boost=0;
Robot_Fire=0;
Robot_Walk=0;
Robot_Stand=0;

//Monster 13 -------------------------------------------------------------------------------
spr_Drifter_Die=0;
spr_Drifter_Arm_A=0;
spr_Drifter_Cage=0;
spr_Drifter_Cage_Blast=0;
spr_Drifter_Blast=0;
spr_Drifter_Trigger=0;
spr_Drifter_Idle=0;
spr_Drifter_Turn=0;



//Monster 13 -------------------------------------------------------------------------------
spr_Monster_13_Explode=0;
spr_Monster_13_Boost=0;
spr_Monster_13_Turn=0;
spr_Monster_13_BackSlash=0;
spr_Monster_13_Idle=0;
spr_Monster_13_ForwardSlash=0;
spr_Monster_13_ArcBlast=0;
spr_Monster_13_Jump=0;
spr_Monster_13_Walk=0;
spr_Monster_13_Run=0;
spr_Monster_13_Duck_Shoot=0;
spr_Monster_13_Duck=0;

//MegaBot -------------------------------------------------------------------------------
spr_MegaBot_Explode=0;
spr_MegaBot_Dash_H=0;
spr_MegaBot_Dash_V=0;
spr_MegaBot_Blast=0;
spr_MegaBot_Jump=0;
spr_MegaBot_Slash=0;
spr_MegaBot_Turn=0;
spr_MegaBot_Walk=0;
spr_MegaBot_Sword=0;
spr_MegaBot_Idle=0;


//Gatler -------------------------------------------------------------------------------
Gatler_Fire=0;
Gatler_Fire_UPDOWN=0;
Gatler_Walk=0;
Gatler_Melee=0;
Gatler_Jump=0;

//Terror -------------------------------------------------------------------------------
spr_Terror_Idle=0;
spr_Terror_Turn=0;
spr_Terror_Shoot=0

//UFO --------------------------------------------------------------------------------
UFO=0;
UFO_top=0;

//GooeyDragon --------------------------------------------------------------------------------
spr_GD_Stand=0;
spr_GD_Scream=0;
spr_GD_Leave=0;
spr_GD_Dive=0;
spr_GD_Bite=0;

spr_GD_Swim=0;

//SIN --------------------------------------------------------------------------------
spr_Sin_Explode=0;
spr_SIN_Walk=0;
spr_SIN_Swing=0;
spr_SIN_Teleport=0;
spr_SIN_Turn=0;
spr_SIN_Blast=0;
spr_SIN_Idle=0;
spr_SIN_Grab=0;
spr_SIN_Jump=0;

spr_Wavlet_Blast=0;

//Ginger Hound --------------------------------------------------------------------------------
spr_GH_Explode=0;
spr_GH_Bite=0;
spr_GH_Idle=0;
spr_GH_Pounce=0;
spr_GH_Run=0;
spr_GH_Turn=0;
//spr_GH_Walk=0;
spr_GH_Blast=0;

//Little_Consumer -------------------------------------------------------------------------
spr_Little_Consumer_Walk=0;
spr_Little_Consumer_Jump=0;
spr_Little_Consumer_LookAround=0;
spr_Little_Consumer_Bite=0;
spr_Little_Consumer_Turn=0;

/*
//GingerPup -------------------------------------------------------------------------
spr_GingerPup_Idle_A=0;
spr_GingerPup_Idle_C=0;
spr_GingerPup_Cast=0;
spr_GingerPup_Jump=0;
spr_GingerPup_Float=0;
spr_GingerPup_Walk_A=0;
spr_GingerPup_Sleep=0;

//Fuzzy Turtle -------------------------------------------------------------------------
spr_FuzzyTurtle_OwlSnatch=0;
spr_FuzzyTurtle_Walk=0;
spr_FuzzyTurtle_Talk=0;
spr_FuzzyTurtle_Idle_A=0;
spr_FuzzyTurtle_Jump=0;
spr_FuzzyTurtle_Ladder=0;
spr_FuzzyTurtle_SwimB=0;

//Meow Cat -------------------------------------------------------------------------
spr_Cat_Idle=0;
spr_Cat_Jump=0;
spr_Cat_Meow=0;
spr_Cat_Walk=0;
spr_Cat_Ladder=0;
spr_Cat_Angry=0;
*/
spr_MeowCat_Header=0;

//Bat Consumer -------------------------------------------------------------------------
Bat_Consumer__Skinney_Fly_A=0;
Bat_Consumer__Skinney_Fly_B=0;
Bat_Consumer__Skinney_Fire_A=0;

//QuadroPOD -------------------------------------------------------------------------
spr_QuadroPOD_Idle=0;
spr_QuadroPOD_turn=0;
spr_QuadroPOD_DownForward=0;
spr_QuadroPOD_Forward=0;
spr_QuadroPOD_UPForward=0;
spr_QuadroPOD_UP=0;
spr_QuadroPOD_JUMP=0;
spr_QuadroPOD_walk=0;

/*
//Lurker -------------------------------------------------------------------------
spr_Lurker_Walk=0;
spr_Lurker_Bite=0;
spr_Lurker_Idle=0;
*/

//Baby Fairy -------------------------------------------------------------------------
spr_Baby_Fairy_CAST=0;
spr_Baby_Fairy_FLY=0;
spr_Baby_Fairy_SUMMON=0;



//Ships -------------------------------------------------------------------------
spr_Ship_Short=0;

//TurrentPOD -------------------------------------------------------------------------
spr_TurrentPOD=0;
spr_TurrentPOD_Turn=0;


//Menu --------------------------------------------------------------------------------
spr_Duo=0;
//RS_LOGO=0;
Menu_Arrow=0;
spr_Menu_BG=0;

EMP=0;
Ready=0;
Shield=0;
Fight=0;
FuzzyTurtle=0;
GingerPup_header=0;
spr_QuackerSquad=0;
spr_Continue=0;
spr_Clear_Area=0;

Resurrection=0;
Powerup=0;
Checkpoint=0;
StageClear=0;


//Tops --------------------------------------------------------------------------------
SWAP_spr_Right_Warehouse_top=0; //check
SWAP_spr_Right_Apartment_A01_top=0; //check
SWAP_spr_Right_TowerD01_top=0; //check
SWAP_spr_Right_TowerD02_top=0; //check
SWAP_spr_Right_TowerC01_top=0; //check
// Cen_Hallway_top=0;
SWAP_spr_Right_RoomC_top=0; //check

SWAP_spr_Right_Hallway_top=0; //check
SWAP_spr_Ver_Low_Bridge_top=0; //check
// Cen_Warehouse_top=0;
SWAP_spr_Right_Room_A_top=0; //check
// Center_Room_A_top=0;
// Hor_Cen_Bridge_small_top=0;
SWAP_spr_Hor_Right_Bridge_small_top=0; //check
SWAP_spr_V_Hallway_Right_top=0; //check
SWAP_spr_Right_TowerA_top=0; //check
SWAP_spr_Naked_Bridge_Right_top=0; //check
SWAP_spr_Right_TowerB_top=0; //check
SWAP_spr_Tower_E_top=0; //check
SWAP_spr_Tower_F_top=0; //check
SWAP_spr_Tower_G_top=0; //check
SWAP_spr_Tower_H_top=0; //check
SWAP_spr_Tower_I_top=0; //check
SWAP_spr_Tower_J_top=0; //check
SWAP_spr_Tower_K_top=0; //check
SWAP_spr_Diagonal_A_top=0; //check
SWAP_spr_LBridge_A_top=0;//check
SWAP_spr_LBridge_B_top=0;//check
SWAP_spr_TBridge_top=0;//check
SWAP_spr_UBridge_top=0;//check
SWAP_spr_LongBridge_top=0;
SWAP_spr_Bridge_single_center_top=0;
SWAP_spr_Bridge_single_right_top=0;


SWAP_spr_Tunnel_Cliff_A_Top=0; //check
SWAP_spr_Tunnel_Cliff_B_Top=0; //check
SWAP_spr_Tunnel_Cliff_C_Top=0; //check
SWAP_spr_Tunnel_Cliff_F_Top=0; //check
SWAP_spr_Tunnel_Cliff_G_Top=0; //check
SWAP_spr_Tunnel_Cliff_H_Top=0; //check

SWAP_spr_PearStore_inside_top=0; //check

SWAP_spr_Crypt_A_top=0; //check
SWAP_spr_Crypt_F_top=0; //check

SWAP_spr_BurgermanValley_BK_A_top=0; //check

TallBlast = 0;

if (global.platform==0) || (global.platform==1) //PC AND XBOX
{
    alarm[2]=1; //CREATE LOGO 
}

if (global.platform==4)
{
if (alarm[2]==-1) alarm[2]=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ps4_ethernet_available)
{
    global.ps4_net_check_result = -1;
    global.ps4_old_net_check_result = global.ps4_net_check_result;
    psn_check_np_availability(0, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if the user is still signed into psn
psn_np_status(0);
alarm[9] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lost_connection_prompt=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_check_controller=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO) with (par_HERO) {instance_destroy();}
room_goto(rm_TitleScreen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>paused=false; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> showing_account_picker = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//START THE GAME
instance_create(x,y,obj_RS_LOGO);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//REGULATE BULLET TIME --------------------

if (target_speed&lt;global.game_speed)
{
    if !audio_is_playing(snd_BaseDrop)
    {
    audio_play_sound(snd_BaseDrop,10,false);
    alarm[1]=50;
    }

    if (draw_bullet_time)
    {
        if !audio_is_playing(snd_DubstepFuture)
        audio_play_sound(snd_DubstepFuture,10,false);
    }


    global.game_speed-=.025;
}

if (target_speed&gt;global.game_speed)
{
    if !audio_is_playing(snd_TimeFast)
    {
    if (draw_bullet_time) audio_play_sound(snd_TimeFast,10,false);
    alarm[1]=50;
    }
    global.game_speed+=.025;
}






//STEAM SCREEN SHOT CAPTURE ------------------------
if (global.platform==0)
{
    if steam_is_screenshot_requested()
    {
    var file = "ScreenShot_" +string(global.scrn_num) + ".png";
    screen_save(file)
    steam_send_screenshot(file, window_get_width(), window_get_height());
    global.scrn_num += 1;
    
    ini_open("config.ini");    
    ini_write_real("Settings","scrn_num",global.scrn_num);
    ini_close();      
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//XRs and XBOX STEP
if (global.platform==1)
{

if xboxone_is_constrained()
    {
     showing_account_picker=false;
    }
    
    
if (showing_account_picker) exit;  

if (showing_account_picker==false)
{    
    if (xboxone_user_is_signed_in(global.xb_user))
    global.signed_in=true;
    else
    global.signed_in=false;
}    

//STOP CONTROLLER VIBRATION
for (var vpad = 0; vpad &lt; gamepad_get_device_count(); vpad++)  //CYCLE TO FIND AN ACTIVE ONE
{
    if (vpad!=global.playing_index)
        {
        gamepad_set_vibration(vpad, 0, 0);
        }
}   
//APP SUSPENDING ----------------------------------------------

if xboxone_is_suspending()
    {        
        if !instance_exists(obj_Pause)
        {    
            if instance_exists(par_HERO)
            {           
            par_HERO.pause_que=true; 
            par_HERO.pause_que_count=60;
            }                       
        xboxone_suspend(); 
        }       
    }

//APP Constrained ----------------------------------------------    
if xboxone_is_constrained() //IN XBOX HUB
{       
    constrain_count+=1;
 
    if instance_exists(par_HERO)
    {
        if !instance_exists(obj_Pause) 
        {
            if(global.CutScene==false)
            {
                if !instance_exists(obj_Tube)
                {
                    if !instance_exists(obj_Checkpoint_header)
                    {
                        if (constrain_count&gt;=200) par_HERO.pause_que=true; 
                    }
                }
            }                               
        }
    }   
}
else //IN GAME
{        
      

    if (constrain_count&gt;0) //WAS IN HUB
    {
    activating_user =  xboxone_user_for_pad(global.playing_index);
    activating_user_name = xboxone_gamedisplayname_for_user(activating_user); 
     
    if (xboxone_user_is_signed_in(global.xb_user))
    global.signed_in=true;
    else
    global.signed_in=false;       
        
 
     if (global.signed_in==false) || (global.xb_user != activating_user) 
        {
            if (logout==false) audio_play_sound(snd_Bash,10,false);
            
            if !instance_exists(obj_SaveSelect) &amp;&amp; !instance_exists(obj_Options)//edit 042316
                {
                    logout=true;
                }
                else
                {
                        
                     if instance_exists(obj_SaveSelect)
                     {   
                         if(obj_SaveSelect.alarm[3]==-1) obj_SaveSelect.alarm[3]=1; //RESET USER ICON
                     }
                    
                    if instance_exists(obj_Options)
                    {
                        audio_play_sound(snd_Quack_A,10,false);
                        if(obj_Options.alarm[3]==-1) obj_Options.alarm[3]=1; //RESET USER ICON
                    }   
                
                }             
        }  
    
              
    if (alarm[3]==-1) alarm[3]=15; //SET BRIEF PAUSE BEFORE CAN CONFIRM
    }  //END CONSTRAIN COUNT  
    
    if (no_controller==false)
    {
    if instance_exists(par_HERO) || instance_exists(obj_Pause) || (room==rm_WorldMap) //CHECK IF PLAYER GOT KICKED OFF BY ANOTHER XBOX 042816
    {
        if (xboxone_user_is_signed_in(global.xb_user))
        global.signed_in=true;
        else
        global.signed_in=false; 
    
        if (global.signed_in==false) 
            {
                logout=true;
            }
    }
    }
     
    global.xb_user = xboxone_user_for_pad(global.playing_index);//;   //SET DEFAULT USER 
    
    var temp_name = xboxone_gamedisplayname_for_user(global.xb_user);
    if (temp_name!=global.display_name) 
        global.display_name=temp_name;
    
    constrain_count=0;
    

if (no_controller==true)
{
for (var pad = 0; pad &lt; gamepad_get_device_count(); pad++)  //CYCLE TO FIND AN ACTIVE ONE
        {
            if (gamepad_button_check_pressed(pad, gp_face1)) //ACTIVE CONTROLER PRESSES X
            {                                                                                                                                                                   
                if instance_exists(par_HERO) &amp;&amp; !instance_exists(obj_Pause) par_HERO.pause_que=true; //PAUSE GAME IF IN GAME                                                                                                                       
                    
                    global.vol=paused_vol;   
                    audio_master_gain(global.vol); 
                    scr_confirm();
                    if (alarm[5]==-1) alarm[5]=15;                    
                    ;  
                                        
                    var user = xboxone_user_for_pad(pad);
                    
                    if (user == global.xb_user)
                    {
                        global.playing_index = pad;
                        no_controller=false
                    }
                    else
                    {                        
                        global.playing_index = pad;
                        async_event_id = xboxone_show_account_picker(pad, 0);
                        showing_account_picker = true;
                    }                                                                                                                                                       
                
            exit;
            }
        }           
}          
else if (progress_lost)
{
    for (var pad = 0; pad &lt; gamepad_get_device_count(); pad++) //CYCLE TO FIND AN ACTIVE ONE
       { 
            if (gamepad_button_check_pressed(pad, gp_face1)) &amp;&amp; (alarm[3]==-1) //RESTART AND LOOSE PROGRESS
            { 
            audio_stop_all();
            progress_lost=false;
            scr_confirm(); 
            instance_create(0,0,obj_Curtain);
            if (alarm[6]==-1) alarm[6]=1;            
            exit;            
            }          
       }
}
else if (logout)// &amp;&amp; !instance_exists(obj_SaveSelect)
{ 
   for (var pad = 0; pad &lt; gamepad_get_device_count(); pad++)  //CYCLE TO FIND AN ACTIVE ONE
   { 
    if (gamepad_button_check_released(pad, gp_face1)) &amp;&amp; (alarm[3]==-1) //was pad
    { 
    scr_confirm();        
    async_event_id = xboxone_show_account_picker(global.playing_index, 0);
    showing_account_picker = true;
    exit;            
    }
   }   
}                       
                       
}//END NOT CONSTRAINED

        
//CHANGE CONTROLLER -------------------------------------------------------
      
    if (gamepad_is_connected(global.playing_index) == false) &amp;&amp; (global.playing_index!=-1) //OK I DISCONNECTED MY CONTROLLER
    {
        if !instance_exists(obj_Curtain) &amp;&amp; !instance_exists(obj_Load) &amp;&amp; !instance_exists(obj_Curtain_short)
        {
        //audio_play_sound(snd_Quack_A,10,false);
        
            if (no_controller==false) //SAVE ALL THE INFO
                {
                paused_vol=global.vol;
                global.vol=0;
                audio_master_gain(global.vol);
                
                    if instance_exists(par_HERO) &amp;&amp; (global.CutScene==false)
                    {
                        if !instance_exists(obj_Pause)
                        {                        
                            with (par_HERO)
                            {   
                            par_HERO.pause_que=true;
                            }
                        }        
                    }                
                }
                
            no_controller=true; //SET NO CONTROLLER TO TRUE  
            logout=false;          
        }        
    }//END GAMEPAD NOT CONNNECTED
   
}//END XBOX ONE
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==3) //PS4 ONLY
{
    if (is_undefined(async_load[? "event_type"])) exit;

show_debug_message("game room system event: " + json_encode(async_load));

if (async_load[? "event_type"] == "gamepad discovered" )
{
    for(i=0;i&lt;gamepad_get_device_count();i++)
    {
        if (gamepad_is_connected(i))
        {
            psn_init_trophy(i);
            global.playing_index=i;
        }
    }
}
else if (async_load[? "event_type"] == "np_availability")
{   
    // psn has become unavailable 
    global.ps4_net_check_result = async_load[? "result"];
    global.ps4_old_net_check_result = global.ps4_net_check_result;
    
//    psn has become available/unavailable and you should 
//    check global.ps4_net_check_result to see which
}
else if (async_load[? "event_type"] == "psn_enetDown")
{
    // the ps4 has lost it's network connection
    if (async_load[? "eth_counter"] &gt; last_ps_eth_counter)
    {
        global.ps4_old_net_check_result = global.ps4_net_check_result;
        global.ps4_net_check_result = 0;
        last_ps_eth_counter = async_load[? "eth_counter"];
        global.ps4_ethernet_available = false;
    }
}
else if (async_load[? "event_type"] == "psn_enetUp")
{
    // the ps4 has found it's network connection
    if (async_load[? "eth_counter"] &gt; last_ps_eth_counter)
    {
        global.ps4_net_check_result = global.ps4_old_net_check_result;
        last_ps_eth_counter = async_load[? "eth_counter"];
        global.ps4_ethernet_available = true;
        alarm[10] = room_speed;
   }
}
else if (async_load[? "event_type"] == "np_status")
{
    // ps4 user has signed into or out of psn
    if (async_load[? "result"] == 0)
    {
        global.ps4_net_check_result = 0;
    }
    else if (async_load[? "result"] == 1)
    {
        if (global.ps4_net_check_result == 0 and alarm[10] &lt; 0)
        {
            global.ps4_ethernet_available = true;
            // maybe try again to see if we're allowed now
            alarm[10] = room_speed;
        }
    }
}
else if (async_load[? "event_type"] == "user_psn_signed_out")
{
    global.ps4_net_check_result = 0;
}
else if (async_load[? "event_type"] == "user_psn_signed_in")
{
    alarm[10] = room_speed;
}

} //END PLAYSTATION

if (global.platform==1) //XBOX ONE
{
    show_debug_message(json_encode(async_load));

     if (async_load[? "event_type"] == "xboxlive_status")
     {
         global.Online=true;
     }
     else
     {
         if (global.Online)
         {
         lost_connection_prompt=true;
         if (alarm[8]==-1) alarm[8]=200;
         }
         global.Online=false;
     }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==3) //PS4 ONLY
{
    var ident = async_load[? "id" ];
       
    show_debug_message(json_encode(async_load));

    if (async_load[? "status"] == -1)
    {
        if (async_load[? "error"] == 1001)
        {
            show_debug_message("user cancelled operation");
        }
        else if (async_load[? "error"] == 1002)
        {
            show_debug_message("slot contained corrupt data");
        }
        
        global.saving = false;
        global.loading = false;
        exit;
    }
            
    
    //------------------------------------------------- //SAVING START &gt;&gt;
    if (ident == global.saveid and global.saving) 
    {                        
            if (global.load_config==false) //OK SAVED A FILE, SO IT EXSISTS AND GAME CAN NOW START
                {                         
                global.load_config=true;                         
                alarm[2]=1; //CREATE LOGO START THE GAME
                }
                   
       buffer_delete(global.savebuff);
       global.saving=false;  
       
    }//END SAVE BUFFER       
     
    //------------------------------------------------- //LOADING  START &gt;&gt;      
    else 
    if (ident == global.loadid and global.loading) 
    { 
    var buffstring = buffer_read(global.loadbuff,buffer_string);  
                  
    if (string_length(buffstring) == 0) //DOES THIS GAME ALREADY HAVE A SAVE FILE?
                {               
                    show_debug_message("slot contained no data");
                    buffer_delete(global.loadbuff);   
                    global.loading=false; 
                    
                    if (global.load_config==false) //DIDNT FIND SAVE FILE SO SAVING ONE BEFORE STARTING
                    {          
                        scr_savegame();        
                        //global.load_config=true;         
                        //alarm[2]=1; //CREATE LOGO START THE GAME                   
                    } 
                                        
                    exit;        
                }                
                else //YEA THERE IS A SAVE FILE SO LOADING IN ALL THE SAVED VARIABLES
                { 
                                  
                ini_open_from_string(buffstring); 
                //******************** CONFIG START **********************//   
                global.blur_fx     = ini_read_real("Settings","blur_fx",0);
                global.vol         = ini_read_real("Settings","vol",1);
                global.mus         = ini_read_real("Settings","mus",1); 
                global.dof         = ini_read_real("Settings","dof",false);
                global.difficulty  = ini_read_real("Settings","difficulty",.75);
                global.vsync       = ini_read_real("Settings","vsync",true); 
                global.ctlstyle    = ini_read_real("Settings","ctlstyle",1);
                global.auto_pickup = ini_read_real("Settings","auto_pickup",false);
                global.auto_swap = ini_read_real("Settings","auto_swap",true); 
                global.rumble      = ini_read_real("Settings","rumble",true);
                global.shock_fx    = ini_read_real("Settings","shock_fx",0);
         
                global.gp_D_Left     = ini_read_real("Gamepad","gp_D_Left",gp_padl);
                global.gp_D_Right    = ini_read_real("Gamepad","gp_D_Right",gp_padr);
                global.gp_D_Up       = ini_read_real("Gamepad","gp_D_Up",gp_padu);
                global.gp_D_Down     = ini_read_real("Gamepad","gp_D_Down",gp_padd);
                global.gp_Jump     = ini_read_real("Gamepad","gp_Jump",gp_face1);
                global.gp_Melee    = ini_read_real("Gamepad","gp_Melee",gp_face3);
                global.gp_Fire     = ini_read_real("Gamepad","gp_Fire",gp_face2);
                global.gp_Weapon   = ini_read_real("Gamepad","gp_Weapon",gp_face4);
                global.gp_Pause    = ini_read_real("Gamepad","gp_Pause",gp_start);
                global.gp_Select   = ini_read_real("Gamepad","gp_Select",gp_select);
                global.gp_Left_Shoulder  =  ini_read_real("Gamepad","gp_Left_Shoulder",gp_shoulderl);
                global.gp_Right_Shoulder =  ini_read_real("Gamepad","gp_Right_Shoulder",gp_shoulderr);
                global.gp_Left_Trigger   =  ini_read_real("Gamepad","gp_Left_Trigger",gp_shoulderlb);
                global.gp_Right_Trigger  =  ini_read_real("Gamepad","gp_Right_Trigger",gp_shoulderrb);
                global.gp_Pet_L  =  ini_read_real("Gamepad","gp_Pet_L",gp_stickl);
                global.gp_Pet_R  =  ini_read_real("Gamepad","gp_Pet_R",gp_stickr);
                //******************** CONFIG END **********************//  
                
                                        
                //******************** SAVE START **********************//     
                var sl;
                for (sl=0;sl&lt;9;sl+=1)
                {    
                global.SaveSlot_date[sl]    =     ini_read_string("Info","SaveSlot_date"+"["+string(sl)+"]","- EMPTY -");        
                global.SaveSlot_name[sl]    =     ini_read_string("Info","SaveSlot_name"+"["+string(sl)+"]","");  
                global.SaveSlot_SavedRoom[sl]  =  ini_read_real("Game","SaveSlot_SavedRoom"+"["+string(sl)+"]",-1);    //LAST ROOM ID                           
                global.SaveSlot_SavedHP[sl] =     ini_read_real("Hero","SaveSlot_SavedHP"+"["+string(sl)+"]",100);
                global.SaveSlot_SavedMoney[sl] =  ini_read_real("Hero","SaveSlot_SavedMoney"+"["+string(sl)+"]",0);                
                
                for (a=0;a&lt;=2;a+=1)
                {  
                    for (b=0;b&lt;=3;b+=1)
                    {
                        switch(sl)
                        {
                        case 1: global.SaveSlot_Inventory_1[a,b] =  ini_read_real("Inventory","SaveSlot_Inventory_1["+string(a)+","+string(b)+"]",0); break;
                        case 2: global.SaveSlot_Inventory_2[a,b] =  ini_read_real("Inventory","SaveSlot_Inventory_2["+string(a)+","+string(b)+"]",0); break;
                        case 3: global.SaveSlot_Inventory_3[a,b] =  ini_read_real("Inventory","SaveSlot_Inventory_3["+string(a)+","+string(b)+"]",0); break;
                        case 4: global.SaveSlot_Inventory_4[a,b] =  ini_read_real("Inventory","SaveSlot_Inventory_4["+string(a)+","+string(b)+"]",0); break;
                        case 5: global.SaveSlot_Inventory_5[a,b] =  ini_read_real("Inventory","SaveSlot_Inventory_5["+string(a)+","+string(b)+"]",0); break;
                        case 6: global.SaveSlot_Inventory_6[a,b] =  ini_read_real("Inventory","SaveSlot_Inventory_6["+string(a)+","+string(b)+"]",0); break;
                        case 7: global.SaveSlot_Inventory_7[a,b] =  ini_read_real("Inventory","SaveSlot_Inventory_7["+string(a)+","+string(b)+"]",0); break;
                        case 8: global.SaveSlot_Inventory_8[a,b] =  ini_read_real("Inventory","SaveSlot_Inventory_8["+string(a)+","+string(b)+"]",0); break;
                        }
                    }
                }                        
                
                global.SaveSlot_weapon_A[sl] =  ini_read_real("Weapon","SaveSlot_weapon_A"+"["+string(sl)+"]",0);
                global.SaveSlot_weapon_B[sl] =  ini_read_real("Weapon","SaveSlot_weapon_B"+"["+string(sl)+"]",0);
                global.SaveSlot_weapon_C[sl] =  ini_read_real("Weapon","SaveSlot_weapon_C"+"["+string(sl)+"]",0);
                global.SaveSlot_weapon_D[sl] =  ini_read_real("Weapon","SaveSlot_weapon_D"+"["+string(sl)+"]",0);        
                global.SaveSlot_weapon_A_energy[sl] =  ini_read_real("Weapon","SaveSlot_weapon_A_energy"+"["+string(sl)+"]",0);
                global.SaveSlot_weapon_B_energy[sl] =  ini_read_real("Weapon","SaveSlot_weapon_B_energy"+"["+string(sl)+"]",0);
                global.SaveSlot_weapon_C_energy[sl] =  ini_read_real("Weapon","SaveSlot_weapon_C_energy"+"["+string(sl)+"]",0);
                global.SaveSlot_weapon_D_energy[sl] =  ini_read_real("Weapon","SaveSlot_weapon_D_energy"+"["+string(sl)+"]",0);                
                global.SaveSlot_Hours[sl] =    ini_read_real("Time","SaveSlot_hours"+"["+string(sl)+"]",0);
                global.SaveSlot_Minutes[sl] =  ini_read_real("Time","SaveSlot_minutes"+"["+string(sl)+"]",0);
                global.SaveSlot_Seconds[sl] =  ini_read_real("Time","SaveSlot_seconds"+"["+string(sl)+"]",0);     
                
                global.SaveSlot_ranked_Minutes[sl] =  ini_read_real("Time","SaveSlot_ranked_minutes"+"["+string(sl)+"]",10);
                global.SaveSlot_ranked_Seconds[sl] =  ini_read_real("Time","SaveSlot_ranked_seconds"+"["+string(sl)+"]",0); 
                   
                global.SaveSlot_Points[sl]  =  ini_read_real("Game","SaveSlot_points"+"["+string(sl)+"]",0);                
                
                var i
                for (i=0;i&lt;5;i+=1)
                {
                    if (i==0)
                    global.SaveSlot_pets[sl,i] =  ini_read_real("Inventory","SaveSlot_pets["+string(sl)+","+string(i)+"]",1); //TURTLE DEFAULT 1
                    else
                    global.SaveSlot_pets[sl,i] =  ini_read_real("Inventory","SaveSlot_pets["+string(sl)+","+string(i)+"]",0);
                }  
                      
                global.SaveSlot_HERO_type[sl] = ini_read_real("Hero","SaveSlot_type"+"["+string(sl)+"]",1); //ADULT DEFAULT
                global.SaveSlot_World[sl] = ini_read_real("Game","SaveSlot_world"+"["+string(sl)+"]",global.World); //CURRENT WORLD LEVEL               
                
                for (a=1;a&lt;=14;a+=1)
                {  
                    for (b=1;b&lt;=3;b+=1)
                    {
                        switch(sl)
                        {
                        case 1: global.SaveSlot_Boss_Score_1[a,b] = ini_read_real("Boss","SaveSlot_Boss_Score_1["+string(a)+","+string(b)+"]",0); break;
                        case 2: global.SaveSlot_Boss_Score_2[a,b] = ini_read_real("Boss","SaveSlot_Boss_Score_2["+string(a)+","+string(b)+"]",0); break;
                        case 3: global.SaveSlot_Boss_Score_3[a,b] = ini_read_real("Boss","SaveSlot_Boss_Score_3["+string(a)+","+string(b)+"]",0); break;
                        case 4: global.SaveSlot_Boss_Score_4[a,b] = ini_read_real("Boss","SaveSlot_Boss_Score_4["+string(a)+","+string(b)+"]",0); break;
                        case 5: global.SaveSlot_Boss_Score_5[a,b] = ini_read_real("Boss","SaveSlot_Boss_Score_5["+string(a)+","+string(b)+"]",0); break;
                        case 6: global.SaveSlot_Boss_Score_6[a,b] = ini_read_real("Boss","SaveSlot_Boss_Score_6["+string(a)+","+string(b)+"]",0); break;
                        case 7: global.SaveSlot_Boss_Score_7[a,b] = ini_read_real("Boss","SaveSlot_Boss_Score_7["+string(a)+","+string(b)+"]",0); break;
                        case 8: global.SaveSlot_Boss_Score_8[a,b] = ini_read_real("Boss","SaveSlot_Boss_Score_8["+string(a)+","+string(b)+"]",0); break;
                        }
                    }
                }       
                
                for (c=0;c&lt;=14;c+=1) 
                {
                    global.SaveSlot_world_clear[sl,c] = ini_read_real("Game","SaveSlot_world_clear["+string(sl)+","+string(c)+"]",0);
                }   
                     
                global.SaveSlot_difficulty[sl] = ini_read_real("Game","SaveSlot_difficulty"+"["+string(sl)+"]",.75);
                global.SaveSlot_ranked[sl] = ini_read_real("Game","SaveSlot_ranked"+"["+string(sl)+"]",false);
                global.SaveSlot_worldmap[sl] = ini_read_real("Game","SaveSlot_worldmap"+"["+string(sl)+"]",false);
                
                }
                //******************** SAVE END **********************//   
                                                                                                               
                                                                                 
                 ini_close();
                                                                  
                 buffer_delete(global.loadbuff);   
                 global.loading=false;    
                 
                if (global.load_config==false) //SAVE FILE DOES EXISTS AT START UP SO START THE GAME ALREADY
                {                  
                global.load_config=true;         
                alarm[2]=1; //CREATE LOGO START THE GAME                   
                } 
                
       }//END NO FILE EXISTS SO SAVE BLANK FILE 
    } //END LOADING            
} //END PLATFORM CHECK
   



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1)
{           
//SAVE SELECTION PICKER ---------------------------------------------------- 
        show_debug_message(json_encode(async_load));                
        if (async_load[? "id"] == async_event_id)
        {                                          
            var user = async_load[? "user"];    
            var last_user = global.xb_user;
                            
            if (no_controller==false) //CHANGE USER
            {                
                if (user != pointer_null)
                {
                    //global.playing_index = async_load[? "pad_index"];                                                                
                    global.xb_user = async_load[? "user"];
                    global.display_name = xboxone_gamedisplayname_for_user(global.xb_user);
                }
            }
            else //CHANGE CONTROLLER
            {            
                 
                if (user != pointer_null)
                { 
                 //global.playing_index = async_load[? "pad_index"];
                 global.xb_user = async_load[? "user"];
                 global.display_name = xboxone_gamedisplayname_for_user(global.xb_user);
                }
            }
                            
            if instance_exists(par_HERO) || instance_exists(obj_Pause) || (room==rm_WorldMap) || (room==rm_GameOver) || (room==rm_Credits) || (room==rm_Classroom) || (room==rm_Ending) || instance_exists(obj_EnterName)
            {        
                if (global.game_xb_user!=global.xb_user) //SET THE GAME USER
                    {
                        if !instance_exists(obj_SaveSelect) 
                        {
                        progress_lost=true;
                        audio_play_sound(snd_Bash,10,false);
                        }
                    }
            }
               
            if (logout==true) audio_play_sound(snd_capped_out,10,false);
            
            logout=false;             
            showing_account_picker = false;              
            no_controller=false; 
            can_check_controller=false;
            if (alarm[7]==-1) alarm[7]=150;
 
                                                   
             if instance_exists(obj_SaveSelect)
              {
              if (obj_SaveSelect.alarm[3]==-1) obj_SaveSelect.alarm[3]=1;
              }   
              
              if instance_exists(obj_Options)
              {
              if (obj_SaveSelect.alarm[3]==-1) obj_SaveSelect.alarm[3]=1;
              }                   
        }                                               
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(flushed==false)
{



if (room==rm_WorldMap)   || (room==rm_TitleScreen) || (room==rm_SaveGame) ||  (room==rm_GameOver) ||
   (room==rm_Tutorial_B) || (room==rm_Tutorial_D)  || (room==rm_World2_B) ||  (room==rm_HOTEL_w5) ||
   (room==rm_World6_HOTEL) || (room==rm_World7_HOTEL) || (room==rm_World_A2) || (room==rm_Sin) || 
   (room==rm_Classroom)  || (room==rm_Credits) 
    {
        full_flush=true; //FLUSH EVERYTHING
    }

    if (global.platform==0) full_flush=true; //ALWAYS FLUSH FOR PC

    if (global.gamestart==false) || (skip_flush)
    {
    background_flush=false;
    sprite_flush=false;
    texture_flush=false;
    full_flush=false;
    }





    
//DELETE ALL IMPORTED SPRITES
if (sprite_flush) || (full_flush)
{
    var i;
    for (i=0; i&lt;=num; i+=1)
    {
       if sprite_exists(global.sprite[i]) sprite_delete(global.sprite[i]);
    }
       
if (num&gt;max_num) max_num=num; //RECORDING MAX SPRITES LOADED   
num=0;  
}


//DELETE ALL IMPORTED BACKGROUNDS
if (background_flush) || (full_flush)
{
var b;
for (b=0; b&lt;=b_num; b+=1)
{
   if background_exists(global.background[b]) background_delete(global.background[b]);
}

b_num=0;
}


 


if (texture_flush) || (full_flush)
    {    
        
        if (global.platform==1)
        {
            if instance_exists(par_HERO)
            {
                //par_HERO.texture_flush=true; 
            }
            else
            {
               // draw_texture_flush();
            }
        }
    }


//------------------------------------------------------------------------------//
//---------------- BACKGROUND ID FLUSH -----------------------------------------//
//------------------------------------------------------------------------------//
if (background_flush) || (full_flush)
{
bg_Cloud_Layer_B_half=0;

bg_bluesky=0;
bg_Grassy_Far_Far=0;
bg_Grassy_Far=0;
bg_Grassy_Mid=0;
bg_Grassy_Near=0;

bg_coolsky_A_tile=0;
bg_SkyCity_very_far=0;
bg_SkyCity_far=0;
bg_SkyCity_mid=0;
bg_SkyCity_near=0;

bg_SkyCity_very_far_dk=0;
bg_SkyCity_far_dk=0;
bg_SkyCity_mid_dk=0;
bg_SkyCity_near_dk=0;

bg_Techno_Tower_A=0;

bg_Tunnel_C=0;
bg_Tunnel_B=0;
bg_Tunnel_A=0;

bg_Tunnel_C_far=0;
bg_Cave_A=0;

bg_coolsky_A=0;
bg_Techno_Tower_B_bg_far=0;
bg_Techno_Tower_B_bg=0;
bg_Eggs_A1=0;
bg_Techno_Tower_B=0;

bg_stormy_warm=0;
bg_Mountains=0;
bg_Valley_Buildings=0;
bg_Valley_Near_Buildings=0;

bg_GreenForrest=0;

TrollQueenSky=0;
TrollQueen_Very_Far=0;
TrollQueen_Far_Far=0;
TrollQueen_Far=0;
TrollQueen_Mid=0;

bg_MushroomForrest_sky=0;
bg_MushroomForrest_BG_C=0;
bg_MushroomForrest_BG_B=0;
bg_MushroomForrest_BG_A=0;

DarkCORE_FAR=0;
DarkCORE_FG01=0;
}
//------------------------------------------------------------------------------//
//------------------- SPRITE ID FLUSH ------------------------------------------//
//------------------------------------------------------------------------------//
if (sprite_flush) || (full_flush)
{

spr_Debris_Cloud=0;

//ScreenShots
spr_sh_01=0;
spr_sh_02=0;
spr_sh_03=0;
spr_sh_04=0;
spr_sh_05=0;
spr_sh_06=0;
spr_sh_07=0;
spr_sh_08=0;
spr_sh_09=0;
spr_sh_10=0;
spr_sh_11=0;
spr_sh_12=0;
spr_sh_13=0;
spr_sh_14=0;
spr_sh_15=0;
spr_sh_16=0;
spr_sh_17=0;
spr_sh_18=0;
spr_sh_19=0;
spr_sh_20=0;
spr_sh_21=0;
spr_sh_22=0;
spr_sh_23=0;
spr_sh_24=0;
spr_sh_25=0;
spr_sh_26=0;
spr_sh_27=0;
spr_sh_28=0;
spr_sh_29=0;
spr_sh_30=0;
spr_sh_31=0;
spr_sh_32=0;
spr_sh_33=0;

//END GAME
SWAP_spr_EndGame_Spire=0;
SWAP_spr_EndGame_Mountains=0;
spr_EndGame_Sky=0;

//FrameDrop
spr_FrameDrop_Glass=0;
spr_FrameDrop_Tech=0;

//Brother
spr_Brother_Idle=0;
spr_Brother_LookAt=0;


//GamePad Config
SWAP_spr_gamepad_0 =0;
SWAP_spr_gamepad_1 =0;
spr_Title_Template=0;
spr_Olivia_Title=0;
spr_Daydreamer_LOGO=0;
spr_Awakened=0;

spr_Menu_BG_still = 0;
spr_Cover_Olivia=0;
spr_Cover_Collector=0;
spr_Cover_BG=0;
spr_Cover_top=0;

//spr_GameOver_Tag=0;

//ENVIRONMENT 
//Tech Islands
SWAP_spr_TechIsland_A =0;
SWAP_spr_TechIsland_B =0;
SWAP_spr_TechIsland_C =0;
SWAP_spr_TechIsland_D =0;
SWAP_spr_TechIsland_E =0;
SWAP_spr_TechIsland_F =0;

//SPACE
spr_nebula=0;
bg_Earth=0;


//ClassRoom
SWAP_spr_Olivia_Sit=0;
SWAP_spr_Classroom=0;
SWAP_spr_Classroom_FG_A=0;
SWAP_spr_Classroom_FG_B=0;
SWAP_spr_Classroom_FG_C=0;
SWAP_spr_Classroom_FG_D=0;
SWAP_spr_Classroom_FG_E=0;
SWAP_spr_GateKeeper=0;
SWAP_spr_GateKeeper_white=0;

//House
SWAP_spr_House_Boxes=0;
SWAP_spr_House_TV=0;
SWAP_spr_Washer=0;
SWAP_spr_Fan=0;
SWAP_spr_Laundry_A=0;
SWAP_spr_Laundry_B=0;
SWAP_spr_Laundry_C=0;
SWAP_spr_Laundry_D=0;
SWAP_spr_Laundry_E=0;
SWAP_spr_Olivia_House_Door=0;
SWAP_spr_Olivia_House=0;
SWAP_spr_Olivia_House_collide=0;
SWAP_spr_Dirt_Mound_A=0;

//Chamber Plats
SWAP_spr_Chamber_Plat_A=0;
SWAP_spr_Chamber_Plat_B=0;
SWAP_spr_Chamber_Plat_C=0;
SWAP_spr_Chamber_Plat_D=0;
SWAP_spr_Chamber_Plat_E=0;
SWAP_spr_Chamber_Plat_F=0;
SWAP_spr_Chamber_Plat_G=0;
SWAP_spr_Chamber_Plat_H=0;

SWAP_spr_Chamber_Plat_A_collide=0;
SWAP_spr_Chamber_Plat_B_collide=0;
SWAP_spr_Chamber_Plat_C_collide=0;
SWAP_spr_Chamber_Plat_D_collide=0;
SWAP_spr_Chamber_Plat_E_collide=0;
SWAP_spr_Chamber_Plat_F_collide=0;
SWAP_spr_Chamber_Plat_G_collide=0;
SWAP_spr_Chamber_Plat_H_collide=0;

//TUBE AND TANK
SWAP_spr_Tube_Water=0;
SWAP_spr_Tube_Glass=0;
spr_Old_Olivia_Conform=0;

//LS Plats
SWAP_spr_LS_Spikes=0;

SWAP_spr_Morph_Plat_A=0;
SWAP_spr_Morph_Plat_B=0;

SWAP_spr_LS_Plat_B=0;
SWAP_spr_LS_Plat_C=0;
SWAP_spr_LS_Plat_D=0;
SWAP_spr_LS_Plat_E=0;

SWAP_spr_LS_Long_Plat_A=0;
SWAP_spr_LS_Long_Plat_B=0;
SWAP_spr_LS_Long_Plat_C=0;
SWAP_spr_LS_Long_Plat_D=0;
SWAP_spr_LS_Long_Plat_E=0;
SWAP_spr_LS_Long_Plat_F=0;
SWAP_spr_LS_Long_Plat_G1=0;
SWAP_spr_LS_Long_Plat_G2=0;
SWAP_spr_LS_Long_Plat_H=0;
SWAP_spr_LS_Long_Plat_I1=0;
SWAP_spr_LS_Long_Plat_I2=0;
SWAP_spr_LS_Long_Plat_J=0;
SWAP_spr_LS_Long_Plat_K=0;
SWAP_spr_LS_Long_Plat_L=0;
SWAP_spr_LS_Long_Plat_M=0;
SWAP_spr_LS_Long_Plat_N=0;
SWAP_spr_LS_Long_Plat_O=0;
SWAP_spr_LS_Long_Plat_P=0;
SWAP_spr_LS_Long_Plat_Q=0;

SWAP_spr_LS_Long_Plat_A_collide=0;
SWAP_spr_LS_Long_Plat_B_collide=0;
SWAP_spr_LS_Long_Plat_C_collide=0;
SWAP_spr_LS_Long_Plat_D_collide=0;
SWAP_spr_LS_Long_Plat_E_collide=0;
SWAP_spr_LS_Long_Plat_F_collide=0;
SWAP_spr_LS_Long_Plat_G1_collide=0;
SWAP_spr_LS_Long_Plat_G2_collide=0;
SWAP_spr_LS_Long_Plat_H_collide=0;
SWAP_spr_LS_Long_Plat_I1_collide=0;
SWAP_spr_LS_Long_Plat_I2_collide=0;
SWAP_spr_LS_Long_Plat_J_collide=0;
SWAP_spr_LS_Long_Plat_K_collide=0
SWAP_spr_LS_Long_Plat_L_collide=0
SWAP_spr_LS_Long_Plat_M_collide=0
SWAP_spr_LS_Long_Plat_N_collide=0
SWAP_spr_LS_Long_Plat_O_collide=0
SWAP_spr_LS_Long_Plat_P_collide=0
SWAP_spr_LS_Long_Plat_Q_collide=0


SWAP_spr_LS_Door=0;
SWAP_spr_LS_Door_top=0;
SWAP_spr_LS_Door_collide=0;

//JUNKYARD----------------------------------------------
SWAP_spr_JunkYard_Ground_A=0;
SWAP_spr_JunkYard_Ground_B=0;
SWAP_spr_JunkYard_Ground_C=0;
SWAP_spr_JunkYard_Ground_D=0;
SWAP_spr_JunkYard_Ground_E=0;
SWAP_spr_JunkYard_Ground_F=0;
SWAP_spr_JunkYard_Ground_G=0;
SWAP_spr_JunkYard_Ground_H=0;
SWAP_spr_JunkYard_Ground_I=0;
SWAP_spr_JunkYard_Ground_J=0;
SWAP_spr_JunkYard_Ground_K=0;
SWAP_spr_JunkYard_Ground_L=0;

SWAP_spr_SlimePlat_A=0;

SWAP_spr_JunkYard_Ground_A_collide=0;
SWAP_spr_JunkYard_Ground_B_collide=0;
SWAP_spr_JunkYard_Ground_C_collide=0;
SWAP_spr_JunkYard_Ground_D_collide=0;
SWAP_spr_JunkYard_Ground_E_collide=0;
SWAP_spr_JunkYard_Ground_F_collide=0;
SWAP_spr_JunkYard_Ground_G_collide=0;
SWAP_spr_JunkYard_Ground_H_collide=0;
SWAP_spr_JunkYard_Ground_I_collide=0;
SWAP_spr_JunkYard_Ground_J_collide=0;
SWAP_spr_JunkYard_Ground_K_collide=0;
SWAP_spr_JunkYard_Ground_L_collide=0;

SWAP_spr_TirePile_high=0;
SWAP_spr_TirePile_long=0;
SWAP_spr_TirePile_small=0;
SWAP_spr_TirePile_smallb=0;
SWAP_spr_LotsofJunks=0;
SWAP_spr_Pipes_A=0;
SWAP_spr_Debris_D=0;
SWAP_spr_Debris_E=0;
SWAP_spr_Debris_F=0;
SWAP_spr_Debris_G=0;
SWAP_spr_JunkPile_A=0;
SWAP_spr_JunkPile_B=0;
SWAP_spr_JunkPile_C=0;
SWAP_spr_JunkPile_D=0;
SWAP_spr_JunkPile_E=0;
SWAP_spr_JunkPile_F=0;
SWAP_spr_JunkPile_G=0;
SWAP_spr_JunkPile_H=0;

//GRASSY HILLS------------------------------------------

SWAP_spr_GrassyHill_00=0;
SWAP_spr_GrassyHill_01=0;
SWAP_spr_GrassyHill_02=0;
SWAP_spr_GrassyHill_03=0;
SWAP_spr_GrassyHill_04=0;
SWAP_spr_GrassyHill_05=0;
SWAP_spr_GrassyHill_06=0;
SWAP_spr_GrassyHill_07=0;
SWAP_spr_GrassyHill_08=0;
SWAP_spr_GrassyHill_09=0;
SWAP_spr_GrassyHill_10=0;
SWAP_spr_GrassyHill_11=0;
SWAP_spr_GrassyHill_12=0;
SWAP_spr_GrassyHill_13=0;
SWAP_spr_GrassyHill_14=0;
SWAP_spr_GrassyHill_15=0;
SWAP_spr_GrassyHill_16=0;
SWAP_spr_GrassyHill_17=0;
SWAP_spr_GrassyHill_18=0;
SWAP_spr_GrassyHill_19=0;

SWAP_spr_GrassyHill_00_collide=0;
SWAP_spr_GrassyHill_01_collide=0;
SWAP_spr_GrassyHill_02_collide=0;
SWAP_spr_GrassyHill_03_collide=0;
SWAP_spr_GrassyHill_04_collide=0;
SWAP_spr_GrassyHill_05_collide=0;
SWAP_spr_GrassyHill_06_collide=0;
SWAP_spr_GrassyHill_07_collide=0;
SWAP_spr_GrassyHill_08_collide=0;
SWAP_spr_GrassyHill_09_collide=0;
SWAP_spr_GrassyHill_10_collide=0;
SWAP_spr_GrassyHill_11_collide=0;
SWAP_spr_GrassyHill_12_collide=0;
SWAP_spr_GrassyHill_13_collide=0;
SWAP_spr_GrassyHill_14_collide=0;
SWAP_spr_GrassyHill_15_collide=0;
SWAP_spr_GrassyHill_16_collide=0;
SWAP_spr_GrassyHill_17_collide=0;
SWAP_spr_GrassyHill_18_collide=0;
SWAP_spr_GrassyHill_19_collide=0;

SWAP_spr_Street_A=0;
SWAP_spr_Street_B=0;
SWAP_spr_Street_C=0;
SWAP_spr_Street_D=0;
SWAP_spr_Street_E=0;
SWAP_spr_Street_F=0;
SWAP_spr_Street_G=0;

SWAP_spr_Street_A_collide=0;
SWAP_spr_Street_B_collide=0;
SWAP_spr_Street_C_collide=0;
SWAP_spr_Street_D_collide=0;
SWAP_spr_Street_E_collide=0;
SWAP_spr_Street_F_collide=0;
SWAP_spr_Street_G_collide=0;

SWAP_spr_Island_A=0;
SWAP_spr_Island_B=0;
SWAP_spr_Island_C=0;
SWAP_spr_Island_D=0;
SWAP_spr_Island_E=0;
SWAP_spr_Island_F=0;
SWAP_spr_Island_G=0;
SWAP_spr_Island_H=0;

SWAP_spr_House_A=0;
SWAP_spr_House_B=0;
SWAP_spr_House_C=0;
SWAP_spr_House_D=0;
SWAP_spr_House_E=0;
SWAP_spr_House_F=0;
SWAP_spr_House_G=0;
SWAP_spr_House_H=0;
SWAP_spr_House_I=0;
SWAP_spr_House_J=0;
SWAP_spr_House_K=0;
SWAP_spr_House_L=0;
SWAP_spr_House_M=0;
SWAP_spr_House_N=0;

SWAP_spr_GrassyHILLs_Mountains_A=0;

//CRYPT-------------------------------------------

SWAP_spr_Crypt_A=0;
SWAP_spr_Crypt_B=0;
SWAP_spr_Crypt_C=0;
SWAP_spr_Crypt_D=0;
SWAP_spr_Crypt_E=0;
SWAP_spr_Crypt_F=0;

SWAP_spr_Crypt_A_collide=0;
SWAP_spr_Crypt_B_collide=0;
SWAP_spr_Crypt_C_collide=0;
SWAP_spr_Crypt_D_collide=0;
SWAP_spr_Crypt_E_collide=0;
SWAP_spr_Crypt_F_collide=0;

//--------------------------------------
// Capsoles

SWAP_spr_left_capsole=0;
SWAP_spr_left_capsole_dark=0;
SWAP_spr_middle_Capsole=0;
SWAP_spr_middle_CapsoleDark=0;

// Alien Eggs
SWAP_spr_AlienEgg_B=0;
SWAP_spr_AlienEgg_C=0;
SWAP_spr_AlienEgg_D=0;

//Barrier
SWAP_spr_Barrier=0;
SWAP_spr_Barrier_Lazer=0;
SWAP_spr_Lazer_Damage=0;

//FX
SWAP_spr_Volume_Flare_A=0;

//BUILDINGS------------------------------------

//Pear Store
SWAP_spr_PearStore_0=0;
SWAP_spr_PearStore_1=0;
spr_PearStore_Door=0;
SWAP_spr_PearStore_inside=0;
SWAP_spr_PearStore_inside_collide=0;

// Hotels
SWAP_spr_Hotel_Sign_L=0;
SWAP_spr_Hotel_Sign_R=0;

SWAP_spr_Hotel_A=0;
SWAP_spr_Hotel_B=0;

SWAP_spr_Hotel_A_collide=0;
SWAP_spr_Hotel_B_collide=0;

SWAP_spr_Hotel_A_top=0;
SWAP_spr_Hotel_B_top=0;

//Dolphin Store

SWAP_spr_DolphinStore=0;
SWAP_spr_DolphinStore_Tank_top=0;

SWAP_spr_DolphinStore_collide=0;
//---------------------------------------------

//Crates

SWAP_spr_Crate_Center_Single=0;
SWAP_spr_Crate_Center_Double=0;
SWAP_spr_Crate_Center_Tripple=0;
SWAP_spr_Crate_Right_Single=0;
SWAP_spr_CrateDark_Right_Single=0;
SWAP_spr_Crate_Right_Double=0;
SWAP_spr_CrateDark_Right_Double=0;
SWAP_spr_Crate_Right_Tiple=0;
SWAP_spr_CrateDark_Right_Tiple=0;

SWAP_spr_Crate_Round_A=0;
SWAP_spr_Crate_Round_B=0;
SWAP_spr_Crate_Round_A_LED=0;
SWAP_spr_Crate_Round_B_LED=0;
SWAP_spr_Crate_B_01=0;
SWAP_spr_Crate_B_02=0;
SWAP_spr_Crate_B_03=0;
SWAP_spr_Crate_C_01=0;

//Spike Boxes
SWAP_spr_SpikeBox_A=0;
SWAP_spr_SpikeBox_B=0;
SWAP_spr_SpikeBox_C=0;


//Scaffolding
SWAP_spr_FG_Scaf_A=0;
SWAP_spr_FG_Scaf_B=0;
SWAP_spr_FG_Scaf_C=0;
SWAP_spr_FG_Scaf_D=0;

SWAP_spr_Tall_Scaffolding_A=0;
SWAP_spr_Tall_Scaffolding_B=0;
SWAP_spr_Tall_Scaffolding_C=0;

SWAP_spr_Short_Platform_Left=0;
SWAP_spr_Center_Short_Platform=0;
SWAP_spr_Tall_platform_Center=0;
SWAP_spr_small_Catwalk_Suspension=0;
SWAP_spr_small_Catwalk_suspension_with_shadow=0;
SWAP_spr_Stack_A=0;
SWAP_spr_Stack_B=0;

//Tracks
SWAP_spr_Track_A=0;
SWAP_spr_Track_B=0;
SWAP_spr_Track_C=0;

//PowerCore
SWAP_spr_PowerCore=0;
SWAP_spr_Orb=0;

SWAP_spr_Suspend_Catwalk_Center=0;
SWAP_spr_Suspend_Catwalk_Dark=0;
SWAP_spr_FloatPlat_Center=0;
SWAP_spr_FloatPlat_Right=0;
SWAP_spr_Catwalk_Side=0;
SWAP_spr_Catwalk_Side_small=0;
SWAP_spr_Catwalk_Side_med=0;

SWAP_spr_Scaffolding_Tri_PlatformDark_High_Right=0;
SWAP_spr_Scaffolding_Tri_PlatformDark_High_Right_collide=0;
SWAP_spr_Scaffolding_Tri_PlatformDark_High_Right_Short=0;
SWAP_spr_scaffolding_double=0;

//Rocks

SWAP_spr_Mound_Bolder_A_Center_dark=0;

//Mountains-----------------------
SWAP_spr_Moutain_A01=0;
SWAP_spr_Moutain_A03=0;
SWAP_spr_Moutain_A04=0;
SWAP_spr_Moutain_B01=0;
SWAP_spr_Moutain_B02=0;
SWAP_spr_Moutain_B03=0;
SWAP_spr_Moutain_B04=0;

SWAP_spr_Moutain_A01_collide=0;
SWAP_spr_Moutain_A03_collide=0;
SWAP_spr_Moutain_A04_collide=0;
SWAP_spr_Moutain_B01_collide=0;
SWAP_spr_Moutain_B02_collide=0;
SWAP_spr_Moutain_B03_collide=0;
SWAP_spr_Moutain_B04_collide=0;

//THE VALLEY--------------------------------------

SWAP_spr_BV_Plat_Post=0;
SWAP_spr_BV_Plat_A=0;
SWAP_spr_BV_Plat_B=0;
SWAP_spr_BV_Plat_C=0;
SWAP_spr_BV_Plat_D=0;
SWAP_spr_BV_Plat_E1=0;
SWAP_spr_BV_Plat_E2=0;
SWAP_spr_BV_Plat_F=0;
SWAP_spr_BV_Plat_G=0;
SWAP_spr_BV_Cliff_Back=0;
SWAP_spr_BV_Cliff_Side=0;
SWAP_spr_BV_Shack_A=0;
SWAP_spr_BV_Shack_B=0;
SWAP_spr_BV_TreePlat_A=0;
SWAP_spr_BV_TreePlat_B=0;
SWAP_spr_Narrow_Plat_A=0;
SWAP_spr_Narrow_Plat_B=0;
SWAP_spr_Narrow_Plat_C=0;
SWAP_spr_Narrow_Plat_D=0;

SWAP_spr_BV_Plat_A_collide=0;
SWAP_spr_BV_Plat_B_collide=0;
SWAP_spr_BV_Plat_D_collide=0;
SWAP_spr_BV_Plat_F_collide=0;
SWAP_spr_BV_Plat_Post_collide=0;
SWAP_spr_BV_Shack_A_collide=0;
SWAP_spr_BV_Shack_B_collide=0;
SWAP_spr_BV_TreePlat_A_collide=0;
SWAP_spr_BV_TreePlat_B_collide=0;

SWAP_spr_BurgermanValley_BK_A_small=0;
SWAP_spr_BurgermanValley_BK_B_small=0;
//Green Forrest--------------------------------------
SWAP_spr_Thorns_B=0;
SWAP_spr_GreenForrest_Dirt_A=0;

SWAP_spr_GreenForrest_Log_A=0;
SWAP_spr_GreenForrest_Log_B=0;
SWAP_spr_GreenForrest_Log_C=0;
SWAP_spr_GreenForrest_Log_D=0;

SWAP_spr_GreenForrest_Log_A_collide=0;
SWAP_spr_GreenForrest_Log_B_collide=0;
SWAP_spr_GreenForrest_Log_C_collide=0;
SWAP_spr_GreenForrest_Log_D_collide=0;

SWAP_spr_GreenForrest_Tree_A=0;
SWAP_spr_GreenForrest_Tree_B=0;
SWAP_spr_GreenForrest_Tree_C=0;
SWAP_spr_GreenForrest_Stump_A=0;
SWAP_spr_GreenForrest_Stump_B=0;
SWAP_spr_GreenForrest_Stump_C=0;
SWAP_spr_GreenForrest_BG_A=0;
SWAP_spr_GreenForrest_BG_B=0;
SWAP_spr_GreenForrest_BG_C=0;
SWAP_spr_GreenForrest_BG_D=0;
SWAP_spr_GreenForrest_Hedge_Top=0;
SWAP_spr_GreenForrest_Hedge_Back=0;
SWAP_spr_GreenForrest_Hedge_small=0;

//Mushroom Forrest--------------------------------------

SWAP_spr_MushroomForrest_PLAT_A=0;
SWAP_spr_MushroomForrest_PLAT_B=0;
SWAP_spr_MushroomForrest_PLAT_C=0;
SWAP_spr_MushroomForrest_PLAT_D=0;
SWAP_spr_MushroomForrest_PLAT_E=0;
SWAP_spr_MushroomForrest_PLAT_F=0;
SWAP_spr_MushroomForrest_PLAT_G=0;
SWAP_spr_MushroomForrest_PLAT_H=0;
SWAP_spr_MushroomForrest_PLAT_I=0;
SWAP_spr_MushroomForrest_PLAT_J=0;
SWAP_spr_MushroomForrest_PLAT_K=0;
SWAP_spr_MushroomForrest_PLAT_L=0;
SWAP_spr_MushroomForrest_PLAT_M=0;
SWAP_spr_MushroomForrest_PLAT_N=0;
SWAP_spr_MushroomForrest_PLAT_O=0;
SWAP_spr_MushroomForrest_PLAT_P=0;
SWAP_spr_MushroomForrest_PLAT_Q=0;
SWAP_spr_MushroomForrest_PLAT_R1=0;
SWAP_spr_MushroomForrest_PLAT_R2=0;
SWAP_spr_MushroomForrest_PLAT_S1=0;
SWAP_spr_MushroomForrest_PLAT_S2=0;
SWAP_spr_MushroomForrest_Tree_A=0;
SWAP_spr_MushroomForrest_Tree_B=0;
SWAP_spr_MushroomForrest_Tree_C=0;


SWAP_spr_MushroomForrest_PLAT_A_collide=0;
SWAP_spr_MushroomForrest_PLAT_B_collide=0;
SWAP_spr_MushroomForrest_PLAT_C_collide=0;
SWAP_spr_MushroomForrest_PLAT_D_collide=0;
SWAP_spr_MushroomForrest_PLAT_E_collide=0;
SWAP_spr_MushroomForrest_PLAT_F_collide=0;
SWAP_spr_MushroomForrest_PLAT_G_collide=0;
SWAP_spr_MushroomForrest_PLAT_H_collide=0;
SWAP_spr_MushroomForrest_PLAT_I_collide=0;
SWAP_spr_MushroomForrest_PLAT_J_collide=0;
SWAP_spr_MushroomForrest_PLAT_K_collide=0;
SWAP_spr_MushroomForrest_PLAT_L_collide=0;
SWAP_spr_MushroomForrest_PLAT_M_collide=0;
SWAP_spr_MushroomForrest_PLAT_N_collide=0;

//DARKCORE----------------------------------------

//Factory
SWAP_spr_trollfactory_FG=0;
SWAP_spr_trollfactory_FG_collide=0;

//BedRock
SWAP_spr_RockyGround_With_Bolders_dark=0;
SWAP_spr_RockyGround_With_Bolders=0;

//Cliffs
SWAP_spr_Tunnel_Cliff_A=0;
SWAP_spr_Tunnel_Cliff_B=0;
SWAP_spr_Tunnel_Cliff_C=0;
SWAP_spr_Tunnel_Cliff_D=0;
SWAP_spr_Tunnel_Cliff_E=0;
SWAP_spr_Tunnel_Cliff_F=0;
SWAP_spr_Tunnel_Cliff_G=0;
SWAP_spr_Tunnel_Cliff_H=0;

SWAP_spr_Tunnel_Cliff_A_collide=0;
SWAP_spr_Tunnel_Cliff_B_collide=0;
SWAP_spr_Tunnel_Cliff_C_collide=0;
SWAP_spr_Tunnel_Cliff_D_collide=0;
SWAP_spr_Tunnel_Cliff_E_collide=0;
SWAP_spr_Tunnel_Cliff_F_collide=0;
SWAP_spr_Tunnel_Cliff_G_collide=0;
SWAP_spr_Tunnel_Cliff_H_collide=0;

//LEDS
SWAP_spr_Right_Hallway_LED=0;
SWAP_spr_Diagonal_A_LED=0;
SWAP_spr_Hor_Right_Bridge_small_LED=0;
SWAP_spr_LongBridge_LED=0;
SWAP_spr_PearStore_LED=0;
SWAP_spr_Right_Room_A_LED=0;
SWAP_spr_Right_RoomC01_LED=0;
SWAP_spr_Right_TowerB_LED=0;
SWAP_spr_Stack_LED=0;
SWAP_spr_Tower_I_LED=0;
SWAP_spr_Right_Warehouse_LED=0;
SWAP_spr_Right_RoomC_LED=0;
SWAP_spr_Right_TowerC01_LED=0;
SWAP_spr_Tower_J_LED=0;
SWAP_spr_Tower_K_LED=0;
SWAP_spr_Right_TowerD02_LED=0;
SWAP_spr_Right_TowerA_LED=0;
SWAP_spr_Tower_H_LED=0;
SWAP_spr_LBridge_B_LED=0;
SWAP_spr_UBridge_LED=0;
SWAP_spr_TBridge_LED=0;
SWAP_spr_Tunnel_Cliff_E_LED=0;

//Bridges
SWAP_spr_Bridge_Angle_A=0;
SWAP_spr_Bridge_Angle_B=0;
SWAP_spr_Bridge_Angle_C=0;
SWAP_spr_Bridge_Angle_D=0;
SWAP_spr_Bridge_Double_A=0;
SWAP_spr_Right_Room_A=0;
SWAP_spr_Right_TowerA=0;
SWAP_spr_Right_Warehouse=0;
SWAP_spr_Right_Apartment_A01=0;
SWAP_spr_Right_TowerB=0;
SWAP_spr_Right_TowerC01=0;
SWAP_spr_Right_RoomC=0;
SWAP_spr_Right_TowerD01=0;
SWAP_spr_Right_TowerD02=0;
SWAP_spr_Hor_Right_Bridge_small=0;
SWAP_spr_Ver_Low_Bridge=0;
SWAP_spr_Right_Hallway=0;
SWAP_spr_V_Hallway_Right=0;
SWAP_spr_Naked_Bridge_Right=0;
SWAP_spr_Naked_Bridge_Right_Slim=0;
SWAP_spr_Naked_Bridge_Slim=0;
SWAP_spr_Ver_Mid_Bridge_Dark=0;
SWAP_spr_Ver_Mid_Bridge_Dark_clean=0;
SWAP_spr_Tower_E=0;
SWAP_spr_Tower_F=0;
SWAP_spr_Tower_G=0;
SWAP_spr_Tower_H=0;
SWAP_spr_Tower_I=0;
SWAP_spr_Tower_J=0;
SWAP_spr_Tower_K=0;
SWAP_spr_Diagonal_A=0;
SWAP_spr_LBridge_A=0;
SWAP_spr_LBridge_B=0;
SWAP_spr_TBridge=0;
SWAP_spr_UBridge=0;
SWAP_spr_LongBridge=0;
SWAP_spr_Bridge_single_center=0;
SWAP_spr_Bridge_single_right=0;

SWAP_spr_Bridge_Angle_A_collide=0;
SWAP_spr_Bridge_Angle_B_collide=0;
SWAP_spr_Bridge_Angle_C_collide=0;
SWAP_spr_Bridge_Angle_D_collide=0;
SWAP_spr_Bridge_Double_A_collide=0;
SWAP_spr_Right_Room_A_collide=0;
SWAP_spr_Right_TowerA_collide=0;
SWAP_spr_Right_Warehouse_collide=0;
SWAP_spr_Right_Apartment_A01_collide=0;
SWAP_spr_Right_TowerB_collide=0;
SWAP_spr_Right_TowerC01_collide=0;
SWAP_spr_Right_RoomC_collide=0;
SWAP_spr_Right_TowerD01_collide=0;
SWAP_spr_Right_TowerD02_collide=0;
SWAP_spr_Hor_Right_Bridge_small_collide=0;
SWAP_spr_Ver_Low_Bridge_collide=0;
SWAP_spr_Right_Hallway_collide=0;
SWAP_spr_V_Hallway_Right_collide=0;
SWAP_spr_Naked_Bridge_Right_collide=0;
SWAP_spr_Naked_Bridge_Right_Slim_collide=0;
SWAP_spr_Naked_Bridge_Slim_collide=0;
SWAP_spr_Tower_E_collide=0;
SWAP_spr_Tower_F_collide=0;
SWAP_spr_Tower_G_collide=0;
SWAP_spr_Tower_H_collide=0;
SWAP_spr_Tower_I_collide=0;
SWAP_spr_Tower_J_collide=0;
SWAP_spr_Tower_K_collide=0;
SWAP_spr_Diagonal_A_collide=0;
SWAP_spr_LBridge_A_collide=0;
SWAP_spr_LBridge_B_collide=0;
SWAP_spr_TBridge_collide=0;
SWAP_spr_UBridge_collide=0;
SWAP_spr_LongBridge_collide=0;
SWAP_spr_Bridge_single_center_collide=0;
SWAP_spr_Bridge_single_right_collide=0;



//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// INITIALIZE IMPORT SPRITES
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//Valley --------------------------------------------------------------------------------
SWAP_spr_BurgermanValley_LONG_PLAT_A=0;
SWAP_spr_BurgermanValley_LONG_PLAT_A_collide=0;
SWAP_spr_BurgermanValley_LONG_PLAT_B=0;
SWAP_spr_BurgermanValley_LONG_PLAT_B_collide=0;
SWAP_spr_BurgermanValley_LONG_PLAT_C=0;
SWAP_spr_BurgermanValley_LONG_PLAT_C_collide=0;

SWAP_spr_BurgermanValley_BK_A=0;
SWAP_spr_BurgermanValley_BK_A_collide=0;
SWAP_spr_BurgermanValley_BK_B=0;
SWAP_spr_BurgermanValley_BK_B_collide=0;

//Misc --------------------------------------------------------------------------------
Garbage_Collector=0;
LS_Tile_A=0;
spr_LS_Ground=0;
Anime_Lines=0;
TubeIN =0;
surf =0;
TallBlast=0;
FatBlast=0;

//Dolphin
spr_Dolphin_Swim=0;
spr_Dolphin_Idle=0;

//Dolphin Trainer
spr_DolphinMan_Idle=0;
spr_DolphinMan_Show=0;

//Mentor --------------------------------------------------------------------------------
Mentor=0;
Mentor_Fire=0;
Mentor_Uniform=0;
Mentor_Thomp=0;

//Clouds --------------------------------------------------------------------------------
PinkCloud=0;
BlueCloud=0;
OrangeCloud=0;

//TrollQueen --------------------------------------------------------------------------
TrollQueen_Explode=0;
TrollQueen_Turn=0;
TrollQueen_Stand=0;
TrollQueen_Walk=0;
TrollQueen_Fire=0;
TrollQueen_GetUP=0;
TrollQueen_Swing=0;
TrollQueen_Jump=0;
TrollQueen_SlamGround=0;
TrollQueen_Sit=0;
TrollQueen_BackHand=0;
TrollQueen_UpperCut=0;


//Mr Grin ------------------------------------------------------------------------------
spr_MrGrin_Explode=0;
spr_MrGrin_Walk=0;
spr_MrGrin_Idle=0;
spr_MrGrin_Jump=0;
spr_MrGrin_Clone=0;
spr_MrGrin_Turn=0;
spr_MrGrin_Shoot_UP=0;
spr_MrGrin_Shoot_Down=0;
spr_MrGrin_Shoot_Forward_Down=0;
spr_MrGrin_Shoot_Forward_UP=0;
spr_MrGrin_Shoot_Forward_Single=0;
spr_MrGrin_Shoot_Forward=0;

//Rabbit ------------------------------------------------------------------------------
spr_Rabbit_Explode=0;
spr_Rabbit_Idle=0;
spr_Rabbit_Bomb=0;
spr_Rabbit_Jump=0;
spr_Rabbit_Turn=0;
spr_Rabbit_Walk=0;
spr_Rabbit_ShootUP=0;
spr_Rabbit_ShootDown=0;

spr_Rabbit_Egg_A=0;
spr_Rabbit_Egg_B=0;
spr_Rabbit_Egg_C=0;

//Collector ---------------------------------------------------------------------------
Collector_Backhand=0;
Collector_Shoot=0;
Collector_UpperCut=0;
Collector_Walk=0;
Collector_Idle=0;

spr_Collector_Turn=0;
spr_Collector_Belly=0;
spr_Collector_Explode=0;

spr_Collector_Ball=0;
spr_Collector_Ball_Splash=0;

spr_Collector_Fire =  0;
Collector_Sit=0;

//Mech Collector ---------------------------------------------------------------------------
spr_Mechollector_Explode=0;
spr_Mechollector_Walk=0;
spr_Mechollector_Stand=0;
spr_Mechollector_Shoot=0;
spr_Mechollector_Turn=0;
spr_Mechollector_Jump=0;
spr_Mechollector_GroundBlast=0;
//White Bat ---------------------------------------------------------------------------
spr_WB_Explode=0;
spr_WB_Fly=0;
spr_WB_Glide=0;
spr_WB_Scream=0;
spr_WB_Storm=0;
spr_WB_Turn=0;
//Buffs
spr_Absorb=0;
spr_Absorb_header=0;

//Creeper ------------------------------------------------------------------------------
Creeper_Bite=0;
Creeper_Spray=0;
Creeper_Stand=0;
Creeper_Turn=0;
Creeper_Walk=0;

//BurgerMan ------------------------------------------------------------------------------
BM_Point=0;
BM_Walk=0;
BM_Idle=0;

//Medium Consumer ---------------------------------
spr_Medium_Consumer_Walk=0;
spr_Medium_Consumer_Jump=0;
spr_Medium_Consumer_Turn=0;
spr_Medium_Consumer_Idle=0;
spr_Medium_Consumer_Bite=0;

//Consumer Kart ------------------------------------------------------------------------------
Consumer_Kart_Turn=0;
Consumer_Kart_Ride=0;

//Seeker ------------------------------------------------------------------------------
Seeker_Bite=0;
Seeker_Boost=0;
Seeker_Swim=0;
Seeker_Turn=0;

//Robot -------------------------------------------------------------------------------
Robot_Boost=0;
Robot_Fire=0;
Robot_Walk=0;
Robot_Stand=0;

//Monster 13 -------------------------------------------------------------------------------
spr_Drifter_Die=0;
spr_Drifter_Arm_A=0;
spr_Drifter_Cage=0;
spr_Drifter_Cage_Blast=0;
spr_Drifter_Blast=0;
spr_Drifter_Trigger=0;
spr_Drifter_Idle=0;
spr_Drifter_Turn=0;

//Monster 13 -------------------------------------------------------------------------------
spr_Monster_13_Explode=0;
spr_Monster_13_Boost=0;
spr_Monster_13_Turn=0;
spr_Monster_13_BackSlash=0;
spr_Monster_13_Idle=0;
spr_Monster_13_ForwardSlash=0;
spr_Monster_13_ArcBlast=0;
spr_Monster_13_Jump=0;
spr_Monster_13_Walk=0;
spr_Monster_13_Run=0;
spr_Monster_13_Duck_Shoot=0;
spr_Monster_13_Duck=0;

//MegaBot -------------------------------------------------------------------------------
spr_MegaBot_Explode=0;
spr_MegaBot_Dash_H=0;
spr_MegaBot_Dash_V=0;
spr_MegaBot_Blast=0;
spr_MegaBot_Jump=0;
spr_MegaBot_Slash=0;
spr_MegaBot_Turn=0;
spr_MegaBot_Walk=0;
spr_MegaBot_Sword=0;
spr_MegaBot_Idle=0;


//Gatler -------------------------------------------------------------------------------
Gatler_Fire=0;
Gatler_Fire_UPDOWN=0;
Gatler_Walk=0;
Gatler_Melee=0;
Gatler_Jump=0;

//Terror -------------------------------------------------------------------------------
spr_Terror_Idle=0;
spr_Terror_Turn=0;
spr_Terror_Shoot=0

//UFO --------------------------------------------------------------------------------
UFO=0;
UFO_top=0;

//GooeyDragon --------------------------------------------------------------------------------
spr_GD_Stand=0;
spr_GD_Scream=0;
spr_GD_Leave=0;
spr_GD_Dive=0;
spr_GD_Bite=0;

spr_GD_Swim=0;

//SIN --------------------------------------------------------------------------------
spr_Sin_Explode=0;
spr_SIN_Walk=0;
spr_SIN_Swing=0;
spr_SIN_Teleport=0;
spr_SIN_Turn=0;
spr_SIN_Blast=0;
spr_SIN_Idle=0;
spr_SIN_Grab=0;
spr_SIN_Jump=0;

spr_Wavlet_Blast=0;

//Ginger Hound --------------------------------------------------------------------------------
spr_GH_Explode=0;
spr_GH_Bite=0;
spr_GH_Idle=0;
spr_GH_Pounce=0;
spr_GH_Run=0;
spr_GH_Turn=0;
//spr_GH_Walk=0;
spr_GH_Blast=0;

//Little_Consumer -------------------------------------------------------------------------
spr_Little_Consumer_Walk=0;
spr_Little_Consumer_Jump=0;
spr_Little_Consumer_LookAround=0;
spr_Little_Consumer_Bite=0;
spr_Little_Consumer_Turn=0;

/*
//GingerPup -------------------------------------------------------------------------
spr_GingerPup_Idle_A=0;
spr_GingerPup_Idle_C=0;
spr_GingerPup_Cast=0;
spr_GingerPup_Jump=0;
spr_GingerPup_Float=0;
spr_GingerPup_Walk_A=0;
spr_GingerPup_Sleep=0;

//Fuzzy Turtle -------------------------------------------------------------------------
spr_FuzzyTurtle_OwlSnatch=0;
spr_FuzzyTurtle_Walk=0;
spr_FuzzyTurtle_Talk=0;
spr_FuzzyTurtle_Idle_A=0;
spr_FuzzyTurtle_Jump=0;
spr_FuzzyTurtle_Ladder=0;
spr_FuzzyTurtle_SwimB=0;

//Meow Cat -------------------------------------------------------------------------
spr_Cat_Idle=0;
spr_Cat_Jump=0;
spr_Cat_Meow=0;
spr_Cat_Walk=0;
spr_Cat_Ladder=0;
spr_Cat_Angry=0;
*/
spr_MeowCat_Header=0;

//Bat Consumer -------------------------------------------------------------------------
Bat_Consumer__Skinney_Fly_A=0;
Bat_Consumer__Skinney_Fly_B=0;
Bat_Consumer__Skinney_Fire_A=0;

//QuadroPOD -------------------------------------------------------------------------
spr_QuadroPOD_Idle=0;
spr_QuadroPOD_turn=0;
spr_QuadroPOD_DownForward=0;
spr_QuadroPOD_Forward=0;
spr_QuadroPOD_UPForward=0;
spr_QuadroPOD_UP=0;
spr_QuadroPOD_JUMP=0;
spr_QuadroPOD_walk=0;

/*
//Lurker -------------------------------------------------------------------------
spr_Lurker_Walk=0;
spr_Lurker_Bite=0;
spr_Lurker_Idle=0;
*/

//Baby Fairy -------------------------------------------------------------------------
spr_Baby_Fairy_CAST=0;
spr_Baby_Fairy_FLY=0;
spr_Baby_Fairy_SUMMON=0;



//Ships -------------------------------------------------------------------------
spr_Ship_Short=0;

//TurrentPOD -------------------------------------------------------------------------
spr_TurrentPOD=0;
spr_TurrentPOD_Turn=0;


//Menu --------------------------------------------------------------------------------
spr_Atlus_Logo=0;
spr_Duo=0;
spr_Horizon=0;
//RS_LOGO=0;
Menu_Arrow=0;
spr_Menu_BG=0;

EMP=0;
Ready=0;
Shield=0;
Fight=0;
FuzzyTurtle=0;
GingerPup_header=0;
spr_QuackerSquad=0;
spr_Continue=0;
spr_Clear_Area=0;

Resurrection=0;
Powerup=0;
Checkpoint=0;
StageClear=0;


//Tops --------------------------------------------------------------------------------
SWAP_spr_Right_Warehouse_top=0; //check
SWAP_spr_Right_Apartment_A01_top=0; //check
SWAP_spr_Right_TowerD01_top=0; //check
SWAP_spr_Right_TowerD02_top=0; //check
SWAP_spr_Right_TowerC01_top=0; //check
// Cen_Hallway_top=0;
SWAP_spr_Right_RoomC_top=0; //check

SWAP_spr_Right_Hallway_top=0; //check
SWAP_spr_Ver_Low_Bridge_top=0; //check
// Cen_Warehouse_top=0;
SWAP_spr_Right_Room_A_top=0; //check
// Center_Room_A_top=0;
// Hor_Cen_Bridge_small_top=0;
SWAP_spr_Hor_Right_Bridge_small_top=0; //check
SWAP_spr_V_Hallway_Right_top=0; //check
SWAP_spr_Right_TowerA_top=0; //check
SWAP_spr_Naked_Bridge_Right_top=0; //check
SWAP_spr_Right_TowerB_top=0; //check
SWAP_spr_Tower_E_top=0; //check
SWAP_spr_Tower_F_top=0; //check
SWAP_spr_Tower_G_top=0; //check
SWAP_spr_Tower_H_top=0; //check
SWAP_spr_Tower_I_top=0; //check
SWAP_spr_Tower_J_top=0; //check
SWAP_spr_Tower_K_top=0; //check
SWAP_spr_Diagonal_A_top=0; //check
SWAP_spr_LBridge_A_top=0;//check
SWAP_spr_LBridge_B_top=0;//check
SWAP_spr_TBridge_top=0;//check
SWAP_spr_UBridge_top=0;//check
SWAP_spr_LongBridge_top=0;
SWAP_spr_Bridge_single_center_top=0;
SWAP_spr_Bridge_single_right_top=0;

SWAP_spr_Tunnel_Cliff_A_Top=0; //check
SWAP_spr_Tunnel_Cliff_B_Top=0; //check
SWAP_spr_Tunnel_Cliff_C_Top=0; //check
SWAP_spr_Tunnel_Cliff_F_Top=0; //check
SWAP_spr_Tunnel_Cliff_G_Top=0; //check
SWAP_spr_Tunnel_Cliff_H_Top=0; //check

SWAP_spr_PearStore_inside_top=0; //check

SWAP_spr_Crypt_A_top=0; //check
SWAP_spr_Crypt_F_top=0; //check

SWAP_spr_BurgermanValley_BK_A_top=0; //check

//ADD SPRITES ----------------
TallBlast = 0;

}


background_index[0] = noone;
background_index[1] = noone;
background_index[2] = noone;
background_index[3] = noone;
background_index[4] = noone;
background_index[5] = noone;
background_index[6] = noone;


skip_flush=false;
texture_flush=false;
sprite_flush=false;
page_flush=false;
full_flush=false;

//OTHER STUFF
global.manuel_draw=false; 
global.color_blend=false;
audio_sound_pitch(snd_IndustrialRoar,1);
audio_sound_pitch(snd_Bash,1);
flushed=true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_bullet_time=true;
draw_clock=true;
flushed=false;




show_debug_overlay(false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.memoryflush=true;
global.Clear_Working=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{offset=1.5;}
else
{offset=1;}


//DISCONNECTED CONTROLLER -------------------------------------------------------------------------------

if (global.platform==1) 
{

if (no_controller) || (progress_lost) || (logout) || (lost_connection_prompt)
{
            if (lost_connection_prompt==false)
            {
                for(aa=0;aa&lt;1280*offset;aa+=32)
                {
                    for(bb=0;bb&lt;720*offset;bb+=32)
                    {
                    draw_sprite_ext(spr_noise,irandom_range(1,6),aa*offset,bb*offset,offset,offset,0,c_white,.5);
                    }
                }
            }
            
            if (lost_connection_prompt==false)
            draw_set_alpha(.95);
            else
            draw_set_alpha(.5);
            
            draw_set_color(c_black);
            draw_rectangle(0,0,1280*offset,720*offset,false);  
            draw_set_valign(fa_center);      
            draw_set_font(fnt_Score);
            draw_set_halign(fa_center);
            draw_set_alpha(1);
            draw_set_color(c_white);
            
            draw_line(0,(360-100)*offset,1920,(360-100)*offset);
            draw_line(0,(360+100)*offset,1920,(360+100)*offset);
            
            paused=true;
}
else
{
    if (paused) 
        {
        if (alarm[5]==-1) alarm[5]=15; //Pause Off
        }        
    
}
                                        
            if (no_controller) //CONTROLLER DISCONNECTED
            {                                                   
                var check_pad;
                no_pad=true;
                
                for (var check_pad = 0; check_pad &lt; gamepad_get_device_count(); check_pad++) 
                {
                    //if (gamepad_is_connected(check_pad) == true) no_pad=false;
                    if gamepad_is_connected(global.playing_index) no_pad=false;
                }
                
                if (no_pad)
                {
                            draw_text(640*offset, (360 - 16)*offset, "RECONNECT CONTROLLER");
                
                            draw_set_font(fnt_LowGun);                                                       
                            draw_text_transformed(640*offset, (360+16)*offset, "PRESS       TO CONTINUE",offset,offset,0);
                            draw_set_color(c_green);
                            draw_circle(607*offset, (365+16)*offset,11*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365+16)*offset,11.5*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365+16)*offset,12*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365+16)*offset,12.5*offset+sin(phase)*.1,true);
                            draw_text_transformed(607*offset, (360+16)*offset, "A",offset+sin(phase)*.1,offset+sin(phase)*.1,0);
                            draw_set_color(c_white);                                                       
                            //phase+=.25; 
                }
                else
                {
                
                            draw_set_font(fnt_LowGun);                                                       
                            draw_text_transformed(640*offset, (360)*offset, "PRESS       TO CONTINUE",offset,offset,0);
                            draw_set_color(c_green);
                            draw_circle(607*offset, (365)*offset,11*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365)*offset,11.5*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365)*offset,12*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365)*offset,12.5*offset+sin(phase)*.1,true);
                            draw_text_transformed(607*offset, (360)*offset, "A",offset+sin(phase)*.1,offset+sin(phase)*.1,0);
                            draw_set_color(c_white);                                                       
                            //phase+=.25; 
                
                }
            }
            else
            {
                if (progress_lost) //YOU WILL LOOSE PROGRESS
                {
                            draw_text(640*offset, (360 - 16)*offset, "EXITING TO MAIN MENU");
                            
                            draw_set_font(fnt_LowGun);                                                       
                            draw_text_transformed(640*offset, (360+16)*offset, "PRESS       TO CONTINUE",offset,offset,0);
                            draw_set_color(c_green);
                            draw_circle(607*offset, (365+16)*offset,11*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365+16)*offset,11.5*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365+16)*offset,12*offset+sin(phase)*.1,true);
                            draw_circle(607*offset, (365+16)*offset,12.5*offset+sin(phase)*.1,true);
                            draw_text_transformed(607*offset, (360+16)*offset, "A",offset+sin(phase)*.1,offset+sin(phase)*.1,0);
                            draw_set_color(c_white);                                                       
                            //phase+=.25; 
                }
                else if (logout) &amp;&amp; !instance_exists(obj_SaveSelect) //LOGGED OUT
                    {                                                                           
                    draw_text(640*offset, (360 - 16)*offset, "ACTIVE USER SIGNED OUT");
                    draw_set_font(fnt_LowGun);
                                                                                   
                    draw_text_transformed(640*offset, (360+16)*offset, "PRESS       TO CONTINUE",offset,offset,0);
                    draw_set_color(c_green);
                    draw_circle(603*offset, (365+16)*offset,11*offset+sin(phase)*.1,true);
                    draw_circle(603*offset, (365+16)*offset,11.5*offset+sin(phase)*.1,true);
                    draw_circle(603*offset, (365+16)*offset,12*offset+sin(phase)*.1,true);
                    draw_circle(603*offset, (365+16)*offset,12.5*offset+sin(phase)*.1,true);
                    draw_text_transformed(603*offset, (360+16)*offset, "A",offset+sin(phase)*.1,offset+sin(phase)*.1,0);
                    draw_set_color(c_white);  
                    draw_set_font(fnt_Arial)
                    draw_text_transformed(640*offset, (360+120)*offset, "[Sign back in or any unsaved progress will be lost.]"    ,offset+sin(phase)*.1,offset+sin(phase)*.1,0);                                                                                                                                                                                         
                    }
                    else if (lost_connection_prompt)
                    {
                        draw_text_transformed(640*offset, (360)*offset, "Console has lost connection to Xbox Live.",.7,.7,0);
                    }
                
            }
      
        


}//END XBOX ONE

                       
        







// DRAW USER INFO --------------------------------------------------------------------------------------------

/*
draw_set_font(fnt_Arial);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_color(c_black);
draw_set_alpha(1);




if (global.platform==1)
{
draw_text(15+1,200+4+1,"Designated Xbox User Name: ["+global.display_name+"] Signed In ["+string(global.signed_in)+"] Pad ["+string(global.playing_index)+"]");
//draw_text(15+1,200+24+1,"Activating User: ["+string(activating_user_name)+"] Activating PadCount: ["+string(activating_user_pad)+"]");

draw_text(15+1,200+64+1,"Padoount: ["+string(gamepad_get_device_count())+"]");
draw_text(15+1,200+84+1,"Online: ["+string(global.Online)+"]");
draw_text(15+1,200+104+1,"Logout: ["+string(logout)+"]");
draw_text(15+1,200+124+1,"Lose Progress: ["+string(progress_lost)+"]");
draw_text(15+1,200+144+1,"Master Paused: ["+string(paused)+"]");
draw_text(15+1,200+164+1,"No Controller: ["+string(no_controller)+"]");
draw_text(15+1,200+184+1,"Account Picker: ["+string(showing_account_picker)+"]");
}

draw_set_color(c_white);

if (global.platform==3)
{
draw_text(15,10,"User Name: ["+string(global.UserName)+"]");
draw_text(15,27,"Player: ["+string(global.playing_index)+"]");
}



if (global.platform==1)
{

draw_text(15,200+4,"Designated Xbox User Name: ["+global.display_name+"] Signed In ["+string(global.signed_in)+"] Pad ["+string(global.playing_index)+"]");
//draw_text(15,200+24,"Activating User: ["+string(activating_user_name)+"] Activating PadCount: ["+string(activating_user_pad)+"]");

draw_text(15,200+64,"Padoount: ["+string(gamepad_get_device_count())+"]")
draw_text(15,200+84,"Online: ["+string(global.Online)+"]")
draw_text(15,200+104,"Logout: ["+string(logout)+"]");
draw_text(15,200+124,"Lose Progress: ["+string(progress_lost)+"]");
draw_text(15,200+144,"Master Paused: ["+string(paused)+"]");
draw_text(15,200+164,"No Controller: ["+string(no_controller)+"]");
draw_text(15,200+184,"Account Picker: ["+string(showing_account_picker)+"]");
}

//*/

// SCALE WINDOW ---------------------------------------------------------------------------

if (display_get_width()!=1920)
{    
    step_x=(display_get_width()/1920);
    step_y=(display_get_height()/1080);
     
    if window_get_fullscreen()
    {
    display_set_gui_size(display_get_width() , display_get_height());
    display_set_gui_maximise(1*step_x, 1*step_y, 0, 0); 
    }
    else
    {
        display_set_gui_size(1920,1080);
        display_set_gui_maximise(1, 1, 0, 0);
    }

}

//DRAW RESOLUTION CURTAIN
 

buff=400;
draw_set_alpha(1);
draw_rectangle_colour(-buff,-buff,1920+buff,0,c_black,c_black,c_black,c_black,false); //top
draw_rectangle_colour(-buff,1080,1920+buff,1080+buff,c_black,c_black,c_black,c_black,false); //bottom

draw_rectangle_colour(-buff,-buff,0,1080+buff,c_black,c_black,c_black,c_black,false); //left
draw_rectangle_colour(1920,-buff,1920+buff,1080+buff,c_black,c_black,c_black,c_black,false); //right

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_red);

if (global.ps4_net_check_result == 0)
    draw_text(10, 10, "psn features not allowed");
else
    draw_text(10, 10, "psn features are allowed");
    
    draw_text(10, 25, "alarm[9]: "+string(alarm[9]));
    draw_text(10, 40, "alarm[10]: "+string(alarm[10]));

    draw_set_color(c_white);
*/
    
if (draw_bullet_time)
{
if (global.game_speed!=target_speed)
{
image_blend=c_white;
draw_set_colour(image_blend);

a=(global.game_speed-.5)*20;

if(target_speed&gt;global.game_speed)
{
image_alpha = (1-global.game_speed)*2-.25; 
sprite_index=spr_game_time;
image_speed=.5*global.game_speed;
draw_set_alpha(1);
clock_text="[speed up]";
}
if(target_speed&lt;global.game_speed)
{
image_alpha = global.game_speed-.25; 
sprite_index=spr_game_time;
image_speed=-.5*global.game_speed;
draw_set_alpha(1);
clock_text="[slow down]";
}

draw_set_alpha(image_alpha);
draw_rectangle(view_xview[0]+0+64*a,view_yview+0+36*a,view_xview+1280-64*a,view_yview+720-36*a,true);
draw_set_alpha(image_alpha-.05);
draw_rectangle(view_xview[0]+0+64*b,view_yview+0+36*b,view_xview+1280-64*b,view_yview+720-36*b,true);
draw_set_alpha(image_alpha-.1);
draw_rectangle(view_xview[0]+0+64*c,view_yview+0+36*c,view_xview+1280-64*c,view_yview+720-36*c,true);
draw_set_alpha(image_alpha-.15);
draw_rectangle(view_xview[0]+0+64*d,view_yview+0+36*d,view_xview+1280-64*d,view_yview+720-36*d,true);
draw_set_alpha(image_alpha-.2);
draw_rectangle(view_xview[0]+0+64*e,view_yview+0+36*e,view_xview+1280-64*e,view_yview+720-36*e,true);
draw_set_alpha(image_alpha-.25);
draw_rectangle(view_xview[0]+0+64*f,view_yview+0+36*f,view_xview+1280-64*f,view_yview+720-36*f,true);
draw_set_alpha(image_alpha-.3);
draw_rectangle(view_xview[0]+0+64*g,view_yview+0+36*g,view_xview+1280-64*g,view_yview+720-36*g,true);
draw_set_alpha(image_alpha-.35);
draw_rectangle(view_xview[0]+0+64*h,view_yview+0+36*h,view_xview+1280-64*h,view_yview+720-36*h,true);
draw_set_alpha(image_alpha-.4);
draw_rectangle(view_xview[0]+0+64*i,view_yview+0+36*i,view_xview+1280-64*i,view_yview+720-36*i,true);
draw_set_alpha(image_alpha-.45);
draw_rectangle(view_xview[0]+0+64*j,view_yview+0+36*j,view_xview+1280-64*j,view_yview+720-36*j,true);
draw_set_alpha(1);

h=g;
g=f;
f=e;
e=d;
d=c;
c=b;
b=a;
if (global.game_speed==.5)
{
a=0;
b=0;
c=0;
d=0;
e=0;
f=0;
g=0;
h=0;
i=0;
j=0;
}
if (global.game_speed==1)
{
a=10;
b=10;
c=10;
d=10;
e=10;
f=10;
g=10;
h=10;
i=10;
j=10;
}
}

if (draw_clock)
{
if (alarm[1]&gt;0) 
{
if !instance_exists(obj_Inventory)
{
image_blend=c_white;
draw_set_colour(image_blend);
draw_set_font(fnt_BytePolice);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
image_alpha=.5+global.game_speed*.5;
draw_set_alpha(image_alpha);
draw_text_transformed(view_xview+640,view_yview+342,string(clock_text),.75,.75,0);
sprite_index=spr_game_time;
draw_sprite(sprite_index,image_index,view_xview+640,view_yview+320);
draw_set_alpha(1);
}
}
}
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="121">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (paused) paused=false; else paused=true;
audio_play_sound(snd_Quack_A,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
