<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.spr_QuadroPOD_Idle==0)
{
master.num+=1;
master.spr_QuadroPOD_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_Idle.png",26,0,1,86,142);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_QuadroPOD_turn==0)
{
master.num+=1;
master.spr_QuadroPOD_turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_turn.png",26,0,1,86,169);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_QuadroPOD_DownForward==0)
{
master.num+=1;
master.spr_QuadroPOD_DownForward=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_DownForward.png",25,0,1,86,165);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_QuadroPOD_Forward==0)
{
master.num+=1;
master.spr_QuadroPOD_Forward=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_Forward.png",26,0,1,86,145);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_QuadroPOD_UPForward==0)
{
master.num+=1;
master.spr_QuadroPOD_UPForward=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_UPForward.png",25,0,1,87,161);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_QuadroPOD_UP==0)
{
master.num+=1;
master.spr_QuadroPOD_UP=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_UP.png",26,0,1,88,166);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_QuadroPOD_JUMP==0)
{
master.num+=1;
master.spr_QuadroPOD_JUMP=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_JUMP.png",32,0,1,80,260);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_QuadroPOD_walk==0)
{
master.num+=1;
master.spr_QuadroPOD_walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_QuadroPOD_walk.png",31,0,1,98,155);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}



aiming=false;
fire=false;
west_east=0;
image_speed=.5;
aim=2;
active=false;
alarm[0]=120;
if(image_xscale==1)
image_xscale=random_range(.5,1.2);
scale=image_xscale;
image_yscale=scale;
swing_range=false;
guard=false;
drop=false;
fire_able=true;
always_active=false;
setspeed = 1 + random_range(1,2);
hsp=0;
vsp=0;
target=vsp;

damage=10*scale*global.difficulty;
hp=30*scale;
init_hp=hp;

stuck=0;
walkAway=false;
tiltup=false;
last_y=y;
last_x=x;
average_y=y;

kickback=0;
canjump=true;

    grav=1;
    moveChoice=2;
    moveChoose=false;
    alarm[0]=100;
    jhsp=0;
    
    if !place_meeting(x,y+vsp,par_wall) //Spawn Fall 
    grounded=false;
    else
    grounded=true;

view = instance_create(x,y,obj_QuadroPOD_view);
sprite_index=spr_collide;

/*Shadow
inc=0;
inc_up=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) global.Points+=irandom_range(10,20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kickback=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canjump=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if !instance_exists(view) 
{
    if (hp&lt;=0)
    {
    instance_destroy();
    }

}
else
{
if (obj_camera_offset.x-1280 &lt; bbox_right) &amp;&amp; (obj_camera_offset.x + 1280 &gt; bbox_left) //CHECK ACTIVATE
{
    if (obj_camera_offset.y-720 &lt; bbox_bottom) &amp;&amp; (obj_camera_offset.y + 720 &gt; bbox_top) //CHECK ACTIVATE
    {
    active=true; 
    }
    else 
    {
    if(grounded) active=false;
    }
}
else 
{
    if(grounded) active=false;
}



if (view_xview &lt; bbox_left) &amp;&amp; (view_xview+1280 &gt; bbox_right) //CHECK ACTIVATE
{
    if (view_yview &lt; bbox_top) &amp;&amp; (view_yview  + 720 &gt; bbox_bottom) //CHECK ACTIVATE
    {
    fire_able=true; 
    }
    else 
    {
    fire_able=false;
    }
}
else 
{
fire_able=false;
}

if (always_active) active=true;

if (!active) 
{
if !place_meeting(x,y,obj_EnemyCheck) 
{
    instance_deactivate_object(view);
    instance_deactivate_object(self);
    }
}


if (active)//START LOOP
{
sprite_index=spr_collide;
var HERO = instance_nearest(x,y,par_Goodguy);

//PLAY CHARGE SOUND at alarm[0] count down
if !audio_is_playing(snd_laser_charge)
{
if (alarm[0]==30) || (alarm[0]==10)
    {
    audio_sound_pitch(snd_laser_charge,random_range(.95,1.05)*global.game_speed);
    audio_play_sound(snd_laser_charge,11,false);
    }
}







//CHECK SURROUNDINGS --------------------------

//CHECK TO TURN 

if(moveChoice&lt;3) || (moveChoose)
    {
     if (HERO.x &lt; x)
        {
        if (moveChoice==1) hsp=0; //Idle
        if (moveChoice==2) hsp=-setspeed; //Walk 
                
            if(west_east == 1)
            {
            alarm[0]=100;
            moveChoose=false;
            moveChoice=5;
            view.sprite_index=global.sprite[master.spr_QuadroPOD_turn]; 
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            hsp=0;
            }
            else
            {
            west_east=0;
            image_xscale = scale;
            }
       }
               
        if (HERO.x &gt; x)
        {
        if (moveChoice==1) hsp=0; //Idle
        if (moveChoice==2) hsp=setspeed; //Walk 
                
            if(west_east == 0)
            {
            alarm[0]=100;
            moveChoose=false;
            moveChoice=5;
            view.sprite_index=global.sprite[master.spr_QuadroPOD_turn]; 
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            hsp=0;
            }
            else
            {
            west_east=1;
            image_xscale = -scale;
            }
       }
     }   
        


//CheckSwingRange
if(HERO.x &lt; x) &amp;&amp; (HERO.x &gt; x - 250) || (HERO.x &gt; x) &amp;&amp; (HERO.x &lt; x + 250) 
 {
 swing_range = true;
 }
 else
 {
 swing_range = false;
 }
     

if(moveChoose==true) //Initialize MOVE
    {   
        if (moveChoice==1)
            {
                moveChoice=irandom_range(2, 3);
            }
            else
            {
                moveChoice=irandom_range(1, 3);
            }
            
            if (moveChoice==3)
            {
            if (fire_able==false) moveChoice=1;
            }
    
         switch(moveChoice) 
            {
            case 1: //STAND
            alarm[0]=irandom_range(30,100);
            view.sprite_index=global.sprite[master.spr_QuadroPOD_Idle];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            break;
            
            case 2: //WALK
            alarm[0]=irandom_range(50,200);
            view.sprite_index=global.sprite[master.spr_QuadroPOD_walk];
            view.image_index=0;
            view.image_speed=1*global.game_speed;
            break;
            
            case 3: //AIM - FIRE
            break;
            
            case 6: //JUMP 
            view.sprite_index=global.sprite[master.spr_QuadroPOD_JUMP];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            jhsp = setspeed * 1.5 * -sign(image_xscale);
            break;
         
            }
         moveChoose=false;          
    }
 
    
        
switch(moveChoice) //MAKE MOVE
{

        case 1: //STAND
        //vsp=0;
        hsp = 0;
        view.sprite_index=global.sprite[master.spr_QuadroPOD_Idle];
        break;

        case 2: //WALK
        view.sprite_index=global.sprite[master.spr_QuadroPOD_walk];
        view.image_speed=1*global.game_speed;
        
        if(swing_range==true)
            {
                moveChoose=true;
            } 
               
        //vsp=0;
        break;

        case 3: //AIM - FIRE
        
        hsp =0;
        //vsp=0;
        
        if (HERO.y&lt;y-90)    //GET AIM ----------------------------------------------------------------
        {
        aim=3;
        if(HERO.x&lt;x+90 &amp;&amp; HERO.x&gt;x-90) aim=4;  
        }
        else
        {
        if (HERO.y&lt;y+90) aim=2;
        if (HERO.y&gt;y+90) aim=1;
        }
       
        audio_sound_pitch(snd_Quadropod_Laser,global.game_speed);
        audio_play_sound(snd_Quadropod_Laser,11,false);
        
         switch(aim)
            {
            case 1:
            view.sprite_index=global.sprite[master.spr_QuadroPOD_DownForward];
            break;

            case 2:
            view.sprite_index=global.sprite[master.spr_QuadroPOD_Forward];
            break;

            case 3:
            view.sprite_index=global.sprite[master.spr_QuadroPOD_UPForward];
            break;

            case 4:
            view.sprite_index=global.sprite[master.spr_QuadroPOD_UP];
            break;
            }
        
        view.image_index=0;
        view.image_speed=.5*global.game_speed;        
    
        with (instance_create(x,y,obj_quadroPod_Fire)) //CREATE FIRE-----------------------------------------
        {
        damage=other.damage;
        speed=1;
    
        image_xscale=other.scale;
        image_yscale=other.scale;
    
        switch(other.aim)
        {
        case 1: 
        if(!other.west_east)
        {
        direction = 225;
        image_angle = 225;
        y=y-120*other.scale;
        x=x-55*other.scale;
        }
        else
        {
        direction = 315;
        image_angle = 315;
        y=y-120*other.scale;
        x=x+55*other.scale;
        }
        break;
    
        case 2: 
        if(!other.west_east)
        {
        direction = 180;
        image_angle = 180;
        y=y-140*other.scale;
        x=x-55*other.scale;
        }
        else
        {
        direction = 0;
        image_angle = 0;
        y=y-140*other.scale;
        x=x+55*other.scale;
        }
        break;
    
        case 3: 
        if(!other.west_east)
        {
        direction = 135;
        image_angle = 135;
        y=y-178*other.scale;
        x=x-55*other.scale;
        }
        else
        {
        direction = 45;
        image_angle = 45;
        y=y-178*other.scale;
        x=x+55*other.scale;
        }
        break;
    
        case 4: 
        direction = 90;
        image_angle = 90;
        y=y-205*other.scale;
        break;
        }
        }
        
        alarm[0]=100;
        moveChoice=4;
        moveChoose=false;
    
    break;


    case 4: //FIRING
    view.image_speed=.5*global.game_speed;
    alarm[0]=100;    
    hsp = 0;
    //vsp=0;
    
        switch(aim)
            {
            case 1:
            view.sprite_index=global.sprite[master.spr_QuadroPOD_DownForward];
            break;

            case 2:
            view.sprite_index=global.sprite[master.spr_QuadroPOD_Forward];
            break;

            case 3:
            view.sprite_index=global.sprite[master.spr_QuadroPOD_UPForward];
            break;

            case 4:
            view.sprite_index=global.sprite[master.spr_QuadroPOD_UP];
            break;
            }
            
            if(view.image_index&gt;=24)//finish sequence 
            {
            moveChoose=true;
            }

            break;

            case 5: //TURN
            
            view.sprite_index=global.sprite[master.spr_QuadroPOD_turn];
            view.image_speed=.75*global.game_speed;
            swing_range=false;
            alarm[0]=100;
            hsp = 0;
            //vsp=0; SLOW FALL
            if (view.image_index&lt;=1)
            {
                if !audio_is_playing(snd_droid_talk)
                {
                    if (irandom_range(1,10)==2)
                    {
                    audio_sound_pitch(snd_droid_talk,random_range(.95,1.05)*global.game_speed);
                    audio_play_sound(snd_droid_talk,11,false);
                    }
                }
            }
            
            if(view.image_index&gt;=sprite_get_number(view.sprite_index)-1-view.image_speed) //end of Turning
            {
            moveChoose=true;
            
                if (west_east==0)
                {
                image_xscale=-scale;
                west_east = 1;
                }
                else 
                {
                image_xscale=scale;
                west_east = 0;
                }
            
            view.image_index=0;
            }
            break;
    
    case 6: //JUMP
        
        
        view.sprite_index=global.sprite[master.spr_QuadroPOD_JUMP];
        alarm[0]=100; 
        if (view.image_index&lt;7)
        {
        hsp=0;
        if place_meeting(x,y,obj_Short_Ship) vsp=0;
        view.image_speed=.5*global.game_speed;
        drop=false;
        }
        else
        {
        if (round(view.image_index)==7) 
            {
                if (vsp&gt;=0) 
                {
                vsp=irandom_range(-12,-15);    
                grounded=false;
                audio_sound_pitch(snd_droid_swift, random_range(.85,1.15)*global.game_speed);
                audio_play_sound(snd_droid_swift,10,false)
                }
            }
            
        if(grav==0) grav=1; 
        hsp = setspeed * 1.5 * -sign(image_xscale)
        
        if(view.image_index&gt;=17)
            {
             if (!grounded) 
                {
                hsp = setspeed * 1.5 * -sign(image_xscale);
                
                    target=100;
                    
                    
                    /*
                    var c
                    target=vsp;
                    for (c=0;c&lt;16;c+=1)
                        {
                        target=target+grav*global.game_speed;
                        }
                    */
                    if(vsp&gt;0)
                    {
                    if place_meeting(x,y+target,par_wall) //ABOUT TO LAND
                        {
                        drop=true;
                        }
                     }   
                        
                        if (drop)
                        {
                        view.image_speed=.5*global.game_speed;
                        }
                        else
                        {
                        view.image_speed=0;
                        }
                   
                }
                else 
                    {
                    view.image_speed=1*global.game_speed;
                    hsp=0;
                    }
            
            if (view.image_index&gt;=sprite_get_number(view.sprite_index)-1-view.image_speed) 
                {
                moveChoice=2;
                alarm[3]=100; //Can Jump Alarm
                alarm[0]=100;
                canjump=false; 
                }//END (INDEX &gt; 30)
            }  //END (INDEX &gt; 20)                      
        }//END (INDEX &gt; 8)
    break;
    
        case 7: //WALK BACK
        view.sprite_index=global.sprite[master.spr_QuadroPOD_walk];
        view.image_speed=1*global.game_speed;
        if (HERO.x &lt; x)
        hsp=setspeed*.75;
        else 
        hsp=setspeed*-.75;
        
        //vsp=0;
        break;

}//END MOVE CHOICE SWITCH

/*
if (vsp&gt;0) //CEHCK FALLING
{
    if (moveChoice!=6)
    {
    if !place_meeting(x,y+155*image_yscale,par_wall)
    {
        moveChoose=false;
        view.sprite_index=global.sprite[master.spr_QuadroPOD_JUMP];
        view.image_index=15;
        view.image_speed=.5*global.game_speed;
        jhsp = hsp*.5;
        moveChoice=6;
        drop=false;
        y+=155*image_yscale;
    }
    }
}
*/

vsp=vsp + grav*global.game_speed;

if (vsp&lt;0)
{
if (vsp&gt;-2) vsp=2;
} 

if (kickback!=0) //KICK BACK
{
    hsp=kickback;
    vsp=-1;
    kickback = kickback - sign(kickback); 
}

//Collisions ------------------------------------------------------------



//Horizontal Collision ------------------------------



if place_meeting(x+hsp,y,par_wall) 
{
    if !place_free(x+hsp,y) 
    {
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp =0; 
        
        //hit wall
        if(moveChoice==2) || (moveChoice==7)
            {
            stuck=stuck+1;    
            if(stuck&gt;1)
                {
                stuck=0;
                moveChoose=false;
                
                if(guard) 
                {      
                    if (moveChoice==7)
                    {
                    moveChoice=1;
                    alarm[0]=irandom_range(30,100);
                    view.sprite_index=global.sprite[master.spr_QuadroPOD_Idle];
                    view.image_index=0;
                    view.image_speed=.5*global.game_speed;
                    }
                    else
                    {
                    moveChoice=7;
                    alarm[0]=irandom_range(25,100);
                    if (west_east==0)
                        {
                            image_xscale=-image_xscale
                            west_east = 1;
                        }
                        else 
                        {
                            image_xscale=-image_xscale;
                            west_east = 0;
                        } 
                    }
                }
                else //NOT GUARD START
                {
                alarm[0]=100;
                view.sprite_index=global.sprite[master.spr_QuadroPOD_JUMP];
                view.image_index=0;
                view.image_speed=.5*global.game_speed;
                jhsp = setspeed * 1.5 * -sign(image_xscale);
                moveChoice=6;
                }
                }//END IF STUCK IS TOO HIGH
            }
    }
    else
    {
        y=y-yplus;
        
    }
    }
}


if(moveChoice==2) || (moveChoice==7)
{  
if (!place_meeting(x+(105*scale*sign(hsp)),y+15*scale,par_wall)) //Dont Fall off Cliff
    {
        if(guard) 
        {      
            if (moveChoice==7)
            {
            moveChoice=1;
            alarm[0]=irandom_range(30,100);
            view.sprite_index=global.sprite[master.spr_QuadroPOD_Idle];
            view.image_index=0;
            view.image_speed=.5*global.game_speed;
            }
            else
            {
            moveChoice=7;
            alarm[0]=irandom_range(25,100);
            if (west_east==0)
                {
                    image_xscale=-image_xscale
                    west_east = 1;
                }
                else 
                {
                    image_xscale=-image_xscale;
                    west_east = 0;
                } 
            }
        }
        else
        {
        view.sprite_index=global.sprite[master.spr_QuadroPOD_JUMP];
        view.image_index=0;
        view.image_speed=.5*global.game_speed;
        jhsp = setspeed * 1.5 * -sign(image_xscale);
        moveChoice=6;
        }
    }
}    
    
if instance_exists(obj_PearStore_inside)
{
vsp=0;
hsp=0;
}

x = x + hsp*global.game_speed;

//Vertical Collision ------------------------------


if(vsp&gt;=0)
{

if place_meeting(x,y+vsp,par_wall)  //GRAVITY = 3 IF NOT FALLING
{  
    while (!place_meeting(x,y+vsp,par_wall)) 
        { 
            y=y+sign(vsp);
        } 
        if (sign(vsp) == 1)
            {
                grounded = 1;  
                grav=1;

            }
    vsp=0; 
}
else
{
grounded = 0;
}
}
/*

if(last_x!=x)
{
    if (last_y&gt;y)  
    {
    if(abs(image_angle+sign(hsp))&lt;3)
    image_angle=image_angle+sign(hsp); // tilt up
    }
    if (last_y&lt;y) 
    {
    if(abs(image_angle-sign(hsp))&lt;3)
    image_angle=image_angle-sign(hsp);  // tilt down
     
    } 

    if (last_y==y) // tilt level
    {
    if  (image_angle&gt;0) image_ange=image_angle-1;
    else
    if  (image_angle&gt;0) image_ange=image_angle+1;        
    }
}
else
{
image_angle=0;
}
        
last_y=y;
last_x=x;
*/

y=y+vsp*global.game_speed;

//TRACK COLLIDE ----------------------------------
if place_meeting(x,y+1,par_Track)
{
    var track 
    track = instance_position(x,y,par_Track);
    if (track ==noone)
    track = instance_nearest(x,y,par_Track);
    
    if (bbox_bottom&lt;=track.bbox_top+1*abs(track.image_yscale)) 
    {
    x = x+(track.image_speed*1.57*track.image_xscale);
    }
}
//END TRACK --------------------------------------


}//END ACTIVE

if (view.bbox_top&gt;room_height)
{
if (x&gt;view_xview) &amp;&amp; (x&lt;view_xview+1280)
{
    if instance_exists (obj_Waves)
    {
       audio_sound_pitch(snd_splash_light, random_range(1,1.2));
       audio_play_sound(snd_splash_light,10,false);
       with  instance_create(x,room_height+irandom_range(0,5),obj_Splash) {depth=other.depth;}
    }
    else
    {
        switch(irandom(1))
        {
        case 0:
        audio_sound_pitch(snd_Arcade_Blast_A,random_range(.9,1.1)*global.game_speed);
        audio_play_sound(snd_Arcade_Blast_A,10,false);
        break;
        
        case 1:
        audio_sound_pitch(snd_Arcade_Blast_B,random_range(.9,1.1)*global.game_speed);
        audio_play_sound(snd_Arcade_Blast_B,10,false);
        break;
        }
    }
}

if instance_exists(view) with (view) {instance_destroy();}
instance_destroy();
}
}//END VIEW EXISTS
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(view) with (view) {instance_destroy();}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug) //DEBUG ------------
{
if (obj_debug.show_collide)
{

if (swing_range)
{
image_blend=c_blue;
}
else
{
if (grounded)
    image_blend=c_red;
    else
    image_blend=c_white;
}    

if sprite_exists(sprite_index) draw_self();
draw_set_alpha(1);
draw_set_color(c_white);
draw_line(x,y,x,y+target);
}
depth=-20;
}
/*
else
depth=-1;
//DRAW SHADOW --------------

if (inc_up)
inc+=random_range(0,.01);
else
inc-=random_range(0,.01);

if (inc&gt;=.4) inc_up=false;
if (inc&lt;=.3) inc_up=true;

if (grounded)
{
    draw_sprite_ext(spr_dropShadow,0,x,y+10*image_yscale,image_xscale*3*inc,image_yscale*3*inc,0,c_white,inc);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>107,122</point>
    <point>104,104</point>
  </PhysicsShapePoints>
</object>
