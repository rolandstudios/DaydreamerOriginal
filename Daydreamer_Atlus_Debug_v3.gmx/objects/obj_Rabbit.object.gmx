<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------

offset=10;
dead=false;

//EGGS
if(master.spr_Rabbit_Egg_A==0)
{
master.num+=1;
master.spr_Rabbit_Egg_A=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Rabbit_Egg_A.png",12,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}

if(master.spr_Rabbit_Egg_B==0)
{
master.num+=1;
master.spr_Rabbit_Egg_B=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Rabbit_Egg_B.png",12,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}

if(master.spr_Rabbit_Egg_C==0)
{
master.num+=1;
master.spr_Rabbit_Egg_C=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Rabbit_Egg_C.png",12,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}

//BOSS SPRITES

if(master.spr_Rabbit_Explode==0)
{
master.num+=1;
master.spr_Rabbit_Explode=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Rabbit_Explode.png",29,0,1,260,264);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}


if(master.spr_Rabbit_Idle==0)
{
master.num+=1;
master.spr_Rabbit_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Rabbit_Idle.png",16,0,1,224,244);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Rabbit_Bomb==0)
{
master.num+=1;
master.spr_Rabbit_Bomb=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Rabbit_Bomb.png",25,0,1,225,244);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Rabbit_Jump==0)
{
master.num+=1;
master.spr_Rabbit_Jump=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Rabbit_Jump.png",37,0,1,229,377);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Rabbit_Turn==0)
{
master.num+=1;
master.spr_Rabbit_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Rabbit_Turn.png",15,0,1,220,304);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Rabbit_Walk==0)
{
master.num+=1;
master.spr_Rabbit_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Rabbit_Walk.png",25,0,1,262,280);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Rabbit_ShootUP==0)
{
master.num+=1;
master.spr_Rabbit_ShootUP=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Rabbit_ShootUP.png",29,0,1,239,331);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Rabbit_ShootDown==0)
{
master.num+=1;
master.spr_Rabbit_ShootDown=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Rabbit_ShootDown.png",29,0,1,223,330);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

instance_create(x,y,obj_Rabbit_view);

//-----------------------------------

image_speed=.5;
damage=10*global.difficulty;
hp=850;
moveChoose=false;
moveChoice=1;
not_grounded=0;
alarm[0]=500;

turning=0;
grounded=false;
hsp=0;
vsp=0;
grav=.6;
//grav=1;
scale=1;
image_xscale=scale;
image_yscale=scale;
jumpspeed=8;
west_east = 0;
lay=false;

sprite_index=spr_collide;
while !place_meeting(x,y,par_wall) y+=1;

hero_hp=0;
hero_damage=0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (hp&lt;=0) 
{
global.world_clear[8]=1;

    //STEAM
    if (global.platform==0)
    {
    if !steam_get_achievement("ach_Defeat_RabiesRabbit") 
        steam_set_achievement("ach_Defeat_RabiesRabbit");
    }
    //XBOX ONE
    if (global.platform==1)
    {     
        scr_XboxOne_Achievement(9);                                    
    } 
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(9);                                   
    } 

with instance_create(x,y,obj_CheckPoint){World=8.5;Boss=true;}

//MIN CONSTANT
damage_bonus=round((100-hero_damage)*5);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=500;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus; 
    boss_num=8; //BOOS ID was 6   
    }
}
   
  
   


    
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turning=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Rabbit_view) instance_destroy();
if !instance_exists(par_HERO) {instance_destroy();}
else
{
sprite_index=spr_collide;

 
//Check Direction --------------------------------------------------
if (par_HERO.x &gt; x)
{
    if(moveChoice==1) || (moveChoice==2) || (moveChoose==true)
    {
    
    if (moveChoice==1) hsp=0;
    if (moveChoice==2) hsp=3;
    
     if(west_east == 0)
        {
       
         alarm[0]=2000/global.game_speed;
         moveChoose=false;
         moveChoice=7;
         turning+=1;
         obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Turn];
         obj_Rabbit_view.image_speed=.5*global.game_speed;
         obj_Rabbit_view.image_index=0;
         hsp=0;
         }
         else
         {
         west_east = 1;
         image_xscale = -scale;
         }
    }
    
}

if (par_HERO.x &lt; x) 
{
    if(moveChoice==1) || (moveChoice==2) || (moveChoose==true)
    {
    
    if (moveChoice==1) hsp=0;
    if (moveChoice==2) hsp=-3;
    
    if(west_east == 1)
        {
         
         alarm[0]=2000/global.game_speed;
         moveChoose=false;
         moveChoice=7;
         turning+=1;
         obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Turn];
         obj_Rabbit_view.image_speed=.5*global.game_speed;
         obj_Rabbit_view.image_index=0;
         hsp=0;
         }
         else
         {
            west_east = 0;
            image_xscale = scale;
         }
    }
   
}
// END CHECK DIRECTION ----------------------------------------------------- 

 
 if(moveChoose==true)
    {   
                
        
      var n;
      n=irandom_range(1, 6);
      while(n==moveChoice)
        {
            n=irandom_range(1, 6);
        }
        moveChoice=n;
        
        if (moveChoice==3) ||  (moveChoice==4)
        {
        if (par_HERO.y&gt;obj_Rabbit_view.bbox_top+120)
        moveChoice=4;
        else
        moveChoice=3;
        }        
        
        if (moveChoice==6)
            {
                if (instance_number(obj_Egg_Bomb)&gt;=3) || place_meeting(x,y,obj_Egg_Bomb) moveChoice=2;
            }
         
         //Initiallize the Move
        switch(moveChoice)
            {
            case 1:
            obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Idle];
            obj_Rabbit_view.image_speed=.5*global.game_speed;
            obj_Rabbit_view.image_index=0;
            alarm[0]=40/global.game_speed;
            not_grounded=0;
            break;
               
            
            case 2:
            obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Walk];
            obj_Rabbit_view.image_speed=.5*global.game_speed;
            obj_Rabbit_view.image_index=0;
            alarm[0]=irandom_range(50,100)/global.game_speed;
            not_grounded=0;
            break;
            
            case 3:
            obj_Rabbit_view.sprite_index =  global.sprite[master.spr_Rabbit_ShootUP];
            obj_Rabbit_view.image_speed=.5*global.game_speed;
            obj_Rabbit_view.image_index=0;
            instance_create(x,y,obj_Rabbit_LaserUP);
            not_grounded=0;
            break;
            
            case 4:
            obj_Rabbit_view.sprite_index =  global.sprite[master.spr_Rabbit_ShootDown];
            obj_Rabbit_view.image_speed=.5*global.game_speed;
            obj_Rabbit_view.image_index=0;
            instance_create(x,y,obj_Rabbit_LaserDown);
            not_grounded=0;
            break;
            
            case 5: //JUMP
            obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
            obj_Rabbit_view.image_index=0;
            obj_Rabbit_view.image_speed = .5*global.game_speed;
            jhsp=5*-(sign(image_xscale));
            acel=1;
            not_grounded=0;
            break;
            
            case 6:
            obj_Rabbit_view.sprite_index =  global.sprite[master.spr_Rabbit_Bomb];
            obj_Rabbit_view.image_speed=.5*global.game_speed;
            obj_Rabbit_view.image_index=0;
            not_grounded=0;
            lay=false;
            break;
            
            }
            
        moveChoose=false;            
    }




    
switch(moveChoice)
{

case 1: //Stand

    obj_Rabbit_view.sprite_index  = global.sprite[master.spr_Rabbit_Idle];
    obj_Rabbit_view.image_speed=.5*global.game_speed;          
    obj_Rabbit_view.image_speed = .5*global.game_speed;
    damage=5*global.difficulty;
    hsp=0;
    vsp=0;
    
    if (!grounded) 
        not_grounded+=1; else not_grounded=0;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=5;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
        obj_Rabbit_view.image_index=0;
        obj_Rabbit_view.image_speed = .5*global.game_speed;
        jhsp=5*-(sign(image_xscale));
        acel=1;
        }
    
break;



case 2: //Hobble

    obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Walk];
    obj_Rabbit_view.image_speed=.5*global.game_speed;          
    damage=10*global.difficulty;
    vsp=0;
    
    
    if (!grounded) 
        not_grounded+=1; else not_grounded=0;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=5;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
        obj_Rabbit_view.image_index=0;
        obj_Rabbit_view.image_speed = .5*global.game_speed;
        jhsp=5*-(sign(image_xscale));
        acel=1;
        }
        
break;

case 3: //ShootUP

    obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_ShootUP]; 
    obj_Rabbit_view.image_speed=.5*global.game_speed;          
    damage=10*global.difficulty;
    vsp=0;
    hsp=0; 
    alarm[0]=100/global.game_speed;
    if (obj_Rabbit_view.image_index&gt;=(sprite_get_number(obj_Rabbit_view.sprite_index)-1)) 
        moveChoose=true;
    
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=5;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
        obj_Rabbit_view.image_index=0;
        obj_Rabbit_view.image_speed = .5*global.game_speed;
        jhsp=5*-(sign(image_xscale));
        acel=1;
        }
break;

case 4: //ShootDown

    obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_ShootDown]; 
    obj_Rabbit_view.image_speed=.5*global.game_speed;          
    damage=10*global.difficulty;
    vsp=0;
    hsp=0; 
    alarm[0]=100/global.game_speed;
    if (obj_Rabbit_view.image_index&gt;=(sprite_get_number(obj_Rabbit_view.sprite_index)-1)) 
        moveChoose=true;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=5;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
        obj_Rabbit_view.image_index=0;
        obj_Rabbit_view.image_speed = .5*global.game_speed;
        jhsp=5*-(sign(image_xscale));
        acel=1;
        }
break;

case 5: //JUMP
obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
obj_Rabbit_view.image_speed=.5*global.game_speed;
alarm[0]=100/global.game_speed;

if (obj_Rabbit_view.image_index&lt;10)
    {
    vsp=0;
    hsp=0;
    }
    
if (round(obj_Rabbit_view.image_index)==10)
    {
        audio_sound_pitch(snd_BunnyJump,global.game_speed);    
        if !audio_is_playing(snd_BunnyJump)
        audio_play_sound(snd_BunnyJump,10,false);
        vsp=-20;
        hsp=jhsp;
        if (global.game_speed!=1) obj_Rabbit_view.image_index=11;
    }

if (obj_Rabbit_view.image_index&gt;10)
    {
    if (vsp&gt;0)
        {
        //vsp+=acel;
        //acel*=.25;
        //vsp*=1.15;
        vsp*=(1+(.1*global.game_speed));
        }
    }    
    
if  (obj_Rabbit_view.image_index&gt;=24)
    {
    if (!grounded) 
        {
        obj_Rabbit_view.image_speed=0;
        }
        else
        {
        if !instance_exists(obj_Screen_Shake) 
                    {
                    repeat(2)
                    {
                    with instance_create(x+20*image_xscale+50, y+10,obj_dust_trail) //RIGHT TRAIL
                    {image_xscale=-5;image_yscale=5;image_speed=2;}
                    with instance_create(x+20*image_xscale-50, y+10,obj_dust_trail) //LEFT TRAIL
                    {image_xscale=5;image_yscale=5;image_speed=2;}
                    }
                    with instance_create(x,y,obj_Screen_Shake){quake=false; hold=30;}
                    instance_create(x,y,obj_Aura_Ripple_stat);
                    }
        vsp=0;
        hsp=0;
        obj_Rabbit_view.image_speed=.5*global.game_speed;
        }
    }
    
if (obj_Rabbit_view.image_index&gt;=(sprite_get_number(obj_Rabbit_view.sprite_index)-1))
    { 
        moveChoose=true;
        //moveChoice=1;
        //alarm[0]=25;
        //obj_Rabbit_view.sprite_index = spr_Rabbit_Idle;
        //obj_Rabbit_view.image_index = 0;
    }
break;

case 6: //Bomb
    obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Bomb]; 
    obj_Rabbit_view.image_speed=.5*global.game_speed;          
    damage=10*global.difficulty;
    vsp=0;
    hsp=0; 
    alarm[0]=100/global.game_speed;
    
    if (round(obj_Rabbit_view.image_index)==20)
        {
        if (lay==false)
        {
        lay=true;
          with instance_create(x,y-150,obj_Egg_Bomb)
            {
            image_xscale=other.image_xscale;
            }
        }
        }
    
    if (obj_Rabbit_view.image_index&gt;=(sprite_get_number(obj_Rabbit_view.sprite_index)-1)) 
        moveChoose=true;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=5;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
        obj_Rabbit_view.image_index=0;
        obj_Rabbit_view.image_speed = .5*global.game_speed;
        jhsp=5*-(sign(image_xscale));
        acel=1;
        }

break;

case 7: //Turn
alarm[0]=100/global.game_speed;
obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Turn]; 
obj_Rabbit_view.image_speed=.5*global.game_speed;

if (turning&gt;1) //was 2
{
        moveChoice=5;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
        obj_Rabbit_view.image_index=0;
        obj_Rabbit_view.image_speed = .5*global.game_speed;
        jhsp=10*-(sign(image_xscale));
        acel=1;
        turning=0;
}


if (obj_Rabbit_view.image_index&gt;=14) 
    {
    moveChoose=true;
    
    if (west_east==0) 
        {
        west_east = 1; 
        image_xscale= -scale;
        obj_Rabbit_view.image_xscale = -scale;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Idle];
        alarm[3]=50/global.game_speed;
        x=x+(scale*70); //TURN OFFSET 
        }
        else 
        {
        west_east = 0;
        image_xscale= scale;
        obj_Rabbit_view.image_xscale = scale;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Idle];
        alarm[3]=50/global.game_speed;
        x=x-(scale*70); //TURN OFFSET 
        } 
        
        if !place_meeting(x,y+3,par_wall)
        {
        moveChoice=5;
        obj_Rabbit_view.sprite_index = global.sprite[master.spr_Rabbit_Jump]; 
        obj_Rabbit_view.image_index=0;
        obj_Rabbit_view.image_speed = .5*global.game_speed;
        jhsp=5*-(sign(image_xscale));
        acel=1;
        }
        
    }
break;
}

vsp = vsp + grav*global.game_speed;


//Collisions ------------------------------------------------------------



//Horizontal Collision ------------------------------


if place_meeting(x+hsp,y,par_wall) 
{
    
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp = 0;        
    }
    else
        {
        y=y-yplus;
        }
    
}

x = x + hsp*global.game_speed;

//Vertical Collision ------------------------------

if place_meeting(x,y+vsp,par_wall) 
{ 
//if !place_free(x,y+vsp) 
if (vsp&gt;=0) 
 {    
    while (!place_meeting(x,y+sign(vsp),par_wall)) y=y+sign(vsp);
     
    if (sign(vsp) == 1)
    {
        grounded = 1; //Enable First Jump
        
    }
    
    vsp = 0;
 }    
}
else
{
   grounded = 0;
}

y = y + vsp*global.game_speed;


if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
  var shoot
    shoot=instance_place(x,y,par_Shoot)
    if (shoot==noone)
    shoot=instance_nearest(x,y,par_Shoot)
    
        if (shoot!=noone)
        {    
            //hp=hp-par_Shoot.damage;
            hp=hp-shoot.damage;

        if (alarm[3] &lt;=-1)
        {
        alarm[3]=4; 
        image_blend = c_red;
        }
        
        }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if sprite_exists(sprite_index) draw_self();
}}
//Draw Disk Collision Mask
//draw_ellipse(x-sprite_xoffset, y-sprite_yoffset, x-sprite_xoffset+sprite_width, y-sprite_yoffset+sprite_height, true);
//draw_ellipse(x-sprite_xoffset+sprite_width*.35, y-sprite_yoffset+sprite_height*.25, x-sprite_xoffset+sprite_width*.65, y-32-sprite_yoffset+sprite_height, true);
//draw_ellipse(x-offset, y+10*offset, x+offset, y+12*offset, true);

//if sprite_exists(sprite_index) draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>296,263</point>
    <point>277,277</point>
  </PhysicsShapePoints>
</object>
