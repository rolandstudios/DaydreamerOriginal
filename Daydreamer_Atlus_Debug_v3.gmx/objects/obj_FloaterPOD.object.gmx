<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-35</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy_Body</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.spr_TurrentPOD_Turn==0)
{
master.num+=1;
master.spr_TurrentPOD_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_TurrentPOD_Turn.png",13,0,1,74,81);
sprite_collision_mask(global.sprite[master.spr_TurrentPOD_Turn], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}


if(master.spr_TurrentPOD==0)
{
master.num+=1;
master.spr_TurrentPOD=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_TurrentPOD.png",33,0,1,55,75);
sprite_collision_mask(global.sprite[master.spr_TurrentPOD], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}



sprite_index=global.sprite[master.spr_TurrentPOD];

if (image_yscale==1)
{
scale=random_range(.8,1.4);
image_xscale=scale;
image_yscale=scale;
}
else
{
scale=image_yscale;
}

hp=37*scale;
init_hp=hp;
rest=false;
activate=false;
target_x=x;
target_y=y;
angle=0;
angle_inc=0;
target_angle=0;
angle_inc=0;

west_east = 0;
setspeed = 3 + random_range(1,5);
hsp=0;
vsp=0;
type=1;
rate=40;

image_speed=.5*global.game_speed;
damage=4*scale*global.difficulty;
moveChoose=true;
moveChoice=1;
acel=1;
h_acel=0;
v_acel=0;
fire=false;
kickback=0;
color=c_white;
float_factor=0;
move=2;
s_speed=0;
direcion=image_angle;
move=0;

offset_x=irandom_range(100,250) * sign(random_range(-1,1));
offset_y=irandom_range(-200,50);
alarm[3]= irandom_range(100,500);
active=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) global.Points+=irandom_range(5,10);

/*
obj_camera_offset.target_Col_s=0;

with instance_create(x,y,obj_StarBurst)
            {
            image_xscale=3*other.image_xscale;
            image_yscale=3*other.image_yscale;
            image_angle=irandom_range(1,360);
            depth=-2;
            }
            
audio_sound_pitch(snd_SIN_Scream,random_range(1.1,1.2)*global.game_speed);
audio_play_sound(snd_SIN_Scream,10,false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>offset_x=irandom_range(200,550) * sign(random_range(-1,1));
offset_y=irandom_range(-500,-100);
alarm[3]=irandom_range(100,200);
moveChoice=1;
h_acel=0;
v_acel=0;
acel=0;
angle_inc=0;
alarm[1]=25;
target_angle=point_direction(x,y,par_HERO.x+offset_x,par_HERO.y+offset_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kickback=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !place_meeting(x,y,par_wall)
{
if (moveChoice==2)
{
moveChoice=3;
sprite_index=global.sprite[master.spr_TurrentPOD];
image_index=20;
alarm[1]=irandom_range(5,50);
}
}
else
{
alarm[1]=rate;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_blend=color;
audio_play_sound(snd_EnemyHit_A,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{

if (obj_camera_offset.x-1000 &lt; bbox_right) &amp;&amp; (obj_camera_offset.x + 1000 &gt; bbox_left) 
{
    if (obj_camera_offset.y-1000 &lt;y) &amp;&amp; (obj_camera_offset.y + 1000 &gt; y) 
    {
        if (!activate) {rest=false;}
        activate=true;                         
    }        
}

if (!activate)
{
instance_deactivate_object(self);
}

if (activate)
{
var HERO = instance_nearest(x,y,par_Goodguy);
//check direction
if (moveChoice!=7) &amp;&amp; (moveChoice!=3)
{
    var targ
    if (moveChoice==1) targ=HERO.x+offset_x;
    if (moveChoice==2) targ=HERO.x;
    
    if (targ&gt;x) 
    {
         if (image_angle&gt;140) &amp;&amp;  (image_angle&lt;220) 
         {
         move=moveChoice;
         moveChoice=7;
         moveChoose=false;
         alarm[1]=round(random_range(1,2)*rate);
         sprite_index = global.sprite[master.spr_TurrentPOD_Turn];
         image_speed=.5*global.game_speed;
         image_index=0;
         angle_inc=4;
         }
         
    }
    
    if (targ&lt;x) 
    {
         if (image_angle&lt;40) || (image_angle&gt;320) 
         {
         move=moveChoice;
         moveChoice=7;
         moveChoose=false;
         alarm[1]=round(random_range(1,2)*rate);
         sprite_index = global.sprite[master.spr_TurrentPOD_Turn];
         image_speed=.5*global.game_speed;
         image_index=0;
         angle_inc=4;
         }
    }
}
 

       
                    
          
//Make Move
switch(moveChoice)
{        
        case 1: //SEEK VANTAGE POINT
        damage=0;
        
        sprite_index=global.sprite[master.spr_TurrentPOD];
        image_speed=.5*global.game_speed;
        if (image_index&gt;25) image_index=0; //LOOP IDLE ANIMATION 
        
        
        //MOVE --------------------------------------------------
                
        target_angle=point_direction(x,y,HERO.x+offset_x,HERO.y+offset_y);
        direction=target_angle; 
        s_speed=5*acel*global.game_speed;  
        if (acel&lt;10) acel+=.05;
        
        //LOOK TOWARD NEW VANTAGE POINT
        
        if (abs(target_angle-image_angle)&lt;4)
        {
        image_angle=target_angle;
        angle_inc=0;
        }
        else
            {   
            if (angle_inc&lt;4) angle_inc+=.1*global.game_speed;
                
                if (image_angle&gt;target_angle) 
                {
                    if ((image_angle&gt;270) &amp;&amp; (target_angle&lt;90)) 
                    image_angle+=angle_inc*global.game_speed;
                    else
                    image_angle-=angle_inc*global.game_speed;
                }
                
                if (image_angle&lt;target_angle)
                {   
                    if ((image_angle&lt;90) &amp;&amp; (target_angle&gt;270)) 
                    image_angle-=angle_inc*global.game_speed;
                    else
                    image_angle+=angle_inc*global.game_speed;
                }
                
            if (image_angle&lt;0)   image_angle=image_angle+360;    
            if (image_angle&gt;360) image_angle=image_angle-360; 
            }
            
            //ON NEW VANTAGE POINT
            if (y&lt;HERO.y+offset_y+50) &amp;&amp; (y&gt;HERO.y+offset_y-50) 
            {
                if (x&lt;HERO.x+offset_x+50) &amp;&amp; (x&gt;HERO.x+offset_x-50) 
                    {
                    moveChoice=2;
                    alarm[1]=round(random_range(1,2)*rate);
                    }                   
            }
                           
        break;
        
       
        case 2: //HOVER AIM
        
        sprite_index=global.sprite[master.spr_TurrentPOD];
        image_speed=.5*global.game_speed;
        damage=4*scale*global.difficulty;
        if (image_index&gt;25) image_index=0; //LOOP IDLE ANIMATION
        
        
        
        //MOVE ----------------------------------------------------
               
        
        if (y&lt;HERO.y+offset_y+50) &amp;&amp; (y&gt;HERO.y+offset_y-50) &amp;&amp; (x&lt;HERO.x+offset_x+50) &amp;&amp; (x&gt;HERO.x+offset_x-50) 
                    {
                        acel=0;
                    } 
                    else
                    {
                        var angle
                        angle=point_direction(x,y,HERO.x+offset_x,HERO.y+offset_y);
                        direction=angle;
                        if (acel&lt;1) acel+=.05;
                    }
                                  
            
        s_speed=7*acel; 
        
           
        float_factor+=.1*global.game_speed;
        if (float_factor&gt;360) float_factor-=360;
        y+=2*sin(float_factor)*global.game_speed;
        
        
        //AIM ----------------------------------------------------     
        target_angle=point_direction(x,y,HERO.x,HERO.y);   
        
          
        if (abs(target_angle-image_angle)&lt;4)
        {
        image_angle=target_angle;
        angle_inc=0;
        }
        else
            { 
            if (angle_inc&lt;4) angle_inc+=.1*global.game_speed;
                 
                if (image_angle&gt;target_angle) 
                {
                    if ((image_angle&gt;270) &amp;&amp; (target_angle&lt;90)) 
                    image_angle+=angle_inc*global.game_speed;
                    else
                    image_angle-=angle_inc*global.game_speed;
                }
                
                if (image_angle&lt;target_angle)
                {   
                    if ((image_angle&lt;90) &amp;&amp; (target_angle&gt;270)) 
                    image_angle-=angle_inc*global.game_speed;
                    else
                    image_angle+=angle_inc*global.game_speed;
                }
            }
                
            if (image_angle&lt;0)   image_angle=image_angle+360;    
            if (image_angle&gt;360) image_angle=image_angle-360;                    
            
        
        if (alarm[1]==-1){alarm[1]=round(random_range(1,2)*rate);}
        break;
        
        case 3: //SHOOT
        damage=4*scale*global.difficulty;
        sprite_index=global.sprite[master.spr_TurrentPOD];
        image_speed=.5*global.game_speed;
        
        s_speed*=.9;
        acel=0;
                                
        if (round(image_index)==25)
        {
        //instance_create(x,y,obj_Aura_Ripple_stat);               
                  
        x1 = lengthdir_x(100*image_yscale, image_angle);
        y1 = lengthdir_y(100*image_yscale, image_angle);
  
        audio_sound_pitch(snd_Quadropod_Laser,global.game_speed);
        audio_play_sound(snd_Quadropod_Laser,15,false);
           
        with instance_create(x+x1,y+y1,obj_quadroPod_Fire)
            {
                image_xscale=1*other.scale;
                image_yscale=1*other.scale;
                image_angle=other.image_angle;
                direction=other.image_angle;
                damage=5*other.scale*global.difficulty;
                depth=other.depth-1;
            }
        }
             
        if (image_index&gt;=sprite_get_number(sprite_index)-1) 
            {
            moveChoice=2;
            }
        break;
        
        
        case 7: //Turn
        damage=4*scale*global.difficulty;
        if (alarm[3]&lt;10) alarm[3]=10;
        sprite_index=global.sprite[master.spr_TurrentPOD_Turn]; 
        image_speed=.5*global.game_speed;

        s_speed*=.9;
        acel=0;
        if (angle_inc&lt;8) angle_inc+=.5*global.game_speed;
        
        if (image_angle&gt;90)  &amp;&amp; (image_angle&lt;180) {if (image_angle+angle_inc&lt;180) image_angle+=angle_inc;}
        if (image_angle&lt;270) &amp;&amp; (image_angle&gt;180) {if (image_angle-angle_inc&gt;180) image_angle-=angle_inc;}
        
        if (image_angle&gt;270) &amp;&amp; (image_angle&lt;0) {if (image_angle+angle_inc&lt;360) image_angle+=angle_inc;}
        if (image_angle&lt;90)  &amp;&amp; (image_angle&gt;0) {if (image_angle-angle_inc&gt;0) image_angle-=angle_inc;}

if (image_index&gt;=sprite_get_number(sprite_index)-1) 
    {
        
        x1 = lengthdir_x(55*image_yscale, image_angle);
        y1 = lengthdir_y(55*image_yscale, image_angle);
        y=y+y1;
        x=x+x1;
        
        image_angle+=180;
        if (image_angle&gt;360) image_angle-=360;
        sprite_index =  sprite_index=global.sprite[master.spr_TurrentPOD]; 
        image_speed=.5*global.game_speed;
        image_index=0;
        moveChoice=move;
        alarm[3]=200/global.game_speed;
        alarm[1]=round(random_range(1,2)*rate)
        angle_inc=0;       
    }
    
break;     
}//END SWITCH -----------------------------------------------------------------------------------------------------------

if (kickback!=0) //KICK BACK
{
    x+=kickback;
    kickback = kickback - sign(kickback);
    if (HERO.y&gt;y)
        y-=2; else y+=2;
}

if (s_speed&gt;30) s_speed=30; //SPEED LIMIT
speed=s_speed*global.game_speed;


}//END ACTIVATE
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var shoot
shoot=instance_place(x,y,par_Shoot)
if (shoot==noone)
shoot=instance_nearest(x,y,par_Shoot)
if (shoot!=noone)
{
if place_meeting(x+hsp,y+vsp,obj_HERO_Melee)
    {
        if (obj_HERO_Melee.damage&gt;0)
        {
         
        if (alarm[2] &lt;=-1) alarm[2]=8;
        if (par_HERO.x&gt;x)
        kickback=-20; else kickback=20;
        hp=hp-obj_HERO_Melee.damage;
        
        if (alarm[0] &lt;=-1) 
        {   
        image_blend = c_red;
        alarm[0]=4;
        }
        
        }
    }
    else
    {
        hp=hp-shoot.damage;   
    
        if (alarm[0] &lt;=-1) 
        {   
        image_blend = c_red;
        alarm[0]=4; 
        }
    }


        
        if(hp&lt;=0)
        {
        image_speed=0;
        switch(irandom(1))
            {
            case 0:
            audio_sound_pitch(snd_Arcade_Blast_A,random_range(.9,1.1)*global.game_speed);
            audio_play_sound(snd_Arcade_Blast_A,10,false);
            break;
            
            case 1:
            audio_sound_pitch(snd_Arcade_Blast_B,random_range(.9,1.1)*global.game_speed);
            audio_play_sound(snd_Arcade_Blast_B,10,false);
            break;
            }

        with instance_create(x,y,obj_Static)
            {
            loops=1;
            image_xscale=other.image_xscale;
            image_yscale=other.image_yscale;
            }
            
        with instance_create(x,y-50*image_yscale,obj_Explosion_A)
        {
        image_xscale=abs(other.image_xscale);
        image_yscale=other.image_yscale;
        xplode=irandom_range(3,4);
        flash=false;
        range=50*other.image_yscale;
        }

        instance_destroy();
        }
}  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
    if (damage==0)
    {
     if place_meeting(x,y,par_HERO)
     image_alpha=.5; 
     else 
     image_alpha=1;
    }
    else
    image_alpha=1;
    
    if (image_blend!=c_red) image_blend=color;
    
    if (image_alpha==1)
    {
    draw_sprite_ext(sprite_index, image_index,x, y, image_xscale, image_yscale, image_angle*sign(image_xscale), image_blend, image_alpha);
    }
    else
    {
    move+=0.04;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");   
    draw_sprite_ext(sprite_index, image_index,x, y, image_xscale, image_yscale, image_angle*sign(image_xscale), image_blend, image_alpha);
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,75.0*image_yscale);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);   
    draw_sprite_ext(sprite_index, image_index,x, y, image_xscale, image_yscale, image_angle*sign(image_xscale), image_blend, image_alpha);;
    shader_reset();
    }
    
if (global.enemy_hp)
    {
    draw_rectangle_color(x,bbox_top-25,x+(init_hp),bbox_top-22,c_red,c_red,c_red,c_red,false);
    draw_rectangle_color(x,bbox_top-25,x+(hp),bbox_top-22,c_green,c_green,c_green,c_green,false);
    }
}
/*

draw_set_color(c_white);
draw_set_font(fnt_Arial);

draw_sprite(spr_Crosshair,0,par_HERO.x+offset_x,par_HERO.y+offset_y);
draw_text(x+200*image_xscale,y,"target angle: "    + string(target_angle));
draw_text(x+200*image_xscale,y+20,"image angle: " + string(image_angle));
draw_text(x+200*image_xscale,y+40,"direction: " + string(direction));
draw_text(x+200*image_xscale,y+60,"speed: " + string(speed));
draw_text(x+200*image_xscale,y+80,"move: " + string(moveChoice));


//draw_line(x,y,par_HERO.x,par_HERO.y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>236,117</point>
    <point>165,165</point>
  </PhysicsShapePoints>
</object>
