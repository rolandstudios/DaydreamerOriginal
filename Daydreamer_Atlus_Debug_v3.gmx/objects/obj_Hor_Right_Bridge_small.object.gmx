<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.SWAP_spr_Hor_Right_Bridge_small_LED==0)
{
master.num+=1;
master.SWAP_spr_Hor_Right_Bridge_small_LED=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Hor_Right_Bridge_small_LED.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}

if(master.SWAP_spr_Hor_Right_Bridge_small==0)
{
master.num+=1;
master.SWAP_spr_Hor_Right_Bridge_small=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Hor_Right_Bridge_small.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}
sprite_index=global.sprite[master.SWAP_spr_Hor_Right_Bridge_small];

if(master.SWAP_spr_Hor_Right_Bridge_small_collide==0)
{
master.num+=1;
master.SWAP_spr_Hor_Right_Bridge_small_collide=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Hor_Right_Bridge_small_collide.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
sprite_collision_mask(global.sprite[master.num],  1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.SWAP_spr_Hor_Right_Bridge_small_top==0)
{
master.num+=1;
master.SWAP_spr_Hor_Right_Bridge_small_top=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Hor_Right_Bridge_small_top.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}

    with (instance_create(x,y,obj_Hor_Right_Bridge_small_collide))
    {
    sprite_index = global.sprite[master.SWAP_spr_Hor_Right_Bridge_small_collide];
    image_xscale = other.image_xscale*2;
    image_yscale = other.image_yscale*2;
    image_angle = other.image_angle;
    }
    
    with (instance_create(x,y,obj_Hor_Right_Bridge_small_top))
    {
    sprite_index = global.sprite[master.SWAP_spr_Hor_Right_Bridge_small_top];
    image_xscale = other.image_xscale;
    image_yscale = other.image_yscale;
    image_angle = other.image_angle;
    image_blend = other.image_blend;
    }
    
    flash_index=0;
    flash_alpha=0;
    flash_speed=.1;
    
    flash=true;
    flash_type=2;
    flashes=0;
    flow_flash=true;
    flash_sect=1;
    
    set_x=59;
    set_y=71;
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if sprite_exists(sprite_index)
    {
    //shader_set(shd_bright_contrast);
    //shader_set_uniform_f(global.brightness_amount , b);
    //shader_set_uniform_f(global.contrast_amount, c);
    draw_self();
    //shader_reset();
    }
    
    /*
    flash_index+=1*global.game_speed;
    if (flash_index&gt;sprite_get_number(spr_Flare_Glow)-1) flash_index=0;
    flash_color=make_color_hsv(0,255,255); //off red
    flash_alpha=.1;
    flash_xscale=1.2;
    flash_yscale=2;
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(spr_Flare_Glow,flash_index,x-399*image_xscale,y+48*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    draw_sprite_ext(spr_Flare_Glow,flash_index,x-399*image_xscale,y+63*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    
    draw_sprite_ext(spr_Flare_Glow,flash_index+10,x-278*image_xscale,y+48*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    draw_sprite_ext(spr_Flare_Glow,flash_index+12,x-278*image_xscale,y+63*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    
    draw_sprite_ext(spr_Flare_Glow,flash_index+20,x-148*image_xscale,y+48*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    draw_sprite_ext(spr_Flare_Glow,flash_index+22,x-148*image_xscale,y+63*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    
    
    draw_sprite_ext(spr_Flare_Glow,flash_index+30,x+107*image_xscale,y+50*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    draw_sprite_ext(spr_Flare_Glow,flash_index+32,x+107*image_xscale,y+63*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    
    draw_sprite_ext(spr_Flare_Glow,flash_index+40,x+216*image_xscale,y+50*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    draw_sprite_ext(spr_Flare_Glow,flash_index+42,x+216*image_xscale,y+64*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    
    draw_sprite_ext(spr_Flare_Glow,flash_index+50,x+325*image_xscale,y+50*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
    draw_sprite_ext(spr_Flare_Glow,flash_index+52,x+325*image_xscale,y+64*image_yscale,flash_xscale,flash_yscale,0,flash_color,flash_alpha);
        
    draw_sprite_ext(spr_Flare_Glow,flash_index,x+set_x,y+set_y,flash_xscale,flash_yscale,0,flash_color,1);
    draw_set_blend_mode(bm_normal);
    */
    

     
  if (flash) &amp;&amp; (image_angle==0)
  {
   if (flow_flash==false) flash_type=2;
    
    if (flash_type==1) //FLOW FLASH
    {
    flash_alpha+=flash_speed*global.game_speed;
    if (flash_alpha&gt;=2) flash_speed=-.25;
    if (flash_alpha&lt;=0) 
        {
        flash_speed=.25;
        flash_sect+=1;
        if (flash_sect&gt;3) 
            {
            flash_sect=1;
            flashes+=1;
            if (flashes&gt;2) 
                {
                flash_type=2;
                flashes=0;
                }
            }
        }
    x_offset=sprite_get_xoffset(global.sprite[master.SWAP_spr_Hor_Right_Bridge_small]);
    y_offset=sprite_get_yoffset(global.sprite[master.SWAP_spr_Hor_Right_Bridge_small]);
        
    switch(flash_sect)
    {
    case 1:
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Hor_Right_Bridge_small_LED],0,0,0,50,sprite_height,
    x+(270-x_offset)*image_xscale,
    y+(291-y_offset)*image_yscale,
    image_xscale,image_yscale,c_white,flash_alpha);
    break;
    
    case 2:
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Hor_Right_Bridge_small_LED],0,150,0,50,sprite_height,
    x+(270-x_offset+150)*image_xscale,
    y+(291-y_offset)*image_yscale,
    image_xscale,image_yscale,c_white,flash_alpha);
    break;
    
    case 3:
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Hor_Right_Bridge_small_LED],0,310,0,50,sprite_height,
    x+(270-x_offset+310)*image_xscale,
    y+(291-y_offset)*image_yscale,
    image_xscale,image_yscale,c_white,flash_alpha);
    break;
    
    } 
    
    
    }
    
    if (flash_type==2) //UNIFORM FLASH
    {
    flash_alpha+=flash_speed*global.game_speed;
    if (flash_alpha&gt;=1) flash_speed=-.1;
    if (flash_alpha&lt;=0) 
        {
        flash_speed=.1;
        flashes+=1;
        
        if (flashes&gt;10) 
                {
                flash_type=1;
                flashes=0;
                }
        }
        
    draw_sprite_ext(global.sprite[master.SWAP_spr_Hor_Right_Bridge_small_LED],0,x+set_x*image_xscale,y+set_y*image_yscale,image_xscale,image_yscale,image_angle,c_white,flash_alpha);
    }
  
  
  }//END NOT FLASH

/*    
    
    if keyboard_check(vk_up) set_y-=1;
    if keyboard_check(vk_down) set_y+=1;
    draw_text (x,y+20,"movelist_y: "+string(set_y));
    
    if keyboard_check(vk_left)  set_x-=1;
    if keyboard_check(vk_right) set_x+=1;
    draw_text (x,y,"movelist_x: "+string(set_x));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>386,386</point>
  </PhysicsShapePoints>
</object>
