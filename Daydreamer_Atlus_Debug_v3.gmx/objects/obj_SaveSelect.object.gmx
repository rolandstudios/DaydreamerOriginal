<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1) //GET USER INFO
{
    if sprite_exists(global.spr_gamerpicture) sprite_delete(global.spr_gamerpicture); 
    global.display_name = "No User"; 
    
    var n
    for (n=1;n&lt;9;n+=1)
    {   
        player_name[n] = "";    
        player_date[n] = "- EMPTY -";      
        player_room[n] = -1;
        player_Hours[n]=0;
        player_Minutes[n]=0;
        player_Seconds[n]=0;
        player_Score[n]=1;
        player_hp[n]=0;
        player_ranked[n]=false;        
    }
    
    account=global.xb_user;  
    if (alarm[3]==-1) alarm[3]=10;
}


var n
for (n=1;n&lt;9;n+=1)
{  
    if (global.platform==3) //PS4 ONLY
    {
    player_name[n] =   global.SaveSlot_name[n];    
    player_date[n] =   global.SaveSlot_date[n];       
    player_room[n] =   global.SaveSlot_SavedRoom[n];
    player_Hours[n]=   global.SaveSlot_Hours[n];
    player_Minutes[n]= global.SaveSlot_Minutes[n];
    player_Seconds[n]= global.SaveSlot_Seconds[n];
    player_Score[n]=   global.SaveSlot_Points[n];
    player_hp[n]=      global.SaveSlot_SavedHP[n];
    player_ranked[n]=  global.SaveSlot_ranked[n];
    }
    else
    {
    player_name[n] = "";    
    player_date[n] = "- EMPTY -";      
    player_room[n] = -1;
    player_Hours[n]=0;
    player_Minutes[n]=0;
    player_Seconds[n]=0;
    player_Score[n]=1;
    player_hp[n]=0;
    player_ranked[n]=false;    
    }
}
    
global.slot=1;
show_load=false;

if (global.newgame) 
    {
    title="- New Game -";
    }
    else
    {
    if (global.stageselect==true)
        title="- Stage Select -";
        else
        title="- Continue Last -";
    }

if(master.Menu_Arrow==0)
{
master.num+=1;
master.Menu_Arrow=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Menu_Arrow.png",301,0,0,0,37);
}

if window_get_fullscreen() {offset=1.5;}else{offset=1;}
audio_play_sound(snd_PowerupB,10,false);
gamepad_set_vibration(global.playing_index, 0, 0);
ranked_game=false;
rest=true;
x_menu=850;
y_menu=300
x=x_menu-40;
y=y_menu+40;
shift_back=0;
shift_front=5;
move=0;
stripes=400; 
fade=0;
overwrite=false;
Room_Name=string("");
flash=1;
flash_count=.05;
target_rm=rm_LoadGame;
arrow_index=0;
grow_y=0;
target_room=-1; //for HUD ICON SET TO BLANK
load_slot=1;     
target_room=-1;       

alarm[2]=1;      
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1)
{
if sprite_exists(global.spr_gamerpicture) sprite_delete(global.spr_gamerpicture);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1) //GET USER INFO
{  
    account=global.xb_user;  
       
    var n
    for (n=1;n&lt;9;n+=1)
    {   
        player_name[n] = "";    
        player_date[n] = "- EMPTY -";      
        player_room[n] = -1;
        player_Hours[n]=0;
        player_Minutes[n]=0;
        player_Seconds[n]=0;
        player_Score[n]=1;
        player_hp[n]=0;
        player_ranked[n]=false;        
    }
    
    scr_SaveSelect_Load();
    if sprite_exists(global.spr_gamerpicture) sprite_delete(global.spr_gamerpicture);  
         
       
    if (global.xb_user == pointer_null) || (global.xb_user == -1) 
    {
        global.display_name = "No User"; 
        var n
        for (n=1;n&lt;9;n+=1)
        {   
            player_name[n] = "";    
            player_date[n] = "- EMPTY -";      
            player_room[n] = -1;
            player_Hours[n]=0;
            player_Minutes[n]=0;
            player_Seconds[n]=0;
            player_Score[n]=1;
            player_hp[n]=0;
            player_ranked[n]=false;        
        }    
    }
    else
    {
        global.spr_gamerpicture = xboxone_sprite_add_from_gamerpicture(global.xb_user, 64, 0, 0);
        global.display_name = xboxone_gamedisplayname_for_user(global.xb_user); 
        
        if (xboxone_get_savedata_user() != global.xb_user)
        {
            xboxone_set_savedata_user(global.xb_user);
        }
    }
    
    //scr_XboxOne_Achievement(0); //RICH PRESENCE
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==0) || (global.platform==1) //PC XBOX
    {
        scr_SaveSelect_Load();
    }
    
    if (global.platform==3) //PS 4
    {
        //scr_loadgame();
    }
         
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(global.playing_index, 0, 0);

if (global.loading==true)
{
    alarm[1]=1; //WAIT TILL NOT LOADING
}
else
{
    
    if (global.platform==1)
    {
    scr_XboxOne_Achievement(0); //RICH PRESENCE
    }
    
    if(global.newgame) //NEW GAME
    {
        instance_create(x,y,obj_EnterName);
        instance_destroy();
    }
        
    if(global.newgame==false) //CONTINUE
    {
        if !instance_exists(obj_Curtain) instance_create(x,y,obj_Curtain);
        audio_stop_sound(msc_Title);
        show_load=true;
        global.gamestart=true; //ENABLES MASTER MEMORY FLUSH
        global.load_room=true; //ENABLES GO TO LOADED ROOM
        
        if (global.platform==1)
        {
        global.game_xb_user=global.xb_user; //SET THE GAME USER
        }
        
        if (global.platform!=3) //PC AND XBOX
            {
            scr_loadgame();
            }
            else //PS4 ONLY LOAD
            {
            //UPDATE CURRENT SAVE SLOT BEFORE SAVING    
            global.date = global.SaveSlot_date[global.slot];               //DATE
            global.name = global.SaveSlot_name[global.slot];               //HERO NAME
            global.SavedRoom  = global.SaveSlot_SavedRoom[global.slot];    //CHECKPOINT ROOM ID
            global.SavedHP    = global.SaveSlot_SavedHP[global.slot];      //Health           
            global.SavedMoney = global.SaveSlot_SavedMoney[global.slot];   //Money
                                         
            for(var a=0; a&lt;=2; a+=1) //Set Inventory
            {
                for (b=0;b&lt;=3;b+=1)
                {
                    switch(global.slot)
                    {
                    case 1: global.Inventory[a,b] = global.SaveSlot_Inventory_1[a,b]; break; //INVENTORY SLOT
                    case 2: global.Inventory[a,b] = global.SaveSlot_Inventory_2[a,b]; break; //INVENTORY SLOT
                    case 3: global.Inventory[a,b] = global.SaveSlot_Inventory_3[a,b]; break; //INVENTORY SLOT
                    case 4: global.Inventory[a,b] = global.SaveSlot_Inventory_4[a,b]; break; //INVENTORY SLOT
                    case 5: global.Inventory[a,b] = global.SaveSlot_Inventory_5[a,b]; break; //INVENTORY SLOT
                    case 6: global.Inventory[a,b] = global.SaveSlot_Inventory_6[a,b]; break; //INVENTORY SLOT
                    case 7: global.Inventory[a,b] = global.SaveSlot_Inventory_7[a,b]; break; //INVENTORY SLOT
                    case 8: global.Inventory[a,b] = global.SaveSlot_Inventory_8[a,b]; break; //INVENTORY SLOT
                    }
                }
            } 
               
            global.weapon_A = global.SaveSlot_weapon_A[global.slot]; //WEAPON SLOT 1 ID
            global.weapon_B = global.SaveSlot_weapon_B[global.slot]; //WEAPON SLOT 2 ID
            global.weapon_C = global.SaveSlot_weapon_C[global.slot]; //WEAPON SLOT 3 ID
            global.weapon_D = global.SaveSlot_weapon_D[global.slot]; //WEAPON SLOT 4 ID
                
            global.pets[0]=global.SaveSlot_pets[global.slot,0]
            if (global.pets[0]&lt;1) global.pets[0]=1;
            global.pets[1]=global.SaveSlot_pets[global.slot,1]; //Pup
            global.pets[2]=global.SaveSlot_pets[global.slot,2]; //Cat
            global.pets[3]=global.SaveSlot_pets[global.slot,3]; //Weasel
            global.pets[4]=global.SaveSlot_pets[global.slot,4]; //Duck
            
            global.weapon_A_energy=global.SaveSlot_weapon_A_energy[global.slot]; //WEAPON SLOT 1 AMMO
            global.weapon_B_energy=global.SaveSlot_weapon_B_energy[global.slot]; //WEAPON SLOT 2 AMMO
            global.weapon_C_energy=global.SaveSlot_weapon_C_energy[global.slot]; //WEAPON SLOT 3 AMMO
            global.weapon_D_energy=global.SaveSlot_weapon_D_energy[global.slot]; //WEAPON SLOT 4 AMMO
            
            global.Hours=global.SaveSlot_Hours[global.slot];         //Speed Run Time
            global.Minutes=global.SaveSlot_Minutes[global.slot];     //Speed Run Time
            global.Seconds=global.SaveSlot_Seconds[global.slot];     //Speed Run Time
            
            global.ranked_Minutes=global.SaveSlot_ranked_Minutes[global.slot];     //Speed Run Time
            global.ranked_Seconds=global.SaveSlot_ranked_Seconds[global.slot];     //Speed Run Time
                        
            global.Points=global.SaveSlot_Points[global.slot];       //SCORE
            global.HERO_type=global.SaveSlot_HERO_type[global.slot]; //ADULT [1] vs CHILD [0]
            
            global.World=global.SaveSlot_World[global.slot];  //SET WORLD FOR WORLD MAP
            
                for (a=1;a&lt;=14;a+=1) //BOSS SCORE
                {  
                    for (b=1;b&lt;=3;b+=1)
                    {
                        switch(global.slot)
                        {
                        case 1: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_1[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 2: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_2[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 3: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_3[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 4: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_4[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 5: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_5[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 6: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_6[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 7: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_7[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        case 8: global.Boss_Score[a,b]=global.SaveSlot_Boss_Score_8[a,b]; break; //NOT BEATEN DEFAULT SCORE
                        }
                    }
                }
                
                //WORLD PROGRESS
                for (c=0;c&lt;15;c+=1)
                {
                    global.world_clear[c]=global.SaveSlot_world_clear[global.slot,c]; //WHICH WORLDS HAVE BEEN BEATEN
                }
                
             global.difficulty=global.SaveSlot_difficulty[global.slot];  //CURRENT GAME DIFFICULTY
             global.ranked=global.SaveSlot_ranked[global.slot];    
             global.worldmap=global.SaveSlot_worldmap[global.slot];
             //RANKDED GAME
                                          
                              
               if (global.load_room)
               {   
                global.load_room=false;
                global.creation=true;
                global.Trippy=false;
                global.CutScene=false;
                global.Parallax=true;
                global.VParallax=false;        
                    
                    if (global.SavedRoom!=-1)
                    {
                        if (global.worldmap==true)
                        {
                            room_goto(rm_WorldMap);  
                        }
                        else
                        {
                        if (global.stageselect==false)                                                                                              
                            room_goto(global.SavedRoom);                                                            
                            else                        
                            room_goto(rm_WorldMap);                        
                        }
                    }                                                        
               }//END "load_room" is true
                
            }//END PS4 LOAD
            
    }//END NEW GAME IS FALSE
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ranked_game=false;

if (global.platform==1)
{
if (account!=global.xb_user)
    {
    if (alarm[3]==-1) alarm[3]=1;
    }
}

switch(y-y_menu)
{
    case 40 : if (player_ranked[1]==true) ranked_game=true; break;    
    case 60 : if (player_ranked[2]==true) ranked_game=true; break;
    case 80 : if (player_ranked[3]==true) ranked_game=true; break;  
    case 100 : if (player_ranked[4]==true) ranked_game=true; break;    
    case 120 : if (player_ranked[5]==true) ranked_game=true; break;    
    case 140 : if (player_ranked[6]==true) ranked_game=true; break;    
    case 160 : if (player_ranked[7]==true) ranked_game=true; break;    
    case 180 : if (player_ranked[8]==true) ranked_game=true; break;  
}


select_y=y-y_menu;


if !instance_exists(obj_Overwrite) &amp;&amp; !instance_exists(obj_Delete) &amp;&amp; !instance_exists(obj_Difficulty)
{
Key_Pause = gamepad_button_check_pressed(global.playing_index,gp_start);
Key_Pause = keyboard_check_pressed(vk_enter);

Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Back = gamepad_button_check_pressed(global.playing_index, gp_face2);
Key_Delete = gamepad_button_check_pressed(global.playing_index, gp_face4);


if (global.platform==1) //SwitchUSER XBOX
{
    Key_User = gamepad_button_check_pressed(global.playing_index, gp_face3);
            
    if (Key_User) &amp;&amp; (!master.paused)
    {
    Key_Jump=false;
    Key_Back=false;
    Key_Delete=false;
    scr_confirm();
    
    with (master)
        {
        async_event_id = xboxone_show_account_picker(global.playing_index, 0);
        showing_account_picker = true;
        }
    }       
}

if (Key_Jump) Key_Back=false;
if (Key_Delete) Key_Back=false;



if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) {Key_Up = 1; alarm[0]=10; rest=false;} 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) {Key_Down = 1; alarm[0]=10; rest=false;}
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) {Key_Left = 1; alarm[0]=10; rest=false;}
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) {Key_Right = 1; alarm[0]=10; rest=false;}
}

        if (master.paused)
        {
        Key_User = false;
        Key_Pause = false;
        Key_Up = false;
        Key_Down = false;
        Key_Jump = false;
        Key_Back = false;
        Key_Delete = false;
        }
    
    if (alarm[3]!=-1) Key_Jump=false;

if (Key_Back) || keyboard_check_pressed(vk_escape)  //GO BACK
    {
    audio_play_sound(snd_capped_out,10,false); 
    room_goto(rm_TitleScreen);
    }

if (Key_Up == 1) || keyboard_check_pressed(vk_up) 
{
    stripes=444*offset;
    fade=0;
    shift_back=0;
    audio_play_sound(snd_selectA, 10, false);
    if (y&gt;y_menu+40) 
    {
    y=y-20;
    }
    else
    {
    y=y_menu+200;
    audio_play_sound(snd_selectA, 10, false);
    }
}


if (Key_Down ==1) || keyboard_check_pressed(vk_down) 
{
stripes=444*offset;
fade=0;
shift_back=0;

audio_play_sound(snd_selectA, 10, false);
    if(y&lt;y_menu+200)
    {
    y=y+20;
    }
    else
    {
    y=y_menu+40;
    }
}

switch(select_y)
{
case 40:  global.slot=1; break;
case 60:  global.slot=2; break;
case 80:  global.slot=3; break;
case 100: global.slot=4; break;
case 120: global.slot=5; break;
case 140: global.slot=6; break;
case 160: global.slot=7; break;
case 180: global.slot=8; break;    
}//END SLOT SWITCH



if (Key_Jump) || (Key_Pause) || keyboard_check_pressed(vk_space)  || keyboard_check_pressed(vk_enter)
{

if (select_y==200)
    {
    audio_play_sound(snd_capped_out, 10, false);
    room_goto(rm_TitleScreen);
    }


if(select_y!=200)
{
    if(global.newgame)
    {
    var void=false; 
    
        if (global.platform==1)
        {
            if (global.xb_user == pointer_null) || (xboxone_user_is_signed_in(global.xb_user)==false)
                {
                audio_play_sound(snd_diggweed,10,false);   
                void=true;
                }     
        }
        
        if (void==false)
        {
            if (player_room[global.slot] != -1)
            {
               //OVERWRITE 
                if !instance_exists(obj_Overwrite) 
                    instance_create(800,625,obj_Overwrite);
            }
            else
            {
                //NEW GAME
                if (alarm[1]==-1) {audio_play_sound(snd_gamestart,10,false); alarm[1]=20;}                  
                if (global.rumble)  gamepad_set_vibration(global.playing_index, .5, .5);
            }
        }//end not void
    }
    else
    {
        if (player_room[global.slot] != -1)
        {
                //CONTINUE
                if (player_ranked[global.slot]==true) &amp;&amp; (player_hp[global.slot]&lt;=0) 
                {
                    //VOIDED RANKED GAME
                    audio_play_sound(snd_diggweed,10,false);
                }
                else
                {
                if (global.rumble)  gamepad_set_vibration(global.playing_index, .5, .5); 
                if (alarm[1]==-1) 
                    {
                    audio_stop_all();
                    audio_play_sound(snd_gamestart,10,false); 
                    alarm[1]=20; show_load=true;  
                    instance_create(x,y,obj_Curtain);
                    }
                }
        }
        else
        {
            //NO SAVE
            audio_play_sound(snd_diggweed,10,false);
        }
    }
}//END SELECT Y IS NOT 200


}//END SELECT



}//OVERWRITE AND FILE DELETE DOESNT EXIST 



if (Key_Delete) &amp;&amp; (select_y!=200)
{
    switch(select_y)
    {
    case 40: global.slot=1; break;
    case 60: global.slot=2; break;
    case 80: global.slot=3; break;
    case 100: global.slot=4; break;
    case 120: global.slot=5; break;
    case 140: global.slot=6; break;
    case 160: global.slot=7; break;
    case 180: global.slot=8; break;
    }
    

    if (global.platform==0) || (global.platform==1) || (global.platform==2) //PC AND XBOX ONLY//PS4 ONLY  
    {
        switch(global.slot)
        {
        case 1: if file_exists("SaveGame\Save_A.sav"){ if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);}else{audio_play_sound(snd_diggweed,10,false);} break;
        case 2: if file_exists("SaveGame\Save_B.sav"){ if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);}else{audio_play_sound(snd_diggweed,10,false);} break;
        case 3: if file_exists("SaveGame\Save_C.sav"){ if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);}else{audio_play_sound(snd_diggweed,10,false);} break;
        case 4: if file_exists("SaveGame\Save_D.sav"){ if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);}else{audio_play_sound(snd_diggweed,10,false);} break;
        case 5: if file_exists("SaveGame\Save_E.sav"){ if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);}else{audio_play_sound(snd_diggweed,10,false);} break;
        case 6: if file_exists("SaveGame\Save_F.sav"){ if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);}else{audio_play_sound(snd_diggweed,10,false);} break;
        case 7: if file_exists("SaveGame\Save_G.sav"){ if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);}else{audio_play_sound(snd_diggweed,10,false);} break;
        case 8: if file_exists("SaveGame\Save_H.sav"){ if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);}else{audio_play_sound(snd_diggweed,10,false);} break;
        }
    }
    
    if (global.platform==3)//PS4
    {
        if (player_room[global.slot] != -1)
        {
            if !instance_exists(obj_Delete) instance_create(800,625,obj_Delete);            
        }
        else
        {
            audio_play_sound(snd_diggweed,10,false);
        }
    }
}//END DELETE KEY PRESSED








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale=1.25;
x_scale=-270;
y_scale=-80;

if window_get_fullscreen()
{
offset=1.5*scale;
}
else
{
offset=1*scale;
}

if (global.platform==1)
{
   draw_set_color(c_black);
   draw_set_alpha(.2);
   draw_rectangle(10*offset,10*offset,74*offset,74*offset,false);
   draw_set_color(c_white); draw_set_alpha(1);

   
   if (global.xb_user == pointer_null) || (global.display_name=="")
   {
        global.display_name = "No User"; 
        if sprite_exists(global.spr_gamerpicture) sprite_delete(global.spr_gamerpicture);     
   }
   else
   {
        if sprite_exists(global.spr_gamerpicture)
        {
            draw_sprite_ext(global.spr_gamerpicture, 0, 10*offset, 10*offset,offset,offset,0,c_white,1);
        }
    }
    
    draw_rectangle(10*offset,10*offset,74*offset,74*offset,true);
    
    draw_set_halign(fa_left)
    draw_set_valign(fa_middle);
   
    //draw_set_font(fnt_Arial_Big);
    draw_set_font(fnt_Arial);
    draw_set_color(c_black); draw_set_alpha(.5);
    draw_text_transformed(85*offset, (10 + 33)*offset, "Current Player:#" + global.display_name,.85*offset,.85*offset,0);    
    draw_set_color(c_white); draw_set_alpha(1);
    draw_text_transformed(84*offset, (10 + 32)*offset, "Current Player:#" + global.display_name,.85*offset,.85*offset,0);
}

draw_set_color(c_black);
draw_set_alpha(.35);

//DRAW RECTANGLE
if (grow_y&lt;160) grow_y+=20;
draw_roundrect((x_scale+790-grow_y*2.5)*offset,(y_scale+400-grow_y)*offset,(x_scale+790+grow_y*2.5)*offset,(y_scale+400+grow_y)*offset,false);
draw_set_color(c_white);
draw_roundrect((x_scale+790-grow_y*2.5)*offset,(y_scale+400-grow_y)*offset,(x_scale+790+grow_y*2.5)*offset,(y_scale+400+grow_y)*offset,true);
draw_set_halign(fa_left);
draw_set_valign(fa_center);

//DRAW SHADOW -----------------------------------------
//DRAW BACK COLOR 
draw_set_color(c_navy);
draw_set_alpha(.35);
draw_rectangle((x_menu-12+x_scale)*offset,(y-10+y_scale)*offset,(x_menu+290+x_scale)*offset,(y+10+y_scale)*offset,false);

draw_set_color(c_black);
draw_set_alpha(.75);
draw_set_font(fnt_Astron);
draw_set_halign(fa_center);

draw_text_transformed((640-3)*offset/scale,(247+3)*offset/scale,title,offset,offset,0);
draw_set_halign(fa_left);

if (shift_back&lt;4) shift_back+=.25;


draw_set_font(fnt_LowGun);
font_size=.7;

if (y-y_menu==40) draw_text_transformed((x_menu+shift_back+shift_front+x_scale)*offset,(-4+y_menu+40+y_scale+shift_back*.5)*offset,"  Slot A ",font_size*offset,font_size*offset,0);  
draw_set_font(fnt_Arial);
if (y-y_menu==40)draw_text_transformed((x_menu+100+x_scale+shift_back*.5)*offset,(y_menu+40+y_scale+shift_back*.25)*offset, string(player_name[1]) + "  [ " + string(player_date[1])+" ]",offset,offset,0); 


draw_set_font(fnt_LowGun);
if (y-y_menu==60)draw_text_transformed((x_menu+shift_back+x_scale+shift_front)*offset,(-4+y_menu+60+y_scale+shift_back*.5)*offset,"  Slot B ",font_size*offset,font_size*offset,0); 
draw_set_font(fnt_Arial);
if (y-y_menu==60)draw_text_transformed((x_menu+100+x_scale+shift_back*.5)*offset,(y_menu+60+y_scale+shift_back*.25)*offset, string(player_name[2]) + "  [ " + string(player_date[2])+" ]",offset,offset,0); 


draw_set_font(fnt_LowGun);
if (y-y_menu==80)draw_text_transformed((x_menu+shift_back+x_scale+shift_front)*offset,(-4+y_menu+80+y_scale+shift_back*.5)*offset,"  Slot C ",font_size*offset,font_size*offset,0);
draw_set_font(fnt_Arial);
if (y-y_menu==80)draw_text_transformed((x_menu+100+x_scale+shift_back*.5)*offset,(y_menu+80+y_scale+shift_back*.25)*offset, string(player_name[3]) + "  [ " + string(player_date[3])+" ]",offset,offset,0); 


draw_set_font(fnt_LowGun);
if (y-y_menu==100)draw_text_transformed((x_menu+shift_back+x_scale+shift_front)*offset,(-4+y_menu+100+y_scale+shift_back*.5)*offset,"  Slot D ",font_size*offset,font_size*offset,0);  
draw_set_font(fnt_Arial);
if (y-y_menu==100)draw_text_transformed((x_menu+x_scale+100+shift_back*.5)*offset,(y_menu+100+y_scale+shift_back*.25)*offset, string(player_name[4]) + "  [ " + string(player_date[4])+" ]",offset,offset,0); 


draw_set_font(fnt_LowGun);
if (y-y_menu==120)draw_text_transformed((x_menu+x_scale+shift_back+shift_front)*offset,(-4+y_scale+y_menu+120+shift_back*.5)*offset,"  Slot E ",font_size*offset,font_size*offset,0); 
draw_set_font(fnt_Arial);
if (y-y_menu==120)draw_text_transformed((x_menu+x_scale+100+shift_back*.5)*offset,(y_menu+y_scale+120+shift_back*.25)*offset, string(player_name[5]) + "  [ " + string(player_date[5])+" ]",offset,offset,0); 


draw_set_font(fnt_LowGun);
if (y-y_menu==140)draw_text_transformed((x_menu+x_scale+shift_back+shift_front)*offset,(y_menu+y_scale+140+shift_back*.5)*offset,"  Slot F ",font_size*offset,font_size*offset,0);
draw_set_font(fnt_Arial);
if (y-y_menu==140)draw_text_transformed((x_menu+x_scale+100+shift_back*.5)*offset,(y_menu+y_scale+140+shift_back*.25)*offset, string(player_name[6]) + "  [ " + string(player_date[6])+" ]",offset,offset,0); 


draw_set_font(fnt_LowGun);
if (y-y_menu==160)draw_text_transformed((x_menu+x_scale+shift_back+shift_front)*offset,(-4+y_scale+y_menu+160+shift_back*.5)*offset,"  Slot G ",font_size*offset,font_size*offset,0);  
draw_set_font(fnt_Arial);
if (y-y_menu==160)draw_text_transformed((x_menu+x_scale+100+shift_back*.5)*offset,(y_menu+y_scale+160+shift_back*.25)*offset, string(player_name[7]) + "  [ " + string(player_date[7])+" ]",offset,offset,0); 


draw_set_font(fnt_LowGun);
if (y-y_menu==180)draw_text_transformed((x_menu+x_scale+shift_back+shift_front)*offset,(-4+y_scale+y_menu+180+shift_back*.5)*offset,"  Slot H ",font_size*offset,font_size*offset,0); 
draw_set_font(fnt_Arial);
if (y-y_menu==180)draw_text_transformed((x_menu+x_scale+100+shift_back*.5)*offset,(y_menu+y_scale+180+shift_back*.25)*offset, string(player_name[8]) + "  [ " + string(player_date[8])+" ]",offset,offset,0); 


draw_set_font(fnt_LowGun);
if (y-y_menu==200)draw_text_transformed((x_menu+x_scale+20+shift_back+shift_front)*offset,(-4+y_scale+y_menu+200+shift_back*.5)*offset,"back",font_size*offset,font_size*offset,0);

//FLASH INC ------
if (flash&gt;=1) flash_count*=-1;
if (flash&lt;=0) flash_count*=-1;
if (alarm[1]==-1)
flash+=flash_count;
else
flash+=8*flash_count;


//DRAW FRONT -----------------------
draw_set_color(c_white);
draw_set_alpha(1);
draw_roundrect((x_menu+x_scale-12)*offset,(-4+y_menu+y_scale+24)*offset, (x_menu+x_scale+290)*offset,(y_menu+y_scale+220)*offset,true);  
draw_set_font(fnt_Astron);
draw_set_halign(fa_center);
draw_text_transformed((640)*offset/scale,(247)*offset/scale,title,offset,offset,0);
draw_set_halign(fa_left);
//draw_text_transformed((x_menu+x_scale-12)*offset,(-4+y_menu+y_scale-24)*offset,title,offset,offset,0);

draw_set_font(fnt_LowGun);

if (y-y_menu==40)
    draw_text_transformed_colour((x_menu+x_scale+shift_front)*offset,(-4+y_menu+y_scale+40)*offset,"  Slot A ",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash);  
    else 
    draw_text_transformed((x_menu+x_scale)*offset,(-4+y_menu+y_scale+40)*offset,"  Slot A ",font_size*offset,font_size*offset,0);
    draw_set_font(fnt_Arial);

if (y-y_menu==40)
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+40)*offset, string(player_name[1]) + "  [ " + string(player_date[1])+" ]",offset,offset,0); 
    else 
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+40)*offset, string(player_name[1]) + "  [ " + string(player_date[1])+" ]",offset,offset,0); 
   
    draw_set_font(fnt_LowGun);

if (y-y_menu==60)
    draw_text_transformed_colour((x_menu+x_scale+shift_front)*offset,(-4+y_menu+y_scale+60)*offset,"  Slot B ",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash); 
    else 
    draw_text_transformed((x_menu+x_scale)*offset,(-4+y_menu+y_scale+60)*offset,"  Slot B ",font_size*offset,font_size*offset,0); 
    draw_set_font(fnt_Arial);

if (y-y_menu==60)
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+60)*offset, string(player_name[2]) + "  [ " + string(player_date[2])+" ]",offset,offset,0); 
    else 
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+60)*offset, string(player_name[2]) + "  [ " + string(player_date[2])+" ]",offset,offset,0); 
   
    draw_set_font(fnt_LowGun);
    
if (y-y_menu==80)
    draw_text_transformed_colour((x_menu+x_scale+shift_front)*offset,(-4+y_menu+y_scale+80)*offset,"  Slot C ",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash);
    else 
    draw_text_transformed((x_menu+x_scale)*offset,(-4+y_menu+y_scale+80)*offset,"  Slot C ",font_size*offset,font_size*offset,0);
    draw_set_font(fnt_Arial);

if (y-y_menu==80)
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+80)*offset, string(player_name[3]) + "  [ " + string(player_date[3])+" ]",offset,offset,0); 
    else 
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+80)*offset, string(player_name[3]) + "  [ " + string(player_date[3])+" ]",offset,offset,0); 
    
    draw_set_font(fnt_LowGun);
    
if (y-y_menu==100)
    draw_text_transformed_colour((x_menu+x_scale+shift_front)*offset,(-4+y_menu+y_scale+100)*offset,"  Slot D ",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash);  
    else 
    draw_text_transformed((x_menu+x_scale)*offset,(-4+y_menu+y_scale+100)*offset,"  Slot D ",font_size*offset,font_size*offset,0);  
    draw_set_font(fnt_Arial);

if (y-y_menu==100)
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+100)*offset, string(player_name[4]) + "  [ " + string(player_date[4])+" ]",offset,offset,0); 
    else 
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+100)*offset, string(player_name[4]) + "  [ " + string(player_date[4])+" ]",offset,offset,0); 
   
    draw_set_font(fnt_LowGun);
    
if (y-y_menu==120)
    draw_text_transformed_colour((x_menu+x_scale+shift_front)*offset,(-4+y_menu+y_scale+120)*offset,"  Slot E ",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash); 
    else 
    draw_text_transformed((x_menu+x_scale)*offset,(-4+y_menu+y_scale+120)*offset,"  Slot E ",font_size*offset,font_size*offset,0); 
    draw_set_font(fnt_Arial);

if (y-y_menu==120)
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+120)*offset, string(player_name[5]) + "  [ " + string(player_date[5])+" ]",offset,offset,0); 
    else 
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+120)*offset, string(player_name[5]) + "  [ " + string(player_date[5])+" ]",offset,offset,0); 
   
    draw_set_font(fnt_LowGun);

if (y-y_menu==140)
    draw_text_transformed_colour((x_menu+x_scale+shift_front)*offset,(-4+y_menu+y_scale+140)*offset,"  Slot F ",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash); 
    else 
    draw_text_transformed((x_menu+x_scale)*offset,(-4+y_menu+y_scale+140)*offset,"  Slot F ",font_size*offset,font_size*offset,0);
    draw_set_font(fnt_Arial);

if (y-y_menu==140)
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+140)*offset, string(player_name[6]) + "  [ " + string(player_date[6])+" ]",offset,offset,0); 
    else 
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+140)*offset, string(player_name[6]) + "  [ " + string(player_date[6])+" ]",offset,offset,0); 
   
    draw_set_font(fnt_LowGun);
    
if (y-y_menu==160)
    draw_text_transformed_colour((x_menu+x_scale+shift_front)*offset,(-4+y_menu+y_scale+160)*offset,"  Slot G ",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash);  
    else 
    draw_text_transformed((x_menu+x_scale)*offset,(-4+y_menu+y_scale+160)*offset,"  Slot G ",font_size*offset,font_size*offset,0);
    draw_set_font(fnt_Arial);

if (y-y_menu==160)
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+160)*offset, string(player_name[7]) + "  [ " + string(player_date[7])+" ]",offset,offset,0); 
    else 
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+160)*offset, string(player_name[7]) + "  [ " + string(player_date[7])+" ]",offset,offset,0); 
  
    draw_set_font(fnt_LowGun);

if (y-y_menu==180)
    draw_text_transformed_colour((x_menu+x_scale+shift_front)*offset,(-4+y_menu+y_scale+180)*offset,"  Slot H ",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash); 
    else 
    draw_text_transformed((x_menu+x_scale)*offset,(-4+y_menu+y_scale+180)*offset,"  Slot H ",font_size*offset,font_size*offset,0); 
    draw_set_font(fnt_Arial);

if (y-y_menu==180)
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+180)*offset, string(player_name[8]) + "  [ " + string(player_date[8])+" ]",offset,offset,0); 
    else 
    draw_text_transformed((x_menu+x_scale+100)*offset,(y_menu+y_scale+180)*offset, string(player_name[8]) + "  [ " + string(player_date[8])+" ]",offset,offset,0); 
 
    draw_set_font(fnt_LowGun);

if (y-y_menu==200)
    draw_text_transformed_colour((x_menu+x_scale+20+shift_front)*offset,(-4+y_menu+y_scale+200)*offset,"back",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash); 
    else 
    draw_text_transformed((x_menu+x_scale+20)*offset,(-4+y_menu+y_scale+200)*offset,"back",font_size*offset,font_size*offset,0);

//ROOM GUI

    switch(y-y_menu)
    {
     case 40 :  target_room=player_room[1]; global.Hours=player_Hours[1]; global.Minutes=player_Minutes[1]; global.Seconds=player_Seconds[1]; break;
     case 60 :  target_room=player_room[2]; global.Hours=player_Hours[2]; global.Minutes=player_Minutes[2]; global.Seconds=player_Seconds[2]; break;
     case 80 :  target_room=player_room[3]; global.Hours=player_Hours[3]; global.Minutes=player_Minutes[3]; global.Seconds=player_Seconds[3]; break;
     case 100 : target_room=player_room[4]; global.Hours=player_Hours[4]; global.Minutes=player_Minutes[4]; global.Seconds=player_Seconds[4]; break;
     case 120 : target_room=player_room[5]; global.Hours=player_Hours[5]; global.Minutes=player_Minutes[5]; global.Seconds=player_Seconds[5]; break;
     case 140 : target_room=player_room[6]; global.Hours=player_Hours[6]; global.Minutes=player_Minutes[6]; global.Seconds=player_Seconds[6]; break;
     case 160 : target_room=player_room[7]; global.Hours=player_Hours[7]; global.Minutes=player_Minutes[7]; global.Seconds=player_Seconds[7]; break;
     case 180 : target_room=player_room[8]; global.Hours=player_Hours[8]; global.Minutes=player_Minutes[8]; global.Seconds=player_Seconds[8]; break;  
     case 200 : target_room=-1; break;   
    }
    
    if (target_room!=-1)
    draw_text_transformed((x_scale+450)*offset,(y_scale+310)*offset,Room_Name,font_size*offset,font_size*offset,0);
    


//TIMER --------------------------------------

draw_set_font(fnt_Score);
draw_set_halign(fa_right);
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((x_scale+678)*offset,(y_scale+522)*offset,"Time: ",.3*offset,.4*offset,0);
draw_set_color(c_yellow); draw_set_alpha(1);
draw_text_transformed((x_scale+680)*offset,(y_scale+520)*offset,"Time: ",.3*offset,.4*offset,0);
draw_set_halign(fa_left);
draw_set_color(c_white);
draw_set_font(fnt_Digital);

if (target_room!=-1) 
{
    if (global.Seconds&lt;10) &amp;&amp; (global.Minutes&lt;10)
    {
        draw_text_transformed((x_scale+680)*offset,(y_scale+520)*offset,string(global.Hours)+":0"+string(global.Minutes)+":0"+string(round(global.Seconds)),.8*offset,.8*offset,image_angle);
    }
    else if(global.Seconds&gt;=10) &amp;&amp; (global.Minutes&gt;=10)
    {
        draw_text_transformed((x_scale+680)*offset,(y_scale+520)*offset,string(global.Hours)+":"+string(global.Minutes)+":"+string(round(global.Seconds)),.8*offset,.8*offset,image_angle);
    }
    else if (global.Seconds&lt;10) &amp;&amp; (global.Minutes&gt;=10)
    {
        draw_text_transformed((x_scale+680)*offset,(y_scale+520)*offset,string(global.Hours)+":"+string(global.Minutes)+":0"+string(round(global.Seconds)),.8*offset,.8*offset,image_angle);
    }
    else if (global.Seconds&gt;=10) &amp;&amp; (global.Minutes &lt;10)
    {
        draw_text_transformed((x_scale+680)*offset,(y_scale+520)*offset,string(global.Hours)+":0"+string(global.Minutes)+":"+string(round(global.Seconds)),.8*offset,.8*offset,image_angle);
    }
}
draw_set_font(fnt_Orbitron);

//DRAW ROOM THUMB ---------------------------------
switch(target_room)
    {
    case rm_Tutorial_0:
    if(master.spr_sh_01==0)
        {
        master.num+=1;
        master.spr_sh_01=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_01.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_01];
    Room_Name="World 00: Tutorial";
    break;
    
    case rm_Tutorial_C:
    if(master.spr_sh_01==0)
        {
        master.num+=1;
        master.spr_sh_01=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_01.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_01];
    Room_Name="World 01: The Escape";
    break;
    
    case rm_Collector_Boss:
    if(master.spr_sh_02==0)
        {
        master.num+=1;
        master.spr_sh_02=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_02.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_02];
    Room_Name="World 01: The Escape";
    break;
    
    case rm_World2_A:
    if(master.spr_sh_03==0)
        {
        master.num+=1;
        master.spr_sh_03=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_03.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_03];
    Room_Name="World 02: Robocity";
    break;
    
    case rm_Drifter_Battle:
    if(master.spr_sh_04==0)
        {
        master.num+=1;
        master.spr_sh_04=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_04.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_04];
    Room_Name="World 02: Robocity";
    break;
    
    case rm_World2_B:
    if(master.spr_sh_06==0)
        {
        master.num+=1;
        master.spr_sh_06=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_06.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_06];
    Room_Name="World 05: Tunnel";
    break;
    
    case rm_Creeper_Boss:
    if(master.spr_sh_07==0)
        {
        master.num+=1;
        master.spr_sh_07=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_07.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_07];
    Room_Name="World 05: Tunnel";
    break;
    
    case rm_World3_A:
    if(master.spr_sh_08==0)
        {
        master.num+=1;
        master.spr_sh_08=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_08.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_08];
    Room_Name="World 06: Caves";
    break;
    
    case rm_Garbage_Collector:
    if(master.spr_sh_09==0)
        {
        master.num+=1;
        master.spr_sh_09=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_09.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_09];
    Room_Name="World 06: Caves";
    break;
    
    case rm_World4_B:
    if(master.spr_sh_11==0)
        {
        master.num+=1;
        master.spr_sh_11=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_11.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_11];
    Room_Name="World 07: Red Valley";
    break;
    
    case rm_Mechollector_Boss:
    if(master.spr_sh_12==0)
        {
        master.num+=1;
        master.spr_sh_12=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_12.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_12];
    Room_Name="World 07: Red Valley";
    break;
    
    case rm_World5_A:
    if(master.spr_sh_13==0)
        {
        master.num+=1;
        master.spr_sh_13=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_13.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_13];
    Room_Name="World 03: Grassy Hills";
    break;
    
    case rm_Bunny_Boss:
    if(master.spr_sh_14==0)
        {
        master.num+=1;
        master.spr_sh_14=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_14.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_14];
    Room_Name="World 03: Grassy Hills";
    break;
     
    case rm_GreenForrest_A:
    if(master.spr_sh_15==0)
        {
        master.num+=1;
        master.spr_sh_15=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_15.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_15];
    Room_Name="World 09: Green Forest";
    break;
    
    case rm_GreenForrest_D:
    if(master.spr_sh_16==0)
        {
        master.num+=1;
        master.spr_sh_16=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_16.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_16];
    Room_Name="World 09: Green Forest";
    break;
    
    case rm_World6_A:
    if(master.spr_sh_17==0)
        {
        master.num+=1;
        master.spr_sh_17=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_17.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_17];
    Room_Name="World 08: Factory";
    break;
    
    case rm_TrollQueen_Boss:
    if(master.spr_sh_18==0)
        {
        master.num+=1;
        master.spr_sh_18=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_18.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_18];
    Room_Name="World 08: Factory";
    break;
    
    case rm_World7_A:
    if(master.spr_sh_19==0)
        {
        master.num+=1;
        master.spr_sh_19=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_19.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_19];
    Room_Name="World 04: Mushroom Forest";
    break;
    
    case rm_MrGrin_Boss:
    if(master.spr_sh_20==0)
        {
        master.num+=1;
        master.spr_sh_20=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_20.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_20];
    Room_Name="World 04: Mushroom Forest";
    break;
    
    case rm_World8_A:
    if(master.spr_sh_21==0)
        {
        master.num+=1;
        master.spr_sh_21=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_21.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_21];
    Room_Name="World 10: Dark Core pt.1";
    break;
    
    case rm_GH_Battle:
    if(master.spr_sh_22==0)
        {
        master.num+=1;
        master.spr_sh_22=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_22.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_22];
    Room_Name="World 10: Dark Core pt.1";
    break;
    
    case rm_World9_A:
    if(master.spr_sh_23==0)
        {
        master.num+=1;
        master.spr_sh_23=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_23.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_23];
    Room_Name="World 11: Dark Core pt.2";
    break;
    
    case rm_WhiteBat:
    if(master.spr_sh_24==0)
        {
        master.num+=1;
        master.spr_sh_24=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_24.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_24];
    Room_Name="World 11: Dark Core pt.2";
    break;
    
    case rm_World10_A:
    if(master.spr_sh_25==0)
        {
        master.num+=1;
        master.spr_sh_25=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_25.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_25];
    Room_Name="World 12: Sky City";
    break;
    
    case rm_MegaBot_Boss:
    if(master.spr_sh_26==0)
        {
        master.num+=1;
        master.spr_sh_26=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_26.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_26];
    Room_Name="World 12: Sky City";
    break;
    
    case rm_World11_A:
    if(master.spr_sh_28==0)
        {
        master.num+=1;
        master.spr_sh_28=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_28.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_28];
    Room_Name="World 13: Wavy Gravy";
    break;
    
    case rm_GooeyDragon:
    if(master.spr_sh_29==0)
        {
        master.num+=1;
        master.spr_sh_29=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_29.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_29];
    Room_Name="World 13: Wavy Gravy";
    break;
    
    case rm_World12_A:
    if(master.spr_sh_30==0)
        {
        master.num+=1;
        master.spr_sh_30=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_30.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_30];
    Room_Name="World 14: Deep Gravy";
    break;
    
    case rm_End_Game:
    if(master.spr_sh_30==0)
        {
        master.num+=1;
        master.spr_sh_30=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_30.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_30];
    Room_Name="World 14: Deep Gravy";
    break;
    
    case rm_Sin:
    if(master.spr_sh_31==0)
        {
        master.num+=1;
        master.spr_sh_31=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_31.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_31];
    Room_Name="World 14: Deep Gravy";
    break;
    
    case rm_HOTEL_w5:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 03: Grassy Hills";
    break;
         
    case rm_HOTEL_0:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 10: Dark Core pt1";
    break;
    
    case rm_World1_HOTEL:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 01: The Escape";
    break;
    
    case rm_World2_HOTEL:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 05: Tunnel";
    break;
    
    case rm_World3_HOTEL:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 06: Caves";
    break;
    
    case rm_World4_HOTEL:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 07: Red Valley";
    break;
    
    case rm_World6_HOTEL:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 08: Factory";
    break;
            
    case rm_World7_HOTEL:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 04: Mushroom Forest";
    break;
    
    case rm_World9_HOTEL:
    if(master.spr_sh_32==0)
        {
        master.num+=1;
        master.spr_sh_32=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_32.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_32];
    Room_Name="World 11: Dark Core pt2";
    break;
    
    case rm_Olivia_House:
    if(master.spr_sh_33==0)
        {
        master.num+=1;
        master.spr_sh_33=master.num;
        global.sprite[master.num] = sprite_add(working_directory+"\imports\spr_sh_33.png",1,0,0,0,0);
        }    
    sprite_index=global.sprite[master.spr_sh_33];
    Room_Name="World 03: Grassy Hills";
    break;        
    }
    

//SCREEN SHOT FRAME   
draw_set_alpha(.2);
draw_set_color(c_black);
draw_roundrect((x_scale+450)*offset,(y_scale+330)*offset,(x_scale+750)*offset,(y_scale+499)*offset,false);
draw_set_color(c_white);    

    if (target_room!=-1) &amp;&amp; (grow_y&gt;=160)
    {
           if sprite_exists(sprite_index) 
            {
                if (player_ranked[global.slot]==true) &amp;&amp; (player_hp[global.slot]&lt;=0) //DEAD SAVE
                {
                    shader_set(shdr_blackandwhite);
                    draw_sprite_ext(sprite_index,0,(x_scale+450)*offset,(y_scale+330)*offset,offset,offset,0,c_white,1);
                    shader_reset()                  
                }
                else 
                {                                       
                    move+=0.04;
                    if (stripes&lt;677*offset) stripes+=1;
                    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
                    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
                    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
                    
                    shader_set(shdr_Hologram);
                    shader_set_uniform_f(Stripes,stripes);
                    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
                    shader_set_uniform_f(Phase,move);       
                    draw_sprite_ext(sprite_index,0,(x_scale+450)*offset,(y_scale+330)*offset,offset,offset,0,c_white,1);
                    shader_reset(); 
                }
            }  
    }
    else
    {
        draw_set_alpha(1);
        draw_text_transformed((x_scale+550)*offset,(y_scale+415)*offset,"- no save -",offset,offset,0);
    }

draw_set_alpha(1);

if (fade&lt;1) fade+=.01;


if (target_room!=-1) &amp;&amp; sprite_exists(sprite_index)
{
    if (player_ranked[global.slot]==true) &amp;&amp; (player_hp[global.slot]&lt;=0) //DEAD SAVE
    {
        shader_set(shdr_blackandwhite);
        draw_sprite_ext(sprite_index,0,(x_scale+450)*offset,(y_scale+330)*offset,offset,offset,0,c_white,fade);
        shader_reset() ;
    }
    else
    {
        draw_sprite_ext(sprite_index,0,(x_scale+450)*offset,(y_scale+330)*offset,offset,offset,0,c_white,fade);
    }
}

draw_roundrect((x_scale+445)*offset,(y_scale+325)*offset,(x_scale+755)*offset,(y_scale+504)*offset,true);

//DRAW SAVED STATS---------------------------------------
draw_set_font(fnt_Score);
draw_set_halign(fa_right);
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((x_scale+520)*offset,(y_scale+522)*offset,"Score: ",.3*offset,.4*offset,0);
draw_set_color(c_yellow); draw_set_alpha(1);
draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,"Score: ",.3*offset,.4*offset,0);
draw_set_color(c_white);

if (target_room!=-1)
{
draw_set_font(fnt_Orbitron);
draw_set_halign(fa_left);


switch(y-y_menu)
{
    case 40 : 
    draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,string(round(player_Score[1])),offset,offset,0);    
    break;
    
    case 60 : 
    draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,string(round(player_Score[2])),offset,offset,0);
    break;
    
    case 80 : 
    draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,string(round(player_Score[3])),offset,offset,0);
    break;
    
    case 100 : 
    draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,string(round(player_Score[4])),offset,offset,0);
    break;
    
    case 120 : 
    draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,string(round(player_Score[5])),offset,offset,0);
    break;
    
    case 140 : 
    draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,string(round(player_Score[6])),offset,offset,0);
    break;
    
    case 160 : 
    draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,string(round(player_Score[7])),offset,offset,0);
    break;
    
    case 180 : 
    draw_text_transformed((x_scale+520)*offset,(y_scale+520)*offset,string(round(player_Score[8])),offset,offset,0);
    break;
        
    case 200 : break;   
}

if (ranked_game==true) //DRAW RANKED ICON
    {
    draw_sprite_ext(spr_icon_14_Star,0,(x_scale+450)*offset,(y_scale+545)*offset,.5*offset,.5*offset,0,c_white,1);
    draw_text_transformed((x_scale+470)*offset,(y_scale+545)*offset,"Ranked",.8*offset,.8*offset,0);
    }

}
    
    
arrow_index+=.5;
draw_sprite_ext(global.sprite[master.Menu_Arrow],arrow_index,(x_scale+x-20)*offset,(y_scale+y)*offset,.5*offset,.5*offset,0,c_white,1);

//Draw CONTROLS --------------------------------------------------------------------------------------
      if window_get_fullscreen()
        offset=1.5;
        else
        offset=1;
        
ctl_x = 750;
clt_y = 630;

if !instance_exists(obj_Overwrite) &amp;&amp; !instance_exists(obj_Delete) &amp;&amp; !instance_exists(obj_Difficulty) &amp;&amp; (grow_y&gt;=160)
{
    draw_set_halign(fa_left);
    draw_set_font(fnt_LowGun);
    
    draw_set_color(c_black); draw_set_alpha(.25);
    draw_sprite_ext(spr_xbox_A,0,(ctl_x-2)*offset,(clt_y+2)*offset,.5*offset,.5*offset,0,c_black,.4);
    draw_sprite_ext(spr_xbox_B,0,(ctl_x+110-2)*offset,(clt_y+2)*offset,.5*offset,.5*offset,0,c_black,.4);
    draw_sprite_ext(spr_xbox_Y,0,(ctl_x-2)*offset,(clt_y+30+2)*offset,.5*offset,.5*offset,0,c_black,.4);
    
    if (global.platform==1) draw_sprite_ext(spr_xbox_X,0,(ctl_x+110-2)*offset,(clt_y+30+2)*offset,.5*offset,.5*offset,0,c_black,.4);
    
    draw_text_transformed((ctl_x-2)*offset,(clt_y+2)*offset,"    - Select",.55*offset,.55*offset,0);
    draw_text_transformed((ctl_x-2)*offset,(clt_y+2)*offset,"    - Back",.55*offset,.55*offset,0);
    draw_text_transformed((ctl_x-2)*offset,(clt_y+30+2)*offset,"    - Delete",.55*offset,.55*offset,0);
    
    if (global.platform==1) draw_text_transformed((ctl_x+110-2)*offset,(clt_y+30+2)*offset,"    - Change User",.55*offset,.55*offset,0);
    
    draw_set_color(c_white); draw_set_alpha(1);
    draw_sprite_ext(spr_xbox_A,0,(ctl_x)*offset,clt_y*offset,.5*offset,.5*offset,0,c_white,1);
    draw_sprite_ext(spr_xbox_B,0,(ctl_x+110)*offset,clt_y*offset,.5*offset,.5*offset,0,c_white,1);
    draw_sprite_ext(spr_xbox_Y,0,(ctl_x)*offset,(clt_y+30)*offset,.5*offset,.5*offset,0,c_white,1);
    
    if (global.platform==1) draw_sprite_ext(spr_xbox_X,0,(ctl_x+110)*offset,(clt_y+30)*offset,.5*offset,.5*offset,0,c_white,1);
    
    draw_text_transformed((ctl_x)*offset,clt_y*offset,"    - Select",.55*offset,.55*offset,0);
    draw_text_transformed((ctl_x+110)*offset,clt_y*offset,"    - Back",.55*offset,.55*offset,0);
    draw_text_transformed((ctl_x)*offset,(clt_y+30)*offset,"    - Delete",.55*offset,.55*offset,0);
    
    if (global.platform==1) draw_text_transformed((ctl_x+110)*offset,(clt_y+30)*offset,"    - Change User",.55*offset,.55*offset,0);
    
}

//LOADING SCREEN ---------------------------------------------------------------------------

    if (show_load)
    {
        
        if instance_exists(obj_Menu_Background){with (obj_Menu_Background) {image_alpha=0; visible=false; }}
        if instance_exists(obj_Cover_BG){with (obj_Cover_BG) {image_alpha=0; visible=false; }}
        if instance_exists(obj_Daydreamer_LOGO){with (obj_Daydreamer_LOGO) {image_alpha=0; visible=false; }}
        if instance_exists(obj_Cover_Collector){with (obj_Cover_Collector) {image_alpha=0; visible=false; }}
        if instance_exists(obj_Cover_Olivia){with (obj_Cover_Olivia) {image_alpha=0; visible=false; }}
        if instance_exists(obj_CloudsA){with (obj_CloudsA) {image_alpha=0; visible=false; }}
        if instance_exists(obj_Flare_Glow_white){with (obj_Flare_Glow_white) {image_alpha=0; visible=false; }}
        if instance_exists(obj_Cover_top){with (obj_Cover_top) {image_alpha=0; visible=false; }}
        if instance_exists(obj_volume_Flare_A){with (obj_volume_Flare_A) {image_alpha=0; visible=false; }}        
          
        if instance_exists(obj_RolandStudios) obj_RolandStudios.visible=false;
        if instance_exists(obj_volume_Flare_A) obj_volume_Flare_A.visible=false;
      
        
        draw_set_alpha(1);
        gamepad_set_vibration(global.playing_index, 0, 0); 
        draw_rectangle_colour(0,0,1280*offset,720*offset,c_black,c_black,c_black,c_black,false);
        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_font(fnt_Astron);
        draw_text_transformed(1180*offset,680*offset,"- Loading",.667*offset,.667*offset,0);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
