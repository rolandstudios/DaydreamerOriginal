<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_depth=10;
horizon=room_height-500;
scale=1;
layers=10; 
scroll_max=layers+1;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scroll_max=layers;

for (Current_Layer=0;Current_Layer&lt;layers;Current_Layer+=1)
{

//TREE TRUNKS
for (x=-100; x&lt;room_width+100; x+=(2500)*random_range(.9,1.1)*scale) 
    {
        switch(irandom_range(1,3))
        {
        case 1: var tree=instance_create(x,horizon-10*Current_Layer,obj_GreenForrest_Tree_A); break;
        case 2: var tree=instance_create(x,horizon-10*Current_Layer,obj_GreenForrest_Tree_B); break;
        case 3: var tree=instance_create(x,horizon-10*Current_Layer,obj_GreenForrest_Tree_C); break;
        }
        
    with (tree)
        {
        depth=other.start_depth;
        image_xscale=other.scale*random_range(1,1.2);
        
        if (irandom_range(1,2)==1) image_xscale*=-1;
        
        image_yscale=other.scale*random_range(1.7,2);
        part_x=other.scroll_max-(other.Current_Layer*.75);
        part_y=other.scroll_max-(other.Current_Layer*.75);
        color_overide=true;
        var lum=85+20*other.Current_Layer;
        if (lum&gt;255) lum=255;
        color=make_color_hsv(0,0,lum);
        image_blend=color;
        }
    }
     
//GROUND ISLANDS 

for (x=-100; x&lt;room_width+100; x+=(2750)*random_range(.9,1.1)*scale) 
    {
        if (Current_Layer&gt;=1)&amp;&amp;(irandom_range(1,2)==1)//BEHIND FIRST LAYER OF TREES
        { 
        
        switch(irandom_range(1,4)) //was 1,2
        {
        case 1: var island=instance_create(x,horizon-10*Current_Layer+300*scale,obj_GreenForrest_BG_A); break;
        case 2: var island=instance_create(x,horizon-10*Current_Layer+300*scale,obj_GreenForrest_BG_B); break;
        case 3: var island=instance_create(x,horizon-10*Current_Layer+300*scale,obj_GreenForrest_BG_C); break;
        case 4: var island=instance_create(x,horizon-10*Current_Layer+300*scale,obj_GreenForrest_BG_D); break;
        }
        
        with (island)
        {
        depth=other.start_depth;
        image_xscale=other.scale*1.7;
        image_yscale=other.scale*1.7;
        
        if (irandom_range(1,2)==1) image_xscale*=-1;
        
        part_x=other.scroll_max-(other.Current_Layer*.75);
        part_y=other.scroll_max-(other.Current_Layer*.75);
        color=make_color_hsv(0,0,55+20*other.Current_Layer);
        image_blend=color;
        }
          
        } 
    }
    
   
//GROUND HEDGE    
for (x=-100; x&lt;room_width+100; x+=(900)*random_range(.9,1.1)*scale) 
    {
         
     with instance_create(x,horizon-10*Current_Layer+650*scale,obj_GreenForrest_Hedge_small)
        {
        depth=other.start_depth;
        image_xscale=other.scale*random_range(.9,1.1);
        image_yscale=other.scale*random_range(.9,1.1);
        
        if (irandom_range(1,2)==1) image_xscale*=-1;
        if (irandom_range(1,2)==1) image_yscale*=-1;
        
        part_x=other.scroll_max-(other.Current_Layer*.75);
        part_y=other.scroll_max-(other.Current_Layer*.75);
        
        color_overide=true;
        color=make_color_hsv(0,0,70+15*other.Current_Layer);
        image_blend=color;
        }
    
    }
     

//HEDGE TOP
for (x=-100; x&lt;room_width+100; x+=(2500)*random_range(.8,1.2)*scale) 
    { 
      
    with instance_create(x,horizon-10*Current_Layer-(irandom_range(1200,1300))*scale,obj_GreenForrest_Hedge_Back)
        {
        depth=other.start_depth;
        image_xscale=other.scale*random_range(1.5,2);
        image_yscale=other.scale*random_range(1.5,2);
        
        if (irandom_range(1,2)==1) image_xscale*=-1;
        if (irandom_range(1,2)==1) image_yscale*=-1;
        
        part_x=other.scroll_max-(other.Current_Layer*.75);
        part_y=other.scroll_max-(other.Current_Layer*.75);
        
        color_overide=true;
        color=make_color_hsv(0,0,50+20*other.Current_Layer);
        image_blend=color;
        }
    }

   
scale*=.75; 
start_depth+=1; 

}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
