<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>-1</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type==os_xboxone) 
{
    showing_account_picker = false;    
    global.title_id = 374524187;
    global.service_config = "ca710100-8595-4fda-99a1-05de1652c91b";
    global.platform=1;   
    global.xb_user = xboxone_get_activating_user(); 
    draw=true;
   /*
    global.xb_user = pointer_null; 
    global.xb_user_name = xboxone_gamedisplayname_for_user(global.xb_user); 
    global.uid = xboxone_user_id_for_user(global.xb_user);  
    global.session_id = xboxone_generate_player_session_id();
 
    if (xboxone_user_is_signed_in(global.xb_user))
    {
        global.signed_in=true;
        xboxone_check_privilege(global.xb_user, xboxone_privilege_multiplayer_sessions, true);
    } 
    else
    {
        global.signed_in=false;
    }
    xboxone_stats_setup(global.xb_user,global.service_config,global.title_id);
 */   
}
else
{
    room_goto(rm_Intialize_Game);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type==os_xboxone)
{
if (showing_account_picker) exit;

for (var i = 0; i &lt; gamepad_get_device_count(); i++)
{
    if (gamepad_is_connected(i))
    {
        if (gamepad_button_check_released(i, gp_face1)) // gp_face1 is A
        {
        scr_confirm();
        draw=false;
        
            var user = xboxone_get_user(i);
            
            if (user == pointer_null) || (user != global.xb_user)  //NO USER
            {
                async_event_id = xboxone_show_account_picker(i, 0);
                showing_account_picker = true;
            }
            else
            {
                global.playing_index = i;
                global.xb_user = user;
                global.xb_user_name = xboxone_gamedisplayname_for_user(global.xb_user); 
                global.uid = xboxone_user_id_for_user(global.xb_user);  
                global.session_id = xboxone_generate_player_session_id();
                            
                if (xboxone_user_is_signed_in(global.xb_user))
                {
                    global.signed_in=true;
                    xboxone_check_privilege(global.xb_user, xboxone_privilege_multiplayer_sessions, true);
                } 
                else
                {
                    global.signed_in=false;
                }
                xboxone_stats_setup(global.xb_user,global.service_config,global.title_id);                
                room_goto(rm_Intialize_Game);  
                //room_goto(rm_XboxAccount);                                          
            }
        }
    }
}
}
else
{
    room_goto(rm_Intialize_Game);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type==os_xboxone)
{
    if (async_load[? "id"] == async_event_id)
    {
        showing_account_picker = false;
        
        var user = async_load[? "user"];
        
        if (user != pointer_null)
        {
            global.playing_index = async_load[? "pad_index"];
            global.active_user = async_load[? "user"];
            
                global.xb_user_name = xboxone_gamedisplayname_for_user(global.xb_user); 
                global.uid = xboxone_user_id_for_user(global.xb_user);  
                global.session_id = xboxone_generate_player_session_id();
                            
                if (xboxone_user_is_signed_in(global.xb_user))
                {
                    global.signed_in=true;
                    xboxone_check_privilege(global.xb_user, xboxone_privilege_multiplayer_sessions, true);
                } 
                else
                {
                    global.signed_in=false;
                }
                xboxone_stats_setup(global.xb_user,global.service_config,global.title_id);
                
            room_goto(rm_Intialize_Game);
            //room_goto(rm_XboxAccount);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{offset=1.5;}
else
{offset=1;}

if (os_type==os_xboxone) &amp;&amp; (draw)
{
    draw_set_color(c_white);
    draw_line(0,(360-100)*offset,1920,(360-100)*offset);
    draw_line(0,(360+100)*offset,1920,(360+100)*offset);
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    
    if (global.xb_user==pointer_null)
    {
    draw_set_font(fnt_Score)
    draw_set_color(c_white);
    draw_text_transformed(640*offset, (360 - 16)*offset, "YOU MUST BE SIGNED IN TO PLAY",offset,offset,0);
    draw_set_font(fnt_LowGun)
    draw_text_transformed(640*offset, (360 + 16)*offset, "Press     to Select User",offset,offset,0);
    
    draw_set_color(c_green);
    draw_circle(588*offset, (365+16)*offset,11*offset,true);
    draw_circle(588*offset, (365+16)*offset,11.5*offset,true);
    draw_circle(588*offset, (365+16)*offset,12*offset,true);
    draw_circle(588*offset, (365+16)*offset,12.5*offset,true);
    draw_text_transformed(588*offset, (360+16)*offset, "A",offset,offset,0);
    }
    else
    {
    draw_set_font(fnt_LowGun)
    draw_set_color(c_white);
    draw_set_halign(fa_center)
    draw_text_transformed(640*offset, (360)*offset, "Press     to Start Game",offset,offset,0);
    
    draw_set_color(c_green);
    draw_circle(588*offset, (365)*offset,11*offset,true);
    draw_circle(588*offset, (365)*offset,11.5*offset,true);
    draw_circle(588*offset, (365)*offset,12*offset,true);
    draw_circle(588*offset, (365)*offset,12.5*offset,true);
    draw_text_transformed(588*offset, (360)*offset, "A",offset,offset,0);
    
    }
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_font(fnt_LowGun);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_text(640,360,"Press 'A' to Start");
draw_line(0,260,1280,260);
draw_line(0,460,1280,460);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
