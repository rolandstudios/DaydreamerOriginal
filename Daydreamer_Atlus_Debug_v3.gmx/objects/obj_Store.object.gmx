<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
rest=true;
grow=0;
grow_y=0;

orig_x=(x-view_xview)*1.5;
orig_y=(y-view_yview)*1.5;

orig_x = 1110*1.5;
orig_y = 75*1.5;

orig_x = 1080;
orig_y = 150;

x=orig_x;
y=orig_y;

arrow_y=y;

price=0;
sellprice=0;

sell_x=0;
sell_y=0;

buy_y=y;


slot_x=0;
slot_y=0;

columns=global.columns;
rows=global.rows;
parting=300;
sold=false;
sell=false;

grow_x=0;

i=0;
inv_space=45;
space = 50; 
item=1;
price=50;
//stored=false;
image_speed=0;
//par_HERO.visible=false;
global.CutScene=true;

audio_play_sound(snd_PowerupB,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (i&gt;0) //FINISH LAST PAYMENT
    {
        par_HERO.money=par_HERO.money-i;
        i=0;
    }

    
for (a=0;a&lt;=global.rows;a+=1)
{
    
    for (b=0;b&lt;=global.columns;b+=1)
    {
        if (global.Inventory[a,b]==10)
            {        
            par_HERO.recharge=100;       
            }
    }
}

for (a=0;a&lt;=global.rows;a+=1)
{    
    for (b=0;b&lt;=global.columns;b+=1)
    {
        if (global.Inventory[a,b]==11)
            {        
            par_HERO.recharge=50;       
            }
    }
}

//LUCK
var luck=0;
for (a=0;a&lt;=global.rows;a+=1)
{    
    for (b=0;b&lt;=global.columns;b+=1)
    {
        if (global.Inventory[a,b]==14)
            {        
            luck+=1;       
            }
    }
}
par_HERO.luck=luck;

global.CutScene=false;
if instance_exists(obj_BatConsumer)
{
 obj_BatConsumer.dont_move=false;
}

scr_savegame();
//par_HERO.visible=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> audio_sound_pitch(snd_payup,global.game_speed);
 audio_play_sound(snd_payup,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.CutScene=true;

if (grow_x&gt;=600)
{
Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);

Key_Melee = gamepad_button_check_pressed(global.playing_index, gp_face3);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);
Key_Select = gamepad_button_check_pressed(global.playing_index,gp_select);

if keyboard_check_pressed(global.kb_Left) Key_Left = true;
if keyboard_check_pressed(global.kb_Right) Key_Right = true; 
if keyboard_check_pressed(global.kb_Up) Key_Up = true;
if keyboard_check_pressed(global.kb_Down) Key_Down = true;

if keyboard_check_pressed(global.kb_Jump) Key_Jump = true;
if keyboard_check_pressed(global.kb_Melee) Key_Melee = true;
if keyboard_check_pressed(global.kb_Fire) Key_Fire = true;
if keyboard_check_pressed(global.kb_Select) Key_Select = true;

if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
    {
    Key_Up = 1;
    alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
    {
    Key_Down = 1; 
    alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) 
    {
    Key_Left = 1; 
    alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) 
    {
    Key_Right = 1; 
    alarm[1]=10; 
    rest=false;
    } 
}

    if (master.paused)
    {
    Key_Left = false;
    Key_Right = false;
    Key_Up = false;
    Key_Down = false;
    
    Key_Melee = false;
    Key_Jump = false;
    Key_Fire = false;
    Key_Select = false;
    }//end master pause

}
else
{
Key_Left = false;
Key_Right = false;
Key_Up = false;
Key_Down = false;

Key_Melee = false;
Key_Jump = false;
Key_Fire = false;
Key_Select = false;
}




if (sell==false) //BUY
{ 
if(Key_Up) 
    {
    if(y&gt;orig_y)
        {
        y=y-space;
        }
    else
        {
        y=orig_y+(9*space);
        }
   //audio_play_sound(snd_selectB,10,false);
   audio_play_sound(snd_selectA,10,false);
    }

if(Key_Down) 
    {
    if(y&lt;orig_y+(9*space)) 
        {
        y=y+space;
        }
    else
        {
        y=orig_y;
        }
    //audio_play_sound(snd_selectB,10,false);
    audio_play_sound(snd_selectA,10,false);
    }
    


if (Key_Jump) //Buy Select
{
 
 if (i&gt;0) //FINISH LAST PAYMENT
    {
        par_HERO.money=par_HERO.money-i;
        i=0;
    }    

    if (par_HERO.money&gt;=price+i)
        {
        
        for (a=0;a&lt;=rows;a+=1)
            {
            for (b=0;b&lt;=columns;b+=1)
            {
            if(global.Inventory[a,b]==0)
                {
                i=i+price;
                audio_play_sound(snd_gamestart,10,false);
                global.Inventory[a,b]=item; //ADD to Inventory
                sold=true;
                }
            if(sold) break;
            }
            if(sold) break;        
            }
       
        }else{audio_play_sound(snd_die,10,false);}
 sold=false;
}
} //END BUY


resale=.5;

if (sell==true) //SELL
{
if(Key_Left) 
    {
    if(x&gt;orig_x) 
        {
        x=x-inv_space;
        slot_x = slot_x-1;
        }
    else
        {
        x=orig_x+columns*inv_space;
        slot_x = columns;
        }
    audio_play_sound(snd_selectB,10,false);
    }
else if(Key_Right) 
    {
    if(x&lt;orig_x+columns*inv_space) 
        {
        x=x+inv_space;
        slot_x = slot_x+1;
        }
    else
        {
        x=orig_x;
        slot_x = 0;
        }
    audio_play_sound(snd_selectB,10,false);
    }
else if(Key_Up) 
    {
    if(y&gt;orig_y)
        {
        y=y-inv_space;
        slot_y=slot_y-1;
        }
    else
        {
        y=orig_y+rows*inv_space;
        slot_y=rows;
        }
   audio_play_sound(snd_selectB,10,false);
    }
else if(Key_Down) 
    {
    if(y&lt;orig_y+rows*inv_space) 
        {
        y=y+inv_space;
        slot_y=slot_y+1;
        }
    else
        {
        y=orig_y;
        slot_y=0;
        }
    audio_play_sound(snd_selectB,10,false);
    }
    //Set Sell Prices
    switch (global.Inventory[slot_y,slot_x])
        {    
        
        case 0:
        sellprice=0;
        break;
        
        case 1:
        sellprice=floor(50*resale); //RED potion small
        break;
        
        case 2:
        sellprice=floor(100*resale); //RED potion big
        break;
        
        case 3:
        sellprice=floor(25*resale); //Yellow potion small
        break;
        
        case 4:
        sellprice=floor(40*resale); //Yellow potion big
        break;
        
        case 5:
        sellprice=floor(200*resale); //regen
        break;
        
        case 6:
        sellprice=floor(500*resale); //shield boost
        break;
        
        case 7:
        sellprice=floor(500*resale); //warp boost
        break;
        
        case 8:
        sellprice=floor(500*resale); //weapon boost
        break;
        
        case 9:
        sellprice=floor(500*resale); //shield boost
        break;
        
        case 10:
        sellprice=floor(1000*resale); //energy regain boost
        break;
        
        case 11:
        sellprice=floor(2000*resale); //energy regain mega boost
        break;
        
        case 12:
        sellprice=floor(200*resale); //resurection
        break;
        
        case 13:
        sellprice=floor(500*resale); //time boost
        break;
        
        case 14:
        sellprice=floor(25*resale);
        break;
        
        }

        
        if (Key_Jump) //CONFIRM SELL
        {
            if (global.Inventory[slot_y,slot_x]!=0)
                {
                global.Inventory[slot_y,slot_x]=0;
                audio_play_sound(snd_gamestart,10,false);
                par_HERO.money=par_HERO.money+sellprice;
                }
        }
    
    
    
} //END SELL



if(Key_Fire) || (Key_Select) //Leave
{
     /*
      if (i&gt;0) //FINISH LAST PAYMENT
        {
            par_HERO.money=par_HERO.money-i;
            i=0;
        }  
    */
     //par_HERO.money=par_HERO.money-i;
     audio_play_sound(snd_capped_out,10,false);
     instance_destroy();
}


if (Key_Melee) //Sell/Buy
{
if (!sell)  {
            audio_play_sound(snd_PowerupB,10,false);
            sell=true;  
            buy_y=y; 
            
            //x=orig_x+(slot_x*space); 
            //y=orig_y+(slot_y*space);
                        
            x=orig_x;
            slot_x = 0;
            y=orig_y;
            slot_y=0;
            }            
                else
            {
            sell=false; y=buy_y; 
            }
            
audio_play_sound(snd_selectA,10,false)
}


if (i&gt;0) //PAY UP
    { 
        
        par_HERO.money=par_HERO.money-1;
        i=i-1;
        if (alarm[0]==-1) alarm[0]=2;
                        
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
offset=1.5;
else
offset=1;

parting = 300;

inv_space=45;
space = 50; 

recharge="[1x]";

switch(par_HERO.recharge=100)
{
case 150: recharge="[1x]"; break;
case 100: recharge="[2x]"; break;
case 50:  recharge="[3x]"; break;       
}

icon_size=.9;

draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_color(c_black);

if (grow_x&lt;=0) 
    {
    if !audio_is_playing(snd_Game_Whoosh) audio_play_sound(snd_Game_Whoosh,14,false);
    }

if (grow_x&lt;600) grow_x+=100;
if (grow_x&gt;600) grow_x=600;


draw_set_alpha(.4);
draw_roundrect((1280-grow_x)*offset,(0)*offset,(1280)*offset,(720)*offset,false); //RIGHT SCREEN CURTAIN

if (grow_x&gt;=600)
{

if (grow_y&lt;=0) 
    {
    if !audio_is_playing(snd_HitMetal) audio_play_sound(snd_HitMetal,12,false);
    }

if (grow_y&lt;275) grow_y+=50;
if (grow_y&gt;275) grow_y=275;


    
draw_set_alpha(.1);
draw_set_color(c_white);
draw_rectangle((980-230)*offset,(375-grow_y)*offset, (980+270)*offset,(375+grow_y)*offset,false); //DRAW MAIN FRAME
draw_rectangle((980-230)*offset,(375-grow_y)*offset, (980+270)*offset,(375+grow_y)*offset,true); //DRAW MAIN FRAME


draw_set_alpha(1);
draw_sprite_ext(spr_Menu_Trim_Top,0,(995)*offset,(375-grow_y)*offset,(1.1)*offset,(1.1)*offset,0,c_white,1); //TOP FRAME
draw_sprite_ext(spr_Menu_Trim_Bottom,0,(995)*offset,(375+grow_y)*offset,(1.1)*offset,(1.1)*offset,0,c_white,1); //BOTTOM FRAME



draw_set_font(fnt_Score);
draw_set_color(c_black) draw_set_alpha(.5);
draw_text_transformed((740-3)*offset,(60+3)*offset,"Store",(.85)*offset,(.85)*offset,0); 
draw_set_color(c_yellow) draw_set_alpha(1);
draw_text_transformed((740)*offset,(60)*offset,"Store",(.85)*offset,(.85)*offset,0); 

draw_set_color(c_white);

draw_set_font(fnt_Arial);
if(!sell)
{
draw_text_transformed((orig_x-16)*offset,orig_y+(8*space)*offset,"Info:",1.5*offset,1.5*offset,image_angle );
draw_set_alpha(.5);
draw_line((orig_x-16)*offset,orig_y+(8.32*space)*offset,(orig_x+125)*offset,orig_y+(8.32*space)*offset);
}
draw_set_alpha(1);

draw_set_font(fnt_Arial_Big);
if (y==orig_y+(0*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_1_RedPotion_small,1,(orig_x-parting+10)*offset,(orig_y+(0*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1);
else
draw_sprite_ext(spr_icon_1_RedPotion_small,1,(orig_x-parting+5)*offset,(orig_y+(0*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(0*space))*offset,"- Red Potion (small)",1.25*offset,1.25*offset,0); 
if (y==orig_y+(0*space)) 
{
price=50;
item=1;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Returns 40% Health",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big); draw_set_valign(fa_center);
if (y==orig_y+(1*space))  &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_2_RedPotion,2,(orig_x-parting+10)*offset,(orig_y+(1*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1);
else
draw_sprite_ext(spr_icon_2_RedPotion,2,(orig_x-parting+5)*offset,(orig_y+(1*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1);
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(1*space))*offset,"- Red Potion (large)",1.25*offset,1.25*offset,0);
if (y==orig_y+(1*space)) 
{
price=100;
item=2;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Returns 100% Health",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big);draw_set_valign(fa_center);
if (y==orig_y+(2*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_3_YellowPotion_small,3,(orig_x-parting+10)*offset,(orig_y+(2*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
else
draw_sprite_ext(spr_icon_3_YellowPotion_small,3,(orig_x-parting+5)*offset,(orig_y+(2*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(2*space))*offset,"- Yellow Potion (small)",1.25*offset,1.25*offset,0);
if (y==orig_y+(2*space)) 
{
price=25; 
item=3;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Returns 50% Energy",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big);draw_set_valign(fa_center);
if (y==orig_y+(3*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_4_YellowPotion,4,(orig_x-parting+10)*offset,(orig_y+(3*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
else
draw_sprite_ext(spr_icon_4_YellowPotion,4,(orig_x-parting+5)*offset,(orig_y+(3*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(3*space))*offset,"- Yellow Potion (large)",1.25*offset,1.25*offset,0);;
if (y==orig_y+(3*space)) 
{
price=40; 
item=4;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Returns 100% Energy",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big);draw_set_valign(fa_center);
if (y==orig_y+(4*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_5_Regen,5,(orig_x-parting+10)*offset,(orig_y+(4*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
else
draw_sprite_ext(spr_icon_5_Regen,5,(orig_x-parting+5)*offset,(orig_y+(4*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(4*space))*offset,"- Regeneration",1.25*offset,1.25*offset,0);
if (y==orig_y+(4*space)) 
{
price=200; 
item=5;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Regenerates Health",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big);draw_set_valign(fa_center);
if (y==orig_y+(5*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_9_Shield_Boost,6,(orig_x-parting+10)*offset,(orig_y+(5*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1);
else
draw_sprite_ext(spr_icon_9_Shield_Boost,6,(orig_x-parting+5)*offset,(orig_y+(5*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(5*space))*offset,"- Shield Boost",1.25*offset,1.25*offset,0);
if (y==orig_y+(5*space))
{
price=500; 
item=6;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Take half Damage",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big);draw_set_valign(fa_center);
if (y==orig_y+(6*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_7_Warp_Boost,6,(orig_x-parting+10)*offset,(orig_y+(6*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
else
draw_sprite_ext(spr_icon_7_Warp_Boost,6,(orig_x-parting+5)*offset,(orig_y+(6*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(6*space))*offset,"- Warp Boost",1.25*offset,1.25*offset,0);
if (y==orig_y+(6*space)) 
{
price=500; 
item=7;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Infinite Warping",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big);draw_set_valign(fa_center);
if (y==orig_y+(7*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_8_Weapon_Boost,6,(orig_x-parting+10)*offset,(orig_y+(7*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1);
else
draw_sprite_ext(spr_icon_8_Weapon_Boost,6,(orig_x-parting+5)*offset,(orig_y+(7*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(7*space))*offset,"- Damage Boost",1.25*offset,1.25*offset,0);
if (y==orig_y+(7*space)) 
{
price=500; 
item=8;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Deals 50% more #Damage",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big);draw_set_valign(fa_center);
if (y==orig_y+(8*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_10_Energy_Boost,6,(orig_x-parting+10)*offset,(orig_y+(8*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1);
else
draw_sprite_ext(spr_icon_10_Energy_Boost,6,(orig_x-parting+5)*offset,(orig_y+(8*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(8*space))*offset,"- Energy Boost",1.25*offset,1.25*offset,0);;
if (y==orig_y+(8*space)) 
{
price=1000; 
item=10;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Regain Energy #2x faster when #held in inventory.#[Effect does not stack]",1.25*offset,1.25*offset,image_angle );
}

draw_set_font(fnt_Arial_Big);draw_set_valign(fa_center);
if (y==orig_y+(9*space)) &amp;&amp; (!sell)
draw_sprite_ext(spr_icon_11_Energy_Mega_Boost,6,(orig_x-parting+10)*offset,(orig_y+(9*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
else
draw_sprite_ext(spr_icon_11_Energy_Mega_Boost,6,(orig_x-parting+5)*offset,(orig_y+(9*space))*offset,icon_size*offset,icon_size*offset,0,c_white,1); 
draw_text_transformed((orig_x-parting+space)*offset,(orig_y+(9*space))*offset,"- Energy Mega Boost",1.25*offset,1.25*offset,0);
if (y==orig_y+(9*space)) 
{
price=2000; 
item=11;
draw_set_font(fnt_Arial);draw_set_valign(fa_top);
if(!sell)
draw_text_transformed((orig_x-16)*offset,orig_y+(8.5*space)*offset,"Regain Energy #3x faster when #held in inventory.#[Effect does not stack]",1.25*offset,1.25*offset,image_angle );
}

draw_set_valign(fa_center);
//Draw Cursor
if(!sell)
{
grow+=.25;

var n
n=(y+arrow_y)*.5;
n=(n+arrow_y)*.5;
arrow_y=n;

draw_sprite_ext(spr_arrow,6,(orig_x-parting-space-4+sin(grow-2)*8)*offset,arrow_y*offset,(1.1+sin(grow-2)*.5)*.25*offset,(1.3+sin(grow)*.2)*.25*offset,0,c_white,.25);
draw_sprite_ext(spr_arrow,6,(orig_x-parting-space+1+sin(grow-1)*8)*offset,arrow_y*offset,(1.1+sin(grow-1)*.5)*.5*offset,(1.3+sin(grow)*.2)*.5*offset,0,c_white,.5);
draw_sprite_ext(spr_arrow,6,(orig_x-parting-space+7+sin(grow)*8)*offset,arrow_y*offset,(1.1+sin(grow)*.5)*offset,(1.3+sin(grow)*.2)*offset,0,c_white,1);

}





draw_set_font(fnt_Arial_Big);

if(!sell)  draw_text_transformed((orig_x-16)*offset,(orig_y-space+45)*offset,"Price: " + string(price),offset,offset,0);
if(!sell)  draw_text_transformed((orig_x-16)*offset,(orig_y-space+65)*offset,"PSY Matter: " + string(par_HERO.money),offset,offset,0);

if(sell)  draw_text_transformed((orig_x-16)*offset,(orig_y-space+45)*offset,"Sell Price: " + string(sellprice),offset,offset,0);
if(sell)  draw_text_transformed((orig_x-16)*offset,(orig_y-space+65)*offset,"PSY Matter: " + string(par_HERO.money),offset,offset,0);

//X-move A-Select
if(!sell)
{

draw_sprite_ext(spr_xbox_A,0,(orig_x-10)*offset,(orig_y+(2.5+rows)*space)*offset,.5*offset,.5*offset,0,c_white,1);
draw_text_transformed((orig_x+6)*offset,(orig_y+(2.5+rows)*space)*offset,"- Buy",offset,offset,0);

draw_sprite_ext(spr_xbox_X,0,(orig_x-10)*offset,(orig_y+(3.25+rows)*space)*offset,.5*offset,.5*offset,0,c_white,1);
draw_text_transformed((orig_x+6)*offset,(orig_y+(3.25+rows)*space)*offset,"- Sell",offset,offset,0);

draw_sprite_ext(spr_xbox_B,0,(orig_x-10)*offset,(orig_y+(4+rows)*space)*offset,.5*offset,.5*offset,0,c_white,1);
draw_text_transformed((orig_x+6)*offset,(orig_y+(4+rows)*space)*offset,"- Cancel",offset,offset,0);

}

if(sell)
{

draw_sprite_ext(spr_xbox_A,0,(orig_x-10)*offset,(orig_y+(2.5+rows)*space)*offset,.5*offset,.5*offset,0,c_white,1);
draw_text_transformed((orig_x+6)*offset,(orig_y+(2.5+rows)*space)*offset,"- Sell",offset,offset,0);

draw_sprite_ext(spr_xbox_X,0,(orig_x-10)*offset,(orig_y+(3.25+rows)*space)*offset,.5*offset,.5*offset,0,c_white,1);
draw_text_transformed((orig_x+6)*offset,(orig_y+(3.25+rows)*space)*offset,"- Buy",offset,offset,0);


draw_sprite_ext(spr_xbox_B,0,(orig_x-10)*offset,(orig_y+(4+rows)*space)*offset,.5*offset,.5*offset,0,c_white,1);
draw_text_transformed((orig_x+6)*offset,(orig_y+(4+rows)*space)*offset,"- Cancel",offset,offset,0);

}


//draw_set_font(fnt_Arial);draw_set_valign(fa_top);

//DRAW Inventory---------------
var a
var b

 //CHANGE INVENTORY SPACE 

for (a=0;a&lt;=rows;a+=1)
{
    
    for (b=0;b&lt;=columns;b+=1)
    {
     draw_sprite_ext(spr_Inventory,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,offset,offset,0,c_white,1);    
      
      switch(global.Inventory[a,b])
        {    
        case 0:
        break;
        
        case 1:
        draw_sprite_ext(spr_icon_1_RedPotion_small,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);        
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Red Potion (small)",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 2:
        draw_sprite_ext(spr_icon_2_RedPotion,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Red Potion (large)",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 3:
        draw_sprite_ext(spr_icon_3_YellowPotion_small,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Yellow Potion (small)",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 4:
        draw_sprite_ext(spr_icon_4_YellowPotion,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Yellow Potion (large)",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 5:
        draw_sprite_ext(spr_icon_5_Regen,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Regeneration",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 6:
        draw_sprite_ext(spr_icon_6_Shield,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Shield Boost",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 7:
        draw_sprite_ext(spr_icon_7_Warp_Boost,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Warp Boost",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 8:
        draw_sprite_ext(spr_icon_8_Weapon_Boost,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Damage Boost",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 9:
        draw_sprite_ext(spr_icon_9_Shield_Boost,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Shield Boost",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 10:
        draw_sprite_ext(spr_icon_10_Energy_Boost,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Energy Boost",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 11:
        draw_sprite_ext(spr_icon_11_Energy_Mega_Boost,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Energy Mega Boost",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 12:
        draw_sprite_ext(spr_icon_12_Rebirth,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Resurrection",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 13:
        draw_sprite_ext(spr_icon_13_Clock,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,icon_size*offset,icon_size*offset,0,c_white,1);
        //draw_text_transformed((orig_x-16)*offset,orig_y+(1*space)*offset,"Time Boost",1.25*offset,1.25*offset,image_angle);
        break;
        
        case 14:
        //draw_sprite_ext(spr_icon_14_Gummy,0,(orig_x+(b*inv_space))*offset,(orig_y+(a*inv_space)+70)*offset,offset,offset,0,c_white,1);
        break;
        
               
        }
    }
}

if(sell)
draw_sprite_ext(spr_Inventory,2,x*offset,(y+70)*offset,offset,offset,0,c_white,1);

draw_set_font(fnt_Arial_Big);

}//

space = 50;






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_center);



draw_roundrect(orig_x-parting-space-20,orig_y-space-30, orig_x+(columns*space)+40,orig_y+(6*space),true);


draw_set_font(fnt_Arcade);
draw_text(orig_x-parting,orig_y-space,"Pear Store" ); 


draw_set_font(fnt_BytePolice);

draw_sprite(spr_icon_1_RedPotion_small,1,orig_x-parting,orig_y+(0*space));
draw_text(orig_x-parting+space,orig_y+(0*space),"- Red Potion (small)" ); 
if (y==orig_y+(0*space)) {price=50;item=1;}

draw_sprite(spr_icon_2_RedPotion,2,orig_x-parting,orig_y+(1*space));
draw_text(orig_x-parting+space,orig_y+(1*space),"- Red Potion (large)" );
if (y==orig_y+(1*space)) {price=100;item=2;}

draw_sprite(spr_icon_3_YellowPotion_small,3,orig_x-parting,orig_y+(2*space)); 
draw_text(orig_x-parting+space,orig_y+(2*space),"- Yellow Potion (small)" );
if (y==orig_y+(2*space)) {price=25; item=3;}

draw_sprite(spr_icon_4_YellowPotion,4,orig_x-parting,orig_y+(3*space));
draw_text(orig_x-parting+space,orig_y+(3*space),"- Yellow Potion (large)" );
if (y==orig_y+(3*space)) {price=40; item=4;}

draw_sprite(spr_icon_5_Regen,5,orig_x-parting,orig_y+(4*space)); 
draw_text(orig_x-parting+space,orig_y+(4*space),"- Regeneration" );
if (y==orig_y+(4*space)) {price=200; item=5;}

draw_sprite(spr_icon_6_Shield,6,orig_x-parting,orig_y+(5*space));
draw_text(orig_x-parting+space,orig_y+(5*space),"- Shield" );
if (y==orig_y+(5*space)) {price=500; item=6;}



//Draw Cursor
if(!sell)
draw_sprite(spr_arrow,6,orig_x-parting-space,y);
if(sell)
draw_sprite(spr_Inventory,2,x,y);


draw_set_font(fnt_Arial);

if(!sell) draw_text(orig_x-16,orig_y-space,"price: " + string(price));
if(sell)  draw_text(orig_x-16,orig_y-space,"sell price: " + string(sellprice));


draw_text(orig_x+space+15,orig_y+(6*space+10),"MForce: " + string(obj_HERO.money));

//X-move A-Select
if(!sell)
{
draw_sprite(spr_xbox_X,0,orig_x-10,orig_y+(1+rows)*space);
draw_text(orig_x+6,orig_y+(1+rows)*space,"- Sell" );

draw_sprite(spr_xbox_A,0,orig_x+64,orig_y+(1+rows)*space);
draw_text(orig_x+80,orig_y+(1+rows)*space,"- Buy" );

draw_sprite(spr_xbox_B,0,orig_x-10,orig_y+(2+rows)*space);
draw_text(orig_x+6,orig_y+(2+rows)*space,"- Cancel" );
}

if(sell)
{
draw_sprite(spr_xbox_X,0,orig_x-10,orig_y+(1+rows)*space);
draw_text(orig_x+6,orig_y+(1+rows)*space,"- Buy" );

draw_sprite(spr_xbox_A,0,orig_x+64,orig_y+(1+rows)*space);
draw_text(orig_x+80,orig_y+(1+rows)*space,"- Sell" );

draw_sprite(spr_xbox_B,0,orig_x-10,orig_y+(2+rows)*space);
draw_text(orig_x+6,orig_y+(2+rows)*space,"- Cancel" );
}



//DRAW Inventory---------------
var a
var b

for (a=0;a&lt;=rows;a+=1)
{
    
    for (b=0;b&lt;=columns;b+=1)
    {
     draw_sprite(spr_Inventory,0,orig_x+(b*space),orig_y+(a*space));
    
      switch(global.Inventory[a,b])
        {    
        case 0:
        break;
        
        case 1:
        draw_sprite(spr_icon_1_RedPotion_small,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 2:
        draw_sprite(spr_icon_2_RedPotion,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 3:
        draw_sprite(spr_icon_3_YellowPotion_small,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 4:
        draw_sprite(spr_icon_4_YellowPotion,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 5:
        draw_sprite(spr_icon_5_Regen,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 6:
        draw_sprite(spr_icon_6_Shield,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 7:
        draw_sprite(spr_icon_7_Warp_Boost,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 8:
        draw_sprite(spr_icon_8_Weapon_Boost,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 9:
        draw_sprite(spr_icon_9_Sheied_Boost,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 10:
        draw_sprite(spr_icon_10_vamp_Health,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 11:
        draw_sprite(spr_icon_11_vamp_Energy,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 12:
        draw_sprite(spr_icon_12_Rebirth,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        
          
        
        }
    }
}

draw_set_font(fnt_BytePolice);










</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
