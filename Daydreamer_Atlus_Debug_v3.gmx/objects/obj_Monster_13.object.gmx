<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_IndustrialRoar,10,false);


//Load Sprites ----------------------
offset=10;
if(master.spr_Monster_13_Explode==0)
{
master.num+=1;
master.spr_Monster_13_Explode=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster13_Explode.png",25,0,1,138,205);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_Boost==0)
{
master.num+=1;
master.spr_Monster_13_Boost=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_Boost.png",16,0,1,144,205);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_Turn==0)
{
master.num+=1;
master.spr_Monster_13_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_Turn.png",12,0,1,103,207);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_BackSlash==0)
{
master.num+=1;
master.spr_Monster_13_BackSlash=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_BackSlash.png",10,0,1,181,205);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_Idle==0)
{
master.num+=1;
master.spr_Monster_13_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_Idle.png",24,0,1,105,205);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_ForwardSlash==0)
{
master.num+=1;
master.spr_Monster_13_ForwardSlash=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_ForwardSlash.png",20,0,1,207,209);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_ArcBlast==0)
{
master.num+=1;
master.spr_Monster_13_ArcBlast=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_ArcBlast.png",20,0,1,170,299);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_Jump==0)
{
master.num+=1;
master.spr_Monster_13_Jump=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_Jump.png",32,0,1,160,326);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_Walk==0)
{
master.num+=1;
master.spr_Monster_13_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_Walk.png",30,0,1,133,205);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_Run==0)
{
master.num+=1;
master.spr_Monster_13_Run=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_Run.png",16,0,1,235,291);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_Duck_Shoot==0)
{
master.num+=1;
master.spr_Monster_13_Duck_Shoot=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_Duck_Shoot.png",13,0,1,175,78);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Monster_13_Duck==0)
{
master.num+=1;
master.spr_Monster_13_Duck=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Monster_13_Duck.png",20,0,1,101,205);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

//-----------------------------------
image_xscale=1;
image_yscale=1;
image_speed=.5;
turns=0;

damage=10*global.difficulty;
//hp=800*global.difficulty;
hp=700;
moveChoose=false;
moveChoice=1;
swing_range = false;
hsp=0;
vsp=0;
jhsp=0;
acel=0;
grav=.6;
run_acel=1;
trys=0;
blast=false;
scale=image_yscale;
image_xscale=1;
image_yscale=1;
jumpspeed=8;
west_east = 0;
float=false;
floatup=true;
canland=false;
v_collide=true;
can_land=false;
grounded=false;
not_grounded=0;
alarm[0]=500;
hero_hp=0;
hero_damage=0;



sprite_index=spr_collide;
while !place_meeting(x,y,par_wall) y+=1;

with instance_create(x,y,obj_Monster_13_view)
    {
    scale=other.scale;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) 
{
global.world_clear[7]=1;

    //STEAM
    if (global.platform==0)
    {
    if !steam_get_achievement("ach_Defeat_Krarox") 
        steam_set_achievement("ach_Defeat_Krarox");
    }
    //XBOX ONE
    if (global.platform==1)
    {    
        scr_XboxOne_Achievement(15);                     
    }
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(15);                                   
    } 
    
with instance_create(x,y,obj_CheckPoint){World=7.5;Boss=true;}
//const=500/(4*60); //MIN CONSTANT
damage_bonus=round((125-hero_damage)*4);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=500;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus;
    boss_num=7;     
    }
}
   
  
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turns=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Monster_13_view) instance_destroy();
sprite_index=spr_collide;
if !instance_exists(par_HERO) {instance_destroy();}
else
{


//CheckSwingRange
if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - 180) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + 180) 
 {
 if (moveChoice&lt;4)
 swing_range = true; else swing_range = false;
 }
 else
 {
 swing_range = false;
 }

//check direction
if (par_HERO.x &gt; x)
{
    if(moveChoice&lt;4) || (moveChoose)
    {
    
    if (moveChoice==1) hsp=0; //Idle
    if (moveChoice==2) hsp=3; //Walk
    if (moveChoice==3) hsp=8; //Run
    
     if(west_east == 0)
        {
         
         alarm[0]=2000/global.game_speed;
         moveChoose=false;
         moveChoice=12;
         obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Turn];
         obj_Monster_13_view.image_speed=.5*global.game_speed;
         obj_Monster_13_view.image_index=0;
         hsp=0;
         //audio_play_sound(snd_droid_discharge,10,false);
         }
         else
         {
         west_east = 1;
         image_xscale = -scale;
         }
    }
    
}

if (par_HERO.x &lt; x) 
{
    if(moveChoice&lt;4) || (moveChoose)
    {
    
    if (moveChoice==1) hsp=0;  //Idle
    if (moveChoice==2) hsp=-3; //Walk
    if (moveChoice==3) hsp=-8; //Run
  
    if(west_east == 1)
        {
         
         alarm[0]=2000/global.game_speed;
         moveChoose=false;
         moveChoice=12;
         obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Turn];
         obj_Monster_13_view.image_speed=.5*global.game_speed;
         obj_Monster_13_view.image_index=0;
         hsp=0;
         //audio_play_sound(snd_droid_discharge,10,false);
         }
         else
         {
            west_east = 0;
            image_xscale = scale;
         }
    }
   
}

 
 if(moveChoose==true)
    {   
      n=irandom_range(1, 8);
            
     while(n==moveChoice)
        {
            n=irandom_range(1, 8);   
        }
        
        
        
     moveChoice=n;
     
    
         
         //Initiallize the Move
        switch(moveChoice)
            {
            case 1:  //Stand
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Idle]; 
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            alarm[0]=30/global.game_speed;
            loops=irandom_range(1,2);
            damage=7*global.difficulty;
            not_grounded=0;
            break;
            
            case 2:  //Walk
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Walk]; 
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            alarm[0]=100/global.game_speed;
            damage=7*global.difficulty;
            not_grounded=0;
            trys=0;
            break;
            
            case 3:  //Run
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Run]; 
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            alarm[0]=irandom_range(75,125)/global.game_speed;
            damage=7*global.difficulty;
            not_grounded=0;
            trys=0;
            run_acel=.9;
            break;
            
            
            case 4:  //Jump
            moveChoice=4;
            acel=1;
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Jump];
            obj_Monster_13_view.image_index=0;
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            jhsp=10*-(sign(image_xscale));
            alarm[0]=2000/global.game_speed;
            break;
            
            case 5:  //BackSlash
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_BackSlash];
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            alarm[0]=100;
            damage=7*global.difficulty;
            blast=false;
            not_grounded=0;
            break;
            
            case 6:  //ForwardSlash
            audio_sound_pitch(snd_ShieldUP_Short,global.game_speed);
            audio_play_sound(snd_ShieldUP_Short,10,false);
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_ForwardSlash];
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            alarm[0]=100/global.game_speed;
            damage=7*global.difficulty;
            not_grounded=0;
            blast=false;
            break;
            
            case 7:  //Boost
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Boost];
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            alarm[0]=1000/global.game_speed;
            damage=7*global.difficulty;
            not_grounded=0;
            break;
            
            case 8:  //Duck
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Duck]; 
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            loops=irandom_range(1,4);
            alarm[0]=40/global.game_speed;
            damage=7*global.difficulty;
            not_grounded=0;
            blast=false;
            break;
            
            }
            
        moveChoose=false;  
                 
    }


    
switch(moveChoice)
{

case 1: //Stand
    
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Idle]; 
    obj_Monster_13_view.image_speed=.5*global.game_speed;          
    damage=7*global.difficulty;
    hsp=0;
    vsp=0;
    
    if (!grounded) 
        not_grounded+=1; else not_grounded=0;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=4;
        acel=1;
        obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Jump];
        obj_Monster_13_view.image_index=0;
        obj_Monster_13_view.image_speed=.5*global.game_speed;
        jhsp=10*-(sign(image_xscale));
        alarm[0]=2000/global.game_speed;
        }
    
    
break;


case 2: //Walk
    damage=7*global.difficulty;
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Walk]; 
    obj_Monster_13_view.image_speed=.5*global.game_speed;          
    vsp=0;
   
    
    if (!grounded) 
        not_grounded+=1; else not_grounded=0;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=4;
        acel=1;
        obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Jump];
        obj_Monster_13_view.image_index=0;
        obj_Monster_13_view.image_speed=.5*global.game_speed;
        jhsp=10*-(sign(image_xscale));
        alarm[0]=2000/global.game_speed;
        }   
   
    break;

case 3: //Run
    damage=7*global.difficulty;
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Run]; 
    obj_Monster_13_view.image_speed=.5*global.game_speed;          
    vsp=0;
    if (run_acel&lt;1.5) run_acel+=.025;
    hsp=hsp*run_acel;
   
    
    if (!grounded) 
        not_grounded+=1; else not_grounded=0;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=4;
        acel=1;
        obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Jump];
        obj_Monster_13_view.image_index=0;
        obj_Monster_13_view.image_speed=.5*run_acel*global.game_speed;
        jhsp=10*-(sign(image_xscale));
        alarm[0]=2000/global.game_speed;
        }   
   
    break;

    
case 4: //Jump
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Jump];
    alarm[0]=2000/global.game_speed;   
    damage=9*global.difficulty;
    
    if (obj_Monster_13_view.image_index&lt;7) //STAY STILL LAUNCH 
        {
        hsp=0;
        vsp=0;
        obj_Monster_13_view.image_speed = .5*global.game_speed;
        }
    
    if (obj_Monster_13_view.image_index&gt;=7) &amp;&amp; (obj_Monster_13_view.image_index&lt;=25) //GOING UP
        {    
        if (obj_Monster_13_view.image_index&lt;17) 
            {
            vsp=-25+acel//*global.game_speed;
            
            if (vsp&lt;0)
            {
            if (acel&lt;75/global.game_speed) acel+=1*global.game_speed;
            }
            else
            {
            if (acel&lt;75/global.game_speed) acel+=1/global.game_speed;
            }
            hsp=jhsp;
           
            
            //RANDOM BOOST
            
            if (obj_Monster_13_view.image_index==15)
            {
            var rand
            rand=irandom_range(1,4);
            if (rand==4)
                {
                moveChoice=7;
                obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Boost];
                obj_Monster_13_view.image_speed=.5*global.game_speed;
                obj_Monster_13_view.image_index=4;
                alarm[0]=1000/global.game_speed;
                damage=7*global.difficulty;
                not_grounded=0;
                }
            }
            }//END MOVING UP
            
            else
            {
            jhsp=jhsp*(.85+.05/global.game_speed);
            hsp=jhsp;
            if (acel&lt;75) acel+=2;//1.5;
            
        
        if(!grounded)
            {
                vsp=-25+acel*global.game_speed;
                
            if (obj_Monster_13_view.image_index&gt;=19)
                    obj_Monster_13_view.image_speed = 0;
            }   
            else
            {
                if (acel&gt;50)
                {
                    if !instance_exists(obj_Screen_Shake)
                    {
                     instance_create(x,y,obj_Aura_Ripple_stat_short);
                     //instance_create(x,y,obj_Aura_Ripple_stat_short);
                      with instance_create(x,y,obj_Screen_Shake){quake=false; hold=30;}
                         repeat(2)
                         {
                         with instance_create(x+50, y+10,obj_dust_trail) //RIGHT TRAIL
                         {image_xscale=-5;image_yscale=5;image_speed=2;}
                         with instance_create(x-50, y+10,obj_dust_trail) //LEFT TRAIL
                         {image_xscale=5;image_yscale=5;image_speed=2;}
                         }  
                    }
                
                }
                vsp=0;
                obj_Monster_13_view.image_speed = 1;
            }
            }//END IF MOVING DOWN
        }
        
    if (obj_Monster_13_view.image_index&gt;=25)
        {
        if (obj_Monster_13_view.image_index==25) 
            {
            audio_sound_pitch(snd_TrollSlash,global.game_speed);
            audio_play_sound(snd_TrollSlash,10,false);
            }
        hsp=0;
        vsp=0;
        obj_Monster_13_view.image_speed = .5*global.game_speed;
        }
        
    if(obj_Monster_13_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_Monster_13_Jump])-1)
        moveChoose=true;    

break;

case 5: //BackSlash
    
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_BackSlash]; 
    obj_Monster_13_view.image_speed=.5*global.game_speed;          
    damage=7*global.difficulty;
    hsp=0;
    vsp=0;
    if (round(obj_Monster_13_view.image_index)==5)
    { 
    if (blast==false)
    {
     with instance_create(x-200*image_xscale,y-200*scale,obj_Monster_13_ForwardBlast)
       {
       hsp=20*-sign(other.image_xscale);
       } 
    blast=true;
    }
    
    }
    if (obj_Monster_13_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_Monster_13_BackSlash])-1) 
    moveChoose=true;
break;

case 6: //ForwardSlash
    
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_ForwardSlash]; 
    obj_Monster_13_view.image_speed=.5*global.game_speed;          
    damage=7*global.difficulty;
    hsp=0;
    vsp=0;
    if (round(obj_Monster_13_view.image_index)==9)
    {
     if(blast==false)
     { 
       with instance_create(x-200*image_xscale,y-200*scale,obj_Monster_13_AuraBlast)
       {
       hsp=40*-sign(other.image_xscale);
       }
     blast=true;
     } 
        
    }  
    if (obj_Monster_13_view.image_index&gt;=sprite_get_number( global.sprite[master.spr_Monster_13_ForwardSlash])-1) 
    moveChoose=true;
break;

case 7:  //BOOST
obj_Monster_13_view.sprite_index =  global.sprite[master.spr_Monster_13_Boost];
if (obj_Monster_13_view.image_index&lt;8)
{
hsp=0;
vsp=0;
obj_Monster_13_view.image_speed=.5*global.game_speed;
}


if (obj_Monster_13_view.image_index&gt;=8)
{

if (obj_Monster_13_view.image_index&lt;8)
    {
    audio_sound_pitch(snd_warp,global.game_speed);
    if !audio_is_playing(snd_warp)audio_play_sound(snd_warp,10,false);
    }
if (obj_Monster_13_view.image_index&lt;12)
    {
    hsp=30*-(image_xscale);
    vsp=0;
    obj_Monster_13_view.image_speed=.2*global.game_speed;
    }
    else
    {
    hsp=0;
    vsp=0;
    obj_Monster_13_view.image_speed=.5*global.game_speed;
    }
}

if (obj_Monster_13_view.image_index==6)
    {
    audio_sound_pitch(snd_warp,global.game_speed);
    if !audio_is_playing(snd_warp)audio_play_sound(snd_warp,10,false);
    }
if (obj_Monster_13_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_Monster_13_Boost])-1)
    {
     if (grounded)
     {
     moveChoice=10;
     obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_ArcBlast];
     obj_Monster_13_view.image_index=0;
     obj_Monster_13_view.image_speed=.5*global.game_speed;
     alarm[0]=2000/global.game_speed;  
     //moveChoose=true;
     }
     else
     {
     moveChoice=4;
     acel=30;
     obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Jump];
     obj_Monster_13_view.image_index=16;
     obj_Monster_13_view.image_speed=.5*global.game_speed;
     jhsp=0;
     alarm[0]=2000/global.game_speed;
     }    
    }

break;

case 8: //Duck
    alarm[0]=100/global.game_speed;
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Duck]; 
    
    if (obj_Monster_13_view.image_index&gt;=19)
        {
            obj_Monster_13_view.image_speed=-.5*global.game_speed;
            loops-=1;
            if (loops&gt;=1)
            {
            switch(irandom_range(1,2))
            {
            case 1:
            moveChoice=9;
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Duck_Shoot];
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            break
            }
            }
        
        }
    if (round(obj_Monster_13_view.image_index)==8)
        {
         if (loops&gt;=1) obj_Monster_13_view.image_speed=.5*global.game_speed;
        }
              
    damage=7*global.difficulty;
    hsp=0;
    vsp=0;
    
    if(sign(image_xscale)==1)
    {
        if (par_HERO.x&gt;x) loops=0;
    }
    else
    {
        if (par_HERO.x&lt;x) loops=0;
    }
    
    if (loops&lt;=0) 
    {
    if (obj_Monster_13_view.image_index&lt;1)
    moveChoose=true;
    }
break;

case 9: //Duck Shoot
    alarm[0]=100/global.game_speed;
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Duck_Shoot];
    obj_Monster_13_view.image_speed=.5*global.game_speed;          
    damage=7*global.difficulty;
    hsp=0;
    vsp=0;
    if (round(obj_Monster_13_view.image_index)==5)
    {
      if (blast==false)
      {
      with instance_create(x-200*image_xscale,y-100*scale,obj_Monster_13_ForwardBlast)
       {
       hsp=20*-sign(other.image_xscale);
       }
      blast=true;
      } 
   //obj_Monster_13_view.image_index+=1;
    
    }
    if (obj_Monster_13_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_Monster_13_Duck_Shoot])-1) 
        {
            moveChoice=8;
            blast=false;
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Duck];
            obj_Monster_13_view.image_speed=-.5*global.game_speed;
            obj_Monster_13_view.image_index=12;
        }
break;

case 10: //ArcBlast
    alarm[0]=100/global.game_speed;
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_ArcBlast]; 
    obj_Monster_13_view.image_speed=.5*global.game_speed;          
    damage=7*global.difficulty;
    hsp=0;
    vsp=0;
    if (round(obj_Monster_13_view.image_index)==12)
    {
    if !instance_exists(obj_Monster_13_ArcBlast)
    instance_create(x,y-340*scale,obj_Monster_13_ArcBlast)
    }
    if (obj_Monster_13_view.image_index&gt;=sprite_get_number( global.sprite[master.spr_Monster_13_ArcBlast])-1) 
    moveChoose=true;
break;


case 12: //Turn
damage=7*global.difficulty;
obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Turn]; 
obj_Monster_13_view.image_speed=.5*global.game_speed;
swing_range=false;
alarm[0]=2000/global.game_speed;
vsp=0;
 
if (obj_Monster_13_view.image_index&gt;=sprite_get_number(global.sprite[master.spr_Monster_13_Turn])-1) 
    {
    turns+=1;
    alarm[2]=100;
    moveChoose=true;
    obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Turn];
    if (west_east==0) 
        {
        west_east = 1;
        image_xscale = -scale;
        x=x+(scale*20); //TURN OFFSET 
        obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Idle];
        }
        else
        { 
        west_east = 0;
        image_xscale = scale;
        x=x-(scale*20); //TURN OFFSET
        obj_Monster_13_view.sprite_index =  global.sprite[master.spr_Monster_13_Idle];
        } 
    
        if (turns&gt;=3) //TURN COUNTER
        {
        moveChoose=false;            
        if (irandom_range(1,2)==1)
        {
            moveChoice=4;
            acel=1;
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Jump];
            obj_Monster_13_view.image_index=0;
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            jhsp=10*-(sign(image_xscale));
            alarm[0]=2000/global.game_speed;
         }
         else
         {           
            moveChoice=7;
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Boost];
            obj_Monster_13_view.image_speed=.5*global.game_speed;
            obj_Monster_13_view.image_index=0;
            alarm[0]=1000/global.game_speed;
            damage=7*global.difficulty;
            not_grounded=0;
           }         
        
        }
    }
break;

}//END SWITCH

vsp = vsp + grav*global.game_speed; //ADD GRAVITY


//Collisions ------------------------------------------------------------



//Horizontal Collision ------------------------------


if place_meeting(x+hsp,y,par_wall) 
{
    
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp = 0;  
        if (moveChoice==2) || (moveChoice==3) || (moveChoice==7)
        {
            trys+=1;
            if (trys&gt;2)
            {
            moveChoice=4;
            acel=1;
            x+=3*image_xscale;
            obj_Monster_13_view.sprite_index = global.sprite[master.spr_Monster_13_Jump];
            obj_Monster_13_view.image_index=0;
            obj_Monster_13_view.image_speed=.5;
            jhsp=10*-(sign(image_xscale));
            alarm[0]=2000/global.game_speed;
            trys=0;
            }
        }      
    }
    else
        {
        y=y-yplus;
        }
    
}

x = x + hsp*global.game_speed;

//Vertical Collision ------------------------------

if place_meeting(x,y+vsp,par_wall) 
{ 
//if !place_free(x,y+vsp) 
// {    
    while (!place_meeting(x,y+sign(vsp),par_wall)) y=y+sign(vsp);
     

     
    if (sign(vsp) == 1)
    {
        grounded = 1; //Enable First Jump
        
        
    }
    
    vsp = 0;
// }    //END NOT PLACE FREE 
}
else
{
   grounded = 0;
}

y = y + vsp*global.game_speed;

if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if (grounded)
    image_blend=c_red;
    else
    image_blend=c_white;
    
draw_self();
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>296,263</point>
    <point>277,277</point>
  </PhysicsShapePoints>
</object>
