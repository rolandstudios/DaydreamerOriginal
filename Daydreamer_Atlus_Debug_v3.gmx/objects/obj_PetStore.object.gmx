<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>arrow_y=y;
grow=0;
grow_y=0;

rest=true;

orig_x = 1110*1.5;
orig_y = 75*1.5;

orig_x = 1080;
orig_y = 150;

x=orig_x;
y=orig_y;


price=0;
sellprice=0;
sell_x=0;
sell_y=0;
buy_y=y;
slot_x=0;
slot_y=0;
columns=global.columns;
rows=global.rows;

icon_scale=1;
icon_x=0;
icon_y=0;

sold=false;
sell=false;
grow_x=0;
i=0;
//space=49;
space=25;
parting=300;
image_speed=0;
global.CutScene=true;
Pet_Icon=spr_FuzzyTurtle_Idle_A;
frame=0;
audio_play_sound(snd_PowerupB,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (i&gt;0) //FINISH LAST PAYMENT
    {
        par_HERO.money=par_HERO.money-i;
        i=0;
    }
    
global.CutScene=false;
scr_savegame();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> audio_sound_pitch(snd_payup,global.game_speed);
 audio_play_sound(snd_payup,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.CutScene=true;

if (grow_x&gt;=600)
{
Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);

Key_Melee = gamepad_button_check_pressed(global.playing_index, gp_face3);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);
Key_Select = gamepad_button_check_pressed(global.playing_index,gp_select);

if keyboard_check_pressed(global.kb_Left) Key_Left = true;
if keyboard_check_pressed(global.kb_Right) Key_Right = true; 
if keyboard_check_pressed(global.kb_Up) Key_Up = true;
if keyboard_check_pressed(global.kb_Down) Key_Down = true;

if keyboard_check_pressed(global.kb_Jump) Key_Jump = true;
if keyboard_check_pressed(global.kb_Melee) Key_Melee = true;
if keyboard_check_pressed(global.kb_Fire) Key_Fire = true;
if keyboard_check_pressed(global.kb_Select) Key_Select = true;

if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
    {
    Key_Up = 1;
    alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
    {
    Key_Down = 1; 
    alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) 
    {
    Key_Left = 1; 
    alarm[1]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) 
    {
    Key_Right = 1; 
    alarm[1]=10; 
    rest=false;
    } 
}
    if (master.paused)
    {
    Key_Left = false;
    Key_Right = false;
    Key_Up = false;
    Key_Down = false;
    
    Key_Melee = false;
    Key_Jump = false;
    Key_Fire = false;
    Key_Select = false;
    }

}
else
{
    Key_Left = false;
    Key_Right = false;
    Key_Up = false;
    Key_Down = false;
    
    Key_Melee = false;
    Key_Jump = false;
    Key_Fire = false;
    Key_Select = false;
}

if (sell==false) //BUY
{ 
if(Key_Up) 
    {
    if(y&gt;orig_y)
        {
        y=y-space;
        }
    else
        {
        y=orig_y+(4*space);
        }
   audio_play_sound(snd_selectA,10,false);
    }

if(Key_Down) 
    {
    if(y&lt;orig_y+(4*space)) 
        {
        y=y+space;
        }
    else
        {
        y=orig_y;
        }
    audio_play_sound(snd_selectA,10,false);
    }
    


if (Key_Jump) //Buy Select
{    
    if (i&gt;0) //FINISH LAST PAYMENT
    {
        par_HERO.money=par_HERO.money-i;
        i=0;
    }
    
    if (par_HERO.money&gt;=price+i)
        {
        audio_play_sound(snd_Got_special_A,10,false);
        
        switch(item)
        {
        case 1:
        if (global.pets[0]&lt;4) 
            {
            global.pets[0]+=1; 
            i=price;
            }
            else
            {
            audio_play_sound(snd_diggweed,10,false);
            } 
        break;
        
        case 2:
        if (global.pets[1]&lt;4) 
            {
            global.pets[1]+=1; 
            i=price;
            if !steam_get_achievement("ach_GingerPup") 
                steam_set_achievement("ach_GingerPup");
            }
            else
            {
            audio_play_sound(snd_diggweed,10,false);
            } 
        break;
        
        case 3:
        if (global.pets[2]&lt;4) 
            {
            global.pets[2]+=1; 
            i=price;
            if !steam_get_achievement("ach_MeowCat") 
                steam_set_achievement("ach_MeowCat");
            }
            else
            {
            audio_play_sound(snd_diggweed,10,false);
            } 
        break;
        
        case 4:
        if (global.pets[3]&lt;4) 
            {
            global.pets[3]+=1; 
            i=price;
            if !steam_get_achievement("ach_Weasel") 
                steam_set_achievement("ach_Weasel");
            }
            else
            {
            audio_play_sound(snd_diggweed,10,false);
            } 
        break;
        
        case 5:
        if (global.pets[4]&lt;4) 
            {
            global.pets[4]+=1; 
            i=price;
            if !steam_get_achievement("ach_Duck") 
                steam_set_achievement("ach_Duck");
            }
            else
            {
            audio_play_sound(snd_diggweed,10,false);
            } 
        break;
        }
        
        
        
        }else{audio_play_sound(snd_diggweed,10,false);}
}
} //END BUY



if(Key_Fire) || (Key_Select) //Leave
{
     //par_HERO.money=par_HERO.money-i;
     audio_play_sound(snd_capped_out,10,false);
     instance_destroy();
}


if (i&gt;0) //PAY UP
    {         
        par_HERO.money=par_HERO.money-1;
        i=i-1;
        if (alarm[0]==-1) alarm[0]=2;                  
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
offset=1.5;
else
offset=1;

parting = 300;
space = 37; //was 25



draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_color(c_black);

if (grow_x&lt;=0) 
    {
    if !audio_is_playing(snd_Game_Whoosh) audio_play_sound(snd_Game_Whoosh,14,false);
    }

if (grow_x&lt;600) grow_x+=100;
if (grow_x&gt;600) grow_x=600;


draw_set_alpha(.4);
draw_roundrect((1280-grow_x)*offset,(0)*offset,(1280)*offset,(720)*offset,false); //RIGHT SCREEN CURTAIN

if (grow_x&gt;=600)
{

if (grow_y&lt;=0) 
    {
    if !audio_is_playing(snd_HitMetal) audio_play_sound(snd_HitMetal,12,false);
    }

if (grow_y&lt;175) grow_y+=30;
if (grow_y&gt;175) grow_y=175;


    
draw_set_alpha(.1);
draw_set_color(c_white);
draw_rectangle((980-230)*offset,(275-grow_y)*offset, (980+230)*offset,(275+grow_y)*offset,false); //DRAW MAIN FRAME
draw_rectangle((980-230)*offset,(275-grow_y)*offset, (980+230)*offset,(275+grow_y)*offset,true); //DRAW MAIN FRAME


draw_set_alpha(1);
draw_sprite_ext(spr_Menu_Trim_Top,0,(980)*offset,(275-grow_y)*offset,(1)*offset,(1)*offset,0,c_white,1); //TOP FRAME
draw_sprite_ext(spr_Menu_Trim_Bottom,0,(980)*offset,(275+grow_y)*offset,(1)*offset,(1*offset),0,c_white,1); //BOTTOM FRAME



draw_set_font(fnt_Score);
draw_set_color(c_black) draw_set_alpha(.5);
draw_text_transformed((740-3)*offset,(60+3)*offset,"PetStore",(.85)*offset,(.85)*offset,0); 
draw_set_color(c_yellow) draw_set_alpha(1);
draw_text_transformed((740)*offset,(60)*offset,"PetStore",(.85)*offset,(.85)*offset,0); 

draw_set_color(c_white);

draw_set_font(fnt_Arial_Big);

if (y==orig_y+(0*space))
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(0*space)+2)*offset,"  Fuzzy Turtle",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(0*space))*offset,"  Fuzzy Turtle",1.25*offset,1.25*offset,0); 
}
else
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(0*space)+2)*offset," Fuzzy Turtle",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(0*space))*offset," Fuzzy Turtle",1.25*offset,1.25*offset,0);
}
if (y==orig_y+(0*space)) 
{
    switch(global.pets[0])
    {
    case 0: price=80;  break;  //LVL 1
    case 1: price=160; break; //LVL 2
    case 2: price=320; break; //LVL 3
    case 3: price=640; break; //LVL 4
    }
item=1;
}

if (y==orig_y+(1*space))
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(1*space)+2)*offset,"  Ginger Pup",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(1*space))*offset,"  Ginger Pup",1.25*offset,1.25*offset,0); 
}
else
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(1*space)+2)*offset," Ginger Pup",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(1*space))*offset," Ginger Pup",1.25*offset,1.25*offset,0); 
}
if (y==orig_y+(1*space)) 
{
    switch(global.pets[1])
    {
    case 0: price=100; break; //LVL 1
    case 1: price=200; break; //LVL 2
    case 2: price=400; break; //LVL 3
    case 3: price=800; break; //LVL 4
    }
item=2;
}

if (y==orig_y+(2*space)) 
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(2*space)+2)*offset,"  Meow Cat",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(2*space))*offset,"  Meow Cat",1.25*offset,1.25*offset,0);
}
else
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(2*space)+2)*offset," Meow Cat",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(2*space))*offset," Meow Cat",1.25*offset,1.25*offset,0); 
}
if (y==orig_y+(2*space)) 
{
 switch(global.pets[2])
    {
    case 0: price=80;  break; //LVL 1
    case 1: price=160; break; //LVL 2
    case 2: price=320; break; //LVL 3
    case 3: price=640; break; //LVL 4
    }
    
item=3;
}

if (y==orig_y+(3*space))
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(3*space)+2)*offset,"  Weasel Force",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(3*space))*offset,"  Weasel Force",1.25*offset,1.25*offset,0); 
}
else
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(3*space)+2)*offset," Weasel Force",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(3*space))*offset," Weasel Force",1.25*offset,1.25*offset,0); 
}
if (y==orig_y+(3*space)) 
{
 
 switch(global.pets[3])
    {
    case 0: price=70;  break; //LVL 1
    case 1: price=140; break; //LVL 2
    case 2: price=280; break; //LVL 3
    case 3: price=560; break; //LVL 4
    }
    
item=4;
}

if (y==orig_y+(4*space))
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(4*space)+2)*offset,"  Quacker Squad",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(4*space))*offset,"  Quacker Squad",1.25*offset,1.25*offset,0); 
}
else
{
draw_set_color(c_black); draw_set_alpha(.5);
draw_text_transformed((orig_x-parting-2)*offset,(orig_y+(4*space)+2)*offset," Quacker Squad",1.25*offset,1.25*offset,0); 
draw_set_color(c_white); draw_set_alpha(1);
draw_text_transformed((orig_x-parting)*offset,(orig_y+(4*space))*offset," Quacker Squad",1.25*offset,1.25*offset,0); 
}
if (y==orig_y+(4*space)) 
{
 switch(global.pets[4])
    {
    case 0: price=120; break; //LVL 1
    case 1: price=240; break; //LVL 2
    case 2: price=480; break; //LVL 3
    case 3: price=960; break; //LVL 4
    }
    
item=5;
}

draw_set_font(fnt_Arial);
draw_set_valign(fa_top);


switch (item)
{
case 1:
draw_text_ext_transformed((orig_x-parting)*offset,(orig_y+185)*offset,
//"Class: [Healer] 
"#This furry little critter will replenish your health and energy over time.",10*offset,1000,1*offset,1*offset,0);
Pet_Icon=spr_FuzzyTurtle_Idle_A;
icon_x=-15;
icon_y=68;
icon_scale=1;

    draw_set_halign(fa_center);
    switch(global.pets[0])
    {    
     case 0: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(BUY Lvl 1)",offset,offset,0,c_green,c_green,c_green,c_green,1); break;
     case 1: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 2)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 2: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 3)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 3: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 4)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 4: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(MAXED)",offset,offset,0,c_red,c_red,c_red,c_red,1); break;
    }
break;

case 2:
draw_text_ext_transformed((orig_x-parting)*offset,(orig_y+185)*offset,
//"Class: [Caster] 
"#Mysterious creature of the valley who harnesses the power#of darkness.",10*offset,1000,1*offset,1*offset,0);
Pet_Icon=spr_GingerPup_Idle_A;
icon_x=-4;
icon_y=91;
icon_scale=.73;
    draw_set_halign(fa_center);
    switch(global.pets[1])
    {    
     case 0: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(BUY Lvl 1)",offset,offset,0,c_green,c_green,c_green,c_green,1); break;
     case 1: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 2)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 2: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 3)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 3: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 4)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 4: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(MAXED)",offset,offset,0,c_red,c_red,c_red,c_red,1); break;
    }
break;

case 3:
draw_text_ext_transformed((orig_x-parting)*offset,(orig_y+185)*offset,
//"Class:[Ranged DPS] 
"#Uses a ranged attack to focus on incoming enemies.",10*offset,1000,1*offset,1*offset,0);
Pet_Icon=spr_Cat_Idle;
icon_x=-9;
icon_y=67;
icon_scale=1;
    draw_set_halign(fa_center);
    switch(global.pets[2])
    {    
     case 0: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(BUY Lvl 1)",offset,offset,0,c_green,c_green,c_green,c_green,1); break;
     case 1: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 2)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 2: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 3)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 3: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 4)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 4: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(MAXED)",offset,offset,0,c_red,c_red,c_red,c_red,1); break;
    }
break;

case 4:
draw_text_ext_transformed((orig_x-parting)*offset,(orig_y+185)*offset,
//"Class: [Rogue DPS] 
"#Sneaks up on enemies and deals heavy melee damage.",10*offset,1000,1*offset,1*offset,0);
Pet_Icon=spr_Weasel_Idle;
icon_x=21;
icon_y=56;
icon_scale=.93;
    draw_set_halign(fa_center);
    switch(global.pets[3])
    {    
     case 0: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(BUY Lvl 1)",offset,offset,0,c_green,c_green,c_green,c_green,1); break;
     case 1: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 2)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 2: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 3)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 3: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 4)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 4: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(MAXED)",offset,offset,0,c_red,c_red,c_red,c_red,1); break;
    }
break;

case 5:
draw_text_ext_transformed((orig_x-parting)*offset,(orig_y+185)*offset,
//"Class: [Tank/Kamikaze] 
"#A flock of Quackers will fly in absorbing enemy damage#till they blow up.",10*offset,1000,1*offset,1*offset,0);
Pet_Icon=spr_Duck_Idle;
icon_x=1;
icon_y=56;
icon_scale=.93;
    draw_set_halign(fa_center);
    switch(global.pets[4])
    {    
     case 0: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(BUY Lvl 1)",offset,offset,0,c_green,c_green,c_green,c_green,1); break;
     case 1: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 2)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 2: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 3)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 3: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(UPGRADE Lvl 4)",offset,offset,0,c_yellow,c_yellow,c_yellow,c_yellow,1); break;
     case 4: draw_text_transformed_color((orig_x)*offset,(orig_y+150)*offset,"(MAXED)",offset,offset,0,c_red,c_red,c_red,c_red,1); break;
    }
break;
}

frame+=.5;
if (frame&gt;=sprite_get_number(Pet_Icon)-1) frame=0;
draw_set_halign(fa_left);
draw_sprite_ext(Pet_Icon,frame,(orig_x+icon_x)*offset,(orig_y+icon_y+20)*offset,icon_scale*offset,icon_scale*offset,0,c_white,1);
draw_set_alpha(.4);
draw_line((orig_x-300)*offset,(orig_y-20)*offset,(orig_x-120)*offset,(orig_y-20)*offset);
draw_line((orig_x-300)*offset,(orig_y+175)*offset,(orig_x+100)*offset,(orig_y+175)*offset);
//DRAW PET FRAME
draw_roundrect((orig_x-70)*offset,(orig_y+20)*offset,(orig_x+70)*offset,(orig_y+120)*offset,true);
draw_set_alpha(1);

if(!sell)
{
grow+=.25;

var n
n=(y+arrow_y)*.5;
n=(n+arrow_y)*.5;
arrow_y=n;

draw_sprite_ext(spr_arrow,6,(orig_x-parting-space-4+sin(grow-2)*8)*offset,arrow_y*offset,(1.1+sin(grow-2)*.5)*.25*offset,(1.3+sin(grow)*.2)*.25*offset,0,c_white,.25);
draw_sprite_ext(spr_arrow,6,(orig_x-parting-space+1+sin(grow-1)*8)*offset,arrow_y*offset,(1.1+sin(grow-1)*.5)*.5*offset,(1.3+sin(grow)*.2)*.5*offset,0,c_white,.5);
draw_sprite_ext(spr_arrow,6,(orig_x-parting-space+7+sin(grow)*8)*offset,arrow_y*offset,(1.1+sin(grow)*.5)*offset,(1.3+sin(grow)*.2)*offset,0,c_white,1);


}
draw_set_font(fnt_Arial_Big);
if(!sell) draw_text_transformed((orig_x-65)*offset,(orig_y-20)*offset,"PSY Matter: " + string(par_HERO.money),offset,offset,0); 
if(!sell) draw_text_transformed((orig_x-65)*offset,(orig_y-5)*offset,"Price: " + string(price),offset,offset,0); 

//if(sell)  draw_text_transformed((orig_x-65)*offset,(orig_y-25)*offset,"Sell Price: " + string(sellprice),offset,offset,0); 



if(!sell)
{
draw_set_valign(fa_center);
draw_sprite_ext(spr_xbox_A,0,(orig_x-45)*offset,(orig_y+270)*offset,.5*offset,.5*offset,0,c_white,1);
draw_text_transformed((orig_x+1-30)*offset,(orig_y+268)*offset,"- Buy",offset,offset,0); 

draw_sprite_ext(spr_xbox_B,0,(orig_x+34)*offset,(orig_y+270)*offset,.5*offset,.5*offset,0,c_white,1);
draw_text_transformed((orig_x+50)*offset,(orig_y+268)*offset,"- Cancel",offset,offset,0); 

}

}//END GROW_X IS GREAT ENOUGH






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_center);



draw_roundrect(orig_x-parting-space-20,orig_y-space-30, orig_x+(columns*space)+40,orig_y+(6*space),true);


draw_set_font(fnt_Arcade);
draw_text(orig_x-parting,orig_y-space,"Pear Store" ); 


draw_set_font(fnt_BytePolice);

draw_sprite(spr_icon_1_RedPotion_small,1,orig_x-parting,orig_y+(0*space));
draw_text(orig_x-parting+space,orig_y+(0*space),"- Red Potion (small)" ); 
if (y==orig_y+(0*space)) {price=50;item=1;}

draw_sprite(spr_icon_2_RedPotion,2,orig_x-parting,orig_y+(1*space));
draw_text(orig_x-parting+space,orig_y+(1*space),"- Red Potion (large)" );
if (y==orig_y+(1*space)) {price=100;item=2;}

draw_sprite(spr_icon_3_YellowPotion_small,3,orig_x-parting,orig_y+(2*space)); 
draw_text(orig_x-parting+space,orig_y+(2*space),"- Yellow Potion (small)" );
if (y==orig_y+(2*space)) {price=25; item=3;}

draw_sprite(spr_icon_4_YellowPotion,4,orig_x-parting,orig_y+(3*space));
draw_text(orig_x-parting+space,orig_y+(3*space),"- Yellow Potion (large)" );
if (y==orig_y+(3*space)) {price=40; item=4;}

draw_sprite(spr_icon_5_Regen,5,orig_x-parting,orig_y+(4*space)); 
draw_text(orig_x-parting+space,orig_y+(4*space),"- Regeneration" );
if (y==orig_y+(4*space)) {price=200; item=5;}

draw_sprite(spr_icon_6_Shield,6,orig_x-parting,orig_y+(5*space));
draw_text(orig_x-parting+space,orig_y+(5*space),"- Shield" );
if (y==orig_y+(5*space)) {price=500; item=6;}



//Draw Cursor
if(!sell)
draw_sprite(spr_arrow,6,orig_x-parting-space,y);
if(sell)
draw_sprite(spr_Inventory,2,x,y);


draw_set_font(fnt_Arial);

if(!sell) draw_text(orig_x-16,orig_y-space,"price: " + string(price));
if(sell)  draw_text(orig_x-16,orig_y-space,"sell price: " + string(sellprice));


draw_text(orig_x+space+15,orig_y+(6*space+10),"MForce: " + string(obj_HERO.money));

//X-move A-Select
if(!sell)
{
draw_sprite(spr_xbox_X,0,orig_x-10,orig_y+(1+rows)*space);
draw_text(orig_x+6,orig_y+(1+rows)*space,"- Sell" );

draw_sprite(spr_xbox_A,0,orig_x+64,orig_y+(1+rows)*space);
draw_text(orig_x+80,orig_y+(1+rows)*space,"- Buy" );

draw_sprite(spr_xbox_B,0,orig_x-10,orig_y+(2+rows)*space);
draw_text(orig_x+6,orig_y+(2+rows)*space,"- Cancel" );
}

if(sell)
{
draw_sprite(spr_xbox_X,0,orig_x-10,orig_y+(1+rows)*space);
draw_text(orig_x+6,orig_y+(1+rows)*space,"- Buy" );

draw_sprite(spr_xbox_A,0,orig_x+64,orig_y+(1+rows)*space);
draw_text(orig_x+80,orig_y+(1+rows)*space,"- Sell" );

draw_sprite(spr_xbox_B,0,orig_x-10,orig_y+(2+rows)*space);
draw_text(orig_x+6,orig_y+(2+rows)*space,"- Cancel" );
}



//DRAW Inventory---------------
var a
var b

for (a=0;a&lt;=rows;a+=1)
{
    
    for (b=0;b&lt;=columns;b+=1)
    {
     draw_sprite(spr_Inventory,0,orig_x+(b*space),orig_y+(a*space));
    
      switch(global.Inventory[a,b])
        {    
        case 0:
        break;
        
        case 1:
        draw_sprite(spr_icon_1_RedPotion_small,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 2:
        draw_sprite(spr_icon_2_RedPotion,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 3:
        draw_sprite(spr_icon_3_YellowPotion_small,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 4:
        draw_sprite(spr_icon_4_YellowPotion,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 5:
        draw_sprite(spr_icon_5_Regen,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 6:
        draw_sprite(spr_icon_6_Shield,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 7:
        draw_sprite(spr_icon_7_Warp_Boost,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 8:
        draw_sprite(spr_icon_8_Weapon_Boost,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 9:
        draw_sprite(spr_icon_9_Sheied_Boost,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 10:
        draw_sprite(spr_icon_10_vamp_Health,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 11:
        draw_sprite(spr_icon_11_vamp_Energy,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        case 12:
        draw_sprite(spr_icon_12_Rebirth,0,orig_x+(b*space),orig_y+(a*space));
        break;
        
        
          
        
        }
    }
}

draw_set_font(fnt_BytePolice);










</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
