<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Inventory_Header</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//orig_x=x;
//orig_y=y;
image_speed=.5*global.game_speed;
image_index=0;
finish=false;

orig_speed=master.target_speed;
master.target_speed=.5;

rest=true;

orig_x=(par_HERO.x-view_xview)+200;
if(orig_x&gt;1100) orig_x=1100;
orig_y=360;

x=orig_x;
y=orig_y;

slot_x=0;
slot_y=0;

columns=global.columns;
rows=global.rows;


space=49;
stored=false;
image_speed=0;
global.CutScene=true;

audio_play_sound(snd_PowerupB,10,false);

//LUCK
luck=0;
for (a=0;a&lt;=global.rows;a+=1)
{    
    for (b=0;b&lt;=global.columns;b+=1)
    {
        if (global.Inventory[a,b]==14)
            {        
            luck+=1;       
            }
    }
}
par_HERO.luck=luck;

diff_x=0;
diff_y=0;
ps4_x=device_mouse_raw_x(0);
ps4_y=device_mouse_raw_y(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Search For Recharges
for (a=0;a&lt;=global.rows;a+=1)
{
    
    for (b=0;b&lt;=global.columns;b+=1)
    {
        if (global.Inventory[a,b]==10)
            {        
            par_HERO.recharge=100;       
            }
    }
}

for (a=0;a&lt;=global.rows;a+=1)
{
    
    for (b=0;b&lt;=global.columns;b+=1)
    {
        if (global.Inventory[a,b]==11)
            {        
            par_HERO.recharge=50;       
            }
    }
}

master.target_speed=orig_speed;
global.CutScene=false;
par_HERO.Inventory=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pause between item move
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
{
audio_sound_pitch(snd_retarget,1);

if (!finish)
{
global.CutScene=true;
if (image_index&gt;=sprite_get_number(sprite_index)-1)
{
    image_index=sprite_get_number(sprite_index)-1;
    image_speed=0;
}
else
{
    image_speed=.5;//*global.game_speed;
}



Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);

Key_Melee = gamepad_button_check_pressed(global.playing_index, gp_face3);
Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);
Key_Select = gamepad_button_check_pressed(global.playing_index,gp_select);
Key_Left_Shoulder = gamepad_button_check_pressed(global.playing_index,global.gp_Left_Shoulder);
Key_Right_Shoulder = gamepad_button_check_pressed(global.playing_index,global.gp_Right_Shoulder);

if keyboard_check_pressed(global.kb_Left) Key_Left = true;
if keyboard_check_pressed(global.kb_Right) Key_Right = true; 
if keyboard_check_pressed(global.kb_Up) Key_Up = true;
if keyboard_check_pressed(global.kb_Down) Key_Down = true;

if keyboard_check_pressed(global.kb_Jump) Key_Jump = true;
if keyboard_check_pressed(global.kb_Melee) Key_Melee = true;
if keyboard_check_pressed(global.kb_Fire) Key_Fire = true;
if keyboard_check_pressed(global.kb_Weapon) Key_Weapon = true;


if (par_HERO.hp&lt;=0) Key_Jump=false;

//CONSOLE DEBUG ---------------------------------------------------
/*
if (Key_Left_Shoulder) 
{
    if (global.debug==true)
    {
        global.debug=false;
        if instance_exists(obj_debug)
            {
            with (obj_debug){instance_destroy();}
            }
    }
    else
    {
        global.debug=true;
        instance_create(x,y,obj_debug);
    }
}

if (Key_Right_Shoulder) 
{
show_debug_overlay(true);
}
*/

if (rest)
{
//PS4 TRACK PAD -----------------

    if (abs(ps4_x-device_mouse_raw_x(0))&gt;500) ||  (abs(ps4_y-device_mouse_raw_y(0))&gt;500)  
    {
        ps4_x=device_mouse_raw_x(0);  
        ps4_y=device_mouse_raw_y(0);    
    }
    
    if (abs(ps4_x-device_mouse_raw_x(0))&gt;abs(ps4_y-device_mouse_raw_y(0)))
    {
        if (diff_x &gt;=20)
        {    
        if (ps4_x&gt;device_mouse_raw_x(0)) {Key_Left = 1;  alarm[0]=15; rest=false;}
        if (ps4_x&lt;device_mouse_raw_x(0)) {Key_Right = 1; alarm[0]=15; rest=false;}
        }
    }
    else
    {
        if(diff_y&gt;=20)
        {
        if (ps4_y&gt;device_mouse_raw_y(0)) {Key_Up    = 1; alarm[0]=15; rest=false;}
        if (ps4_y&lt;device_mouse_raw_y(0)) {Key_Down  = 1; alarm[0]=15; rest=false;}
        }
    }


//--------------------------------

if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) 
    {
    Key_Up = 1;
    alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) 
    {
    Key_Down = 1; 
    alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) 
    {
    Key_Left = 1; 
    alarm[0]=10; 
    rest=false;
    } 
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) 
    {
    Key_Right = 1; 
    alarm[0]=10; 
    rest=false;
    } 
}

    diff_x=abs(ps4_x-device_mouse_raw_x(0));
    diff_y=abs(ps4_y-device_mouse_raw_y(0));
    
    ps4_x=device_mouse_raw_x(0);
    ps4_y=device_mouse_raw_y(0);

if (master.paused)
{
Key_Left = false;
Key_Right = false;
Key_Up = false;
Key_Down = false;

Key_Melee = false;
Key_Jump = false;
Key_Fire = false;
Key_Select = false;
Key_Left_Shoulder = false;
Key_Right_Shoulder = false; 
}//end master paused

if(Key_Left) 
    {
    //if(x&gt;orig_x) 
    if(slot_x&gt;0) 
        {
        x=x-space;
        slot_x = slot_x-1;
        }
        else
        {
        x=orig_x+columns*space;
        slot_x = columns;
        }
    audio_play_sound(snd_retarget,10,false);
    //audio_play_sound(snd_selectB,10,false);
    }

if(Key_Right) 
    {
    //if(x&lt;orig_x+columns*space) 
    if(slot_x&lt;3) 
        {
        x=x+space;
        slot_x = slot_x+1;
        }
        else
        {
        x=orig_x;
        slot_x = 0;
        }
    audio_play_sound(snd_retarget,10,false);
    //audio_play_sound(snd_selectB,10,false);
    }
    
    
if(Key_Up) 
    {
      if(slot_y&gt;0)
        {
        y=y-space;
        slot_y=slot_y-1;
        }
        else
        {
        y=orig_y+rows*space;
        slot_y=rows;
        }
        
   audio_play_sound(snd_retarget,10,false);
   //audio_play_sound(snd_selectB,10,false);
    }

if(Key_Down) 
    {
    //if(y&lt;orig_y+rows*space) 
    //if(slot_y&lt;rows)
    if(slot_y&lt;2)
        {
        y=y+space;
        slot_y=slot_y+1;
        }
    else
        {
        y=orig_y;
        slot_y=0;
        }
    audio_play_sound(snd_retarget,10,false);    
    //audio_play_sound(snd_selectB,10,false);
    }
    
if(Key_Fire) || (Key_Select)
{
     audio_play_sound(snd_capped_out,10,false);
     //instance_destroy();
     finish=true;
     global.CutScene=false;
     master.target_speed=orig_speed;
     alarm[1]=25;
}

if (slot_x&gt;3) slot_x=0;
if (slot_x&lt;0) slot_x=3;
if (slot_y&gt;2) slot_y=0;
if (slot_y&lt;0) slot_y=2;

if (par_HERO.climbledge) Key_Jump=false;

if (Key_Jump) &amp;&amp; (stored==false) &amp;&amp; (par_HERO&gt;0) //USE ITEM
{
    if (global.Inventory[slot_y,slot_x]!=0) &amp;&amp; (global.Inventory[slot_y,slot_x]!=10) &amp;&amp; (global.Inventory[slot_y,slot_x]!=11) &amp;&amp; (global.Inventory[slot_y,slot_x]!=12)
    audio_play_sound(snd_gamestart,10,false);
    
    switch (global.Inventory[slot_y,slot_x])
        {    
        case 0:
        if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,15,false);
        break;
        
        case 1:
        if (par_HERO.hp&lt;100)
        {
            with instance_create(x,y,obj_Powerup_A_FULL){color=c_red;}
            with instance_create(par_HERO.x,par_HERO.y,obj_RedEnergy)
            {
            Energy=40; 
            visible=false;
            }
            global.Inventory[slot_y,slot_x]=0;
        }
        else
        {
            if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);
        }        
        break;
        
        case 2:
        if (par_HERO.hp&lt;100)
        {       
            with instance_create(x,y,obj_Powerup_A_FULL){color=c_red;}
            with instance_create(par_HERO.x,par_HERO.y,obj_RedEnergy)
            {
            Energy=100; 
            visible=false;
            }
            global.Inventory[slot_y,slot_x]=0;
        }
        else
        {
            if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);
        }  
        break;
        
        case 3:
        if (par_HERO.energy&lt;100)
        {
            with instance_create(x,y,obj_Powerup_A_FULL){color=c_yellow;}
            with instance_create(par_HERO.x,par_HERO.y,obj_YellowEnergy)
            {
            Energy=25; 
            visible=false;
            }
            global.Inventory[slot_y,slot_x]=0;
        }
        else
        {
            if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);
        }  
        break;
        
        case 4:
        if (par_HERO.energy&lt;100)
        {
            with instance_create(x,y,obj_Powerup_A_FULL){color=c_yellow;}
            with instance_create(par_HERO.x,par_HERO.y,obj_YellowEnergy)
            {
            Energy=100; 
            visible=false;
            }
            global.Inventory[slot_y,slot_x]=0;
        }
        else
        {
            if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);
        }  
        break;
        
        case 5:
        if (par_HERO.buffs&lt;3) &amp;&amp; !instance_exists(obj_Regeneration)
        {
        instance_create(x,y,obj_Regeneration);
        global.Inventory[slot_y,slot_x]=0;
        }else{if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);}
        break;
        
        case 6:
        if (par_HERO.buffs&lt;3) &amp;&amp; !instance_exists(obj_Shield_Buff)
        {
        instance_create(x,y,obj_Shield_Buff);
        global.Inventory[slot_y,slot_x]=0;
        }else{if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);}
        break;
        
        case 7:
        if (par_HERO.buffs&lt;3)&amp;&amp; !instance_exists(obj_Warp_Boost)
        {
        instance_create(x,y,obj_Warp_Boost);
        global.Inventory[slot_y,slot_x]=0;
        }else{if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);}
        break;
        
        case 8:
        if (par_HERO.buffs&lt;3) &amp;&amp; !instance_exists(obj_Weapon_Boost)
        {
        instance_create(x,y,obj_Weapon_Boost)
        global.Inventory[slot_y,slot_x]=0;
        }else{if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);}
        break;
        
        case 9:
        if (par_HERO.buffs&lt;3)
        {
        global.Inventory[slot_y,slot_x]=0;
        instance_create(x,y,obj_Shield_Buff);
        }else{if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);}
        break;
        
        case 10:
        audio_play_sound(snd_diggweed,15,false);
        //instance_create(x,y,obj_vamp_Health);
        //global.Inventory[slot_y,slot_x]=0;
        break;
        
        case 11:
        audio_play_sound(snd_diggweed,15,false);
        //instance_create(x,y,obj_vamp_Energy);
        //global.Inventory[slot_y,slot_x]=0;
        break;
        
        case 12:
        audio_play_sound(snd_diggweed,15,false);
        //global.Inventory[slot_y,slot_x]=0;
        break;
        
        case 13:
        if (par_HERO.buffs&lt;3) &amp;&amp; !instance_exists(obj_Time_Buff)
        {
        global.Inventory[slot_y,slot_x]=0;
        instance_create(x,y,obj_Time_Buff);
        }else{if !audio_is_playing(snd_diggweed) audio_play_sound(snd_diggweed,10,false);}
        break;
        
        case 14:
        global.Inventory[slot_y,slot_x]=0;
        luck-=1;
        par_HERO.luck=luck;
        with instance_create(x,y,obj_Powerup_A_FULL){color=c_red;}
        with instance_create(par_HERO.x,par_HERO.y,obj_RedEnergy)
        {
        Energy=10; 
        visible=false;
        }
        break;
        
        }


}

if (Key_Melee) //MOVE ITEM
{
if (!stored) &amp;&amp; (alarm[2]==-1) &amp;&amp; (global.Inventory[slot_y,slot_x]!=0)
    {
    //if(global.Inventory[slot_y,slot_x]!=0)
        //{
        inst = global.Inventory[slot_y,slot_x];
        from_y=slot_y;
        from_x=slot_x;
        stored=true;
        audio_play_sound(snd_PowerupB,10,false);
        alarm[2]=30;
        //}
    }
    
if (stored) &amp;&amp; (alarm[2]==-1)
    {
    //if(global.Inventory[slot_y,slot_x]==0)
        //{
        global.Inventory[from_y,from_x]=global.Inventory[slot_y,slot_x];
        global.Inventory[slot_y,slot_x]=inst;
        //global.Inventory[from_y,from_x]=0;
        stored=false;
        audio_play_sound(snd_gamestart,10,false);
        alarm[2]=30;
        //}
    }

}
}
else //If Finish
{
global.CutScene=false;
image_speed=-1;
if (image_index&lt;=0) instance_destroy();
}

}
else
{
instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{
offset=.8*1.5
}
else
{
offset=.8*1
}

recharge="1x";

switch(par_HERO.recharge=100)
{
case 150: recharge="1x"; break;
case 100: recharge="2x"; break;
case 50:  recharge="3x"; break;       
}


draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(fnt_Arcade);

draw_sprite_ext(sprite_index,image_index,(orig_x+120-4)*offset,(orig_y-space+4)*offset,offset,offset,0,c_black,.7);
draw_sprite_ext(sprite_index,image_index,(orig_x+120)*offset,(orig_y-space)*offset,offset,offset,0,c_white,1);
if (!finish)
{

draw_set_alpha(.5); draw_set_color(c_dkgray)
draw_roundrect((orig_x+180)*offset,(orig_y-24)*offset,(orig_x+360)*offset,(orig_y+121)*offset,false);
draw_set_alpha(.5); draw_set_color(c_white)
draw_roundrect((orig_x+180)*offset,(orig_y-24)*offset,(orig_x+360)*offset,(orig_y+121)*offset,true);
draw_set_alpha(1);


text_font=1.1;

draw_set_font(fnt_Arial);
draw_set_valign(fa_top);
//ROWS---------------
var a
var b

for (a=0;a&lt;=rows;a+=1)
{
    
    for (b=0;b&lt;=columns;b+=1)
    {
     draw_sprite_ext(spr_Inventory,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
    
      switch(global.Inventory[a,b])
        {    
        case 0:
        break;
        
        case 1:
        draw_sprite_ext(spr_icon_1_RedPotion_small,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Red Potion (small)",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Red Potion (small)",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Returns 40% #Health",text_font*offset,text_font*offset,image_angle );
        }       
        break;
        
        case 2:
        draw_sprite_ext(spr_icon_2_RedPotion,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Red Potion (large)",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Red Potion (large)",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Returns 100% #Health",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 3:
        draw_sprite_ext(spr_icon_3_YellowPotion_small,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Yellow Potion (small)",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Yellow Potion (small)",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Returns 50% #Energy",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 4:
        draw_sprite_ext(spr_icon_4_YellowPotion,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Yellow Potion (large)",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Yellow Potion (large)",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Returns 100% #Energy",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 5:
        draw_sprite_ext(spr_icon_5_Regen,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Regeneration",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Regeneration",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Regenerates Health",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 6:
        draw_sprite_ext(spr_icon_6_Shield,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Shield Boost",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Shield Boost",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Take half Damage",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 7:
        draw_sprite_ext(spr_icon_7_Warp_Boost,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Warp Boost",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Warp Boost",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Infinite Warping",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 8:
        draw_sprite_ext(spr_icon_8_Weapon_Boost,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Damage Boost",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Damage Boost",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Deals 50% more #Damage",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 9:
        draw_sprite_ext(spr_icon_6_Shield,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Shield Boost",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Shield Boost",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Take half Damage",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 10:
        draw_sprite_ext(spr_icon_10_Energy_Boost,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Energy Boost",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Energy Boost",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Regain Energy 2x faster#when held in inventory.#[Effect does not stack]",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 11:
        draw_sprite_ext(spr_icon_11_Energy_Mega_Boost,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Energy Mega Boost",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Energy Mega Boost",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Regain Energy 3x faster#when held in inventory.#[Effect does not stack]",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 12:
        draw_sprite_ext(spr_icon_12_Rebirth,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Resurrection",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Resurrection",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Resurrect upon #Defeat",text_font*offset,text_font*offset,image_angle );
        }
        break;
        
        case 13:
        draw_sprite_ext(spr_icon_13_Clock,0,(orig_x+(b*space))*offset,(orig_y+(a*space))*offset,offset,offset,image_angle,c_white,1);
        if (slot_x==b) &amp;&amp; (slot_y==a)
        {
        draw_set_font(fnt_Arial_Big); draw_set_color(c_black); draw_set_alpha(.5);
        draw_text_transformed((orig_x+(columns+1)*space-2)*offset,(orig_y-5+2)*offset,"Time Boost",offset,offset,image_angle );
        draw_set_color(c_white); draw_set_alpha(1);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5)*offset,"Time Boost",offset,offset,image_angle );
        draw_set_font(fnt_Arial);
        draw_text_transformed((orig_x+(columns+1)*space)*offset,(orig_y-5+(.5*space))*offset,"Extended Time Warp",text_font*offset,text_font*offset,image_angle );
        }

        break;
        
        case 14:
        break;
          
        
        }
    }
}



//Draw Cursor
draw_set_blend_mode(bm_add);
if (stored)
    draw_sprite_ext(spr_Inventory,2,x*offset,y*offset,offset,offset,image_angle,c_white,1); //move cursor
    else
    draw_sprite_ext(spr_Inventory,1,x*offset,y*offset,offset,offset,image_angle,c_white,1); //use cursor

draw_set_blend_mode(bm_normal);



//X-move A-Select

draw_sprite_ext(spr_xbox_X,0,(orig_x-10)*offset,(orig_y+(1+rows)*space)*offset,(.5)*offset,(.5)*offset,0,c_white,1);
draw_text_transformed((orig_x+6)*offset,(orig_y+(1+rows)*space)*offset,"- Move",offset,offset,image_angle );

draw_sprite_ext(spr_xbox_A,0,(orig_x+64)*offset,(orig_y+(1+rows)*space)*offset,(.5)*offset,(.5)*offset,0,c_white,1);
draw_text_transformed((orig_x+80)*offset,(orig_y+(1+rows)*space)*offset,"- Select",offset,offset,image_angle );
}//END IF NOT FINISH

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(fnt_Arcade);
draw_text(orig_x-16,orig_y-space,"Inventory" ); 

draw_set_font(fnt_Arial);

//ROWS---------------
var a
var b

for (a=0;a&lt;=rows;a+=1)
{
    
    for (b=0;b&lt;=columns;b+=1)
    {
     draw_sprite(spr_Inventory,0,orig_x+(b*space),orig_y+(a*space));
    
      switch(global.Inventory[a,b])
        {    
        case 0:
        break;
        
        case 1:
        draw_sprite(spr_icon_1_RedPotion_small,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Adds 40% # Health" );
        break;
        
        case 2:
        draw_sprite(spr_icon_2_RedPotion,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Adds 100% # Health" );
        break;
        
        case 3:
        draw_sprite(spr_icon_3_YellowPotion_small,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Adds 50% # Energy" );
        break;
        
        case 4:
        draw_sprite(spr_icon_4_YellowPotion,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Adds 100% # Energy" );
        break;
        
        case 5:
        draw_sprite(spr_icon_5_Regen,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Regenerate Health" );
        break;
        
        case 6:
        draw_sprite(spr_icon_6_Shield,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Enables Shield" );
        break;
        
        case 7:
        draw_sprite(spr_icon_7_Warp_Boost,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Recover Warp in 50% # less time" );
        break;
        
        case 8:
        draw_sprite(spr_icon_8_Weapon_Boost,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Adds 25% More # Damage" );
        break;
        
        case 9:
        draw_sprite(spr_icon_9_Sheied_Boost,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Adds 30% more # Shield" );
        break;
        
        case 10:
        draw_sprite(spr_icon_10_vamp_Health,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Absorb Health on # Melee Attacks" );
        break;
        
        case 11:
        draw_sprite(spr_icon_11_vamp_Energy,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Absorb Energy on # Melee Attacks" );
        break;
        
        case 12:
        draw_sprite(spr_icon_12_Rebirth,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Resurrect after # fallen" );
        break;
        
        case 13:
        draw_sprite(spr_icon_13_key,0,orig_x+(b*space),orig_y+(a*space));
        if (slot_x==b) &amp;&amp; (slot_y==a)
        draw_text(orig_x+(columns+1)*space,orig_y,"Small Key" );
        break;
        
          
        
        }
    }
}



//Draw Cursor
draw_set_blend_mode(bm_add);
if (stored)
    draw_sprite(spr_Inventory,2,x,y); //move cursor
    else
    draw_sprite(spr_Inventory,1,x,y); //use cursor

draw_set_blend_mode(bm_normal);



//X-move A-Select
draw_sprite(spr_xbox_X,0,orig_x-10,orig_y+(1+rows)*space);
draw_text(orig_x+6,orig_y+(1+rows)*space,"- Move" );

draw_sprite(spr_xbox_A,0,orig_x+64,orig_y+(1+rows)*space);
draw_text(orig_x+80,orig_y+(1+rows)*space,"- Select" );

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>200,29</point>
    <point>200,200</point>
  </PhysicsShapePoints>
</object>
