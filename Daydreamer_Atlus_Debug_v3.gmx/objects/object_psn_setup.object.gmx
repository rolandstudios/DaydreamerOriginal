<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// TODO: setup trophies
if( os_type == os_ps4 ) 
{
    var section = "PS4";
    global.playing_index=0;
    psn_load_modules();

    if(file_exists("options.ini"))
    {
        ini_open("options.ini");
    
        global.GamdID = ini_read_string(section,"nptitleid","");
        global.SecretID = ini_read_string(section,"nptitlesecret","");
        global.np_passphrase = ini_read_string(section,"nptitlepassphrase","");

        psn_init_np_libs(global.GamdID,global.SecretID,global.np_passphrase);       
    }
        if (global.GamdID=="CUSA04769_00") global.age=13; //USA
        if (global.GamdID=="CUSA05076_00") global.age=12; //EUROPE
        
        
        psn_set_content_restriction(global.age) //ESRB USA
        
        //psn_content_restriction_add("us", 13); //USA
        /*
        psn_content_restriction_add("ar", 12);
        psn_content_restriction_add("at", 12);
        psn_content_restriction_add("au", 12); //AUSTRALIA
        psn_content_restriction_add("be", 12);
        psn_content_restriction_add("ca", 12);
        psn_content_restriction_add("ch", 12);
        psn_content_restriction_add("cl", 12);
        psn_content_restriction_add("co", 12);
        psn_content_restriction_add("cy", 12);
        psn_content_restriction_add("cz", 12);
        psn_content_restriction_add("de", 12);
        psn_content_restriction_add("dk", 12);
        psn_content_restriction_add("es", 12);
        psn_content_restriction_add("fi", 12);
        psn_content_restriction_add("fr", 12);
        psn_content_restriction_add("gb", 12);
        psn_content_restriction_add("gr", 12);
        psn_content_restriction_add("hk", 12);
        psn_content_restriction_add("hr", 12);
        psn_content_restriction_add("hu", 12);
        psn_content_restriction_add("id", 12);
        psn_content_restriction_add("ie", 12);
        psn_content_restriction_add("il", 12);
        psn_content_restriction_add("in", 12);
        psn_content_restriction_add("is", 12);
        psn_content_restriction_add("it", 12);
        psn_content_restriction_add("jp", 12);
        psn_content_restriction_add("kr", 12);
        psn_content_restriction_add("kw", 12);
        psn_content_restriction_add("lb", 12);
        psn_content_restriction_add("lu", 12);
        psn_content_restriction_add("mt", 12);
        psn_content_restriction_add("mx", 12);
        psn_content_restriction_add("my", 12);
        psn_content_restriction_add("nl", 12);
        psn_content_restriction_add("no", 12);
        psn_content_restriction_add("nz", 12);
        psn_content_restriction_add("om", 12);
        psn_content_restriction_add("pe", 12);
        psn_content_restriction_add("pl", 12);
        psn_content_restriction_add("pt", 12);
        psn_content_restriction_add("qa", 12);
        psn_content_restriction_add("ro", 12);
        psn_content_restriction_add("ru", 12);
        psn_content_restriction_add("sa", 12);
        psn_content_restriction_add("se", 12);
        psn_content_restriction_add("sg", 12);
        psn_content_restriction_add("si", 12);
        psn_content_restriction_add("sk", 12);
        psn_content_restriction_add("th", 12);
        psn_content_restriction_add("tr", 12);
        psn_content_restriction_add("tw", 12);
        psn_content_restriction_add("ua", 12);
        psn_content_restriction_add("za", 12);
   */
        

    global.ps4_net_check_result = -1;
    global.ps4_old_net_check_result = global.ps4_net_check_result;
    var check = psn_check_np_availability(0, true);
    show_debug_message("psn_check_np_availability: " + string(check));   
     
    // gamepad init / PS trophy init   
    for(i=0;i&lt;gamepad_get_device_count();i++)
    {
        if (gamepad_is_connected(i))
        {
            psn_init_trophy(i);
            global.playing_index=i;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type == os_ps4)
{
    psn_tick_error_dialog();
    psn_tick();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type == os_ps4)
{
    show_debug_message("system event : " + json_encode(async_load));
    
    if (is_undefined(ds_map_find_value(async_load, "event_type"))) exit;

    if (async_load[? "event_type"] == "gamepad discovered" )
    {
        for(i=0;i&lt;gamepad_get_device_count();i++)
        {
            if (gamepad_is_connected(i))
            {
                psn_init_trophy(i);
                global.playing_index=i;
            }
        }
    }    
    if (async_load[? "event_type"] == "np_availability")
    {   
        global.ps4_net_check_result = async_load[? "result"];
        global.ps4_old_net_check_result = global.ps4_net_check_result;
        global.ps4_ethernet_available = false;
    
        if (global.ps4_net_check_result != 0)
        {
            global.ps4_ethernet_available = true;
            room_goto(rm_Intialize_Game)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type == os_ps4)
{
    if (is_undefined(async_load[? "id"])) exit;

    // 2004 really needs to be exposed as a constant
    // here it means the error dialog has been dismissed by the user
    if (async_load[? "id"] == 2004)
    {
        room_goto(rm_Intialize_Game)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
