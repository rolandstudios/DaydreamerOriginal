<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_Crate</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.SWAP_spr_Crate_Center_Single==0)
{
master.num+=1;
master.SWAP_spr_Crate_Center_Single=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Crate_Center_Single.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
sprite_collision_mask(global.sprite[master.num],  0, 2, 5, 10, 145, 157,0,225);
}
sprite_index=global.sprite[master.SWAP_spr_Crate_Center_Single];


ctl = instance_create(x,bbox_bottom+1,obj_Crate_Null);

hp=5;
breakable=true;
color=image_blend;
move=0;
loot=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(ctl)
{
if instance_exists(par_HERO)
{
if place_meeting(x,y-abs(ctl.vsp)-1,par_HERO) 
    {
    if (par_HERO.climbledge==true)  
        {
        par_HERO.climbledge=false;
        obj_camera_offset.Focus=false;
        obj_camera_offset.Seek=false;
        par_HERO.x=obj_camera_offset.x;
        par_HERO.y=obj_camera_offset.y;
        }
    }
}

instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_blend=color;
audio_play_sound(snd_EnemyHit_A,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(ctl)    
{
    instance_destroy();
}
else
{

if instance_exists(par_HERO)
{

if place_meeting(x,y-abs(ctl.vsp)-1,par_HERO) 
    {
    if (par_HERO.y&lt;y)
    par_HERO.y=par_HERO.y+ctl.vsp*global.game_speed   
    }
}

if place_meeting(x,y,par_Shoot) 
{

if (breakable)
{

if place_meeting(x,y,obj_Bomb) &amp;&amp; !place_meeting(x,y,obj_HERO_Melee)
{
    //DO NOTHING
}
else
{    
    var inst;
    inst = instance_place(x, y, par_Shoot);
    if (inst == noone)
    inst = instance_nearest(x, y, par_Shoot);
    
   
    if (alarm[0] &lt;=-1) 
    { 
    
    if (inst != noone) 
    {      
        hp=hp-inst.damage;                                             
    }
    else
    {
        hp=hp-3;
    }
        
      
    image_blend = c_red;
    alarm[0]=4; 
    }
    
    if (hp&lt;=0)
    {
        if (alarm[1]==-1)
        {
        with instance_create(x,y-50*image_yscale,obj_Explosion_A)
            {
            size=1;
            flash=false;
            if (irandom_range(1,3)==1) tempo=false;
            loot=other.loot;
            }
        
        alarm[1]=20; // DELAY FOR RED SCANLINES
        }
    }
}

}    
    
    
    
}


if (ctl.vsp&gt;0)
    {
    if place_meeting(x,y+ctl.vsp,par_HERO)
        {            
            if (par_HERO.climbledge) &amp;&amp; (par_HERO.y&lt;y)
            {
                //DO NOTHING
            }
            else
            {
                if (alarm[1]==-1)
                {
                with instance_create(x,y-50*image_yscale,obj_Explosion_A)
                    {
                    size=1;
                    flash=false;
                    if (irandom_range(1,3)==1) tempo=false;
                    loot=other.loot;
                    }
                
                alarm[1]=20; // DELAY FOR RED SCANLINES
                }
            }
        }
        
    if place_meeting(x,y+ctl.vsp,obj_Lurker)
        {
        var inst
        inst=instance_place(x,y,obj_Lurker)
        if (inst!=noone)
            {
            if (inst.y&gt;y) inst.hp=0;
            } 
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[1]==-1)
{
    if sprite_exists(sprite_index) draw_self();
}
else
{
    move+=0.1*global.game_speed;     
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    //image_blend=c_white;  draw_self();    
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,70);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    image_blend=c_red; draw_self();
    image_blend=c_white;    
    shader_reset();
}    

if (global.debug)
{

draw_rectangle_colour(
    x-sprite_get_xoffset(sprite_index)*image_xscale+sprite_get_bbox_left(sprite_index)*image_xscale,
    y-sprite_get_yoffset(sprite_index)*image_yscale+sprite_get_bbox_top(sprite_index)*image_yscale,
    x-sprite_get_xoffset(sprite_index)*image_xscale+sprite_get_bbox_right(sprite_index)*image_xscale,
    y-sprite_get_yoffset(sprite_index)*image_yscale+sprite_get_bbox_bottom(sprite_index)*image_yscale,
c_red,c_red,c_red,c_red,false);
}    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>84,84</point>
  </PhysicsShapePoints>
</object>
