<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>par_Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create Target
if(master.spr_Collector_Fire==0)
{
master.num+=1;
master.spr_Collector_Fire=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Collector_Fire.png",23,0,1,88,146);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}
sprite_index=global.sprite[master.spr_Collector_Fire];
image_speed=.4*global.game_speed;
type=2;
damage=5*global.difficulty;
phase=1;
hit=false;
image_xscale=.75;
image_yscale=.75;
setspeed=1;
hold_on=false;
halt=false;
alarm[0]=200;//SELF DESTRUCT

if instance_exists(par_HERO)
{
    if (par_HERO.x&gt;x) 
        {
        west_east=1; 
        direction=360;
        }
        else 
        {
        west_east=-1;
        direction=180;
        }
        
    var targ_x=par_HERO.x;
    var targ_y=par_HERO.y;
    
    target_x[1]=(x+targ_x)*.5;
    target_y[1]=targ_y;
    
    target_x[2]=targ_x;
    target_y[2]=targ_y+400;
    
    target_x[3]=targ_x+400*west_east;
    target_y[3]=targ_y;
    
    target_x[4]=targ_x+400*west_east;
    target_y[4]=targ_y;
    
    target_direction=direction;
    last_target_direction=direction;
    last_direction=direction; 
    
}
else
{
    instance_destroy();
}
        

        last_x_A=x;
        last_y_A=y;

        
        last_x_B=x;
        last_y_B=y;
        
        
        last_x_C=x;
        last_y_C=y;
        
        
        last_x_D=x;
        last_y_D=y;
        
        
        last_x_E=x;
        last_y_E=y;
        
        
        last_x_F=x;
        last_y_F=y;
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with instance_create(x,y,obj_StarBurst)
            {
            image_xscale=2*other.image_xscale;
            image_yscale=2*other.image_yscale;
            image_angle=irandom_range(1,360);
            depth=-2;
            }
if !instance_exists(obj_Aura_Ripple_stat)
instance_create(par_HERO.x,par_HERO.y,obj_Aura_Ripple_stat);
            
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x,y,obj_Aura_Ripple_stat);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

switch(phase)
{
case 1:// Phase 1 ------------------------------
//if (setspeed&gt;3)setspeed-=.5;
setspeed=setspeed*1.1;
if (image_xscale&gt;.5) image_xscale-=.01;
image_yscale=image_xscale;

break;

case 2:
if (halt)
{
if (setspeed&gt;2)
setspeed*=halt_speed;
else
halt=false;
}
else
{
setspeed=setspeed*1.1;
}
if (image_xscale&lt;.75) image_xscale+=.05;
image_yscale=image_xscale;
break;

case 3:
setspeed=setspeed*1.1;
if (image_xscale&lt;.75) image_xscale+=.05;
image_yscale=image_xscale;
break;

}

//Check if Made Target ------------------------------------------
if (y&lt;target_y[phase]+100) &amp;&amp; (y&gt;target_y[phase]-100) 
{
    if (x&lt;target_x[phase]+100) &amp;&amp; (x&gt;target_x[phase]-100) 
        {
        phase+=1;
        if (phase&gt;3) instance_destroy();
        if (phase==2) {halt=true;}//setspeed=2;
        //audio_play_sound(snd_Got_special_A,10,false);
        }
}

//Speed----------------------------------------------------------

if (west_east==1)
{
last_direction = target_direction;
target_direction = point_direction(x,y,target_x[phase],target_y[phase]);
if (target_direction&lt;180) target_direction+=360;
target_direction = (last_direction + target_direction)/2;
target_direction = (last_direction + target_direction)/2;
direction = (last_direction + target_direction)/2;
}
else
{
target_direction = point_direction(x,y,target_x[phase],target_y[phase]);
last_direction = (direction + target_direction)/2;
direction = (direction + last_direction)/2;
}

image_speed=.4*global.game_speed;
speed=setspeed*global.game_speed;
//Trail ------------------------

        last_x_F=last_x_E;
        last_y_F=last_y_E;
            

        last_x_E=last_x_D;
        last_y_E=last_y_D;
        
        
        last_x_D=last_x_C;
        last_y_D=last_y_C;
        
        
        last_x_C=last_x_B;
        last_y_C=last_y_B;
        
        
        
        last_x_B=last_x_A;
        last_y_B=last_y_A;
        
        
        last_x_A=x;
        last_y_A=y;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_HERO">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!hit)
{
instance_create(x,y,obj_ScreenFlash);
instance_create(par_HERO.x,par_HERO.y,obj_Aura_Ripple_stat);
hit=true;
instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_blend_mode(bm_add);
//image_alpha=.5;

//draw_sprite_ext(spr_LockON,0, target_x[1], target_y[1],3,3,0,c_white,.2);
//draw_sprite_ext(spr_LockON,0, target_x[2], target_y[2],3,3,0,c_white,.2);
//draw_sprite_ext(spr_LockON,0, target_x[3], target_y[3],3,3,0,c_white,.2);

//draw_text(x+50,y,string(direction));

if sprite_exists(sprite_index)
{
if(phase&gt;=2)
{
draw_set_blend_mode(bm_normal);
draw_sprite_ext(sprite_index, image_index-6,last_x_F, last_y_F, image_xscale*.4, image_yscale*.4, 0, c_white, .15 );
draw_sprite_ext(sprite_index, image_index-2,last_x_B, last_y_B, image_xscale*.5, image_yscale*.4, 0, c_white, .2 );
draw_sprite_ext(sprite_index, image_index-4,last_x_D, last_y_D, image_xscale*.6, image_yscale*.6, 0, c_white, .3 );
draw_sprite_ext(sprite_index, image_index-3,last_x_C, last_y_C, image_xscale*.7, image_yscale*.7, 0, c_white, .4 );
draw_sprite_ext(sprite_index, image_index-2,last_x_B, last_y_B, image_xscale*.8, image_yscale*.8, 0, c_white, .5 );
draw_sprite_ext(sprite_index, image_index-1,last_x_A, last_y_A, image_xscale*.9, image_yscale*.9, 0, c_white, .6 );

draw_sprite_ext(sprite_index, image_index,x,y,image_xscale,image_yscale,0,c_white,image_alpha);
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index,x,y,image_xscale,image_yscale,0,c_white,.1);
draw_set_blend_mode(bm_normal);
}
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
