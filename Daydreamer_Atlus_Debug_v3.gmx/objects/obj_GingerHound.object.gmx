<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------

offset=10;
if(master.spr_GH_Explode==0)
{
master.num+=1;
master.spr_GH_Explode=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_GH_Explode.png",19,1,1,310,264);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GH_Bite==0)
{
master.num+=1;
master.spr_GH_Bite=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_GH_Bite.png",16,1,1,504,293);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GH_Idle==0)
{
master.num+=1;
master.spr_GH_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_GH_Idle.png",23,1,1,293,199);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GH_Pounce==0)
{
master.num+=1;
master.spr_GH_Pounce=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_GH_Pounce.png",30,1,1,407,352);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GH_Run==0)
{
master.num+=1;
master.spr_GH_Run=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_GH_Run.png",16,1,1,355,291);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GH_Turn==0)
{
master.num+=1;
master.spr_GH_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_GH_Turn.png",16,1,1,302,291);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_GH_Blast==0)
{
master.num+=1;
master.spr_GH_Blast=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_GH_Blast.png",30,1,1,329,268);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_Debris_Cloud==0)
{
master.num+=1;
master.spr_Debris_Cloud=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Debris_Cloud.png",56,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
sprite_collision_mask(global.sprite[master.num],  0, 2, 100, 90, 135, 125,2,225);
}



/*

if(sprite_get_yoffset(global.spr_GH_Walk)!=260)
global.spr_GH_Walk=sprite_add(working_directory+"\Imports\spr_GH_Walk.png",18,1,1,312,260);
sprite_index=global.spr_GH_Walk;
//sprite_collision_mask(global.spr_GH_Walk, 0, 2, 296-offset, 263+12*offset, 296+offset, 263+14*offset,2,225);
sprite_collision_mask(global.spr_GH_Walk, 1, 0, 0, 0, sprite_width, sprite_height,0,225);
*/


instance_create(x,y,obj_GingerHound_view);

//-----------------------------------

image_speed=.5;
damage=10*global.difficulty;
hp=720;
moveChoose=true;
moveChoice=1;
swing_range = false;
hsp=0;
vsp=0;
grav=2;
scale=1;
image_xscale=scale;
image_yscale=scale;
jumpspeed=8;
west_east = 0;

hero_hp=0;
hero_damage=0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) 
{
global.world_clear[10]=1;

    //STEAM
    if (global.platform==0)
    {
        if !steam_get_achievement("ach_Defeat_FlameFreak") 
            steam_set_achievement("ach_Defeat_FlameFreak");
    }
    //XBOX ONE
    if (global.platform==1)
    {  
        scr_XboxOne_Achievement(16);                                          
    } 
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(16);                                   
    } 
    
with instance_create(x,y,obj_CheckPoint){World=10.5;Boss=true;}

//const=500/(4*60); //MIN CONSTANT
damage_bonus=round((125-hero_damage)*4);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=500;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus;  
    boss_num=10;   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_EnemyHit_A</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>543</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if !instance_exists(obj_GingerHound_view) instance_destroy();
sprite_index=spr_collide;

if instance_exists(obj_camera_offset_dummy)
{
obj_camera_offset_dummy.y_offset=-175;
}


//CheckSwingRange
if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - 180) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + 180) 
 {
 swing_range = true;
 }
 else
 {
 swing_range = false;
 }

 
//Check Direction --------------------------------------------------
if (par_HERO.x &gt; x)
{
    if(moveChoice==1) || (moveChoice==3) || (moveChoose==true)
    {
    
    if (moveChoice==1) hsp=0;
    if (moveChoice==2) hsp=0;
    if (moveChoice==3) hsp=10;
     if(west_east == 0)
        {
         //alarm[0]=-1;
         alarm[0]=2000/global.game_speed;
         moveChoose=false;
         moveChoice=6;
         obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Turn];
         obj_GingerHound_view.image_speed=.7*global.game_speed;
         obj_GingerHound_view.image_index=0;
         hsp=0;
         }
         else
         {
         west_east = 1;
         image_xscale = -scale;
         }
    }
    
}

if (par_HERO.x &lt; x) 
{
    if(moveChoice==1) || (moveChoice==3) || (moveChoose==true)
    {
    
    if (moveChoice==1) hsp=0;
    if (moveChoice==2) hsp=-3;
    if (moveChoice==3) hsp=-10;
    if(west_east == 1)
        {
         //alarm[0]=-1;
         alarm[0]=2000/global.game_speed;
         moveChoose=false;
         moveChoice=6;
         sprite_index = global.sprite[master.spr_GH_Turn];
         obj_GingerHound_view.image_speed=.7*global.game_speed;
         obj_GingerHound_view.image_index=0;
         hsp=0;
         audio_sound_pitch(snd_Troll_Growl,global.game_speed);
         audio_play_sound(snd_Troll_Growl, 10, false); 
         }
         else
         {
            west_east = 0;
            image_xscale = scale;
         }
    }
   
}
// END CHECK DIRECTION ----------------------------------------------------- 

 
 if(moveChoose==true)
    {   
                
        
        audio_stop_sound(snd_Gallope);
        
         n=irandom_range(1, 5);
         while(n==moveChoice){n=irandom_range(1, 5);}
            moveChoice=n;
        
         
         //Initiallize the Move
        switch(moveChoice)
            {
            case 1:
            obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Idle];
            obj_GingerHound_view.image_speed=.5*global.game_speed;
            obj_GingerHound_view.image_index=0;
            alarm[0]=40/global.game_speed;
            break;
            
            case 2:
            obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Blast];
            obj_GingerHound_view.image_speed=.5*global.game_speed;
            obj_GingerHound_view.image_index=0;
            //alarm[0]=100;
            break;
            
            case 3:
            obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Run];
            obj_GingerHound_view.image_speed=.5*global.game_speed;
            obj_GingerHound_view.image_index=0;
            audio_sound_pitch(snd_Gallope,global.game_speed);
            audio_play_sound(snd_Gallope,10,true);
            
            alarm[0]=100/global.game_speed;
            break;
            
            case 4:
            obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Bite];
            obj_GingerHound_view.image_speed=.5*global.game_speed;
            obj_GingerHound_view.image_index=0;
            audio_sound_pitch(snd_monster_bite,global.game_speed);
            audio_play_sound(snd_monster_bite, 10, false); 
            break;
            
            
            case 5:
            alarm[0]=2000/global.game_speed;
            obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Pounce];
            obj_GingerHound_view.image_speed=.5*global.game_speed;
            obj_GingerHound_view.image_index=0;
            //vsp=-16;
            if (par_HERO.x &gt; x)
                {
                image_xscale = -scale;
                jumpspeed=20; 
                }
                else 
                {
                image_xscale = scale;
                jumpspeed=-20;
                }
            break;
            
            
            }
        moveChoose=false;            
    }



if(swing_range) 
{
 if(moveChoice&lt;5)
 {
 if(obj_GingerHound_view.sprite_index != global.sprite[master.spr_GH_Bite])
    {
    obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Bite];
    obj_GingerHound_view.image_speed=.5*global.game_speed;
    obj_GingerHound_view.image_index=0;
    moveChoose=false;
    moveChoice=4;
    }
 }
}
    
switch(moveChoice)
{

case 1: //Stand

    obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Idle]; 
    obj_GingerHound_view.image_speed=.5*global.game_speed;          
    obj_GingerHound_view.image_speed = .5*global.game_speed;
    damage=5*global.difficulty;
    hsp=0;
    vsp=0;
    

break;


case 2: //Blast

    obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Blast]; 
    obj_GingerHound_view.image_speed=.5*global.game_speed;          
    damage=5*global.difficulty;
    vsp=0;
    hsp=0;
    if (obj_GingerHound_view.image_index==1) {audio_sound_pitch(snd_Ginger_Breath,global.game_speed);audio_play_sound(snd_Ginger_Breath,10,false);}
    if (obj_GingerHound_view.image_index&gt;22) obj_GingerHound_view.image_speed=.35*global.game_speed;
    
    if (obj_GingerHound_view.image_index&gt;8) &amp;&amp; (obj_GingerHound_view.image_index&lt;22)
    {
    repeat(4)
    {
    with instance_create(x-205*image_xscale,y-20*image_yscale-obj_GingerHound_view.image_index,obj_Ginger_Breath)
        {
        alpha=.55-(obj_GingerHound_view.image_index*.01);
          
        if(other.image_xscale&lt;0)
            {
            direction=340;
            cw=false;
            }
            else
            {
            direction=200;
            cw=true;
            }
        }
    }
    }
    
    alarm[0]=100/global.game_speed;
    if (obj_GingerHound_view.image_index&gt;=(sprite_get_number(obj_GingerHound_view.sprite_index)-1)) 
        moveChoose=true;
break;

case 3: //Run

    obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Run]; 
    obj_GingerHound_view.image_speed=.7*global.game_speed;     
    audio_sound_pitch(snd_Gallope,global.game_speed);     
    damage=7*global.difficulty;
    vsp=0;
        
break;

case 4: //Bite

    
    obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Bite]; 
    obj_GingerHound_view.image_speed = .5*global.game_speed;
    damage=12*global.difficulty;
    hsp=0;
    vsp=0;    
    if (obj_GingerHound_view.image_index==8) instance_create(x,y,obj_Aura_Ripple_stat_short)
    if (obj_GingerHound_view.image_index&gt;=15) moveChoose=true;

break;

case 5: //Jump
    
    obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Pounce]; 
    obj_GingerHound_view.image_speed = .5*global.game_speed;
    damage=7*global.difficulty;
    
    if (obj_GingerHound_view.image_index&lt;8)
    {
    hsp=0;
    
    }
    
    if (obj_GingerHound_view.image_index==8)
    {
    hsp=jumpspeed;
    //vsp=-24;
    vsp=-36;
    }
    
    if (obj_GingerHound_view.image_index&gt;8)
    {
    hsp=jumpspeed;
    obj_GingerHound_view.image_speed=.33*global.game_speed;
    }
    
    if (obj_GingerHound_view.image_index&gt;23)
     {
     if(!place_meeting(x+hsp,y+10,par_wall))
        {
        obj_GingerHound_view.image_speed=0;
        hsp=jumpspeed;//*.25;
        jumpspeed=jumpspeed*.95;
        vsp=5;
        }
        else
        {
        obj_GingerHound_view.image_speed=.5;
        hsp=0;
        } 
        
     }
    if (obj_GingerHound_view.image_index&gt;=22) 
            {
            if !instance_exists(obj_Screen_Shake)
                {
                audio_sound_pitch(snd_TrollLand,global.game_speed);
                audio_play_sound(snd_TrollLand, 10, false);         
                instance_create(x,y,obj_Aura_Ripple_stat_short);                      
                with instance_create(x,y,obj_Screen_Shake){quake=false; hold=30; wave=true; max_range=irandom_range(8,20);}
                }
            }
            
    if (obj_GingerHound_view.image_index&gt;=29) moveChoose=true;
break;

case 6: //Turn
obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Turn]; 
obj_GingerHound_view.image_speed=.7*global.game_speed;
 if (obj_GingerHound_view.image_index&gt;=15)
    {
    moveChoose=true;
    if (west_east==0) west_east = 1; else west_east = 0;
    
    obj_GingerHound_view.sprite_index = global.sprite[master.spr_GH_Idle];  //edit
    obj_GingerHound_view.image_index = 0; //edit
    image_xscale = -image_xscale; //edit
    obj_GingerHound_view.image_xscale=image_xscale;
    }
break;
}

vsp = vsp + grav*global.game_speed;


//Collisions ------------------------------------------------------------



//Horizontal Collision ------------------------------


if place_meeting(x+hsp,y,par_wall) 
{
if !place_meeting(x+hsp,y,obj_platform_128x4)
{
    
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp = 0;        
    }
    else
        {
        y=y-yplus;
        }
    
}
}

x = x + hsp*global.game_speed;

//Vertical Collision ------------------------------

if place_meeting(x,y+vsp,par_wall) 
{ 
if  !place_meeting(x,y+vsp,obj_platform_128x4)
{
if !place_free(x,y+vsp) 
 {    
    while (!place_meeting(x,y+sign(vsp),par_wall)) y=y+sign(vsp);
     

     
    if (sign(vsp) == 1)
    {
        grounded = 1; //Enable First Jump
        
    }
    
    vsp = 0;
 }
}    
}
else
{
   grounded = 0;
}

y = y + vsp*global.game_speed;


if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_Shoot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp=hp-par_Shoot.damage;
if (alarm[3] &lt;=-1)
{
alarm[3]=4; 
image_blend = c_red;
}

if (hp&lt;=0)
{
image_speed=0;
hsp=0;
image_blend = c_red;
if (!instance_exists(obj_Explosion_A)) instance_create(x,y,obj_Explosion_A);
instance_destroy();
if instance_exists (obj_GingerHound_view)  with (obj_GingerHound_view){instance_destroy();}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if sprite_exists(sprite_index) draw_self();
}}
//Draw Disk Collision Mask
//draw_ellipse(x-sprite_xoffset, y-sprite_yoffset, x-sprite_xoffset+sprite_width, y-sprite_yoffset+sprite_height, true);
//draw_ellipse(x-sprite_xoffset+sprite_width*.35, y-sprite_yoffset+sprite_height*.25, x-sprite_xoffset+sprite_width*.65, y-32-sprite_yoffset+sprite_height, true);
//draw_ellipse(x-offset, y+10*offset, x+offset, y+12*offset, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>296,263</point>
    <point>277,277</point>
  </PhysicsShapePoints>
</object>
