<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_LockON</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type=1;
rate=8;
active=false;
hold=0;
follow=false;
following=true;

grow=0;

start_x=x;
start_y=y;

end_x=x;
end_y=y;

fade_up=true;
fade=0;
fade_max=.4;
text="";

switch(type)
{
case 1: // EAST
part_A_x=start_x+50;
part_A_y=start_y-25;
part_B_x=start_x+100;
part_B_y=start_y-25;
part_C_x=start_x+150;
part_C_y=end_y;
part_D_x=end_x;
part_D_y=end_y;

for (i=0;i&lt;9;i+=1)
{
    arrow_x[i]=start_x+50;
    arrow_y[i]=start_y-25;
    arrow_scale[i]=.25;
    arrow_angle[i]=0;
    arrow_part[i]=1;
}
    
inc=0;
break;

case 2: //UP
part_A_x=start_x;
part_A_y=start_y-100;

part_B_x=start_x;
part_B_y=start_y-150;

part_C_x=end_x;
part_C_y=start_y-200;

part_D_x=end_x;
part_D_y=end_y;

for (i=0;i&lt;9;i+=1)
{
    arrow_x[i]=start_x+50;
    arrow_y[i]=start_y-25;
    arrow_scale[i]=.25;
    arrow_angle[i]=0;
    arrow_part[i]=1;
}   

inc=0;
break;

case 3: // WEST
part_A_x=start_x-50;
part_A_y=start_y-25;
part_B_x=start_x-100;
part_B_y=start_y-25;
part_C_x=start_x-150;
part_C_y=end_y;
part_D_x=end_x;
part_D_y=end_y;


for (i=0;i&lt;9;i+=1)
{
    arrow_x[i]=start_x-50;
    arrow_y[i]=start_y-25;
    arrow_scale[i]=.25;
    arrow_angle[i]=0;
    arrow_part[i]=1;
}
    
inc=0;
break;

case 4: //SOUTH
part_A_x=start_x;
part_A_y=start_y+75;

part_B_x=start_x;
part_B_y=start_y+175;

part_C_x=end_x;
part_C_y=start_y+225;

part_D_x=end_x;
part_D_y=end_y;

for (i=0;i&lt;9;i+=1)
{
    arrow_x[i]=start_x+50;
    arrow_y[i]=start_y-25;
    arrow_scale[i]=.25;
    arrow_angle[i]=0;
    arrow_part[i]=1;
}   

inc=0;
break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fade_up=false;
//instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x,y,par_HERO)
{
active=true;
}
else
{
active=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(fade_up==false)
{
    if (fade&gt;0) fade-=.01;
    if (fade&lt;=0) instance_destroy();
}

if (active)
{
if (alarm[0]==-1) 
    {
    if (hold!=0)
    alarm[0]=hold;
    }
draw_set_color(c_red);
draw_set_alpha(fade);
draw_set_blend_mode(bm_add);

if(fade_up==true)
{
    if (fade&lt;fade_max) fade+=.01;
}

grow+=.25*global.game_speed;

switch(type)
{

case 1: //EAST-----------------------------------------------------------------------------------------------------------------

      for(i=9;i&gt;0;i-=1)
      {
        arrow_x[i]=arrow_x[i-1];
        arrow_y[i]=arrow_y[i-1];
        arrow_scale[i]=arrow_scale[i-1]
        arrow_angle[i]=arrow_angle[i-1];
        arrow_part[i]=arrow_part[i-1];      
      } 
   
//SET POINTS ----------------------------------

if (following)
{
part_A_x=start_x+50;//+abs(par_HERO.hsp);
part_A_y=start_y-25;//+par_HERO.vsp;
part_B_x=start_x+100;//+abs(par_HERO.hsp);
part_B_y=start_y-25;//+par_HERO.vsp;
part_C_x=start_x+150;//+abs(par_HERO.hsp);
part_C_y=end_y;
part_D_x=end_x;
part_D_y=end_y;
if (follow==false) following=false;
}

//DRAWLINES -----------------------------------
//PART A
draw_line(part_A_x,part_A_y,part_B_x,part_B_y);
//PART B
draw_line(part_B_x,part_B_y,part_C_x,part_C_y);
//PART C
draw_line(part_C_x,part_C_y,part_D_x,part_D_y);
//DRAW ARROWS ---------------------------------

    var dist
  
    if (arrow_part[0]==1)
    {
        inc+=rate;//+abs(par_HERO.hsp);
        arrow_x[0]=part_A_x+inc;
        arrow_angle[0]=0;
        arrow_y[0]=part_A_y;
        
        if (arrow_x[0]&gt;part_B_x) 
            {
            arrow_part[0]=2;
            inc=0;
            }        
    }
    
   if (arrow_part[0]==2)
    {
        arrow_angle[0]=point_direction(part_B_x,part_B_y,part_C_x,part_C_y);
        inc+=rate;//+abs(par_HERO.hsp);
        
        
        arrow_x[0]=part_B_x+lengthdir_x(inc, arrow_angle[0]);
        arrow_y[0]=part_B_y+lengthdir_y(inc, arrow_angle[0]);
        
        
        if (arrow_x[0]&gt;part_C_x)  
            {
                inc=0;
                arrow_part[0]=3;
            }
    }
    
    if (arrow_part[0]==3)
    { 
        inc+=rate;//+abs(par_HERO.hsp);
        arrow_x[0]=part_C_x + inc;
        arrow_angle[0]=0;
        arrow_y[0]=part_C_y;
        
        if (arrow_x[0]&gt;part_D_x) || (arrow_x[0]&gt;view_xview+1280) 
            {
            arrow_part[0]=1;
            arrow_x[0]=start_x+50;
            arrow_y[0]=start_y;
            arrow_scale[0]=.2;
            arrow_angle[0]=0;
            inc=0;      
            }
    }
            
    if (arrow_scale[0]&lt;.8) arrow_scale[0]+=.02;
    
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[9],arrow_y[9], arrow_scale[9], arrow_scale[9],arrow_angle[9],c_red,.1);                
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[8],arrow_y[8], arrow_scale[8], arrow_scale[8],arrow_angle[8],c_red,.2);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[7],arrow_y[7], arrow_scale[7], arrow_scale[7],arrow_angle[7],c_red,.3); 
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[6],arrow_y[6], arrow_scale[6], arrow_scale[6],arrow_angle[6],c_red,.4);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[5],arrow_y[5], arrow_scale[5], arrow_scale[5],arrow_angle[5],c_red,.5);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[4],arrow_y[4], arrow_scale[4], arrow_scale[4],arrow_angle[4],c_red,.6);
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[3],arrow_y[3], arrow_scale[1], arrow_scale[1],arrow_angle[1],c_red,.7); 
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[2],arrow_y[2], arrow_scale[2], arrow_scale[2],arrow_angle[1],c_red,.8);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[1],arrow_y[1], arrow_scale[1], arrow_scale[1],arrow_angle[1],c_red,.9);
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[0],arrow_y[0], arrow_scale[0], arrow_scale[0],arrow_angle[0],c_white,1);
    draw_sprite_ext(spr_Trail_Arrow,0,part_A_x,part_A_y, .25, .25,0,c_white,1);
    draw_sprite_ext(spr_Trail_Arrow,0,part_D_x,part_D_y, .25, .25,0,c_white,1);
        
    draw_set_alpha(1);
    draw_set_font(fnt_Orbitron);
    draw_set_halign(fa_center);
    draw_text_transformed(part_A_x-50,part_A_y,string(text),1+sin(grow)*.1,1+sin(grow)*.1,0);
            
break;//--------------------------------------------------------------------------------------------------------------------------



case 2: //NORTH-----------------------------------------------------------------------------------------------------------------

      for(i=9;i&gt;0;i-=1)
      {
        arrow_x[i]=arrow_x[i-1];
        arrow_y[i]=arrow_y[i-1];
        arrow_scale[i]=arrow_scale[i-1]
        arrow_angle[i]=arrow_angle[i-1];
        arrow_part[i]=arrow_part[i-1];      
      } 
   
//SET POINTS ----------------------------------
if (following)
{
part_A_x=start_x;
part_A_y=start_y-100;

part_B_x=start_x;
part_B_y=start_y-150;

part_C_x=end_x;
part_C_y=start_y-200;

part_D_x=end_x;
part_D_y=end_y;
if (follow==false) following=false;
}
//DRAWLINES -----------------------------------
//PART A
draw_line(part_A_x,part_A_y,part_B_x,part_B_y);
//PART B
draw_line(part_B_x,part_B_y,part_C_x,part_C_y);
//PART C
draw_line(part_C_x,part_C_y,part_D_x,part_D_y);
//DRAW ARROWS ---------------------------------

    var dist
  
    if (arrow_part[0]==1)
    {
        inc+=rate;//+abs(par_HERO.vsp);
        arrow_y[0]=part_A_y-inc;
        arrow_angle[0]=90;
        arrow_x[0]=part_A_x;
        
        if (arrow_y[0]&lt;part_B_y) 
            {
            arrow_part[0]=2;
            inc=0;
            }        
    }
    
   if (arrow_part[0]==2)
    {
        arrow_angle[0]=point_direction(part_B_x,part_B_y,part_C_x,part_C_y);
        inc+=rate;//+abs(par_HERO.vsp);
        
        
        arrow_x[0]=part_B_x+lengthdir_x(inc, arrow_angle[0]);
        arrow_y[0]=part_B_y+lengthdir_y(inc, arrow_angle[0]);
        
        
        if (arrow_y[0]&lt;part_C_y)  
            {
                inc=0;
                arrow_part[0]=3;
            }
    }
    
    if (arrow_part[0]==3)
    { 
        inc+=rate;//+abs(par_HERO.vsp);
        arrow_y[0]=part_C_y - inc;
        arrow_angle[0]=90;
        arrow_x[0]=part_C_x;
        
        if (arrow_y[0]&lt;part_D_y) || (arrow_y[0]&lt;view_yview-100) 
            {
            arrow_part[0]=1;
            arrow_x[0]=start_x;
            arrow_y[0]=start_y-100;
            arrow_scale[0]=.2;
            arrow_angle[0]=90;
            inc=0;      
            }
    }
            
    if (arrow_scale[0]&lt;.8) arrow_scale[0]+=.02;
    
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[9],arrow_y[9], arrow_scale[9], arrow_scale[9],arrow_angle[9],c_red,.1);                
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[8],arrow_y[8], arrow_scale[8], arrow_scale[8],arrow_angle[8],c_red,.2);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[7],arrow_y[7], arrow_scale[7], arrow_scale[7],arrow_angle[7],c_red,.3); 
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[6],arrow_y[6], arrow_scale[6], arrow_scale[6],arrow_angle[6],c_red,.4);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[5],arrow_y[5], arrow_scale[5], arrow_scale[5],arrow_angle[5],c_red,.5);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[4],arrow_y[4], arrow_scale[4], arrow_scale[4],arrow_angle[4],c_red,.6);
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[3],arrow_y[3], arrow_scale[1], arrow_scale[1],arrow_angle[1],c_red,.7); 
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[2],arrow_y[2], arrow_scale[2], arrow_scale[2],arrow_angle[1],c_red,.8);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[1],arrow_y[1], arrow_scale[1], arrow_scale[1],arrow_angle[1],c_red,.9);
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[0],arrow_y[0], arrow_scale[0], arrow_scale[0],arrow_angle[0],c_white,1);
    draw_sprite_ext(spr_Trail_Arrow,0,part_A_x,part_A_y, .25, .25,90,c_white,1);
    draw_sprite_ext(spr_Trail_Arrow,0,part_D_x,part_D_y, .25, .25,90,c_white,1);
    
    draw_set_alpha(1);
    draw_set_font(fnt_Orbitron);
    draw_set_halign(fa_center);
    draw_text_transformed(part_A_x,part_A_y+50,string(text),1+sin(grow)*.1,1+sin(grow)*.1,0);
            
break;//--------------------------------------------------------------------------------------------------------------------------


case 3: //WEST-----------------------------------------------------------------------------------------------------------------

      for(i=9;i&gt;0;i-=1)
      {
        arrow_x[i]=arrow_x[i-1];
        arrow_y[i]=arrow_y[i-1];
        arrow_scale[i]=arrow_scale[i-1]
        arrow_angle[i]=arrow_angle[i-1];
        arrow_part[i]=arrow_part[i-1];      
      } 
   
//SET POINTS ----------------------------------
if (following)
{
part_A_x=start_x-50;
part_A_y=start_y-25;
part_B_x=start_x-100;
part_B_y=start_y-25;
part_C_x=start_x-150;
part_C_y=end_y;
part_D_x=end_x;
part_D_y=end_y;
if (follow==false) following=false;
}
//DRAWLINES -----------------------------------
//PART A
draw_line(part_A_x,part_A_y,part_B_x,part_B_y);
//PART B
draw_line(part_B_x,part_B_y,part_C_x,part_C_y);
//PART C
draw_line(part_C_x,part_C_y,part_D_x,part_D_y);
//DRAW ARROWS ---------------------------------

    var dist
  
    if (arrow_part[0]==1)
    {
        inc+=rate;//+abs(par_HERO.hsp);
        arrow_x[0]=part_A_x-inc;
        arrow_angle[0]=180;
        arrow_y[0]=part_A_y;
        
        if (arrow_x[0]&lt;part_B_x) 
            {
            arrow_part[0]=2;
            inc=0;
            }        
    }
    
   if (arrow_part[0]==2)
    {
        arrow_angle[0]=point_direction(part_B_x,part_B_y,part_C_x,part_C_y);
        inc+=rate;//+abs(par_HERO.hsp);
        
        
        arrow_x[0]=part_B_x+lengthdir_x(inc, arrow_angle[0]);
        arrow_y[0]=part_B_y+lengthdir_y(inc, arrow_angle[0]);
        
        
        if (arrow_x[0]&lt;part_C_x)  
            {
                inc=0;
                arrow_part[0]=3;
            }
    }
    
    if (arrow_part[0]==3)
    { 
        inc+=rate;//+abs(par_HERO.hsp);
        arrow_x[0]=part_C_x - inc;
        arrow_angle[0]=180;
        arrow_y[0]=part_C_y;
        
        if (arrow_x[0]&lt;part_D_x) || (arrow_x[0]&lt;view_xview) 
            {
            arrow_part[0]=1;
            arrow_x[0]=start_x-50;
            arrow_y[0]=start_y;
            arrow_scale[0]=.2;
            arrow_angle[0]=0;
            inc=0;      
            }
    }
            
    if (arrow_scale[0]&lt;1) arrow_scale[0]+=.02;
    
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[9],arrow_y[9], arrow_scale[9], arrow_scale[9],arrow_angle[9],c_red,.1);                
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[8],arrow_y[8], arrow_scale[8], arrow_scale[8],arrow_angle[8],c_red,.2);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[7],arrow_y[7], arrow_scale[7], arrow_scale[7],arrow_angle[7],c_red,.3); 
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[6],arrow_y[6], arrow_scale[6], arrow_scale[6],arrow_angle[6],c_red,.4);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[5],arrow_y[5], arrow_scale[5], arrow_scale[5],arrow_angle[5],c_red,.5);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[4],arrow_y[4], arrow_scale[4], arrow_scale[4],arrow_angle[4],c_red,.6);
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[3],arrow_y[3], arrow_scale[1], arrow_scale[1],arrow_angle[1],c_red,.7); 
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[2],arrow_y[2], arrow_scale[2], arrow_scale[2],arrow_angle[1],c_red,.8);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[1],arrow_y[1], arrow_scale[1], arrow_scale[1],arrow_angle[1],c_red,.9);
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[0],arrow_y[0], arrow_scale[0], arrow_scale[0],arrow_angle[0],c_white,1);
    draw_sprite_ext(spr_Trail_Arrow,0,part_A_x,part_A_y,.25,.25,180,c_white,1);
    draw_sprite_ext(spr_Trail_Arrow,0,part_D_x,part_D_y, .25, .25,180,c_white,1);
    
    draw_set_alpha(1);
    draw_set_font(fnt_Orbitron);
    draw_set_halign(fa_center);
    draw_text_transformed(part_A_x+50,part_A_y,string(text),1+sin(grow)*.1,1+sin(grow)*.1,0);
            
break;//--------------------------------------------------------------------------------------------------------------------------

case 4: //SOUTH-----------------------------------------------------------------------------------------------------------------

      for(i=9;i&gt;0;i-=1)
      {
        arrow_x[i]=arrow_x[i-1];
        arrow_y[i]=arrow_y[i-1];
        arrow_scale[i]=arrow_scale[i-1]
        arrow_angle[i]=arrow_angle[i-1];
        arrow_part[i]=arrow_part[i-1];      
      } 
   
//SET POINTS ----------------------------------
if (following)
{
part_A_x=start_x;
part_A_y=start_y+75;

part_B_x=start_x;
part_B_y=start_y+175;

part_C_x=end_x;
part_C_y=start_y+225;

part_D_x=end_x;
part_D_y=end_y;
if (follow==false) following=false;
}
//DRAWLINES -----------------------------------
//PART A
draw_line(part_A_x,part_A_y,part_B_x,part_B_y);
//PART B
draw_line(part_B_x,part_B_y,part_C_x,part_C_y);
//PART C
draw_line(part_C_x,part_C_y,part_D_x,part_D_y);
//DRAW ARROWS ---------------------------------

    var dist
  
    if (arrow_part[0]==1)
    {
        inc+=rate+abs(par_HERO.vsp);
        arrow_y[0]=part_A_y+inc;
        arrow_angle[0]=270;
        arrow_x[0]=part_A_x;
        
        if (arrow_y[0]&gt;part_B_y) 
            {
            arrow_part[0]=2;
            inc=0;
            }        
    }
    
   if (arrow_part[0]==2)
    {
        arrow_angle[0]=point_direction(part_B_x,part_B_y,part_C_x,part_C_y);
        inc+=rate+abs(par_HERO.vsp);
        
        
        arrow_x[0]=part_B_x+lengthdir_x(inc, arrow_angle[0]);
        arrow_y[0]=part_B_y+lengthdir_y(inc, arrow_angle[0]);
        
        
        if (arrow_y[0]&gt;part_C_y)  
            {
                inc=0;
                arrow_part[0]=3;
            }
    }
    
    if (arrow_part[0]==3)
    { 
        inc+=rate+abs(par_HERO.vsp);
        arrow_y[0]=part_C_y + inc;
        arrow_angle[0]=270;
        arrow_x[0]=part_C_x;
        
        if (arrow_y[0]&gt;part_D_y) || (arrow_y[0]&gt;view_yview+720) 
            {
            arrow_part[0]=1;
            arrow_x[0]=start_x;
            arrow_y[0]=start_y+75;
            arrow_scale[0]=.2;
            arrow_angle[0]=0;
            inc=0;      
            }
    }
            
    if (arrow_scale[0]&lt;1) arrow_scale[0]+=.02;
    
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[9],arrow_y[9], arrow_scale[9], arrow_scale[9],arrow_angle[9],c_red,.1);                
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[8],arrow_y[8], arrow_scale[8], arrow_scale[8],arrow_angle[8],c_red,.2);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[7],arrow_y[7], arrow_scale[7], arrow_scale[7],arrow_angle[7],c_red,.3); 
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[6],arrow_y[6], arrow_scale[6], arrow_scale[6],arrow_angle[6],c_red,.4);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[5],arrow_y[5], arrow_scale[5], arrow_scale[5],arrow_angle[5],c_red,.5);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[4],arrow_y[4], arrow_scale[4], arrow_scale[4],arrow_angle[4],c_red,.6);
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[3],arrow_y[3], arrow_scale[1], arrow_scale[1],arrow_angle[1],c_red,.7); 
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[2],arrow_y[2], arrow_scale[2], arrow_scale[2],arrow_angle[1],c_red,.8);
    //draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[1],arrow_y[1], arrow_scale[1], arrow_scale[1],arrow_angle[1],c_red,.9);
    draw_sprite_ext(spr_Trail_Arrow,0,arrow_x[0],arrow_y[0], arrow_scale[0], arrow_scale[0],arrow_angle[0],c_white,1);
    draw_sprite_ext(spr_Trail_Arrow,0,part_A_x,part_A_y, .25, .25,270,c_white,1);
    draw_sprite_ext(spr_Trail_Arrow,0,part_D_x,part_D_y, .25, .25,270,c_white,1);
    
    draw_set_alpha(1);
    draw_set_font(fnt_Orbitron);
    draw_set_halign(fa_center);
    draw_text_transformed(part_A_x,part_A_y-50,string(text),1+sin(grow)*.1,1+sin(grow)*.1,0);
            
break;//--------------------------------------------------------------------------------------------------------------------------


}


draw_set_color(c_white);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
