<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x_offset=0; //start lefttopcorner
y_offset=0; //start lefttopcorner

draw_y=110; //grow length from 0
draw_x=100; //grow width from 0

select_y=y+50;//MEDIUM DEFAULT

start=true;
finish=false;

shift_back=0;
rest=true;

confirm=false;
audio_play_sound(snd_Popup_Menu,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (confirm==true)
{
    if instance_exists(obj_EnterName) 
        {
            obj_EnterName.confirm=true;
            
            if (global.platform==1)
            {
            global.game_xb_user=global.xb_user; //SET THE GAME USER
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!start) &amp;&amp; (!finish)
{
Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);

Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);



if (Key_Jump) Key_Fire=false;

if gamepad_button_check_pressed(global.playing_index,gp_start) Key_Jump=true;

if keyboard_check_pressed(vk_space) Key_Jump=true;
if keyboard_check_pressed(vk_enter) Key_Jump=true;

if keyboard_check_pressed(vk_up) Key_Up=true;
if keyboard_check_pressed(vk_down) Key_Down=true;
if keyboard_check_pressed(vk_right)Key_Right = true;
if keyboard_check_pressed(vk_left)Key_Left = true;

if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) {Key_Up = 1; alarm[0]=10; rest=false;} 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) {Key_Down = 1; alarm[0]=10; rest=false;}
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) {Key_Left = 1; alarm[0]=10; rest=false;}
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) {Key_Right = 1; alarm[0]=10; rest=false;}
}


        if (master.paused)
        {
        Key_Up = false;
        Key_Down = false;
        Key_Left = false;
        Key_Right = false;
        
        Key_Jump = false;
        Key_Fire = false;
        }
    

if (Key_Up)
{
    audio_play_sound(snd_selectA,10,false);
    if (select_y==y+35)
        select_y=y+95;
        else
        select_y-=15;        
        shift_back=0;
}

if (Key_Down)
{
    audio_play_sound(snd_selectA,10,false);
    if (select_y==y+95)
        select_y=y+35;
        else
        select_y+=15;          
        shift_back=0;
}


if (Key_Jump)
    {      
    audio_play_sound(snd_gamestart,10,false);
    confirm=true;
    finish=true;   
    
    switch(select_y-y)
        {
        case 35: global.difficulty=.5;  global.ranked=false; break;
        case 50: global.difficulty=.75; global.ranked=false; break;
        case 65: global.difficulty=1;   global.ranked=false; break;
        case 80: global.difficulty=2;   global.ranked=false; break;
        case 95: global.difficulty=2;   global.ranked=true;  break;
        }             
    }


if (Key_Fire)
    {
    audio_play_sound(snd_capped_out,10,false);
    finish=true;
    start=false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{
offset=1.5;
}
else
{
offset=1;
}

x=736;
y=250;

scale=1.25;

draw_set_alpha(0.35);
draw_set_color(c_black);
draw_roundrect(x*scale*offset,y*scale*offset, (x+x_offset)*scale*offset,(y+y_offset)*scale*offset,false);
draw_set_alpha(0.5);
draw_set_color(c_white);
draw_roundrect(x*scale*offset,y*scale*offset, (x+x_offset)*scale*offset,(y+y_offset)*scale*offset,true);
draw_set_alpha(0.8);


if (start)
{

if (x_offset&lt;draw_x) x_offset+=(draw_x/5);
if (y_offset&lt;draw_y) y_offset+=(draw_y/5);
if (y_offset&gt;=draw_y) start=false;
}

if (finish)
{
if (x_offset&gt;0) x_offset-=(draw_x/5);
if (y_offset&gt;0) y_offset-=(draw_y/5);
if (y_offset&lt;=0) instance_destroy();
}
   

if (!start) &amp;&amp; (!finish)
{    
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
   
    draw_set_font(fnt_Arial_Big);
    draw_set_color(c_black); draw_set_alpha(.7);
    draw_text_transformed(((x+15)-2)*scale*offset,(y+17)*scale*offset," Difficulty ",scale*offset,scale*offset,0);
    draw_set_color(c_white); draw_set_alpha(.8);
    draw_text_transformed((x+15)*scale*offset,(y+15)*scale*offset," Difficulty ",scale*offset,scale*offset,0);
    draw_set_font(fnt_Arial);
    
    
    if (shift_back&lt;2.5) shift_back+=.25;
    
    draw_set_color(c_black);
    draw_set_alpha(0.75);
    draw_set_font(fnt_Arial);
    if (select_y==y+35) draw_text_transformed((x+20+shift_back)*scale*offset,(y+35+shift_back)*scale*offset," Easy",scale*offset,scale*offset,0);
    if (select_y==y+50) draw_text_transformed((x+20+shift_back)*scale*offset,(y+50+shift_back)*scale*offset," Medium",scale*offset,scale*offset,0);;
    if (select_y==y+65) draw_text_transformed((x+20+shift_back)*scale*offset,(y+65+shift_back)*scale*offset," Hard",scale*offset,scale*offset,0); 
    if (select_y==y+80) draw_text_transformed((x+20+shift_back)*scale*offset,(y+80+shift_back)*scale*offset," Extreme",scale*offset,scale*offset,0);
    if (select_y==y+95) draw_text_transformed((x+20+shift_back)*scale*offset,(y+95+shift_back)*scale*offset," Ranked",scale*offset,scale*offset,0);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_set_font(fnt_Arial);
    if (select_y==y+35) draw_text_transformed((x+20)*scale*offset,(y+35)*scale*offset," Easy",scale*offset,scale*offset,0);        else draw_text_transformed((x+20)*scale*offset,(y+35)*scale*offset,"Easy",scale*offset,scale*offset,0);
    if (select_y==y+50) draw_text_transformed((x+20)*scale*offset,(y+50)*scale*offset," Medium",scale*offset,scale*offset,0);      else draw_text_transformed((x+20)*scale*offset,(y+50)*scale*offset,"Medium",scale*offset,scale*offset,0);
    if (select_y==y+65) draw_text_transformed((x+20)*scale*offset,(y+65)*scale*offset," Hard",scale*offset,scale*offset,0);        else draw_text_transformed((x+20)*scale*offset,(y+65)*scale*offset,"Hard",scale*offset,scale*offset,0);
    if (select_y==y+80) draw_text_transformed((x+20)*scale*offset,(y+80)*scale*offset," Extreme",scale*offset,scale*offset,0);     else draw_text_transformed((x+20)*scale*offset,(y+80)*scale*offset,"Extreme",scale*offset,scale*offset,0);
    if (select_y==y+95) draw_text_transformed((x+20)*scale*offset,(y+95)*scale*offset," Ranked",scale*offset,scale*offset,0);      else draw_text_transformed((x+20)*scale*offset,(y+95)*scale*offset,"Ranked",scale*offset,scale*offset,0);
    
    draw_sprite_ext(spr_arrow,0,(x+10)*scale*offset,select_y*scale*offset,scale*offset,scale*offset,0,c_white,1);

    //side by side
    //info_x=x+325;
    //info_y=y+70;
    
    //next to controls
    //info_x=x-30;
    //info_y=y+280;
    
    //next to controls over
    info_x=x+30;
    info_y=y+277;
    
    
    draw_set_alpha(0.35);
    draw_set_color(c_black);
    draw_roundrect((info_x-12)*offset,(info_y-5)*offset,(info_x+250)*offset,(info_y+65)*offset,false);
    draw_set_alpha(0.5);
    draw_set_color(c_white);
    draw_roundrect((info_x-12)*offset,(info_y-5)*offset,(info_x+250)*offset,(info_y+65)*offset,true);
    draw_set_alpha(0.8);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);

    if (select_y==y+35) draw_text_transformed(info_x*offset,info_y*offset,"Get ready for a cake walk.",scale*offset,scale*offset,0);       
    if (select_y==y+50) draw_text_transformed(info_x*offset,info_y*offset,"Casual difficulty.",scale*offset,scale*offset,0);      
    if (select_y==y+65) draw_text_transformed(info_x*offset,info_y*offset,"Casual with a bite.",scale*offset,scale*offset,0);       
    if (select_y==y+80) draw_text_transformed(info_x*offset,info_y*offset,"Give me a challenge.",scale*offset,scale*offset,0);     
    if (select_y==y+95) draw_text_transformed(info_x*offset,info_y*offset,"Go against the world with ranked #scoring. Once you die, there is no#coming back...",scale*offset,scale*offset,0);      







}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
x=736;
y=250;

scale=1.25;

draw_set_alpha(0.35);
draw_set_color(c_black);
draw_roundrect(x*scale,y*scale, (x+x_offset)*scale,(y+y_offset)*scale,false);
draw_set_alpha(0.5);
draw_set_color(c_white);
draw_roundrect(x*scale,y*scale, (x+x_offset)*scale,(y+y_offset)*scale,true);
draw_set_alpha(0.8);

if (start)
{

if (x_offset&lt;draw_x) x_offset+=(draw_x/5);
if (y_offset&lt;draw_y) y_offset+=(draw_y/5);
if (y_offset&gt;=draw_y) start=false;
}

if (finish)
{
if (x_offset&gt;0) x_offset-=(draw_x/5);
if (y_offset&gt;0) y_offset-=(draw_y/5);
if (y_offset&lt;=0) instance_destroy();
}
   

if (!start) &amp;&amp; (!finish)
{    
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
   
    draw_set_font(fnt_Arial_Big);
    draw_set_color(c_black); draw_set_alpha(.7);
    draw_text_transformed(((x+15)-2)*scale,(y+17)*scale," Difficulty ",scale,scale,0);
    draw_set_color(c_white); draw_set_alpha(.8);
    draw_text_transformed((x+15)*scale,(y+15)*scale," Difficulty ",scale,scale,0);
    draw_set_font(fnt_Arial);
    
    
    if (shift_back&lt;2.5) shift_back+=.25;
    
    draw_set_color(c_black);
    draw_set_alpha(0.75);
    draw_set_font(fnt_Arial);
    if (select_y==y+35) draw_text_transformed((x+20+shift_back)*scale,(y+35+shift_back)*scale," Easy",scale,scale,0);
    if (select_y==y+50) draw_text_transformed((x+20+shift_back)*scale,(y+50+shift_back)*scale," Medium",scale,scale,0);;
    if (select_y==y+65) draw_text_transformed((x+20+shift_back)*scale,(y+65+shift_back)*scale," Hard",scale,scale,0); 
    if (select_y==y+80) draw_text_transformed((x+20+shift_back)*scale,(y+80+shift_back)*scale," Extreme",scale,scale,0);
    if (select_y==y+95) draw_text_transformed((x+20+shift_back)*scale,(y+95+shift_back)*scale," Ranked",scale,scale,0);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_set_font(fnt_Arial);
    if (select_y==y+35) draw_text_transformed((x+20)*scale,(y+35)*scale," Easy",scale,scale,0);        else draw_text_transformed((x+20)*scale,(y+35)*scale,"Easy",scale,scale,0);
    if (select_y==y+50) draw_text_transformed((x+20)*scale,(y+50)*scale," Medium",scale,scale,0);      else draw_text_transformed((x+20)*scale,(y+50)*scale,"Medium",scale,scale,0);
    if (select_y==y+65) draw_text_transformed((x+20)*scale,(y+65)*scale," Hard",scale,scale,0);        else draw_text_transformed((x+20)*scale,(y+65)*scale,"Hard",scale,scale,0);
    if (select_y==y+80) draw_text_transformed((x+20)*scale,(y+80)*scale," Extreme",scale,scale,0);     else draw_text_transformed((x+20)*scale,(y+80)*scale,"Extreme",scale,scale,0);
    if (select_y==y+95) draw_text_transformed((x+20)*scale,(y+95)*scale," Ranked",scale,scale,0);      else draw_text_transformed((x+20)*scale,(y+95)*scale,"Ranked",scale,scale,0);
    
    draw_sprite_ext(spr_arrow,0,(x+10)*scale,select_y*scale,scale,scale,0,c_white,1);

    //side by side
    //info_x=x+325;
    //info_y=y+70;
    
    //next to controls
    //info_x=x-30;
    //info_y=y+280;
    
    //next to controls over
    info_x=x+30;
    info_y=y+277;
    
    
    draw_set_alpha(0.35);
    draw_set_color(c_black);
    draw_roundrect(info_x-12,info_y-5,info_x+243,info_y+65,false);
    draw_set_alpha(0.5);
    draw_set_color(c_white);
    draw_roundrect(info_x-12,info_y-5,info_x+243,info_y+65,true);
    draw_set_alpha(0.8);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);

    if (select_y==y+35) draw_text_transformed(info_x,info_y,"Get ready for a cake walk.",scale,scale,0);       
    if (select_y==y+50) draw_text_transformed(info_x,info_y,"Casual difficulty.",scale,scale,0);      
    if (select_y==y+65) draw_text_transformed(info_x,info_y,"Casual with a bite.",scale,scale,0);       
    if (select_y==y+80) draw_text_transformed(info_x,info_y,"Give me a challenge.",scale,scale,0);     
    if (select_y==y+95) draw_text_transformed(info_x,info_y,"Go against the world with ranked #scoring. Once you die there is no#coming back...",scale,scale,0);      







}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
