<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.spr_Dolphin_Swim==0)
{
master.num+=1;
master.spr_Dolphin_Swim=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Dolphin_Swim.png",31,1,1,294,100);
sprite_collision_mask(global.sprite[master.num], 0, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.spr_Dolphin_Idle==0)
{
master.num+=1;
master.spr_Dolphin_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_Dolphin_Idle.png",24,1,1,58,97);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}



sprite_index=global.sprite[master.spr_Dolphin_Idle];
image_index=0;
image_speed=.5*global.game_speed;

swim=false;
rot_up=true;
move_up=true;
orig_y=y;
speed_up=false;
s_image_speed=.5;

audio_sound_pitch(snd_Dolphin,global.game_speed);
audio_play_sound(snd_Dolphin,10,false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var temp_color
if (par_HERO.hp&lt;100) || (par_HERO.energy&lt;100)
{    
    par_HERO.hp+=2;
    if (par_HERO.hp&gt;100) par_HERO.hp=100;
    


    par_HERO.energy+=2;
    if (par_HERO.energy&gt;100) par_HERO.energy=100;


    par_HERO.weapon_A_energy+=2;
    par_HERO.weapon_B_energy+=2;
    par_HERO.weapon_C_energy+=2;
    par_HERO.weapon_D_energy+=2;
    
    if (par_HERO.weapon_A_energy&gt;100) par_HERO.weapon_A_energy=100;
    if (par_HERO.weapon_B_energy&gt;100) par_HERO.weapon_A_energy=100;
    if (par_HERO.weapon_C_energy&gt;100) par_HERO.weapon_A_energy=100;
    if (par_HERO.weapon_D_energy&gt;100) par_HERO.weapon_A_energy=100;
    
temp_color=c_red;

   switch(irandom_range(1,2))
   {
   case 1:
   temp_color=c_yellow;
   break;
   
   case 2:
   temp_color=c_red;
   break;
   }
      
    with instance_create(x,y,obj_Powerup_A_FULL){color=other.temp_color;}
    audio_sound_pitch(snd_WizardStun,global.game_speed);
    audio_play_sound(snd_WizardStun,10,false);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>swim=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
{

 if place_meeting(x,y,par_HERO) //IM COLLIDING WITH THE HERO
 {          
     if (swim==false) //IF IM NOT CURRENTLY SWIMMING
        {   
        if !audio_is_playing(snd_Dolphin) //PLAY MY SOUND EFFECT
        {
            audio_sound_pitch(snd_Dolphin,global.game_speed);
            audio_play_sound(snd_Dolphin,10,false);
        }
        
        s_image_speed=.5; 
        image_speed=s_image_speed*global.game_speed;  //AND MY IMAGE SPEED
        
        speed_up=true; //START TO SPEED UP
        }
        
                                     
       if (sprite_index==global.sprite[master.spr_Dolphin_Idle]) swim=true; //SWITCH TO SWIM MODE ONLY WHEN IM NOT SWIMMING
         
       if (sprite_index!=global.sprite[master.spr_Dolphin_Swim])
       {       
        sprite_index=global.sprite[master.spr_Dolphin_Swim];
        image_index=28; 
       } 
        
        alarm[0]=50/global.game_speed; //CUTOFF WHEN I STOP SWIMMING EXTENDED IF YOUR STILL AROUND
        
        if (alarm[1]==-1) alarm[1]=irandom_range(10,20)/s_image_speed/global.game_speed; //QUE HEALING CHARGE
       
 }
 else //HEY IM NOT COLLIDING SO SLOW DOWN
 {
    speed_up=false;
    //swim=false;
 }



}

if (swim==true)
{
 sprite_index=global.sprite[master.spr_Dolphin_Swim];
 image_speed=s_image_speed*global.game_speed;
 
 if (speed_up) //SPEED UP
 {
    if (s_image_speed&lt;1) s_image_speed+=.005;
 }
 
 
 if (image_index&lt;19) &amp;&amp; (image_index&gt;8)
         depth=-3;
         else
         depth=-1;  
         
 //MOVE OFFSET-------        
    if (rot_up) image_angle+=.1*global.game_speed; else image_angle-=.1*global.game_speed;
    if (move_up) y-=.5*global.game_speed; else y+=.5*global.game_speed;
    
    if (image_angle&gt;=3) rot_up=false;
    if (image_angle&lt;=-3) rot_up=true;
    
    if (y&lt;orig_y) move_up=false;
    if (y&gt;orig_y+24) move_up=true;     
         
}
else
{
    //IF NOT SWIM
    if (sprite_index==global.sprite[master.spr_Dolphin_Swim])
        {
        image_speed=.5*global.game_speed;
        
        if (round(image_index)==28)
            {
            sprite_index=global.sprite[master.spr_Dolphin_Idle];
            image_index=0;
            image_speed=.5*global.game_speed;
            }
        }
    
    if (sprite_index==global.sprite[master.spr_Dolphin_Idle])
        {
        depth=-1;
        
        if (image_angle&lt;0) image_angle+=.5*global.game_speed; else image_angle-=.5*global.game_speed;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index) draw_self();
/*
draw_set_color(c_white);
draw_text(x,y-100,string(image_index));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>55,123</point>
    <point>100,100</point>
  </PhysicsShapePoints>
</object>
