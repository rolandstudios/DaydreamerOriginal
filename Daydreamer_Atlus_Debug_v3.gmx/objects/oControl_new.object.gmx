<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.LBChunk = 15;
global.LBOffset = 0;
global.Friends = 0;

//if(os_type==os_ps4)
//{
//    InitNPLibs("NPXX51526_00","",""); 
//    global.LeaderboardIndex = 0;
//}
//else 

if(os_type == os_psvita || os_type == os_ps3 || os_type==os_ps4)
{
   var foundini=false;

    if(file_exists("PSNSampleProj.ini"))
    {
       ini_open("PSNSampleProj.ini");
       foundini=true;
    }
    else if(file_exists("options.ini"))
    {
        ini_open("options.ini");
        foundini=true;
    }
    else
    {
        show_debug_message("Unable to find system ini file, bailing!");
        //exit;
    }

    if(foundini)
    {
        show_debug_message("About to call InitNPLibs");
        
        if(os_type == os_psvita)
        {
            psn_init_np_libs(ini_read_string("PSVita","nptitleid",""),ini_read_string("PSVita","nptitlesecret",""),ini_read_string("PSVita","nptitlepassphrase",""));
            psn_setup_trophies();
        }
        else if(os_type == os_ps3)
            psn_init_np_libs(ini_read_string("PS3","nptitleid",""),ini_read_string("PS3","nptitlesecret",""),ini_read_string("PS3","nptitlepassphrase",""));  
        else if(os_type == os_ps4)
            psn_init_np_libs(ini_read_string("PS4","nptitleid",""),ini_read_string("PS4","nptitlesecret",""),ini_read_string("PS4","nptitlepassphrase",""));   
        ini_close();  
        
        for(i=0;i&lt;gamepad_get_device_count();i++)
        {
            if (gamepad_is_connected(i))
            {
                psn_init_trophy(i);
            }
        }
    }    
    global.LeaderboardIndex = 0;
}
else
{
    show_debug_message("don't know os_type " + string(os_type));
    psn_init_np_libs("1","3","fred");
    
}
global.Score = 0;

var i;
for(i=0;i&lt;gamepad_get_device_count();i++)
{
    global.TempRank[i]=-1;
    global.TempScore[i]=-1;
}


NumEntries = 25;
NumValidEntries=0;
FriendsFilter = 0;
ouractive=false;
Loading = true;

var i; 
for(i=0;i&lt;NumEntries;i++)
{
    PlayerName[i]="";
    PlayerRank[i]="";
    PlayerScore[i]=0;
}


for(i=0;i&lt;NumEntries;i++)
{
    FriendPlayerName[i]="";
    FriendPlayerRank[i]="";
    FriendPlayerScore[i]=0;
}
PosMe=0;
PosMin=0;
PosMax=max(PosMin,NumEntries-11);
PosFirst=clamp(PosMe-5,PosMin,PosMax);
NumLBEntries = NumEntries; //We don't know so stick in what we are going to ask for....
CurLBOffset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Read pads for input

var i;
psn_tick_error_dialog();

for(i=0;i&lt;gamepad_get_device_count();i++)
{
    if(gamepad_button_check_pressed(i,gp_face1))
    {
        psn_get_leaderboard_score(i,0);     

        //X Pressed
        psn_check_np_availability(i,1);
        
        show_debug_message("looking for " + string(1+global.LBOffset*global.LBChunk) + " to " + string(1+global.LBOffset*global.LBChunk+global.LBChunk));
        
        if(global.Friends)
        {
            psn_get_friends_scores(i,global.LeaderboardIndex,1+global.LBOffset*global.LBChunk,1+global.LBOffset*global.LBChunk+global.LBChunk);
        }
        else
            psn_get_leaderboard_score_range(i,global.LeaderboardIndex,1+global.LBOffset*global.LBChunk,1+global.LBOffset*global.LBChunk+global.LBChunk);
    }
    if(gamepad_button_check_pressed(i,gp_face2))
    {
        //Circle Pressed
        psn_check_np_availability(i,1);
        psn_post_leaderboard_score(i,global.LeaderboardIndex,global.Score);
        show_debug_message("Circle pressed");
        
    }
    
    if(gamepad_button_check_released(i,gp_select))
    {
        global.Friends = !global.Friends;
    }
    
    if(gamepad_button_check_pressed(i,gp_face3))
    {
        //Square Pressed
        psn_unlock_trophy(i,2);
    }
    if(gamepad_button_check_pressed(i,gp_face4))
    {
        //Tri Pressed
        psn_unlock_trophy(i,1);
    }

    if(gamepad_button_check(i,gp_shoulderl))
    {
        //L1 Pressed
        global.Score-=10;
    }
    if(gamepad_button_check(i,gp_shoulderr))
    {
        //R1 Pressed
        global.Score+=10;
    }
    
    if(gamepad_button_check_pressed(i,gp_shoulderlb))
    {
        //L1 Pressed
        global.LBOffset--;
    }
    if(gamepad_button_check_pressed(i,gp_shoulderrb))
    {
        //R1 Pressed
        global.LBOffset++;        
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (async_load[? "event_type"] == "gamepad discovered")
{
    psn_init_trophy(async_load[? "pad_index"]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// async_load is ONLY valid inside this event. It is usually -1 outside of the event.
var ident = ds_map_find_value(async_load, "id" );

show_debug_message("lb received social event with id " + string(ident));


if(ident == 2001)
{
    var name = ds_map_find_value(async_load, "name" );
    
    for(j=0;j&lt;gamepad_get_device_count();j++)
    {
        if(gamepad_is_connected(j))
        {
            var padname = psn_name_for_pad(j);
            if(padname==string(name))
            {
    
                var hiscore = ds_map_find_value(async_load, "score" );   
                var rank = ds_map_find_value(async_load, "rank" );
                show_debug_message("Found leaderboard data for "+string(name) + " score:"+string(hiscore) + " rank:"+string(rank) + " on pad " + string(j));

                global.TempRank[j] = rank;
                global.TempScore[j] = hiscore;

               
            }
        }
    }
    //show_debug_message("Unable to find pad for player " + string(name));
}



if(ident == 2002)
{
   // show_debug_message("General leaderboard returned");
    PosMe = -1;

    var leaderboardid = ds_map_find_value(async_load, "leaderboardid" );
    var numentries = ds_map_find_value(async_load, "numentries" );
    var startrange = ds_map_find_value(async_load, "startrange" );
    var endrange = ds_map_find_value(async_load, "endrange" );

    NumLBEntries = numentries;
    
    var i;
    for(i=0;i&lt;NumEntries;i++)
    {
        PlayerName[i]="";
        PlayerRank[i]="";
        PlayerScore[i]=0;
    }
    for(i=0;i&lt;min(numentries,NumEntries);i++)
    {
        var rank= ds_map_find_value(async_load, "rank"+string(i) );
        
        if(rank !=0 &amp;&amp; string(rank) != "0")
        {
            NumValidEntries=i+1;
            PlayerRank[i] = rank;
            PlayerName[i] = ds_map_find_value(async_load, "playerid"+string(i) );
        
            if(string(PlayerName[i])==string(psn_name_for_pad(0)))
            {
                PosMe = i;   
            }
               
            PlayerScore[i]= ds_map_find_value(async_load, "scorevalue"+string(i) );
        }
    }
    show_debug_message("first entry name " + string(PlayerName[0])+ " score " + string(PlayerScore[0]));
    show_debug_message("numentries = " + string(numentries) + " NumEntries = " + string(NumEntries));
    
    Loading = false;
    
        
}   
else if(ident==2003 )
{
   // show_debug_message("Friends leaderboard returned");
    
    var leaderboardid = ds_map_find_value(async_load, "leaderboardid" );
    var numentries = ds_map_find_value(async_load, "numentries" );
  
    NumLBEntries = numentries;
    
    var i;
    for(i=0;i&lt;NumEntries;i++)
    {
        FriendPlayerName[i]="";
        FriendPlayerRank[i]="";
        FriendPlayerScore[i]=0;
    }
    
    for(i=0;i&lt;min(numentries,NumEntries);i++)
    {
         var rank= ds_map_find_value(async_load, "rank"+string(i) );
        
        if(rank !=0 &amp;&amp; string(rank) != "0")
        {
            NumValidEntries=i+1;
            FriendPlayerName[i] = ds_map_find_value(async_load, "playerid"+string(i) );
            
            if(string(FriendPlayerName[i])==string(psn_name_for_pad(0)))
            {
                PosMe = i;   
            }
            FriendPlayerRank[i] = ds_map_find_value(async_load, "rank"+string(i) );
            FriendPlayerScore[i]= ds_map_find_value(async_load, "scorevalue"+string(i) );
        }
    }
        Loading = false;
}
else if(ident == 2004)
{
//Our temp rank being returned to us
    var temppad = ds_map_find_value(async_load, "temppad" );
    var tempscore = ds_map_find_value(async_load, "tempscore" );
    var temprank = ds_map_find_value(async_load, "temprank" );
   
    show_debug_message("We've been returned for pad " + string(temppad) + " temprank " + string(temprank)+ " with a score of " + string(tempscore));
    global.TempRank[temppad]=temprank;
    global.TempScore[temppad]=tempscore;
}
PosMax=max(PosMin,NumValidEntries-11);
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_set_color(c_black);

draw_set_halign(fa_left);
draw_text(50,50,psn_default_user_name());




var xx=x-420, yy=0;
var x_rank=380, x_name=430, x_score=750;
var ydelta = 30;
var yst = 80;



draw_set_halign(fa_left);
draw_set_valign(fa_top);


//Draw the tabs




if(!Loading)
{
    //show_debug_message("PostFirst = " + string(PosFirst) + " NumEntries= " + string(NumEntries) + " NumValidEntries = " + string(NumValidEntries));
    //Draw all the main scores
    for( var i=PosFirst; i&lt;min(NumEntries,PosFirst+16,NumValidEntries); i+=1 )
    {
        var posonscr=i-PosFirst;
        
        if( global.Friends==0 )
        {
            var s_rank=string(PlayerRank[i]);
            var s_name=string_upper(PlayerName[i]);
            var s_score=string(PlayerScore[i]);    
        }
        else
        {
            var s_rank=string(FriendPlayerRank[i]);
            var s_name=string_upper(FriendPlayerName[i]);
            var s_score=string(FriendPlayerScore[i]);
        }
        
      
        
        draw_set_halign(fa_left);
        draw_text_transformed(x_rank ,yst+(ydelta*posonscr),s_rank,min(1,150/(1+string_width(s_rank))),1,0);
        draw_text_transformed(x_name ,yst+(ydelta*posonscr),s_name,min(1,780/(1+string_width(s_name))),1,0);
        draw_set_halign(fa_right);
        if(s_rank!="")
            draw_text_transformed(x_score,yst+(ydelta*posonscr),s_score,min(1,218/(1+string_width(s_score))),1,0);
    }

  //  draw_set_color(w);
    
    //Draw #1
    var i=0;
    {
       
        
        s_rank="\#";
        s_name="PLAYER";
        s_score="Score";
        
        draw_set_halign(fa_left);
        draw_text_transformed(x_rank ,yst-ydelta,s_rank,min(1,150/(1+string_width(s_rank))),1,0);
        draw_text_transformed(x_name ,yst-ydelta,s_name,min(1,780/(1+string_width(s_name))),1,0);
        draw_set_halign(fa_right);
        if(s_rank!="")
            draw_text_transformed(x_score,yst-ydelta,s_score,min(1,218/(1+string_width(s_score))),1,0);
    }
    
    //Draw you
    i=PosMe;
    {
        var s_rank = "";
        var s_name = "";
        var s_score = "";
    
        if(i&gt;=0)
        {
            if( global.Friends==0 )
            {
                s_rank=string(PlayerRank[i]);
                s_name=string_upper(PlayerName[i]);
                s_score=string(PlayerScore[i]);    
            }
            else
            {
                s_rank=string(FriendPlayerRank[i]);
                s_name=string_upper(FriendPlayerName[i]);
                s_score=string(FriendPlayerScore[i]);
            }
        }
        s_name = string_upper(psn_name_for_pad(0));
        if(global.TempRank[0]!=-1)
        {
            //Override what we had with our temp rank
            s_rank = string(global.TempRank[0]);
            s_score = string(global.TempScore[0]);  
        }
        
        
        draw_set_halign(fa_left);
        draw_text_transformed(x_rank ,yst+ydelta*17,s_rank,min(1,150/(1+string_width(s_rank))),1,0);
        draw_text_transformed(x_name ,yst+ydelta*17,s_name,min(1,780/(1+string_width(s_name))),1,0);;
        draw_set_halign(fa_right);
        if(s_rank!="")
            draw_text_transformed(x_score,yst+ydelta*17,s_score,min(1,218/(1+string_width(s_score))),1,0);
    }
}
else
{
//show_debug_message("loading");
  //   draw_set_halign(fa_left);
   // draw_text_transformed(x_rank ,yst,"Loading",1,1,0);
  
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
