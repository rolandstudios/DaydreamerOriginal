<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------

/*
if(sprite_get_yoffset(global.spr_GingerPup_Idle_A)!=124)
{
global.spr_GingerPup_Idle_A=sprite_add(working_directory+"\Imports\spr_GingerPup_Idle_A.png",25,0,1,27,124);
sprite_index=global.spr_GingerPup_Idle_A;
}

if(sprite_get_yoffset(global.spr_GingerPup_Idle_C)!=111)
{
global.spr_GingerPup_Idle_C=sprite_add(working_directory+"\Imports\spr_GingerPup_Idle_C.png",24,0,1,27,111);
sprite_index=global.spr_GingerPup_Idle_C;
}

if(sprite_get_yoffset(global.spr_GingerPup_Cast)!=140)
{
global.spr_GingerPup_Cast=sprite_add(working_directory+"\Imports\spr_GingerPup_Cast.png",24,0,1,61,140);
sprite_index=global.spr_GingerPup_Cast;
}

if(sprite_get_yoffset(global.spr_GingerPup_Jump)!=166)
{
global.spr_GingerPup_Jump=sprite_add(working_directory+"\Imports\spr_GingerPup_Jump.png",32,0,1,59,166);
sprite_index=global.spr_GingerPup_Jump;
}

if(sprite_get_yoffset(global.spr_GingerPup_Float)!=95)
{
global.spr_GingerPup_Float=sprite_add(working_directory+"\Imports\spr_GingerPup_Float.png",24,0,1,48,95);
sprite_index=global.spr_GingerPup_Float;
}

if(sprite_get_yoffset(global.spr_GingerPup_Walk_A)!=122)
{
global.spr_GingerPup_Walk_A=sprite_add(working_directory+"\Imports\spr_GingerPup_Walk_A.png",16,0,1,41,122);
sprite_index=global.spr_GingerPup_Walk_A;
}

if(sprite_get_yoffset(global.spr_GingerPup_Sleep)!=90)
{
global.spr_GingerPup_Sleep=sprite_add(working_directory+"\Imports\spr_GingerPup_Sleep.png",25,0,1,67,90);
sprite_index=global.spr_GingerPup_Sleep;
}

*/


    
sprite_index=spr_GingerPup_Idle_A;
store=false;
angle=0;
frame=0;
grounded=false;
casting=false; 
alarm[0]=200;
quiting=false;
leaving_xscale=image_xscale;
move=0;
part=55*par_HERO.image_xscale;
max_part=100;

float=false;
float_up=true;
float_factor=0;

cast_x=x;
cast_y=y;
cast_xscale=image_xscale;
catchup=false;
//image_yscale=.5;
//image_xscale=.5;


msize = 10;
mx = ds_queue_create();
my = ds_queue_create();
ms = ds_queue_create();
ma = ds_queue_create();
//ma = ds_queue_create();

for(i=0;i&lt;msize;i+=1)
{
    ds_queue_enqueue(mx,par_HERO.x);
    ds_queue_enqueue(my,y);
    ds_queue_enqueue(ma,par_HERO.angle);
    ds_queue_enqueue(ms,sprite_index);
   // ds_queue_enqueue(ma,image_index);
}

orig_x=par_HERO.x;
orig_y=y;
orig_xscale=par_HERO.image_xscale;
leaving_x=x;
leaving_y=y;
last_grounded_x=x;
last_grounded_y=y;

with instance_create(orig_x-(45*orig_xscale),orig_y+20,obj_GingerPup_header)
        {
        image_xscale=1;
        image_yscale=1;
        depth=-1;
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO) par_HERO.summon=false;
instance_create(x,y+25,obj_Twinkle_A);
if instance_exists(obj_warps) obj_warps.Money_low=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>talking=false;
audio_sound_pitch(snd_electrical_glitch,global.game_speed);
audio_play_sound(snd_electrical_glitch,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>par_HERO.summon=false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var stall
stall =false;
if (global.CutScene)stall=true;
if instance_exists(par_Activate) stall=true;
if instance_exists(obj_Inventory) stall=true;

if instance_exists(par_HERO)
{
if (grounded) &amp;&amp; instance_exists(par_Enemy_Body)
{
if (par_HERO.money&lt;=10) //QUIT IF NO MONEY
{
    quiting=true;
    image_index=0;
    image_alpha=1;
    alarm[1]= 200/global.game_speed;
    alarm[2]= 55/global.game_speed;
    talking=true;
    leaving_x=ds_queue_dequeue(mx)-(45*par_HERO.image_xscale);
    leaving_y=ds_queue_dequeue(my)+55;
    leaving_xscale=image_xscale;
    
    if (par_HERO.grounded==false) float=true;
    image_xscale=par_HERO.image_xscale;
 
 
    if !instance_exists(obj_TextPromt)
    {
        global.promt = "Not Enough PSY Matter!";
        with instance_create(x+32,y-32,obj_TextPromt)
            {
            hold=100;
            type=4;
            }
    }

}
else
{
if (par_HERO.ladder==false) &amp;&amp; (!stall)  // IF not on Ladder
{
//CAST SUPPORT
cast = irandom_range(1,1)
//audio_play_sound(snd_DairChoir,10,false);
with instance_create(x,y,obj_Screen_Darken){max_dark=.7; inc=.1; hold=100;depth=2}


switch(cast)
{

case 1: //PUPPPY TROUBLE
casting=true;
cast_x=x;
cast_y=y;

    
  var i=instance_nearest(x,y,par_Enemy)
  if (i==noone) 
    {
        cast_xscale=par_HERO.image_xscale;
    }
    else
    {
        if (i.x&gt;x) cast_xscale=1; else cast_xscale=-1;
    }          
               

catchup=false;
instance_create(x,y+70,obj_PuppyTrouble);
par_HERO.money=par_HERO.money-10;
break;


}//End Switch
}//End Not on Ladder
else
    {
    alarm[0]=5/global.game_speed;//delay 
    }
}//End SET CAST

if (par_HERO.money&lt;20)
{ 
if instance_exists(obj_warps)
    obj_warps.Money_low=true;
}

}//END GROUNDED
else
{
alarm[0]=5/global.game_speed;//delay
}
}
else
{
instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
sprite_index = ds_queue_dequeue(ms);

if (quiting==false) //IF NOT QUITING ---------------------------------
{ 
if instance_exists(obj_PearStore_inside)
{
    if (store==false)
    {
    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
    }
store=true;
}
else
{
    if (store==true)
    {
    
    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
    }
    
store=false;
}
if (casting==false) //IF NOT CASTING -----------------------------------
{

 if(sprite_index==spr_GingerPup_Float) 
 {
    if(float_up) float_factor=float_factor+.1;
    if(!float_up) float_factor=float_factor-.1;
        
    if(float_factor==2) float_up=false;
    if(float_factor==-2) float_up=true;
    
    angle = ds_queue_dequeue(ma)*1.5;        
    y = ds_queue_dequeue(my)+float_factor;
    x = ds_queue_dequeue(mx)-(part);
    
    ds_queue_enqueue(ma,par_HERO.angle);
    
     if (par_HERO.sprite_index==spr_Old_Olivia_Climb) || (obj_camera_offset.y!=par_HERO.y)
     {
        ds_queue_enqueue(mx,par_HERO.ledge_x);
        ds_queue_enqueue(my,par_HERO.ledge_y);
     }
     else
     {
        ds_queue_enqueue(mx,obj_camera_offset.x);
        ds_queue_enqueue(my,obj_camera_offset.y);
     }
 }
 else
 {
    
    x = ds_queue_dequeue(mx)-(part);;
    y = ds_queue_dequeue(my);
    angle = ds_queue_dequeue(ma);
    
    if !instance_exists(obj_GingerPup_header)
    { //DONT QUEUE IF THERE IS A HEADER
    ds_queue_enqueue(mx,par_HERO.x);
    ds_queue_enqueue(my,par_HERO.y);
    ds_queue_enqueue(ma,par_HERO.angle);
    }
 }

if (par_HERO.hsp!=0) 
   {
        if (par_HERO.image_xscale== -1)
        {
        if (part&gt;-(max_part)) part -=2;
        if (x&gt;par_HERO.x) image_xscale=1;
        }
        else
        {
        if (part&lt;max_part) part +=2;
        if (x&lt;par_HERO.x) image_xscale=-1;
        }  
    }
 
 
if (par_HERO.grounded)
{
last_grounded_x=par_HERO.x;
last_grounded_y=par_HERO.y;
}

image_xscale=par_HERO.image_xscale;

if instance_exists(obj_GingerPup_header) //STATIC DURING HEADER
{
ds_queue_enqueue(ms,spr_GingerPup_Idle_A);
x=orig_x;//-(part);
y=orig_y;
image_xscale=orig_xscale;
image_speed=.5*global.game_speed;
   
    ds_queue_enqueue(mx,orig_x);
    ds_queue_enqueue(my,orig_y);
    ds_queue_enqueue(ma,par_HERO.angle);
}
else
{



if (global.HERO_type==0) //YOUNG OLIVIA
{
    if (par_HERO.sprite_index==spr_Young_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Young_Olivia_Jump_A) 
    || (par_HERO.sprite_index==spr_Young_Olivia_Jump_B) || (par_HERO.sprite_index==spr_Young_Olivia_Diagnal_Shoot_Split) 
    || (par_HERO.sprite_index==spr_Young_Olivia_Shoot_Down_Split) ||  (par_HERO.sprite_index==spr_Young_Olivia_Wall_Bounce)
    {
        ds_queue_enqueue(ms,spr_GingerPup_Jump);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Ladder)
    {
        ds_queue_enqueue(ms,spr_GingerPup_Float);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Run)
    {
        ds_queue_enqueue(ms,spr_GingerPup_Walk_A);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Die_Air) 
    {
        ds_queue_enqueue(ms,spr_GingerPup_Float);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Climb) 
    {
        ds_queue_enqueue(ms,spr_GingerPup_Float);
    }
    else
    {
        ds_queue_enqueue(ms,spr_GingerPup_Idle_C);
    }
}

if (global.HERO_type==1) //OLD OLIVIA
{
    if (par_HERO.sprite_index==spr_Old_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Old_Olivia_Jump_A) 
    || (par_HERO.sprite_index==spr_Old_Olivia_Jump_B)  ||  (par_HERO.sprite_index==spr_Old_Olivia_Wall_Bounce)
    {
        ds_queue_enqueue(ms,spr_GingerPup_Jump);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Ladder) || (par_HERO.sprite_index==spr_Old_Olivia_Ladder_Climb)
    {
        ds_queue_enqueue(ms,spr_GingerPup_Float);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Run)
    {
        ds_queue_enqueue(ms,spr_GingerPup_Walk_A);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Die_Air)
    {
        ds_queue_enqueue(ms,spr_GingerPup_Float);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Climb) || (par_HERO.sprite_index==spr_Old_Olivia_Warp) 
    || (par_HERO.sprite_index==spr_Old_Olivia_Diagnal_Shoot_Split) || (par_HERO.sprite_index==spr_Old_Olivia_Shoot_Down_Split)
    {
        ds_queue_enqueue(ms,spr_GingerPup_Float);
    }
    else
    {
        ds_queue_enqueue(ms,spr_GingerPup_Idle_C);
    }
}





}//END NOT HEADER

if (sprite_index==spr_GingerPup_Walk_A)
    {
    image_speed=.6*global.game_speed;
    if (part&lt;55) part+=5;
    }
    else
    {
    image_speed=.5*global.game_speed;
    }

}
else //IF CASTING -------------------------------------------------
{
    
    x = ds_queue_dequeue(mx);
    y = ds_queue_dequeue(my); 
    angle = ds_queue_dequeue(ma); 
     
    ds_queue_enqueue(mx,cast_x);
    ds_queue_enqueue(my,cast_y);
    ds_queue_enqueue(ma,par_HERO.angle);

if (!catchup)
{
ds_queue_enqueue(ms,spr_GingerPup_Cast);
image_speed=.4*global.game_speed;
x=cast_x;
y=cast_y;
image_xscale=cast_xscale;
if(image_index&gt;=23) catchup=true;
}
else //START CATCH_UP
{
    ds_queue_enqueue(ms,spr_GingerPup_Float);
    image_speed=.7*global.game_speed;      
        
if (cast_x&gt;par_HERO.x-12)&amp;&amp;(cast_x&lt;par_HERO.x+12)
    {
        if (cast_y&gt;par_HERO.y-12)&amp;&amp;(cast_y&lt;par_HERO.y+12)
        {
        casting=false;    
        part=0;
        alarm[0]=irandom_range(100,300)/global.game_speed;
        if instance_exists(obj_Screen_Darken) obj_Screen_Darken.active=false;
        }
    }
    else
    {
            if (cast_x&lt;par_HERO.x)
            {
                cast_x+=10;
                image_xscale=1;
            }

            if (cast_x&gt;par_HERO.x)
            {
                cast_x-=10;
                image_xscale=-1;
            } 
    }
    
    if (par_HERO.y&gt;cast_y)
    {
        if (par_HERO.y&gt;cast_y+5)cast_y+=5;
    }
    else
    {
        if (par_HERO.y&lt;cast_y-5) cast_y-=5;
    }

}// END NOT CATCHUP
}// END CASTING ----------------------------------------------------------
}// END IF NOT QUITING---------------
else
{

     ds_queue_enqueue(ms,spr_GingerPup_Sleep);   
     x=leaving_x;
     y=leaving_y;
     image_xscale=leaving_xscale;

}

if place_meeting(x,y+60,par_wall)
{
 grounded=true;
 image_blend=c_white;
}   
 else
{
 grounded=false;
 //image_blend=c_blue;
 
}   
}



    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO)
{
alarm[0]=200/global.game_speed;

    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
if(quiting==false) 
{
//NORMAL DRAW

draw_sprite_ext(sprite_index, image_index, x, y+55, image_xscale*.9,image_yscale*.9, angle, image_blend, 1);
}

if(quiting==true) 
    { //LEAVING DRAW
   
    move+=0.04;
    image_blend=c_white;
   
    image_alpha=image_alpha-.01;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale*.9,image_yscale*.9, angle, image_blend, image_alpha);
    //draw_self();
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,75.0);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale*.9,image_yscale*.9, angle, image_blend, image_alpha);
    //draw_self();
    shader_reset();
    } //END LEAVING DRAW
    

//FLOATING DRAW
if (sprite_index==spr_GingerPup_Float) 
{
 draw_set_blend_mode(bm_add);
 if(quiting)
    {
    draw_sprite_ext(ForceField_B, image_index+25,  x, y-50, 1.5, 1.5, angle, image_blend, .5*image_alpha);
    }
    else
    {
    draw_sprite_ext(ForceField_B, image_index+25,  x , y+55-50, 1.5, 1.5, angle, image_blend, .5);
    }
    draw_set_blend_mode(bm_normal);
 float=true;
}
else
{
 if(!quiting) float=false;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>82,82</point>
  </PhysicsShapePoints>
</object>
