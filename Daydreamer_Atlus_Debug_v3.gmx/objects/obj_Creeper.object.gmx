<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_collide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------

offset=10;

if(master.Creeper_Bite==0)
{
master.num+=1;
master.Creeper_Bite=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Creeper_Bite.png",37,1,1,594,390);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}


if(master.Creeper_Spray==0)
{
master.num+=1;
master.Creeper_Spray=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Creeper_spray.png",37,1,1,590,371);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Creeper_Stand==0)
{
master.num+=1;
master.Creeper_Stand=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Creeper_Stand.png",46,1,1,686,335);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Creeper_Turn==0)
{
master.num+=1;
master.Creeper_Turn=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Creeper_Turn.png",26,1,1,688,168);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Creeper_Walk==0)
{
master.num+=1;
master.Creeper_Walk=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Creeper_Walk.png",25,1,1,685,179);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.spr_Debris_Cloud==0)
{
master.num+=1;
master.spr_Debris_Cloud=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Debris_Cloud.png",56,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
sprite_collision_mask(global.sprite[master.num],  0, 2, 100, 90, 135, 125,2,225);
}


//-----------------------------------


instance_create(x,y,obj_Creeper_view);
//instance_create(x,y,obj_Creeper_Health);
stand_dist=150;
follow_dist=250;

scale=image_yscale;
if instance_exists(par_HERO)
{
    if (par_HERO.x&lt;x)
    {
    image_xscale=-scale;
    west_east = 0;
    }
    else
    {
    image_xscale=scale;
    west_east = 1;
    }
}
else
{
image_xscale=-scale;
west_east = 0;
}

hp=720;
damage=10*global.difficulty;
grav=2;
moveChoose=true;
moveChoice=1;
swing_range = false;
hsp=0;
vsp=0;
stand=false;
image_speed=.5;
keep_going=false;

splash_A=false;
splash_B=false;

hero_hp=0;
hero_damage=0;

gotta_move=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if instance_exists(obj_Vertical_Shaft)
//    obj_Vertical_Shaft.locked=false;
   

if (hp&lt;=0) 
{
global.world_clear[3]=1;

    //STEAM
    if (global.platform==0)
    {
    if !steam_get_achievement("ach_Defeat_Creeper") 
        steam_set_achievement("ach_Defeat_Creeper");
    }
    //XBOX ONE
    if (global.platform==1)
    {    
        scr_XboxOne_Achievement(10);                                 
    } 
    //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(10);                                   
    } 
          
with instance_create(x,y,obj_CheckPoint){World=3.5;Boss=true;}

//const=500/(4*60); //MIN CONSTANT
damage_bonus=round((125-hero_damage)*4);
    if (damage_bonus&gt;500) damage_bonus=500;
    if (damage_bonus&lt;0) damage_bonus=0;

    
time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
    if (time_bonus&gt;500) time_bonus=500;
    if (time_bonus&lt;0) time_bonus=0;
    
with instance_create(x,y,obj_StageClear_header)
    {
    point_bonus=250;
    time_bonus=other.time_bonus;
    damage_bonus=other.damage_bonus; 
    boss_num=3;    
    }
}
   
   
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keep_going=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    switch(irandom_range(1,3))
    {
    case 1: //NORMAL GET RIGHT UP SWINGING REACH AND PIRCHES
    gotta_move=false;
    stand_dist=150;
    follow_dist=250;
    break;
    
    case 2: //AGGRESSIVE RAMS INTO PLAYER WALKING
    gotta_move=true;
    stand_dist=25; //was 50
    follow_dist=100;
    break;
    
    case 3: //TACTILE ALWAYS STANDS AND DOES PROJECTILE AND MELEE TACTICS
    gotta_move=false;
    stand_dist=450;
    follow_dist=50;
    break;    
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (obj_Creeper_view.sprite_index == global.sprite[master.Creeper_Stand]) &amp;&amp; (stand_dist!=450) //IF ALREADY STANDING AND NOT STATIONARY
{
    stand=false;
    obj_Creeper_view.image_index=12; //STAND DOWN
}
else
{
if (stand_dist==450) 
    {
    moveChoose=true; //KEEP ATTACKING IF STATIONARY
    alarm[1] = 200; //PROLONG STANDING
    }
    else
    {
    alarm[1] = 100; //PROLONG STANDING
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Creeper_view) instance_destroy();
sprite_index=spr_collide;
if !instance_exists(par_HERO) {instance_destroy();}
else
{
 

//CheckSwingRange
if !instance_exists(Activate_Creeper)
{
    if (alarm[2]==-1) alarm[2]=irandom_range(400,700); //TOGGLE GOTTA MOVE
    

        if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - scale*stand_dist) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + scale*stand_dist) 
         {
         swing_range = true;
         }
         else
         {
         if(par_HERO.x &gt; x + scale*follow_dist) || (par_HERO.x &lt; x - scale*follow_dist)
         swing_range = false;
         }
    
}

if (moveChoice!=1) &amp;&amp; (moveChoice!=5) //IF NOT WALK OR TURN
{
    if (obj_Creeper_view.image_speed&gt;0)
    {
    if (alarm[1] == 400) || (alarm[1] == 200) moveChoose=true;
    }
} 
 
 if(moveChoose==true)
    {          
         if (!stand) 
         {
            moveChoice=irandom_range(1, 1); 
         }
         else
         {
            moveChoice=irandom_range(3, 4);
         }
         
         //Initiallize the Move
        switch(moveChoice)
            {
            case 1:
            obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Walk];
            obj_Creeper_view.image_speed=1*global.game_speed;
            obj_Creeper_view.image_index=0;
            audio_sound_pitch(snd_creeper_walk,global.game_speed);
            audio_play_sound(snd_creeper_walk,10,false);
            break;            
            
            case 3:
            obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Bite];
            obj_Creeper_view.image_speed=.5*global.game_speed;
            obj_Creeper_view.image_index=0;
            audio_sound_pitch(snd_monster_bite,global.game_speed);
            audio_play_sound(snd_monster_bite,10,false);
            break;
            
            case 4:
            obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Spray];
            obj_Creeper_view.image_speed=.5*global.game_speed;
            obj_Creeper_view.image_index=0;
            splash_A=false;
            splash_B=false;
            audio_sound_pitch(snd_Squirt_A,global.game_speed);
            audio_play_sound(snd_Squirt_A,10,false);
            break;
            }
            
        moveChoose=false;            
    }

    
    
//Check Direction 
if (keep_going==false)
{
if (par_HERO.x &gt; x)
{
    if(moveChoice==1)
    {
    
    if (gotta_move)
    {
        hsp=5*scale;
    }
    else
    {
        hsp=3.5*scale;
    }
    
     if(west_east == 0)
        {  
         if (!stand)
         {
            moveChoose=false;
            moveChoice=5;
            obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Turn];
            obj_Creeper_view.image_speed=.5*global.game_speed;
            obj_Creeper_view.image_index=0;
         }   
         hsp=0;
         }
         else
         {
         west_east = 1;
         image_xscale = scale;
         }
    }    
}

if (par_HERO.x &lt; x) 
{
    if(moveChoice==1)
    {
    if (gotta_move)
    hsp=-5*scale;
    else
    hsp=-3.5*scale;
    if(west_east == 1)
        {
         if (!stand)
         {
            moveChoose=false;
            moveChoice=5;
            obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Turn];
            obj_Creeper_view.image_speed=.5*global.game_speed;
            obj_Creeper_view.image_index=0;
         }
         hsp=0;
         }
         else
         {
            west_east = 0;
            image_xscale = -scale;
         }    
    }   
}
}

if (swing_range)
{
if (moveChoice==1) //IF MOVING YOUY CAN STAND 
{
if (!stand)
    {
    stand=true;
    moveChoice=2;
    obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Stand];
    obj_Creeper_view.image_speed=.5*global.game_speed;
    obj_Creeper_view.image_index=0;
    alarm[1]=500/global.game_speed; //STOP STANDING GIVE IT A REST
    }
}
}
else
{
if (moveChoice!=3) &amp;&amp; (moveChoice!=4) //IF NOT BITING OR SPRAYING and NOT SWING RANGE
{
if (stand) 
    {
    stand=false;
    moveChoose=false;
    moveChoice=2;
    obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Stand];
    obj_Creeper_view.image_speed=-.5*global.game_speed;
    obj_Creeper_view.image_index=12;
    }
}
}


//Execute MOVE
    
switch(moveChoice)
{

case 1: //Walk

    obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Walk]; 
    
    if (gotta_move)
    obj_Creeper_view.image_speed=1.2*global.game_speed; 
    else
    obj_Creeper_view.image_speed=1*global.game_speed;  
    
    if (keep_going) obj_Creeper_view.image_speed=1.4*global.game_speed;        
    damage=8*global.difficulty;
    vsp=0;

    
break;

case 2: //Stand
    damage=8*global.difficulty;
    obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Stand];
    audio_pause_sound(snd_creeper_walk);
    hsp=0;
    vsp=0;
    
   if (stand)
   { 
   if (obj_Creeper_view.image_index &gt;= 44) obj_Creeper_view.image_index=12;
   obj_Creeper_view.image_speed=.5*global.game_speed;
   } 
   
   if (!stand) 
   { 
   obj_Creeper_view.image_speed=-.5*global.game_speed; //REWIND STAND ANIMATION
   if (obj_Creeper_view.image_index&lt;=1) 
        {
            moveChoice=1;
            obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Walk];
            obj_Creeper_view.image_speed=.5*global.game_speed;
            obj_Creeper_view.image_index=0;
        }
   } 
   
break;

case 3:
 obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Bite];
 obj_Creeper_view.image_speed=.5*global.game_speed;
 damage=15*global.difficulty;

 if(round(obj_Creeper_view.image_index)==15) 
        {
            instance_create(x,y,obj_Aura_Ripple_stat);
            instance_create(x,y,obj_Screen_Shake);
             
             switch(irandom_range(1,2))
             {
             case 1: 
             instance_create(x,y,obj_CaveIN_control);
             break;
             
             case 2:
             if (stand_dist==450)
             instance_create(x,y,obj_CaveIN_control);
             break;
             }
             
             
        }
 
 if(round(obj_Creeper_view.image_index)==36) 
        {
        obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Stand];
        obj_Creeper_view.image_index=14;
        moveChoice=2;
        }
break;
            
case 4:
 damage=10*global.difficulty;
 obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Spray];
 obj_Creeper_view.image_speed=.5*global.game_speed;
        
 if(round(obj_Creeper_view.image_index)==30) &amp;&amp; (splash_A==false) || (round(obj_Creeper_view.image_index)==15) &amp;&amp; (splash_B==false)
        {
        if(round(obj_Creeper_view.image_index)==30) splash_A=true;
        if(round(obj_Creeper_view.image_index)==15) splash_B=true;
             
        repeat(random_range(4,5))
        { 
        with instance_create(x + 100*image_xscale+random_range(-180,180),y-50,obj_Smoke_A)
            {
            image_alpha=random_range(.25,.5);
            image_xscale=random_range(1,2);
            image_yscale=image_xscale;
            color=make_color_hsv(50,30,254);
            image_speed=random_range(.4,.5)*global.game_speed;
            depth=-4;
            }
            
            with instance_create(x + 100*image_xscale+random_range(-100,100),y-10,obj_Debris_Cloud)
            {
            image_xscale=random_range(.8,1);
            image_yscale=image_xscale;
            depth=-2
            }
        }
        
        if (instance_number(obj_Lurker)&lt;10)
        {
        repeat(random_range(3,5))
            with instance_create(x+random_range(-25,25)+ 100*image_xscale,y-10,obj_Lurker) {hp=4;}
        }
        
        }
 if(round(obj_Creeper_view.image_index)==36) 
        {
        obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Stand];
        obj_Creeper_view.image_index=14;
        moveChoice=2;
        }
 
break;


case 5: //Turn
damage=8*global.difficulty;
obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Turn]; 
obj_Creeper_view.image_speed=.5*global.game_speed;
//alarm[0]=200;

hsp=0;
vsp=0;

//if (round(obj_Creeper_view.image_index)&gt;=24) 
if (round(obj_Creeper_view.image_index)&gt;=sprite_get_number(global.sprite[master.Creeper_Turn])-irandom_range(1,2)) 
    {
    moveChoose=true;  
    moveChoice=1;   
 
    if(west_east == 0)
        {
        west_east=1;
        image_xscale=-(image_xscale);
        obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Walk];
        obj_Creeper_view.image_index = 0;
        x=x+(scale*500); //TURN OFFSET
        }
        else
        {
        west_east=0;
        image_xscale=-(image_xscale);
        obj_Creeper_view.image_index = 0;
        obj_Creeper_view.sprite_index = global.sprite[master.Creeper_Walk];
        x=x-(scale*500); //TURN OFFSET
        }
        
        if (irandom_range(1,2)==1) 
        {
        moveChoose=false;
        keep_going=true;
        alarm[3]=irandom_range(70,100);
        if (west_east)
        hsp=8;
        else
        hsp=-8;        
        }
    }
    
break;
}

vsp = vsp + grav*global.game_speed;


//Collisions ------------------------------------------------------------



//Horizontal Collision ------------------------------


if place_meeting(x+hsp,y,par_wall) 
{
    
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp = 0;        
    }
    else
        {
        y=y-yplus;
        }
    
}

x = x + hsp*global.game_speed;



//Vertical Collision ------------------------------

if place_meeting(x,y+vsp,par_wall) 
{ 
if !place_free(x,y+vsp) 
 {    
    while (!place_meeting(x,y+sign(vsp),par_wall)) y=y+sign(vsp);
     

     
    if (sign(vsp) == 1)
    {
        grounded = 1; //Enable First Jump
        
    }
    
    vsp = 0;
 }    
}
else
{
   grounded = 0;
}

y = y + vsp*global.game_speed;

//obj_Creeper_view.damage=damage;
obj_Creeper_view.x=x;
obj_Creeper_view.y=y;
obj_Creeper_view.image_xscale=image_xscale;
obj_Creeper_view.image_yscale=image_yscale;


if (hero_hp!=0)
{ 
if (par_HERO.hp&lt;hero_hp)
    {
        hero_damage+=(hero_hp-par_HERO.hp)
    }
hero_hp=par_HERO.hp;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*


draw_set_color(c_red);
draw_line(x - scale*stand_dist,view_yview,x - scale*stand_dist,view_yview+720);
draw_line(x + scale*stand_dist,view_yview,x + scale*stand_dist,view_yview+720);

draw_set_color(c_yellow);
draw_line(x - scale*follow_dist,view_yview,x - scale*follow_dist,view_yview+720);
draw_line(x + scale*follow_dist,view_yview,x + scale*follow_dist,view_yview+720);


draw_set_color(c_white);
draw_set_font(fnt_LowGun);

draw_text(x,y+0,"alarm[1]: "+string(alarm[1]));

draw_text(x,y+40,"alarm[2]: "+string(alarm[2]));

switch(stand_dist)
{
case 150: draw_text(x,y+70,"NORMAL"); break;
case 25: draw_text(x,y+70,"AGGRESIVE"); break; //was 50
case 450: draw_text(x,y+70,"STATIONARY"); break;
}

if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if sprite_exists(sprite_index) draw_self();
}}


/*
//Draw Disk Collision Mask
draw_ellipse(x-sprite_xoffset, y-sprite_yoffset, x-sprite_xoffset+sprite_width, y-sprite_yoffset+sprite_height, true);
//actual collision
draw_ellipse(x-offset, y+10*offset, x+offset, y+12*offset, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>741,288</point>
    <point>430,430</point>
  </PhysicsShapePoints>
</object>
