<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

if(sprite_get_yoffset(global.spr_Cat_Jump)!=49)
{
global.spr_Cat_Jump=sprite_add(working_directory+"\Imports\spr_Cat_Jump.png",39,0,1,48,49);
sprite_index=global.spr_Cat_Jump;
}

if(sprite_get_yoffset(global.spr_Cat_Meow)!=48)
{
global.spr_Cat_Meow=sprite_add(working_directory+"\Imports\spr_Cat_Meow.png",35,0,1,48,48);
sprite_index=global.spr_Cat_Meow;
}

if(sprite_get_yoffset(global.spr_Cat_Walk)!=33)
{
global.spr_Cat_Walk=sprite_add(working_directory+"\Imports\spr_Cat_Walk.png",25,0,1,47,33);
sprite_index=global.spr_Cat_Walk;
}

if(sprite_get_yoffset(global.spr_Cat_Ladder)!=48)
{
global.spr_Cat_Ladder=sprite_add(working_directory+"\Imports\spr_Cat_Ladder.png",12,0,1,17,48);
sprite_index=global.spr_Cat_Ladder;
}

if(sprite_get_yoffset(global.spr_Cat_Angry)!=38)
{
global.spr_Cat_Angry=sprite_add(working_directory+"\Imports\spr_Cat_Angry.png",25,0,1,21,38);
sprite_index=global.spr_Cat_Angry;
}

if(sprite_get_yoffset(global.spr_Cat_Idle)!=37)
{
global.spr_Cat_Idle=sprite_add(working_directory+"\Imports\spr_Cat_Idle.png",24,0,1,45,37);
sprite_index=global.spr_Cat_Idle;
}
*/
store=false;
sprite_index=spr_Cat_Idle;

audio_sound_pitch(snd_Meow_A,global.game_speed);
audio_play_sound(snd_Meow_A,10,false);
heal=false;
frame=0;
casting=false;
quiting=false;
move=0;
leaving_xscale=image_xscale;
move=0;
part=55*par_HERO.image_xscale;
max_part=0;
cast_x=x;
cast_y=y;
cast_xscale=image_xscale;
catchup=false;
alarm[0]=200/global.game_speed;
angle=0;

float=false;
float_up=true;
rot_up=true;
float_factor=0;
image_angle=0;
image_blend=c_white;


msize = 10;
mx = ds_queue_create();
my = ds_queue_create();
ms = ds_queue_create();
ma = ds_queue_create();


for(i=0;i&lt;msize;i+=1)
{
    ds_queue_enqueue(mx,par_HERO.x);
    ds_queue_enqueue(my,y);
    ds_queue_enqueue(ma,par_HERO.angle);
    ds_queue_enqueue(ms,sprite_index);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(par_HERO) par_HERO.summon=false;
instance_create(x,y+25,obj_Twinkle_A);
if instance_exists(obj_warps) obj_warps.Money_low=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    audio_sound_pitch(snd_Meow_A, random_range(1.2,1.35)*global.game_speed);
    audio_play_sound(snd_Meow_A,irandom(100),false);
   
    
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with instance_create(x,y+60,obj_cat_Homing)
{
damage=2*global.pets[2]*.5;
image_xscale=.2;
image_yscale=.2;  
}

audio_sound_pitch(snd_zapA,global.game_speed);
audio_play_sound(snd_zapA,irandom(100),false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>talking=false;
audio_sound_pitch(snd_electrical_glitch,global.game_speed);
audio_play_sound(snd_electrical_glitch,10,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>par_HERO.summon=false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var stall
stall =false;
if (global.CutScene)stall=true;
if instance_exists(par_Activate) stall=true;
if instance_exists(obj_Inventory) stall=true;

if instance_exists(par_HERO)
{
//QUIT IF NO MONEY
if instance_exists(par_Enemy_Body)
{
if (par_HERO.money&lt;20) 
{
    quiting=true;
    image_speed=.5*global.game_speed;
    image_index=0;
    alarm[1]= 200/global.game_speed;
    alarm[2]= 55/global.game_speed;
    talking=true;
    audio_sound_pitch(snd_Meow_Sad,global.game_speed);
    audio_play_sound(snd_Meow_Sad,10,false);
    leaving_x=ds_queue_dequeue(mx)-(45*par_HERO.image_xscale);
    image_xscale=par_HERO.image_xscale;
    leaving_y=ds_queue_dequeue(my)+55;
    leaving_xscale=image_xscale;
    
    if (par_HERO.grounded==false) 
        {
        float=true;
        }
        
    
 
 
    if !instance_exists(obj_TextPromt)
    {
        global.promt = "Not Enough PSY Matter!";
        with instance_create(x+32,y-32,obj_TextPromt)
            {
            hold=100;
            type=1;
            }
    }

}
else
{
if (par_HERO.ladder==false) &amp;&amp; (!stall) // IF not on Ladder
{
//CAST SUPPORT
cast = irandom_range(1,1)

switch(cast)
{

    case 1: //ANGRY CAT
    par_HERO.money-=20;
    casting=true;
    cast_x=0;
    cast_y=0;
    catchup=false;
    in_air=false;
    vsp=-17;
    cycles=12;
    floatup=true;
    float_factor=0;
    ds_queue_enqueue(ms,spr_Cat_Jump);
    sprite_index=0;
    
    audio_sound_pitch(snd_Meow_Angry, random_range(1,1.2)*global.game_speed);
    audio_sound_gain(snd_Meow_Angry,.5,0);
    audio_play_sound(snd_Meow_Angry,10,false);
    break;


    case 2:
    par_HERO.energy=par_HERO.energy+irandom_range(10,25);
    if (par_HERO.energy&gt;100) par_HERO.energy=100;
    audio_play_sound(snd_WizardStun,10,false);

    casting=true;
    frame=0;
    image_index=0;
    with instance_create(x,y,obj_Powerup_A_FULL){color=c_yellow;}
    instance_create(x-(45*par_HERO.image_xscale),y+55,obj_FireFlare_red);
    par_HERO.money=par_HERO.money-5;
    break;


}//End Switch
}//End NOT on Ladder
    else
    {   
    alarm[0]=10/global.game_speed; //Delay Cast if on Ladder
    }

}//END HAVE ENOUGH MONEY

if (par_HERO.money&lt;30)
{ 
if instance_exists(obj_warps)
    obj_warps.Money_low=true;
}
}
}
else
{
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
//image_index = ds_queue_dequeue(ma);
// Queue the NEXT location

if (quiting==false) //IF NOT QUITING -----------------------------------
{
if instance_exists(obj_PearStore_inside)
{
    if (store==false)
    {
    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
    }
store=true;
}
else
{
    if (store==true)
    {
    ds_queue_clear(mx);
    ds_queue_clear(my);
    ds_queue_clear(ma);
    ds_queue_clear(ms);
    
        for(i=0;i&lt;msize;i+=1)
        {
            ds_queue_enqueue(mx,par_HERO.x);
            ds_queue_enqueue(my,par_HERO.y);
            ds_queue_enqueue(ma,image_angle);
            ds_queue_enqueue(ms,sprite_index);           
        }
    }
store=false;
}
if (casting==false) //IF NOT CASTING -----------------------------------
{
    sprite_index = ds_queue_dequeue(ms);
   //POSITION QUEUE
    x = ds_queue_dequeue(mx)-(part);
    y = ds_queue_dequeue(my);
    angle = ds_queue_dequeue(ma)*1.5;
    
    
    ds_queue_enqueue(mx,par_HERO.x);
    ds_queue_enqueue(ma,par_HERO.angle);
    
    if (global.HERO_type==1) &amp;&amp; (par_HERO.ladder)
    ds_queue_enqueue(my,par_HERO.y-5.5*par_HERO.ladder_climb+1);
    else
    ds_queue_enqueue(my,par_HERO.y);
    
    if (par_HERO.grounded)
    {
    last_grounded_x=par_HERO.x;
    last_grounded_y=par_HERO.y;
    }
   
    
    if (par_HERO.hsp!=0) 
    {
        if (par_HERO.image_xscale== -1)
        {
        if (part&gt;-(max_part)) part -=2;
        //if (x&gt;par_HERO.x) image_xscale=1;
        }
        else
        {
        if (part&lt;max_part) part +=2;
        //if (x&lt;par_HERO.x) image_xscale=-1;
        }  
    }
    
    image_xscale=par_HERO.image_xscale;
    
//SET SPRITE

if (global.HERO_type==0) //YOUNG OLIVIA
{
    if (par_HERO.sprite_index==spr_Young_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Young_Olivia_Jump_A) 
    || (par_HERO.sprite_index==spr_Young_Olivia_Jump_B) || (par_HERO.sprite_index==spr_Young_Olivia_Diagnal_Shoot_Split) 
    || (par_HERO.sprite_index==spr_Young_Olivia_Shoot_Down_Split) ||  (par_HERO.sprite_index==spr_Young_Olivia_Wall_Bounce)
    {
        ds_queue_enqueue(ms,spr_Cat_Jump);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Ladder)
    {
        ds_queue_enqueue(ms,spr_Cat_Ladder);
        image_index=abs(par_HERO.image_index/3);
        image_speed=0;
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Run)
    {
        ds_queue_enqueue(ms,spr_Cat_Walk);
    }
    else if (par_HERO.sprite_index==spr_Young_Olivia_Die_Air)
    {
        ds_queue_enqueue(ms,spr_Cat_Jump);
    }
    else
    {
        ds_queue_enqueue(ms,spr_Cat_Idle);
    }
}

if (global.HERO_type==1) //OLD OLIVIA
{
    if (par_HERO.sprite_index==spr_Old_Olivia_Jump_Kick) || (par_HERO.sprite_index==spr_Old_Olivia_Jump_A) 
    || (par_HERO.sprite_index==spr_Old_Olivia_Jump_B) || (par_HERO.sprite_index==spr_Old_Olivia_Diagnal_Shoot_Split) 
    || (par_HERO.sprite_index==spr_Old_Olivia_Shoot_Down_Split) ||  (par_HERO.sprite_index==spr_Old_Olivia_Wall_Bounce)
    {
        ds_queue_enqueue(ms,spr_Cat_Jump);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Ladder) || (par_HERO.sprite_index==spr_Old_Olivia_Ladder_Climb)
    {
        ds_queue_enqueue(ms,spr_Cat_Ladder);
        image_index=abs(par_HERO.image_index/3);
        image_speed=0;
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Run)
    {
        ds_queue_enqueue(ms,spr_Cat_Walk);
    }
    else if (par_HERO.sprite_index==spr_Old_Olivia_Die_Air)
    {
        ds_queue_enqueue(ms,spr_Cat_Jump);
    }
    else
    {
        ds_queue_enqueue(ms,spr_Cat_Idle);
    }
}

//SPRITE OVERIDES ----

if(sprite_index == spr_Cat_Walk) 
    image_speed=2*global.game_speed;
    else
    image_speed=.5*global.game_speed;

if(sprite_index == spr_Cat_Idle) 
    image_speed=.75*global.game_speed;

if(sprite_index == spr_Cat_Meow)
    {
    if (image_index&gt;=34) image_speed=0;
    }


}//END NOT CASTING ------
else
{//CASTING START --------

    sprite_index = ds_queue_dequeue(ms);
    x = ds_queue_dequeue(mx)-(part*par_HERO.image_xscale);;
    y = ds_queue_dequeue(my);   
    ds_queue_enqueue(mx,cast_x+par_HERO.x);
    ds_queue_enqueue(my,cast_y+par_HERO.y);
    
    if (cycles==12)
            {
            image_index=0;
            cycles-=1;
            }

if (!catchup)
{
   if (!in_air) //JUMP TO VANTAGE POINT START -------
    {
    image_speed=.5*global.game_speed;
    cast_y+=vsp;
    if (vsp&lt;1) vsp+=.6;
    sprite_index=spr_Cat_Jump;
    ds_queue_enqueue(ms,spr_Cat_Jump);
    
        if (image_index&gt;=15)
            { 
            in_air=true;
            rot_up=true;
            part_up=true;
            float_up=true;
            image_angle=340;
            cast_y-=10;
            
            } 
        
    }
    else //IN AIR ATTACK START ------------
    {
        sprite_index=spr_Cat_Angry;
        ds_queue_enqueue(ms,sprite_index)
        image_speed=.5*global.game_speed;
        
        
            
       
            var i=instance_nearest(x,y,par_Enemy_Body)
            if (i==noone) 
                {
                    image_xscale=par_HERO.image_xscale;
                }
                else
                {
                    if (i.x&gt;x) image_xscale=1; else image_xscale=-1;
                }
                
        
        if (alarm[3] = -1) alarm[3] = 4/global.game_speed; 
        if (alarm[4] = -1) alarm[4] = irandom_range(10,14)/global.game_speed; //12;
        
        if (image_index&gt;=sprite_get_number(sprite_index)-1) cycles-=1;
        if (cycles&lt;=0) 
                {
                catchup=true;
                if (par_HERO.x&gt;x) 
                cast_xscale=1; else cast_xscale=-1;
                }
           
                if(float_up)  {cast_y +=2; float_factor+=1;}
                if(!float_up) {cast_y -=2; float_factor-=1;}
                         
                if(float_factor&lt;=0) float_up=true;
                if(float_factor&gt;=40) float_up=false;
                
                if (part_up) part+=1; else part-=1;
                if (part&gt;=100) part_up=false;
                if (part&lt;=55)  part_up=true;
            
                if (rot_up) 
                {
                    image_angle+=.5;
                    if (image_angle&gt;370) rot_up=false;
                } 
                else 
                {
                    image_angle-=.5;
                    if (image_angle&lt;350) rot_up=true;
                }     
                
    }//END AIR ATTACK
}//END NOT CATCHUP
else //CATCHUP START --------------------
{
    ds_queue_enqueue(ms,spr_Cat_Walk);   
    image_xscale=cast_xscale;
       
if (cast_x&gt;-12)&amp;&amp;(cast_x&lt;12)
    {
        if (cast_y&gt;-12)&amp;&amp;(cast_y&lt;+12)
        {
        casting=false;  
        image_angle=0;  
        alarm[0]=irandom_range(100,300)/global.game_speed;
        }
    }
    else
    {
            if (cast_x&lt;0)
            {
                cast_x+=10;
                image_xscale=1;
            }

            if (cast_x&gt;0)
            {
                cast_x-=10;
                image_xscale=-1;
            } 
    }
    
    if (0&gt;cast_y)
    {
        if (0&gt;cast_y+5)cast_y+=8;
    }
    else
    {
        if (0&lt;cast_y-5) cast_y-=8;
    }

}//END CATCHUP
        
}//END CASTING ----------

} //END NOT QUITING --------------------
else
{ //QUITING START ----------------------


    if (!float)
        {
        sprite_index=spr_Cat_Meow;
        ds_queue_enqueue(ms,spr_Cat_Idle);
        }
        else
        {
        sprite_index=spr_Cat_Idle;
        ds_queue_enqueue(ms,spr_Cat_Idle)
        }
  
    
                if(float) 
                {
                    if(float_up) float_factor=float_factor+.1;
                    if(!float_up) float_factor=float_factor-.1;
        
                    if(float_factor==2) float_up=false;
                    if(float_factor==-2) float_up=true;
                    leaving_y = leaving_y + float_factor;
                }
                
    if (sprite_index==spr_Cat_Meow)
        { 
        if (image_index&gt;=sprite_get_number(spr_Cat_Meow)-1)
            image_speed=-.5*global.game_speed;
        
        if (image_index&lt;=10) &amp;&amp; (sign(image_speed)==-1)
            image_speed=.5*global.game_speed;
        }        
                
}//END QUITING
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0]=200/global.game_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index)
{
if(par_HERO.Melee==true) &amp;&amp; (global.HERO_type==0)
{
   if (par_HERO.sprite_index==spr_Old_Olivia_Jump_Kick) ||  (par_HERO.sprite_index==spr_Young_Olivia_Jump_Kick) 
    draw_sprite_ext(sprite_index, image_index, x, y+100, image_xscale,image_yscale, angle, image_blend, 1.0);
}
else
{
if(quiting==false) 
{

if (sprite_index!=spr_Cat_Ladder)   
        {
        draw_sprite_ext(sprite_index, image_index, x, y+55, image_xscale,image_yscale, angle, image_blend, 1.0);
        }
        else
        {
        part=0;
        draw_sprite_ext(sprite_index, image_index, par_HERO.x, y+100, image_xscale,image_yscale, angle, image_blend, 1.0);
        }
}
else
{
    if(talking==false)
    {
    x=leaving_x;
    y=leaving_y;
    
    move+=0.04;
    image_blend=c_white;
    
    if !instance_exists(obj_Owl_Snatch) 
    {
    image_alpha=image_alpha-.01;;
    var Stripes = shader_get_uniform(shdr_Hologram,"Stripes");
    var Filter = shader_get_uniform(shdr_Hologram,"Filter");
    var Phase = shader_get_uniform(shdr_Hologram,"Phase");
    
    draw_self();
    shader_set(shdr_Hologram);
    shader_set_uniform_f(Stripes,75.0);
    shader_set_uniform_f(Filter,0.98,0.98,0.98,1.0);//rgba diffuse color
    shader_set_uniform_f(Phase,move);
    
    }
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,angle,image_blend,image_alpha);
    if !instance_exists(obj_Owl_Snatch) shader_reset();
    }
    
    
    if(talking==true)
    {
     draw_sprite_ext(sprite_index, image_index, leaving_x, leaving_y, image_xscale,image_yscale, angle, image_blend, 1.0);
    }
}
}

if (sprite_index==spr_Cat_Angry)
{
draw_set_blend_mode(bm_add);
draw_sprite_ext(ForceField_B, image_index+25,  x+20*image_xscale , y+55, .9, .9, angle, image_blend, .1);
draw_set_blend_mode(bm_normal);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>82,82</point>
  </PhysicsShapePoints>
</object>
