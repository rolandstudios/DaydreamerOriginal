<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_pitch(snd_Kids_Chear_A,1);
if audio_is_playing(snd_HitMetal)
audio_stop_sound(snd_HitMetal);
if(master.Menu_Arrow==0)
{
master.num+=1;
master.Menu_Arrow=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Menu_Arrow.png",301,0,0,0,37);
}

sprite_index=global.sprite[master.Menu_Arrow];
rest=true;
shift_back=0;
shift_front=5;
image_speed=.5;
origin_x=x;
origin_y=y; 
spacing=30; //was 20
flash=1;
flash_count=.05;
target_rm=rm_LoadGame;
y=y+1*spacing;
des_y=y;
menu_x=x+64;
menu_y=y;//-(2*spacing);






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if audio_is_playing(snd_droid_activate)
audio_stop_sound(snd_droid_activate);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(0, 0, 0);
if (target_rm!=rm_TitleScreen)
{
    room_goto(target_rm);
}
else
{
    instance_create(origin_x,origin_y,obj_Continue_Game);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
Key_Up = gamepad_button_check_pressed(0, gp_padu);
Key_Down = gamepad_button_check_pressed(0, gp_padd);
Key_Jump = gamepad_button_check_pressed(0, gp_face1);

if (rest)
{
if (gamepad_axis_value(0, gp_axislv)&lt;-.5) {Key_Up = 1; alarm[0]=10; rest=false;} 
if (gamepad_axis_value(0, gp_axislv)&gt;.5) {Key_Down = 1; alarm[0]=10; rest=false;}
if (gamepad_axis_value(0, gp_axislh)&lt;-.5) {Key_Left = 1; alarm[0]=10; rest=false;}
if (gamepad_axis_value(0, gp_axislh)&gt;.5) {Key_Right = 1; alarm[0]=10; rest=false;}
}

if gamepad_button_check_pressed(0,gp_start) Key_Jump = true;


//OVERIDE
if (global.platform==1) //XBOXONE
{
    if (master.paused)
    {
    Key_Down = false;
    Key_Up = false;
    Key_Jump = false;
    }
}



if (Key_Up == 1) || keyboard_check_pressed(vk_up) 
{
shift_back=0;
if (des_y&gt;(origin_y+spacing)) 
{
des_y=des_y-spacing;
audio_play_sound(snd_selectA, 10, false);
}
else
{
audio_play_sound(snd_selectA, 10, false);
des_y=origin_y+4*spacing;
y=des_y;
}
}

if (Key_Down ==1) || keyboard_check_pressed(vk_down) 
{
shift_back=0;
if(des_y&lt;(4*spacing+origin_y))
{
des_y=des_y+spacing;
audio_play_sound(snd_selectA, 10, false);
}
else
{
des_y=origin_y+spacing;
y=des_y;
audio_play_sound(snd_selectA, 10, false);
}
}

if(des_y==origin_y+spacing) //New Game
{
if (Key_Jump ==1) || keyboard_check_pressed(vk_space)  || keyboard_check_pressed(vk_enter)  
{
audio_play_sound(snd_gamestart, 10, false);
audio_play_sound(snd_Kids_Chear_A, 10, false);

global.newgame=true;
target_rm=rm_LoadGame;
if (alarm[1]==-1) alarm[1]=20;
if (global.rumble)  gamepad_set_vibration(0, 1, 1);
}
}


if(des_y==2*spacing+origin_y)
{
if (Key_Jump ==1) || keyboard_check_pressed(vk_space)  || keyboard_check_pressed(vk_enter)  //Load Game
{
audio_play_sound(snd_gamestart, 10, false);
audio_play_sound(snd_Continue_Voice, 10, false);
global.newgame=false;
target_rm=rm_TitleScreen;
if (alarm[1]==-1) alarm[1]=20;
if (global.rumble)  gamepad_set_vibration(0, 1, 1);
}
}

if (des_y==3*spacing+origin_y)//Options
{
if (Key_Jump ==1) || keyboard_check_pressed(vk_space)  || keyboard_check_pressed(vk_enter)
{
audio_play_sound(snd_gamestart, 10, false);
target_rm=rm_Options;
if (alarm[1]==-1) alarm[1]=20;
if (global.rumble)  gamepad_set_vibration(0, 1, 1);
}
}

if (des_y==4*spacing+origin_y)
{
if (Key_Jump ==1) ||keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter)  //End Game
    {
    room_goto(rm_Credits); //CREDITS
    //game_end(); //QUIT
    }
}

if (y&lt;des_y) y=y+5;
if (y&gt;des_y) y=y-5;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
{
offset=1.5;
}
else
{
offset=1;
}

draw_set_color(c_black);
draw_set_font(fnt_LowGun);
font_size=1; //was.7
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_alpha(.75);

if (shift_back&lt;4) shift_back+=.25;
shift_front=5;

//DRAW SHADOW --------------------------------------------------------------
if(des_y==1*spacing+origin_y) draw_text_transformed((menu_x+shift_back+shift_front)*offset,(-4+menu_y+2*spacing+shift_back*.5)*offset,"New Game",font_size*offset,font_size*offset,0);
if(des_y==2*spacing+origin_y) draw_text_transformed((menu_x+shift_back+shift_front)*offset,(-4+menu_y+3*spacing+shift_back*.5)*offset,"Continue",font_size*offset,font_size*offset,0);
if(des_y==3*spacing+origin_y) draw_text_transformed((menu_x+shift_back+shift_front)*offset,(-4+menu_y+4*spacing+shift_back*.5)*offset,"Options",font_size*offset,font_size*offset,0);
if(des_y==4*spacing+origin_y) draw_text_transformed((menu_x+shift_back+shift_front)*offset,(-4+menu_y+5*spacing+shift_back*.5)*offset,"Credits",font_size*offset,font_size*offset,0);

draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fnt_Astron);

draw_set_alpha(1);
image_blend=c_white;
draw_set_color(c_white);


draw_set_alpha(.1);
draw_rectangle((menu_x-52)*offset,(menu_y+24+5)*offset, (menu_x+165)*offset,(menu_y+(6*spacing)+5)*offset,false);
draw_set_alpha(.5);
draw_rectangle((menu_x-52)*offset,(menu_y+24+5)*offset, (menu_x+165)*offset,(menu_y+(6*spacing)+5)*offset,true);
draw_set_alpha(1);

draw_sprite_ext(spr_Menu_Trim_Top_small,0,(menu_x+56)*offset,(menu_y+24+5)*offset,.667*offset,.667*offset,0,c_white,1); //TOP FRAME
draw_sprite_ext(spr_Menu_Trim_Bottom_small,0,(menu_x+56)*offset,(menu_y+(6*spacing)+5)*offset,.667*offset,.667*offset,0,c_white,1); //BOTTOM FRAME

draw_set_font(fnt_LowGun);
draw_set_halign(fa_left);
draw_set_valign(fa_center);

//FLASH INC ------
if (flash&gt;=1) flash_count*=-1;
if (flash&lt;=0) flash_count*=-1;
if (alarm[1]==-1)
flash+=flash_count;
else
flash+=8*flash_count;

//DRAW TEXT --------------------------------------------------------------
if(des_y==1*spacing+origin_y)
    { 
        draw_text_transformed_colour((menu_x+shift_front)*offset,(-4+menu_y+2*spacing)*offset,"New Game",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash); 
    }
    else 
    { 
        draw_text_transformed((menu_x)*offset,(-4+menu_y+2*spacing)*offset,"New Game",font_size*offset,font_size*offset,0);
    }
if(des_y==2*spacing+origin_y) 
    {
        draw_text_transformed_colour((menu_x+shift_front)*offset,(-4+menu_y+3*spacing)*offset,"Continue",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash); 
    }
    else 
    { 
    draw_text_transformed((menu_x)*offset,(-4+menu_y+3*spacing)*offset,"Continue",font_size*offset,font_size*offset,0);
    }
    
if(des_y==3*spacing+origin_y) 
    {
        draw_text_transformed_colour((menu_x+shift_front)*offset,(-4+menu_y+4*spacing)*offset,"Options",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash);  
    }
    else  
    {
        draw_text_transformed((menu_x)*offset,(-4+menu_y+4*spacing)*offset,"Options",font_size*offset,font_size*offset,0);
    }
    
if(des_y==4*spacing+origin_y) 
    {
        draw_text_transformed_colour((menu_x+shift_front)*offset,(-4+menu_y+5*spacing)*offset,"Credits",font_size*offset,font_size*offset,0,image_blend,image_blend,image_blend,image_blend,flash);    
    }
    else  
    {
        draw_text_transformed((menu_x)*offset,(-4+menu_y+5*spacing)*offset,"Credits",font_size*offset,font_size*offset,0);
    }

if window_get_fullscreen()
{
image_xscale=.75;
image_yscale=.75;
}
else
{
image_xscale=.5625;
image_yscale=.5625;
}
 
//DRAW ARROW

image_alpha=1;
draw_sprite_ext(global.sprite[master.Menu_Arrow],image_index,x*offset,(y+(2*spacing))*offset,.6*offset,.6*offset,0,c_white,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_pitch(snd_Kids_Chear_A,1);
if audio_is_playing(snd_HitMetal)
audio_stop_sound(snd_HitMetal);
if(master.Menu_Arrow==0)
{
master.num+=1;
master.Menu_Arrow=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Imports\spr_Menu_Arrow.png",301,0,0,0,37);
}

sprite_index=global.sprite[master.Menu_Arrow];
rest=true;
shift_back=0;
shift_front=5;
image_speed=.5;
origin_x=x;
origin_y=y; 
spacing=30; //was 20
flash=1;
flash_count=.05;
target_rm=rm_LoadGame;
y=y+1*spacing;
des_y=y;
menu_x=x+64;
menu_y=y;//-(2*spacing);






</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
