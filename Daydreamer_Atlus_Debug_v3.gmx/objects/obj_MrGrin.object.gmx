<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------

offset=10;
if(master.spr_MrGrin_Explode==0)
{
master.num+=1;
master.spr_MrGrin_Explode=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Explode.png",26,0,1,217,342);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Explode], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Walk==0)
{
master.num+=1;
master.spr_MrGrin_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Walk.png",25,0,1,133,355);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Walk], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Idle==0)
{
master.num+=1;
master.spr_MrGrin_Idle=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Idle.png",15,0,1,129,341);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Idle], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Jump==0)
{
master.num+=1;
master.spr_MrGrin_Jump=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Jump.png",33,0,1,139,378);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Jump], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Clone==0)
{
master.num+=1;
master.spr_MrGrin_Clone=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Clone.png",31,0,1,469,343);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Clone], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Turn==0)
{
master.num+=1;
master.spr_MrGrin_Turn=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Turn.png",10,0,1,123,343);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Turn], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Shoot_UP==0)
{
master.num+=1;
master.spr_MrGrin_Shoot_UP=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Shoot_UP.png",7,0,1,137,342);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Shoot_UP], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Shoot_Down==0)
{
master.num+=1;
master.spr_MrGrin_Shoot_Down=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Shoot_Down.png",7,0,1,131,343);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Shoot_Down], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Shoot_Forward_Down==0)
{
master.num+=1;
master.spr_MrGrin_Shoot_Forward_Down=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Shoot_Forward_Down.png",7,0,1,147,336);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Shoot_Forward_Down], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Shoot_Forward_UP==0)
{
master.num+=1;
master.spr_MrGrin_Shoot_Forward_UP=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Shoot_Forward_UP.png",7,0,1,178,338);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Shoot_Forward_UP], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Shoot_Forward_Single==0)
{
master.num+=1;
master.spr_MrGrin_Shoot_Forward_Single=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Shoot_Forward_Single.png",7,0,1,197,342);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Shoot_Forward_Single], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.spr_MrGrin_Shoot_Forward==0)
{
master.num+=1;
master.spr_MrGrin_Shoot_Forward=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\spr_MrGrin_Shoot_Forward.png",7,0,1,216,344);
sprite_collision_mask(global.sprite[master.spr_MrGrin_Shoot_Forward], 1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

color=image_blend;
view = instance_create(x,y,obj_MrGrin_view)
setspeed = random_range(2,7);          

//-----------------------------------

image_speed=.5;
damage=10*global.difficulty;
hp=720;
init_hp=hp;
moveChoose=true;
moveChoice=1;
can_stat=true;


//clone_max=8;
clone_max=5;
y_offset=0;
x_offset=0;
contact=false;

turning=0;
stuck=0;
angle=0;
grounded=false;
not_grounded=0;
hsp=0;
vsp=0;
grav=.6;
cycles=0;
//grav=1;
scale=1;
image_xscale=scale;
image_yscale=scale;
jumpspeed=8;
west_east = 0;
center =y-90*image_yscale;
shoot_single=irandom_range(1,2);
sprite_index=spr_collide;

if (instance_number(obj_MrGrin)&lt;=1) solo=true; else solo=false;
 
if (solo)
{
    while !place_meeting(x,y,par_wall) y+=1;
}


hero_hp=0;
hero_damage=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0) 
{
global.world_clear[9]=1;

  if (instance_number(obj_MrGrin)&lt;=1)
   {
   
   //STEAM
   if (global.platform==0)
   {
   if !steam_get_achievement("ach_Defeat_MrGrin") 
        steam_set_achievement("ach_Defeat_MrGrin");
   }   
   //XBOX ONE
   if (global.platform==1)
   {                     
        scr_XboxOne_Achievement(11);                     
   }
   //PS4
    if (global.platform==3)
    {       
        scr_PS4_Trophies(11);                                   
    }  
    
    with instance_create(x,y,obj_CheckPoint){World=9.5;Boss=true;}
    //const=500/(4*60); //MIN CONSTANT
    damage_bonus=round((125-hero_damage)*4);
        if (damage_bonus&gt;500) damage_bonus=500;
        if (damage_bonus&lt;0) damage_bonus=0;
    
        
    time_bonus = (300-((global.Hours*3600+global.Minutes*60+global.Seconds)-time))*2.08;    
        if (time_bonus&gt;500) time_bonus=500;
        if (time_bonus&lt;0) time_bonus=0;
        
    with instance_create(x,y,obj_StageClear_header)
        {
        point_bonus=500;
        time_bonus=other.time_bonus;
        damage_bonus=other.damage_bonus;
        boss_num=9;     
        }

    
    //if instance_exists(obj_Vertical_Shaft)
    //obj_Vertical_Shaft.locked=false;
    }
}




   

   
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_stat=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_yscale+=.0015;
image_xscale=image_yscale*sign(image_xscale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (y&gt;room_height)instance_destroy();
if !instance_exists(view) instance_destroy();
if !instance_exists(par_HERO) {instance_destroy();}
else
{
sprite_index=spr_collide;

 
//Check Direction --------------------------------------------------
if (par_HERO.x &gt; x)
{
    if(moveChoice==1) || (moveChoice==2) || (moveChoice==5) || (moveChoose==true)
    {
    
    if (moveChoice==1) hsp=0;
    if (moveChoice==2) hsp=setspeed*image_yscale;
    
    if (view.sprite_index!=global.sprite[master.spr_MrGrin_Shoot_Down])
    {
      if(west_east == 0)
        {
       
         alarm[0]=2000;
         moveChoose=false;
         moveChoice=7;
         turning+=1;
         view.sprite_index = global.sprite[master.spr_MrGrin_Turn];
         view.image_speed=.5*global.game_speed;
         view.image_index=0;
         hsp=0;
         }
         else
         {
         west_east = 1;
         image_xscale = -image_yscale;
         }
    }
    }
    
}

if (par_HERO.x &lt; x) 
{
    if(moveChoice==1) || (moveChoice==2) || (moveChoice==5) || (moveChoose==true)
    {
    
    if (moveChoice==1) hsp=0;
    if (moveChoice==2) hsp=-setspeed*image_yscale;
    
    if (view.sprite_index!=global.sprite[master.spr_MrGrin_Shoot_Down])
    {
    if(west_east == 1)
        {
         
         alarm[0]=2000;
         moveChoose=false;
         moveChoice=7;
         turning+=1;
         view.sprite_index = global.sprite[master.spr_MrGrin_Turn];
         view.image_speed=.5*global.game_speed;
         view.image_index=0;
         hsp=0;
         }
         else
         {
            west_east = 0;
            image_xscale = image_yscale;
         }
    }
    }
   
}
// END CHECK DIRECTION ----------------------------------------------------- 

 
 if(moveChoose==true)
    {   
                
        
      var n;
      n=irandom_range(1, 5);
      while(n==moveChoice)
        {
            n=irandom_range(1, 5);
        }
        moveChoice=n;
        
        if (moveChoice==3)
            {
                if (instance_number(obj_MrGrin)&gt;=clone_max) moveChoice=1;
               // if (image_yscale&lt;.85) moveChoice=2;
               if (image_yscale&lt;.7) moveChoice=2;
                if  place_meeting(x-257*image_xscale,y,par_wall) moveChoice=2;
            }
         
            
         //Initiallize the Move
        switch(moveChoice)
            {
            case 1: //Idle
            view.sprite_index = global.sprite[master.spr_MrGrin_Idle];
            view.image_speed=.5*global.game_speed;
            view.image_index=0;
            alarm[0]=40;
            not_grounded=0;
            break;
               
            
            case 2: //WALK
            view.sprite_index = global.sprite[master.spr_MrGrin_Walk];
            view.image_speed=.5*global.game_speed;
            view.image_index=0;
            alarm[0]=irandom_range(50,100);
            not_grounded=0;
            stuck=0;
            break;
            
            
            case 3: //CLONE
            view.sprite_index =  global.sprite[master.spr_MrGrin_Clone];
            view.image_speed=.5*global.game_speed;
            view.image_index=0;
            switch(irandom_range(1,2))
            {
            case 1:
            audio_sound_pitch(snd_Clone_A,global.game_speed);
            audio_play_sound(snd_Clone_A,11,false);
            break;
            
            case 2:
            audio_sound_pitch(snd_Clone_B,global.game_speed);
            audio_play_sound(snd_Clone_B,11,false);
            break;
            }
            
            break;
            
            
            case 4: //JUMP
            view.sprite_index = global.sprite[master.spr_MrGrin_Jump]; 
            view.image_index=0;
            view.image_speed = .5*global.game_speed;
            jhsp=5*-(sign(image_xscale));
            acel=1;
            break;
            
            case 5: //Shoot
            view.sprite_index = global.sprite[master.spr_MrGrin_Shoot_Forward]; 
            view.image_index=0;
            view.image_speed = .5*global.game_speed;
            cycles=irandom_range(4,8);
            shoot_single=irandom_range(1,2);
            break;
            
            }
            
        moveChoose=false;            
    }




    
switch(moveChoice)
{

case 1: //Stand

    view.sprite_index  = global.sprite[master.spr_MrGrin_Idle];
    view.image_speed=.5*global.game_speed;          

    damage=5*global.difficulty;
    hsp=0;
    vsp=0;
    if (image_yscale&lt;1)
        {
        //if (alarm[1]==-1) alarm[1]=2;
        if (alarm[1]==-1) alarm[1]=2;
        instance_create(x+irandom_range(-400,400),y-200*image_yscale+irandom_range(-400,400)*image_yscale,obj_MrGrin_Wisp);
        }    
    
    if (!grounded) 
        not_grounded+=1; else not_grounded=0;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=4;
        view.sprite_index = global.sprite[master.spr_MrGrin_Jump]; 
        view.image_index=0;
        view.image_speed = .5*global.game_speed;
        jhsp=5*-(sign(image_xscale));
        acel=1;
        }
    
break;



case 2: //Walk

    view.sprite_index = global.sprite[master.spr_MrGrin_Walk];
    //view.image_speed=.5; 
    view.image_speed=setspeed*.14*global.game_speed;         
    damage=10*global.difficulty;
    vsp=0;
    
    
    if (!grounded) 
        not_grounded+=1; else not_grounded=0;
        
    if (not_grounded&gt;=3) //IF FLOATING ON AIR THEN FALL
        {
        moveChoice=4;
        view.sprite_index = global.sprite[master.spr_MrGrin_Jump]; 
        view.image_index=0;
        view.image_speed = .5*global.game_speed;
        jhsp=5*-(sign(image_xscale));
        acel=1;
        }
        
break;

case 3: //Clone
//x - 469
//y - 343

    view.sprite_index = global.sprite[master.spr_MrGrin_Clone]; 
    view.image_speed=.5*global.game_speed;          
    damage=10*global.difficulty;
    vsp=0;
    hsp=0; 
    
    if (view.image_index&lt;10) 
        {
           if (image_yscale&gt;.5)
            { 
            image_yscale*=.99;
            image_xscale*=.99;
            scale*=.95;
            }
        }
    
    alarm[0]=100;
    
    if (view.image_index&gt;=(sprite_get_number(view.sprite_index)-1)) 
        {
        moveChoose=true;
            if !instance_exists(obj_Aura_Ripple_stat_short) &amp;&amp; (can_stat==true)
            {
                instance_create(x,y-90*image_yscale,obj_Aura_Ripple_stat_short);
                can_stat=false; alarm[2]=40;
            }
        with instance_create(x-257*image_xscale,y,obj_MrGrin)
            {
            time=other.time;
            moveChoice=irandom_range(1,2);
            moveChoose=false;
            alarm[0]=irandom_range(40,100);
            image_xscale=-other.image_xscale;
            image_yscale=other.image_yscale;
            if (other.west_east==0)
                {
                west_east=1; 
                }
                else 
                {
                west_east=0;
                }
            image_blend=other.image_blend;
            color=other.color;
            hp=50*global.difficulty;
            init_hp=hp;
            }
        
        }
break;


case 4: //JUMP
damage=10*global.difficulty;
view.sprite_index = global.sprite[master.spr_MrGrin_Jump]; 
view.image_speed=.5*global.game_speed;
alarm[0]=100;

if (view.image_index&lt;10)
    {
    vsp=0;
    hsp=0;
    contact=false;
    }
    
if (view.image_index==10)
    {
    //vsp=-20;
    //vsp=random_range(-20,-14);
    vsp=random_range(-25,-14);
    hsp=jhsp;
    }

if (view.image_index&gt;10)
    {
    if (vsp&gt;0)
        {
        if (vsp&lt;20)vsp*=1.1;
        }
    }    
    
if  (view.image_index&gt;=24)
    {
    if (!grounded) 
        {
        view.image_speed=0;
        }
        else
        {
        
        if (contact==false) 
                    {
                    if (image_yscale&gt;=.65)
                        {
                        contact=true;
   
                        with instance_create(x+20*image_xscale+50, y+10,obj_dust_trail) //RIGHT TRAIL
                        {image_xscale=-5;image_yscale=5;image_speed=2*global.game_speed;}
                        with instance_create(x+20*image_xscale-50, y+10,obj_dust_trail) //LEFT TRAIL
                        {image_xscale=5;image_yscale=5;image_speed=2*global.game_speed;}
                                         
                        with instance_create(x,y,obj_Screen_Shake){quake=false; hold=10*other.image_yscale; range=2; max_range=4;}
                        
                        if !instance_exists(obj_Aura_Ripple_stat_short) &amp;&amp; (can_stat==true)
                        {
                        instance_create(x,y,obj_Aura_Ripple_stat_short);
                        
                        can_stat=false; alarm[2]=40;
                        }
                        }
                    }// END CONTACT
        vsp=0;
        hsp=0;
        view.image_speed=.5*global.game_speed;
        }
    }
    
if (view.image_index&gt;=(sprite_get_number(view.sprite_index)-1))
    { 
        moveChoose=true;
    }
break;

case 5: //Shoot
damage=10*global.difficulty;
if (image_xscale&gt;0) angle=180;
if (image_xscale&lt;0) angle=360;

center = y-90*image_yscale;
x_offset = x-170*image_xscale;
y_offset = y-200*image_yscale;


if(shoot_single==1)
view.sprite_index=global.sprite[master.spr_MrGrin_Shoot_Forward_Single];
else
view.sprite_index=global.sprite[master.spr_MrGrin_Shoot_Forward];



if (center&gt;par_HERO.bbox_bottom+50)
{
    if (x&lt;par_HERO.bbox_right+50 &amp;&amp; x&gt;par_HERO.bbox_left-50)
    {
    view.sprite_index=global.sprite[master.spr_MrGrin_Shoot_UP];
    angle=90;
    x_offset = x;
    y_offset = center - 350*image_yscale;
    }
    else
    {
    view.sprite_index=global.sprite[master.spr_MrGrin_Shoot_Forward_UP];
    x_offset = x-140*image_xscale;
    y_offset = center - 160*image_yscale;
    if (image_xscale&gt;0) angle=145; else angle=35;
    }
}

if (center&lt;par_HERO.bbox_top-50)
{
    if (x&lt;par_HERO.bbox_right+50 &amp;&amp; x&gt;par_HERO.bbox_left-50)
    {
    view.sprite_index=global.sprite[master.spr_MrGrin_Shoot_Down];
    angle=270;
    x_offset = x;
    y_offset = y-50*image_yscale;
    }
    else
    {
    view.sprite_index=global.sprite[master.spr_MrGrin_Shoot_Forward_Down];
    x_offset = x-60*image_xscale;
    y_offset = center + 50*image_yscale;
    if (image_xscale&gt;0) angle=225; else angle=315;
    }
}



hsp=0;
vsp=0;

if (sign(view.image_speed)==1)
{
    if (view.image_index&gt;=6) 
    { 
    view.image_speed=-.5*global.game_speed;
    if(view.sprite_index!=global.sprite[master.spr_MrGrin_Shoot_Forward_Single])
    {
    audio_sound_pitch(snd_zapC,global.game_speed);
    audio_play_sound(snd_zapC,10,false);
     with instance_create(x_offset,y_offset,obj_MrGrin_Shot)
        {
        image_angle=other.angle;
        direction=other.angle;
        }
      with (instance_create(x_offset,y_offset,obj_FireFlare))
        {
        image_xscale = other.image_yscale*2;
        image_yscale = other.image_yscale*2;
        image_angle = other.angle;
        }
        }
        else 
            {
            audio_sound_pitch(snd_Laser_Cannon_A,global.game_speed);
            audio_play_sound(snd_Laser_Cannon_A,10,false);
            with instance_create(x_offset,y_offset,obj_MrGrin_Shot)
            {
            image_xscale = 2;
            image_yscale = 2;
            image_angle=other.angle;
            direction=other.angle;
            }
          with (instance_create(x_offset,y_offset,obj_FireFlare))
            {
            image_xscale = other.image_yscale*4;
            image_yscale = other.image_yscale*4;
            image_angle = other.angle;
            }
            }
           
    }
}
else
{
     if (view.image_index&lt;=3) 
     {
     view.image_speed=.5*global.game_speed;
     if(view.sprite_index!=global.sprite[master.spr_MrGrin_Shoot_Forward_Single])
     {
     audio_sound_pitch(snd_zapC,global.game_speed);
     audio_play_sound(snd_zapC,10,false);
     with instance_create(x_offset,y_offset,obj_MrGrin_Shot)
        {
        image_angle=other.angle;
        direction=other.angle;
        }
      with (instance_create(x_offset,y_offset,obj_FireFlare))
        {
        image_xscale = other.image_yscale*2;
        image_yscale = other.image_yscale*2;
        image_angle = other.angle;
        }    
      }
     shoot_single=irandom_range(1,2);
     cycles-=1;
     }
}

if (cycles&lt;=0) moveChoose=true;
break;

case 7: //Turn
alarm[0]=100;
view.sprite_index = global.sprite[master.spr_MrGrin_Turn]; 
view.image_speed=.5*global.game_speed;

if (turning&gt;2)
{
        moveChoice=4;
        view.sprite_index  = global.sprite[master.spr_MrGrin_Jump]; 
        view.image_index=0;
        view.image_speed = .5*global.game_speed;
        jhsp=10*-(sign(image_xscale));
        acel=1;
        turning=0;
}


if (view.image_index&gt;=9) 
    {
    moveChoose=true;
    
    if (west_east==0) 
        {
        west_east = 1; 
        image_xscale= -image_yscale;
        view.image_xscale = - image_yscale;
        view.image_yscale = image_yscale;
        view.sprite_index  = global.sprite[master.spr_MrGrin_Idle];
        alarm[3]=50;
        x=x+(image_yscale*20); //TURN OFFSET 
        }
        else 
        {
        west_east = 0;
        image_xscale= image_yscale;
        view.image_xscale = image_yscale;
        view.image_yscale = image_yscale;
        view.sprite_index = global.sprite[master.spr_MrGrin_Idle];
        alarm[3]=50;
        x=x-(image_yscale*20); //TURN OFFSET 
        } 
    }
break;
}

vsp = vsp + grav*global.game_speed;


//Collisions ------------------------------------------------------------



//Horizontal Collision ------------------------------


if place_meeting(x+hsp,y,par_wall) 
{
    
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp = 0; 
        
        if (moveChoice==2)
        {
        stuck+=1;
        if (stuck&gt;=5)
            {
            moveChoice=4;
            view.sprite_index  = global.sprite[master.spr_MrGrin_Jump]; 
            view.image_index=0;
            view.image_speed = .5*global.game_speed;
            jhsp=10*-(sign(image_xscale));
            acel=1;
            stuck=0;
            }
        }       
    }
    else
        {
        y=y-yplus;
        }
    
}

x = x + hsp*global.game_speed;

if place_meeting(x,y+4,par_V_moving_platform)
    {
         objID = instance_position(x,y+4,par_V_moving_platform);
         y+=objID.vsp;
    }

//Vertical Collision ------------------------------

if place_meeting(x,y+vsp,par_wall) 
{ 
//if !place_free(x,y+vsp) 
if (vsp&gt;=0) 
 {    
    if place_meeting(x,y+vsp,obj_platform_128x4) view.depth=-1; else view.depth=-2;
    while (!place_meeting(x,y+sign(vsp),par_wall)) y=y+sign(vsp);
     
    if (sign(vsp) == 1)
    {
        grounded = 1; //Enable First Jump   
    }
    
    vsp = 0;
 }    
}
else
{
   grounded = 0;
}

y = y + vsp*global.game_speed;
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if sprite_exists(sprite_index) draw_self();
}}
/*

if sprite_exists(sprite_index) draw_self();
draw_text(x+100,y-100,"angle: "+string(angle));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>129,341</point>
    <point>222,222</point>
  </PhysicsShapePoints>
</object>
