<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(master.SWAP_spr_Right_RoomC_LED==0)
{
master.num+=1;
master.SWAP_spr_Right_RoomC_LED=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Right_RoomC_LED.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}

if(master.SWAP_spr_Right_RoomC==0)
{
master.num+=1;
master.SWAP_spr_Right_RoomC=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Right_RoomC.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}
sprite_index=global.sprite[master.SWAP_spr_Right_RoomC];

if(master.SWAP_spr_Right_RoomC_collide==0)
{
master.num+=1;
master.SWAP_spr_Right_RoomC_collide=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Right_RoomC_collide.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
sprite_collision_mask(global.sprite[master.num],  1, 0, 0, 0, sprite_width, sprite_height,0,225);
}

if(master.SWAP_spr_Right_RoomC_top==0)
{
master.num+=1;
master.SWAP_spr_Right_RoomC_top=master.num;
global.sprite[master.num]= sprite_add(working_directory+"\Sprites\spr_Right_RoomC_top.png",1,0,0,0,0);
sprite_set_offset(global.sprite[master.num], sprite_get_width(global.sprite[master.num])*.5, round(sprite_get_height(global.sprite[master.num])*.5));
}

    with (instance_create(x,y,obj_Right_RoomC_collide))
    {
    sprite_index = global.sprite[master.SWAP_spr_Right_RoomC_collide];
    image_xscale = other.image_xscale*2;
    image_yscale = other.image_yscale*2;
    image_angle = other.image_angle;
    }
    
    with (instance_create(x,y,obj_Right_RoomC_top))
    {
    sprite_index = global.sprite[master.SWAP_spr_Right_RoomC_top];
    image_xscale = other.image_xscale;
    image_yscale = other.image_yscale;
    image_angle = other.image_angle;
    image_blend = other.image_blend;
    }
    
    flash_alpha=0;
    flash_speed=.1;  
    flash=true;
    flash_sect=1;
    
    set_x=95;
    set_y=203;
    flashes=0;
    flash_type=1;

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_exists(sprite_index) draw_self();

if (flash)
{
    draw_sprite_ext(global.sprite[master.SWAP_spr_Right_RoomC_LED],0,set_x,set_y,image_xscale,image_yscale,image_angle,c_black,.1);
    
    flash_alpha+=flash_speed*global.game_speed;
    
    if (flash_alpha&gt;=2) {flash_speed=-.25;}
    if (flash_alpha&lt;=0) {flash_speed=.25; flash_sect+=1; flashes+=1;}   
    if (flash_sect&gt;4) flash_sect=1;
        
    x_offset=sprite_get_xoffset(global.sprite[master.SWAP_spr_Right_RoomC_LED]);
    y_offset=sprite_get_yoffset(global.sprite[master.SWAP_spr_Right_RoomC_LED]);
 
    if (flashes&gt;40)
        {
        flashes=0;
        if (flash_type==1) flash_type=2; else flash_type=1;
        }   

if (flash_type==1)
{
switch(flash_sect)
    {
    case 1:
    var shift=0;
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Right_RoomC_LED],0,shift,0,50,sprite_height,
    x+(set_x-x_offset+shift)*image_xscale,
    y+(set_y-y_offset)*image_yscale,
    image_xscale,image_yscale,c_red,flash_alpha);
    break;
    
    case 2:
    var shift=396;
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Right_RoomC_LED],0,shift,0,50,sprite_height,
    x+(set_x-x_offset+shift)*image_xscale,
    y+(set_y-y_offset)*image_yscale,
    image_xscale,image_yscale,c_red,flash_alpha);
    break;
    
    case 3:
    var shift=624;
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Right_RoomC_LED],0,shift,0,30,sprite_height,
    x+(set_x-x_offset+shift)*image_xscale,
    y+(set_y-y_offset)*image_yscale,
    image_xscale,image_yscale,c_red,flash_alpha);
    break;       
    }
}
else
{

    var shift=0;
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Right_RoomC_LED],0,shift,0,50,sprite_height,
    x+(set_x-x_offset+shift)*image_xscale,
    y+(set_y-y_offset)*image_yscale,
    image_xscale,image_yscale,c_red,flash_alpha);
    
    shift=396;
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Right_RoomC_LED],0,shift,0,50,sprite_height,
    x+(set_x-x_offset+shift)*image_xscale,
    y+(set_y-y_offset)*image_yscale,
    image_xscale,image_yscale,c_red,flash_alpha);
    
    shift=624;
    draw_sprite_part_ext(global.sprite[master.SWAP_spr_Right_RoomC_LED],0,shift,0,30,sprite_height,
    x+(set_x-x_offset+shift)*image_xscale,
    y+(set_y-y_offset)*image_yscale,
    image_xscale,image_yscale,c_red,flash_alpha);
}

}//END FLASH

/*
    if keyboard_check(vk_up) set_y-=1;
    if keyboard_check(vk_down) set_y+=1;
    draw_text (x,y+20,"movelist_y: "+string(set_y));
    
    if keyboard_check(vk_left)  set_x-=1;
    if keyboard_check(vk_right) set_x+=1;
    draw_text (x,y,"movelist_x: "+string(set_x));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>618,618</point>
  </PhysicsShapePoints>
</object>
