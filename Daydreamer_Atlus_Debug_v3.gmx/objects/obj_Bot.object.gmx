<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_collide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Load Sprites ----------------------

if(master.Robot_Boost==0)
{
master.num+=1;
master.Robot_Boost=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\Robot_Boost.png",51,0,1,183,126);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Robot_Fire==0)
{
master.num+=1;
master.Robot_Fire=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\Robot_Fire.png",61,0,1,183,127);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Robot_Walk==0)
{
master.num+=1;
master.Robot_Walk=master.num;
global.sprite[master.num]=sprite_add(working_directory+"\Imports\Robot_Walk.png",31,0,1,129,128);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}

if(master.Robot_Stand==0)
{
master.num+=1;
master.Robot_Stand=master.num;
global.sprite[master.num]=sprite_add( working_directory+"\Imports\Robot_Stand.png",31,0,1,39,104);
sprite_collision_mask(global.sprite[master.num], 1, 0, 0, 0,sprite_width, sprite_height,0,225);
}



//-----------------------------------

obj_Bot.image_speed=.4;
damage=8*global.difficulty;

hp=75;
init_hp=hp;
active=true;
shadow_ON=true;
moveChoose=true;
moveChoice=1;
fire_range = false;
hsp=0;
vsp=0;
stuck=0;
noCollide=false;
acel=0;
grav=8;
kickback=0;
scale=image_yscale;
grounded=true;
col=image_blend;
reverse=false;

position=false;
view =  instance_create(x,y,obj_Bot_view);

/*
with instance_create(sprite_width/2, bbox_bottom+10,obj_Robot_dropShadow)
    {
    depth=other.depth+1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(view)
{
with (view) {instance_destroy();}
}
audio_stop_sound(snd_droid_walk); 

if (hp&lt;=0) global.Points+=irandom_range(50,100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kickback=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x,y,par_wall)//IF STUCK IN LAND
{
vsp-=4;
alarm[4]=100;
}
else
{
view.image_index=20;
vsp=8;
jumping=false;
falling=true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reverse=false; 
     
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!west_east) x_offset = -1*(30)-(7*shots);
if(west_east)  x_offset=     (30)+(7*shots);
y_offset=-90+(5*shots);

if !instance_exists(obj_PearStore_inside) &amp;&amp; (active)
{
instance_create(x+x_offset,y+y_offset-215*scale,obj_Robot_Homing);
audio_sound_pitch(snd_droid_gun,global.game_speed);
audio_play_sound(snd_droid_gun, 10, false);
}
shots=shots+1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveChoose=true;
audio_stop_sound(snd_droid_walk);

if place_meeting(x+hsp,y,par_wall) &amp;&amp; (moveChoice==3)
{
     
    if !place_meeting(x+hsp,y,obj_platform_128x4)
    {
    moveChoose=false;;
    moveChoice=3
    alarm[0]=100;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(par_HERO) {instance_destroy();}
else
{
if (obj_camera_offset.x-1280 &lt; bbox_right) &amp;&amp; (obj_camera_offset.x + 1280 &gt; bbox_left) 
{
    if (obj_camera_offset.y-720 &lt; bbox_bottom) &amp;&amp; (obj_camera_offset.y + 720 &gt; bbox_top) 
    {
        active=true; 
    }
    else
    {
        active=false;
        moveChoice=1;
        moveChoose=false;
        view.sprite_index = global.sprite[master.Robot_Stand]; 
        view.image_index=0;
        view.image_speed=.5*global.game_speed;
        alarm[0]=75/global.game_speed;
        shadow_ON=true;
        view.depth=-3;
    }
}
else 
{
    active=false;
    moveChoice=1;
    moveChoose=false;
    view.sprite_index = global.sprite[master.Robot_Stand]; 
    view.image_index=0;
    view.image_speed=.5*global.game_speed;
    alarm[0]=75/global.game_speed;
    shadow_ON=true;
    view.depth=-3;
}

if (active) //ACTIVE START ---------------------------------------------------------
{
sprite_index=spr_collide;

//check direction
if (par_HERO.x &gt; x)
{
    if(moveChoice!=4)
    {
    image_xscale = -1;
    hsp=2.5;
    west_east = 1;
    
     if (reverse)  
        {
        hsp=-2.5;
        west_east = 0;
        image_xscale = 1;
        }
    }
}

if (par_HERO.x &lt; x) 
{
    if(moveChoice!=4)
    {
    image_xscale = 1;
    hsp=-2.5;
    west_east = 0;
    
    if (reverse)  
        {
        hsp=2.5;
        west_east = 1;
        image_xscale = -1;
        }
    }
}


//CheckSwingRange
if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - 180) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + 180) 
 {
 swing_range = true;
 }
 else
 {
 swing_range = false;
 }
//CheckFireRange
if(par_HERO.x &lt; x) &amp;&amp; (par_HERO.x &gt; x - 700) || (par_HERO.x &gt; x) &amp;&amp; (par_HERO.x &lt; x + 700) 
 {
 fire_range = false;
 }
 else
 {
 fire_range = true;
 }


 
if(moveChoose==true)
    {   
        audio_play_sound(snd_droid_swift, 10, false);
        audio_sound_pitch(snd_droid_swift,global.game_speed);
        audio_stop_sound(snd_droid_walk); 
        if(moveChoice==1)
        {
         moveChoice=irandom_range(2, 5); 
         
        }
         else
         moveChoice=irandom_range(1, 5); 
        
        if(moveChoice!=1)
        { 
        view.sprite_index = global.sprite[master.Robot_Stand]; 
        }
        
        moveChoose=false;
        noCollide=false;
        
        
    }
 
    
switch(moveChoice)
{

    case 1:  //STANDING
    
    if (view.sprite_index != global.sprite[master.Robot_Stand])
        {
        view.sprite_index = global.sprite[master.Robot_Stand]; 
        view.image_index=0;
        view.image_speed=.5*global.game_speed;
        alarm[0]=75/global.game_speed;
        shadow_ON=true;
        view.depth=-3;
        }
    
    view.sprite_index = global.sprite[master.Robot_Stand]; 
    view.image_speed = .5*global.game_speed;
    if(view.image_index==29)
    {
      audio_sound_pitch(snd_droid_check,global.game_speed);
      audio_play_sound(snd_droid_check, 9, false);
    }
    damage=8*global.difficulty;
    hsp=0;
    vsp=grav;
    shadow_ON=true;
    
    
    break;
    
    case 2: //WALKING
    
    if (view.sprite_index != global.sprite[master.Robot_Walk])
        {
        view.sprite_index = global.sprite[master.Robot_Walk]; 
        view.image_index=0;
        alarm[0]=250/global.game_speed;
        shadow_ON=true;
        view.depth=-3;
        }
    if !audio_is_playing(snd_droid_walk)
    audio_play_sound(snd_droid_walk, 10, false);
    audio_sound_pitch(snd_droid_walk,global.game_speed);
    vsp=grav;
    
    view.sprite_index = global.sprite[master.Robot_Walk]; 
    
    view.image_speed = 0.4*global.game_speed;
    
    damage=8*global.difficulty;
    shadow_ON=true;
    
    if(swing_range) 
        {
        alarm[0]=-1; 
        moveChoose=true;
        audio_stop_sound(snd_droid_walk);
        }
    break;
    
   case 3:  //JUMPING
   
   if(view.sprite_index!=global.sprite[master.Robot_Boost])
        {
        view.sprite_index = global.sprite[master.Robot_Boost]; 
        view.image_index=0;
        view.image_speed = 0.5*global.game_speed;
        view.depth=-3;
        jumping=false;
        falling=false;
        damage=8*global.difficulty;
        vsp=0;
        alarm[4]=300/global.game_speed;
        float=false;
        float_up=true;
        float_factor=0;
        
        audio_sound_pitch(snd_droid_takeoff,global.game_speed);
        audio_play_sound(snd_droid_takeoff, 10, false);
        }
        
        view.sprite_index = global.sprite[master.Robot_Boost]; 
        
        
        if (!jumping)  hsp=0; 
          
        
           if(stuck&gt;=1)
                {
                stuck=0;
                noCollide=true;
                }     
                
       
         
         if(view.image_index&gt;5)  
         {  
            if (!jumping) &amp;&amp; (!falling)
            {
            vsp=-20; 
            jumping=true; 
            shadow_ON=false; 
            acel=0;  
            }
         }
        
             
        if(jumping)
        {
        view.depth=-21;
        hsp=hsp*acel;
        if (acel&lt;4) acel=acel+.1; 
        view.image_speed=.5*global.game_speed;
        
        if(!float) 
        {
        if(vsp&lt;0) vsp=vsp+1;
        if(vsp&gt;=0) 
                {
                vsp=0; 
                float=true;
                }
        }
        
        if(float)
        {
        if(float_up) float_factor=float_factor+.25;
        if(!float_up) float_factor=float_factor-.25;
        
        if(float_factor==4) float_up=false;
        if(float_factor==-4) float_up=true;
        vsp = float_factor; 
        }
         
            
   
        if(view.image_index&gt;=50) view.image_index=20;
        
        if (swing_range)
        {
            if(float) 
                {
                    if place_meeting(x,y,par_wall)//IF STUCK IN LAND
                    {
                    vsp-=4;
                    }
                    else
                    {
                    noCollide=false;
                    view.image_index=20;
                    vsp=grav;
                    jumping=false;
                    falling=true;
                    audio_sound_pitch(snd_droid_discharge,global.game_speed);
                    audio_play_sound(snd_droid_discharge, 8, false);
                    }
                    
                }
        }  
        }
        
       
        
        if(falling) 
            {
                view.depth=-3;
                vsp=vsp+.25; 
                hsp=0
                view.image_speed=-.5*global.game_speed;
                if (view.image_index==0) view.image_speed=0;   
                
                 if place_meeting(x,y+vsp,par_wall)
                {
                //if !place_meeting(x+hsp,y,obj_platform_128x4)
                //    {
                    moveChoose=true;
                    falling=false;
                    
                //    }
                }
            }

        
        
        
        
        
    break;
    
    
    case 4: //FIRING
    if (view.sprite_index != global.sprite[master.Robot_Fire])
        {
        view.sprite_index = global.sprite[master.Robot_Fire]; 
        view.image_index=60;
        view.image_speed=-.5*global.game_speed;
        shadow_ON=true;
        shots=0;
        view.depth=-3;
        alarm[1]=15/global.game_speed;
        }
    
    view.sprite_index = global.sprite[master.Robot_Fire]; 
    damage=15*global.difficulty;
    hsp=0;
    vsp=grav;
    shadow_ON=true;
                   
    if (alarm[1]==-1)
    {
     if(view.image_index&gt;25) alarm[1] = 3/global.game_speed;
    }
            
    if(view.image_index &lt;= 1) || instance_exists(obj_PearStore_inside)
    moveChoose=true;
    break; 
     
    case 5:  //EmP
    
    if (view.sprite_index != global.sprite[master.Robot_Fire])
        {
        instance_create(x-100*sign(hsp),y-55-200*scale,obj_EMP_header);
        view.sprite_index = global.sprite[master.Robot_Fire]; 
        view.image_index=50;
        view.image_speed=.5*global.game_speed;
        shadow_ON=true;
        view.depth=-3;
        
        audio_sound_pitch(snd_droid_activate,global.game_speed);
        audio_play_sound(snd_droid_activate, 9, false);
        
        if instance_exists(obj_EMP)
            with (obj_EMP) {instance_destroy();}
            
            instance_create(x,y-125*scale,obj_EMP);
        }
    
    view.sprite_index = global.sprite[master.Robot_Fire]; 
    damage=8*global.difficulty;
    hsp=0;
    vsp=grav;
    shadow_ON=true;
    
    if(view.image_index&gt;=60) moveChoose=true; 
    
    break;
} 

if (kickback!=0) //KICK BACK
{
    hsp=kickback;
    vsp=-1;
    kickback = kickback - sign(kickback);
}

//Collisions ------------------------------------------------------------


if (!noCollide)
{
//Horizontal Collision ------------------------------
if place_meeting(x+hsp,y,par_wall) 
{
    //if !place_free(x+hsp,y) 
    if !place_meeting(x+hsp,y,obj_platform_128x4)
    {
    yplus = 0;   
    while (place_meeting(x+hsp,y-yplus,par_wall) &amp;&amp; yplus &lt;= abs(1*hsp)) yplus+= 1;
    if place_meeting(x+hsp,y-yplus,par_wall)
    {
        while (!place_meeting(x+sign(hsp),y,par_wall)) x+=sign(hsp);
        hsp =0;
        if(moveChoice==2)
        {
         //view.sprite_index = global.Robot_Stand; 
         alarm[0]=-1;
         stuck=stuck+1;
         moveChoose=false;
         moveChoice=3;      
        }  
        
        if (moveChoice==3)
        {
        stuck=stuck+1;
        vsp=vsp-5;
        }

   
    }
    else
    {
        y=y-yplus;
    }
    }
}
}

if instance_exists(obj_PearStore_inside)
{
vsp=0;
hsp=0;
}

x = x + hsp*global.game_speed;

//Vertical Collision ------------------------------


if (!noCollide)
{
if place_meeting(x,y+vsp,par_wall) 
{ 
    //if !place_free(x,y+vsp) 
    //if !place_meeting(x+hsp,y,obj_platform_128x4)
    //{
    while (!place_meeting(x,y+vsp,par_wall)) y=y+sign(vsp);    
    vsp = 0;
    
    grav=5;
    //}
}
else
{
grav=12;
}

}


if(y-200+vsp&gt;0)
    y=y+vsp*global.game_speed;

//TRACK COLLIDE ----------------------------------
if place_meeting(x,y+1,par_Track)
{
    var track 
    track = instance_position(x,y,par_Track);
    if (track ==noone)
    track = instance_nearest(x,y,par_Track);
    
    if (bbox_bottom&lt;=track.bbox_top+1*abs(track.image_yscale)) 
    {
    x = x+(track.image_speed*1.57*track.image_xscale);
    }
}
//END TRACK --------------------------------------


if (!place_meeting(x,y,par_wall)) noCollide=false;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!swing_range)
{
if (alarm[0]&gt;-1) alarm[0]=-1;

moveChoose=false;;
moveChoice=3;
alarm[4]=300;
float=false;
float_up=true;
float_factor=0;
jumping=true;
falling=false;
view.image_speed = 0.5;
depth=-21;
vsp=-25;
noCollide=true;
stuck=0;
if !audio_is_playing(snd_droid_takeoff)
audio_play_sound(snd_droid_takeoff, 10, false);
}


if(y&gt;room_height+300*scale)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_debug)
{
if (obj_debug.show_collide)
{
if (vsp!=0)
    image_blend=c_red;
    else
    image_blend=c_white;
   
if sprite_exists(sprite_index) draw_self();
}}

/*
draw_text(x+50,y, "view id: "+string(view));
draw_text(x+50,y+15, "control id: "+string(id));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>40,99</point>
    <point>180,180</point>
  </PhysicsShapePoints>
</object>
