<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x_offset=0;
y_offset=0;
draw_y=50;
draw_x=120;
select_x=x+25;
start=true;
finish=false;
audio_play_sound(snd_Popup_Menu,10,false);
shift_back=0;
rest=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (select_x==x+25)
{
    if instance_exists(obj_SaveSelect)
    {
    obj_SaveSelect.alarm[1]=20;
    //instance_create(x,y,obj_Difficulty);
    if (global.rumble)  gamepad_set_vibration(0, 1, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rest=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.platform==1)
{
if xboxone_is_constrained()
    {
     instance_destroy();
    }
}

if (!start) &amp;&amp; (!finish)
{

Key_Up = gamepad_button_check_pressed(global.playing_index, gp_padu);
Key_Down = gamepad_button_check_pressed(global.playing_index, gp_padd);
Key_Left = gamepad_button_check_pressed(global.playing_index, gp_padl);
Key_Right = gamepad_button_check_pressed(global.playing_index, gp_padr);

Key_Jump = gamepad_button_check_pressed(global.playing_index, gp_face1);
Key_Fire = gamepad_button_check_pressed(global.playing_index, gp_face2);

if gamepad_button_check_pressed(global.playing_index,gp_start) Key_Jump=true;


if keyboard_check_pressed(vk_space) Key_Jump=true;
if keyboard_check_pressed(vk_enter) Key_Jump=true;

if keyboard_check_pressed(vk_up) Key_Up=true;
if keyboard_check_pressed(vk_down) Key_Down=true;
if keyboard_check_pressed(vk_right)Key_Right = true;
if keyboard_check_pressed(vk_left)Key_Left = true;

if (Key_Jump) Key_Fire=false;

if (rest)
{
if (gamepad_axis_value(global.playing_index, gp_axislv)&lt;-.5) {Key_Up = 1; alarm[0]=10; rest=false;} 
if (gamepad_axis_value(global.playing_index, gp_axislv)&gt;.5) {Key_Down = 1; alarm[0]=10; rest=false;}
if (gamepad_axis_value(global.playing_index, gp_axislh)&lt;-.5) {Key_Left = 1; alarm[0]=10; rest=false;}
if (gamepad_axis_value(global.playing_index, gp_axislh)&gt;.5) {Key_Right = 1; alarm[0]=10; rest=false;}
}

if (master.paused)
{
Key_Up = false;
Key_Down = false;
Key_Jump = false;
Key_Fire = false;
Key_Left = false;
Key_Right = false;
}//end master paused

if (Key_Left) || (Key_Right)
{
    audio_play_sound(snd_selectA,10,false);
    if (select_x==x+25)
        select_x=x+65;
        else
        select_x=x+25;
        
        shift_back=0;
}


if (Key_Jump)// || (Key_Fire)
{    
    if (select_x==x+25) //YES
    {
        audio_play_sound(snd_gamestart,10,false);
        finish=true;
        
    }
    else //NO
    {
        audio_play_sound(snd_capped_out,10,false);
        finish=true;
    }
}

if (Key_Fire)
    {
    audio_play_sound(snd_capped_out,10,false);
    select_x=x+65;
    finish=true;
    start=false;
    }




}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_alpha(0.35);
draw_set_color(c_black);
draw_roundrect(x,y, x+x_offset,y+y_offset,false);
draw_set_alpha(0.5);
draw_set_color(c_white);
draw_roundrect(x,y, x+x_offset,y+y_offset,true);
draw_set_alpha(0.8);

if (start)
{
if (x_offset&lt;draw_x) x_offset+=(draw_x/5);
if (y_offset&lt;draw_y) y_offset+=(draw_y/5);
if (y_offset&gt;=draw_y) start=false;
}

if (finish)
{
if (x_offset&gt;0) x_offset-=(draw_x/5);
if (y_offset&gt;0) y_offset-=(draw_y/5);
if (y_offset&lt;=0) instance_destroy();
}
   

if (!start) &amp;&amp; (!finish)
{
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    //draw_set_font(fnt_BytePolice);
    draw_set_font(fnt_Arial_Big);
    draw_set_color(c_black); draw_set_alpha(.7);
    draw_text((x+draw_x*.5)-2,y+17," Overwrite? ");
    draw_set_color(c_white); draw_set_alpha(.8);
    draw_text(x+draw_x*.5,y+15," Overwrite? ");
    draw_set_font(fnt_Arial);
    //draw_text(x+draw_x*.5,y+35,"Yes    No");
    
    if (shift_back&lt;2.5) shift_back+=.25;
    
    draw_set_color(c_black);
    draw_set_alpha(0.75);
    if (select_x==x+25) draw_text(x+draw_x*.5+shift_back-19,y+35+shift_back*.5,"Yes")
    if (select_x==x+65) draw_text(x+draw_x*.5+shift_back+20,y+35+shift_back*.5,"No");
    
    draw_set_color(c_white);
    draw_set_alpha(1);
    draw_text(x+draw_x*.5-19,y+35,"Yes")
    draw_text(x+draw_x*.5+20,y+35,"No");
    
    draw_sprite_ext(spr_arrow,0,select_x,y+35,1,1,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
