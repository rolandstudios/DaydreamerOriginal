<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dropShadow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=obj_TrollQueen.x+64*obj_TrollQueen.image_xscale;
y=obj_TrollQueen.y;
last_y=y;
image_alpha=1;

//INITIALIZE BLUR ----
timeCounter = 0;
oscillatorValue = 0;
rad=1;
//-------------------

image_yscale=4;
image_xscale=3;

image_alpha=0;

inc=0;
inc_up=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(obj_TrollQueen.shadow_ON==false)
    {
    if (image_alpha&gt;0)  {image_alpha=image_alpha-.1;}
    }
    
if(obj_TrollQueen.shadow_ON==true)
    {
    if(image_alpha&lt;.5) {image_alpha=image_alpha+.1;}
    }
    
x=obj_TrollQueen.x+45*obj_TrollQueen.image_xscale;
y=obj_TrollQueen.y;

image_xscale=(5+inc)*image_alpha; 
image_yscale=(8+inc)*image_alpha; 

if (inc_up)
inc+=random_range(0,.05);
else
inc-=random_range(0,.05);

if (inc&gt;=1) inc_up=false;
if (inc&lt;=0) inc_up=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if place_meeting(x,y,obj_trollfactory_FG_collide)
draw_self();
*/


    if (image_alpha&lt;1) image_alpha+=.05;
    x=obj_TrollQueen.x+64*obj_TrollQueen.image_xscale;
    y=obj_TrollQueen.y;    
    image_blend=c_white;
    draw_set_colour(c_white); 
    opac=.4;    
    rad=.4; //BLUR AMOUNT
    //INC BLUR OSCILATION
    
    timeCounter += 0.02;
    oscillatorValue = -abs(sin(timeCounter));
     
    var u_vRatio = shader_get_uniform(shader_blur, "u_vRatio");
    var u_threshold = shader_get_uniform(shader_blur, "u_threshold");
    var radius = rad * 0.001;

if place_meeting(x,y,obj_trollfactory_FG)
{   
    
    if (obj_TrollQueen.grounded) 
    {       
        image_yscale=4;
        image_xscale=3;
    
        shader_set(shader_blur);
        shader_set_uniform_f(8,1);
        shader_set_uniform_f(u_threshold, 2*radius+(radius*oscillatorValue));
        //if !place_free(x,y+1)
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale,0, image_blend, opac);
        shader_reset();
        last_y=y;
    }
    else //IF NOT GROUNDED
    {
        if (obj_TrollQueen.vsp&lt;0)//IF MOVING UP
        {
       
        if (image_xscale&gt;0) 
            {     
            image_xscale-=.5;
            image_yscale-=.5;
                        
            shader_set(shader_blur);
            shader_set_uniform_f(8,1);
            shader_set_uniform_f(u_threshold, 2*radius+(radius*oscillatorValue));
            //draw_set_blend_mode_ext(bm_dest_color, bm_zero);//MULTIPLY
            draw_sprite_ext(sprite_index, image_index, x, last_y, image_xscale, image_yscale,0, image_blend, opac);
            //draw_sprite_ext(sprite_index,image_index, x,last_y,image_xscale, image_yscale,0, image_blend,.4);
            shader_reset();
            }    
        }
        
        if (obj_TrollQueen.vsp&gt;0) &amp;&amp; (last_y-y&lt;400)//IF MOVING UP
        {

        if (image_xscale&lt;3) 
            {     
            image_xscale+=.25;
            image_yscale+=.25;
                        
            shader_set(shader_blur);
            shader_set_uniform_f(8,1);
            shader_set_uniform_f(u_threshold, 2*radius+(radius*oscillatorValue));
            //draw_set_blend_mode_ext(bm_dest_color, bm_zero);//MULTIPLY
            draw_sprite_ext(sprite_index, image_index, x, last_y, image_xscale, image_yscale,0, image_blend, opac);
            //draw_sprite_ext(sprite_index,image_index, x,last_y,image_xscale, image_yscale,0, image_blend,.4);
            shader_reset();
            }    
        }    
    }//END NOT GROUNDED
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-7,-29</point>
    <point>60,60</point>
  </PhysicsShapePoints>
</object>
